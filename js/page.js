// Generated by dart2js (full emitter, strong), the Dart to JavaScript compiler version: 2.0.0.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// defaultPackagesBase:
//    Override the location where `package:` uris are resolved from. By default
//    they are resolved under "packages/" from the current window location.
(function() {
  // /* ::norenaming:: */
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function map(x) {
    x = Object.create(null);
    x.x = 0;
    delete x.x;
    return x;
  }
  // The global objects start as so-called "slow objects". For V8, this
  // means that it won't try to make map transitions as we add properties
  // to these objects. Later on, we attempt to turn these objects into
  // fast objects by calling "convertToFastObject" (see
  // [emitConvertToFastObjectFunction]).
  var A = map();
  var B = map();
  var C = map();
  var D = map();
  var E = map();
  var F = map();
  var G = map();
  var H = map();
  var J = map();
  var K = map();
  var L = map();
  var M = map();
  var N = map();
  var O = map();
  var P = map();
  var Q = map();
  var R = map();
  var S = map();
  var T = map();
  var U = map();
  var V = map();
  var W = map();
  var X = map();
  var Y = map();
  var Z = map();
  function Isolate() {
  }
  init();
  // Constructors are generated at runtime.
  function setupProgram(programData, metadataOffset, typesOffset) {
    "use strict";
    function generateAccessor(fieldDescriptor, accessors, cls) {
      var fieldInformation = fieldDescriptor.split("-");
      var field = fieldInformation[0];
      var len = field.length;
      var code = field.charCodeAt(len - 1);
      var reflectable;
      if (fieldInformation.length > 1)
        reflectable = true;
      else
        reflectable = false;
      code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
      if (code) {
        var getterCode = code & 3;
        var setterCode = code >> 2;
        var accessorName = field = field.substring(0, len - 1);
        var divider = field.indexOf(":");
        if (divider > 0) {
          accessorName = field.substring(0, divider);
          field = field.substring(divider + 1);
        }
        if (getterCode) {
          var args = getterCode & 2 ? "receiver" : "";
          var receiver = getterCode & 1 ? "this" : "receiver";
          var body = "return " + receiver + "." + field;
          var property = cls + ".prototype.get$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
        if (setterCode) {
          var args = setterCode & 2 ? "receiver, value" : "value";
          var receiver = setterCode & 1 ? "this" : "receiver";
          var body = receiver + "." + field + " = value";
          var property = cls + ".prototype.set$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
      }
      return field;
    }
    function defineClass(name, fields) {
      var accessors = [];
      var str = "function " + name + "(";
      var comma = "", body = "";
      for (var i = 0; i < fields.length; i++) {
        var fieldDescriptor = fields[i];
        if (fieldDescriptor.charCodeAt(0) == 48) {
          fieldDescriptor = fieldDescriptor.substring(1);
          var field = generateAccessor(fieldDescriptor, accessors, name);
          body += "this." + field + " = null;\n";
        } else {
          var field = generateAccessor(fieldDescriptor, accessors, name);
          var parameter = "p_" + field;
          str += comma;
          comma = ", ";
          str += parameter;
          body += "this." + field + " = " + parameter + ";\n";
        }
      }
      if (supportsDirectProtoAccess)
        body += "this." + "$deferredAction" + "();";
      str += ") {\n" + body + "}\n";
      str += name + ".builtin$cls=\"" + name + "\";\n";
      str += "$desc=$collectedClasses." + name + "[1];\n";
      str += name + ".prototype = $desc;\n";
      if (typeof defineClass.name != "string")
        str += name + ".name=\"" + name + "\";\n";
      str += accessors.join("");
      return str;
    }
    var inheritFrom = supportsDirectProtoAccess ? function(constructor, superConstructor) {
      var prototype = constructor.prototype;
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
      prototype["$is" + constructor.name] = constructor;
      return convertToFastObject(prototype);
    } : function() {
      function tmp() {
      }
      return function(constructor, superConstructor) {
        tmp.prototype = superConstructor.prototype;
        var object = new tmp();
        convertToSlowObject(object);
        var properties = constructor.prototype;
        var members = Object.keys(properties);
        for (var i = 0; i < members.length; i++) {
          var member = members[i];
          object[member] = properties[member];
        }
        object["$is" + constructor.name] = constructor;
        object.constructor = constructor;
        constructor.prototype = object;
        return object;
      };
    }();
    function finishClasses(processedClasses) {
      var allClasses = init.allClasses;
      processedClasses.combinedConstructorFunction += "return [\n" + processedClasses.constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", processedClasses.combinedConstructorFunction)(processedClasses.collected);
      processedClasses.combinedConstructorFunction = null;
      for (var i = 0; i < constructors.length; i++) {
        var constructor = constructors[i];
        var cls = constructor.name;
        var desc = processedClasses.collected[cls];
        var globalObject = desc[0];
        desc = desc[1];
        allClasses[cls] = constructor;
        globalObject[cls] = constructor;
      }
      constructors = null;
      var finishedClasses = init.finishedClasses;
      function finishClass(cls) {
        if (finishedClasses[cls])
          return;
        finishedClasses[cls] = true;
        var superclass = processedClasses.pending[cls];
        if (superclass && superclass.indexOf("+") > 0) {
          var s = superclass.split("+");
          superclass = s[0];
          var mixinClass = s[1];
          finishClass(mixinClass);
          var mixin = allClasses[mixinClass];
          var mixinPrototype = mixin.prototype;
          var clsPrototype = allClasses[cls].prototype;
          var properties = Object.keys(mixinPrototype);
          for (var i = 0; i < properties.length; i++) {
            var d = properties[i];
            if (!hasOwnProperty.call(clsPrototype, d))
              clsPrototype[d] = mixinPrototype[d];
          }
        }
        if (!superclass || typeof superclass != "string") {
          var constructor = allClasses[cls];
          var prototype = constructor.prototype;
          prototype.constructor = constructor;
          prototype.$isObject = constructor;
          prototype.$deferredAction = function() {
          };
          return;
        }
        finishClass(superclass);
        var superConstructor = allClasses[superclass];
        if (!superConstructor)
          superConstructor = existingIsolateProperties[superclass];
        var constructor = allClasses[cls];
        var prototype = inheritFrom(constructor, superConstructor);
        if (mixinPrototype)
          prototype.$deferredAction = mixinDeferredActionHelper(mixinPrototype, prototype);
        if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
          var nativeSpec = prototype["%"].split(";");
          if (nativeSpec[0]) {
            var tags = nativeSpec[0].split("|");
            for (var i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = true;
            }
          }
          if (nativeSpec[1]) {
            tags = nativeSpec[1].split("|");
            if (nativeSpec[2]) {
              var subclasses = nativeSpec[2].split("|");
              for (var i = 0; i < subclasses.length; i++) {
                var subclass = allClasses[subclasses[i]];
                subclass.$nativeSuperclassTag = tags[0];
              }
            }
            for (i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = false;
            }
          }
          prototype.$deferredAction();
        }
        if (prototype.$isInterceptor)
          prototype.$deferredAction();
      }
      var properties = Object.keys(processedClasses.pending);
      for (var i = 0; i < properties.length; i++)
        finishClass(properties[i]);
    }
    function finishAddStubsHelper() {
      var prototype = this;
      while (!prototype.hasOwnProperty("$deferredAction"))
        prototype = prototype.__proto__;
      delete prototype.$deferredAction;
      var properties = Object.keys(prototype);
      for (var index = 0; index < properties.length; index++) {
        var property = properties[index];
        var firstChar = property.charCodeAt(0);
        var elem;
        if (property !== "^" && property !== "$reflectable" && firstChar !== 43 && firstChar !== 42 && (elem = prototype[property]) != null && elem.constructor === Array && property !== "<>")
          addStubs(prototype, elem, property, false, []);
      }
      convertToFastObject(prototype);
      prototype = prototype.__proto__;
      prototype.$deferredAction();
    }
    function mixinDeferredActionHelper(mixinPrototype, targetPrototype) {
      var chain;
      if (targetPrototype.hasOwnProperty("$deferredAction"))
        chain = targetPrototype.$deferredAction;
      return function foo() {
        if (!supportsDirectProtoAccess)
          return;
        var prototype = this;
        while (!prototype.hasOwnProperty("$deferredAction"))
          prototype = prototype.__proto__;
        if (chain)
          prototype.$deferredAction = chain;
        else {
          delete prototype.$deferredAction;
          convertToFastObject(prototype);
        }
        mixinPrototype.$deferredAction();
        prototype.$deferredAction();
      };
    }
    function processClassData(cls, descriptor, processedClasses) {
      descriptor = convertToSlowObject(descriptor);
      var previousProperty;
      var properties = Object.keys(descriptor);
      var hasDeferredWork = false;
      var shouldDeferWork = supportsDirectProtoAccess && cls != "Object";
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        var firstChar = property.charCodeAt(0);
        if (property === "static") {
          processStatics(init.statics[cls] = descriptor.static, processedClasses);
          delete descriptor.static;
        } else if (firstChar === 43) {
          mangledNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
        } else if (firstChar === 42) {
          descriptor[previousProperty].$defaultValues = descriptor[property];
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else {
          var elem = descriptor[property];
          if (property !== "^" && elem != null && elem.constructor === Array && property !== "<>")
            if (shouldDeferWork)
              hasDeferredWork = true;
            else
              addStubs(descriptor, elem, property, false, []);
          else
            previousProperty = property;
        }
      }
      if (hasDeferredWork)
        descriptor.$deferredAction = finishAddStubsHelper;
      var classData = descriptor["^"], split, supr, fields = classData;
      var s = fields.split(";");
      fields = s[1] ? s[1].split(",") : [];
      supr = s[0];
      split = supr.split(":");
      if (split.length == 2) {
        supr = split[0];
        var functionSignature = split[1];
        if (functionSignature)
          descriptor.$signature = function(s) {
            return function() {
              return init.types[s];
            };
          }(functionSignature);
      }
      if (supr)
        processedClasses.pending[cls] = supr;
      processedClasses.combinedConstructorFunction += defineClass(cls, fields);
      processedClasses.constructorsList.push(cls);
      processedClasses.collected[cls] = [globalObject, descriptor];
      classes.push(cls);
    }
    function processStatics(descriptor, processedClasses) {
      var properties = Object.keys(descriptor);
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (property === "^")
          continue;
        var element = descriptor[property];
        var firstChar = property.charCodeAt(0);
        var previousProperty;
        if (firstChar === 43) {
          mangledGlobalNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
          if (element && element.length)
            init.typeInformation[previousProperty] = element;
        } else if (firstChar === 42) {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
        } else if (element.constructor === Array)
          addStubs(globalObject, element, property, true, functions);
        else {
          previousProperty = property;
          processClassData(property, element, processedClasses);
        }
      }
    }
    function addStubs(prototype, array, name, isStatic, functions) {
      var index = 0, applyTrampolineIndex = index, alias = array[index], f;
      if (typeof alias == "string")
        f = array[++index];
      else {
        f = alias;
        alias = name;
      }
      if (typeof f == "number") {
        applyTrampolineIndex = f;
        f = array[++index];
      }
      prototype[name] = prototype[alias] = f;
      var funcs = [f];
      f.$stubName = name;
      functions.push(name);
      for (index++; index < array.length; index++) {
        f = array[index];
        if (typeof f != "function")
          break;
        if (!isStatic)
          f.$stubName = array[++index];
        funcs.push(f);
        if (f.$stubName) {
          prototype[f.$stubName] = f;
          functions.push(f.$stubName);
        }
      }
      for (var i = 0; i < funcs.length; index++, i++)
        funcs[i].$callName = array[index];
      var getterStubName = array[index];
      array = array.slice(++index);
      var requiredParameterInfo = array[0];
      var isIntercepted = (requiredParameterInfo & 1) === 1;
      requiredParameterInfo = requiredParameterInfo >> 1;
      var requiredParameterCount = requiredParameterInfo >> 1;
      var isAccessor = (requiredParameterInfo & 1) === 1;
      var isSetter = requiredParameterInfo === 3;
      var isGetter = requiredParameterInfo === 1;
      var optionalParameterInfo = array[1];
      var optionalParameterCount = optionalParameterInfo >> 1;
      var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
      var totalParameterCount = requiredParameterCount + optionalParameterCount;
      var functionTypeIndex = array[2];
      if (typeof functionTypeIndex == "number")
        array[2] = functionTypeIndex + typesOffset;
      if (metadataOffset > 0) {
        var position = 3;
        for (var i = 0; i < optionalParameterCount; i++) {
          if (typeof array[position] == "number")
            array[position] = array[position] + metadataOffset;
          position++;
        }
        for (var i = 0; i < totalParameterCount; i++) {
          array[position] = array[position] + metadataOffset;
          position++;
        }
      }
      var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
      if (getterStubName) {
        f = tearOff(funcs, applyTrampolineIndex, array, isStatic, name, isIntercepted);
        prototype[name].$getter = f;
        f.$getterStub = true;
        if (isStatic)
          functions.push(getterStubName);
        prototype[getterStubName] = f;
        funcs.push(f);
        f.$stubName = getterStubName;
        f.$callName = null;
      }
      var isReflectable = array.length > unmangledNameIndex;
      if (isReflectable) {
        funcs[0].$reflectable = 1;
        funcs[0].$reflectionInfo = array;
        for (var i = 1; i < funcs.length; i++) {
          funcs[i].$reflectable = 2;
          funcs[i].$reflectionInfo = array;
        }
        var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
        var unmangledName = array[unmangledNameIndex];
        var reflectionName = unmangledName;
        if (getterStubName)
          mangledNames[getterStubName] = reflectionName;
        if (isSetter)
          reflectionName += "=";
        else if (!isGetter)
          reflectionName += ":" + (requiredParameterCount + optionalParameterCount);
        mangledNames[name] = reflectionName;
        funcs[0].$reflectionName = reflectionName;
        for (var i = unmangledNameIndex + 1; i < array.length; i++)
          array[i] = array[i] + metadataOffset;
        funcs[0].$metadataIndex = unmangledNameIndex + 1;
        if (optionalParameterCount)
          prototype[unmangledName + "*"] = funcs[applyTrampolineIndex];
      }
    }
    function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
      return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
    }
    function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
      var cache;
      return isStatic ? function() {
        if (cache === void 0)
          cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, [], name).prototype;
        return cache;
      } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
    }
    var functionCounter = 0;
    if (!init.libraries)
      init.libraries = [];
    if (!init.mangledNames)
      init.mangledNames = map();
    if (!init.mangledGlobalNames)
      init.mangledGlobalNames = map();
    if (!init.statics)
      init.statics = map();
    if (!init.typeInformation)
      init.typeInformation = map();
    var libraries = init.libraries;
    var mangledNames = init.mangledNames;
    var mangledGlobalNames = init.mangledGlobalNames;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var length = programData.length;
    var processedClasses = map();
    processedClasses.collected = map();
    processedClasses.pending = map();
    processedClasses.constructorsList = [];
    processedClasses.combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
    for (var i = 0; i < length; i++) {
      var data = programData[i];
      var name = data[0];
      var uri = data[1];
      var metadata = data[2];
      var globalObject = data[3];
      var descriptor = data[4];
      var isRoot = !!data[5];
      var fields = descriptor && descriptor["^"];
      if (fields instanceof Array)
        fields = fields[0];
      var classes = [];
      var functions = [];
      processStatics(descriptor, processedClasses);
      libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
    }
    finishClasses(processedClasses);
  }
  Isolate.functionThatReturnsNull = function() {
  };
  var dart = [["_foreign_helper", "dart:_foreign_helper",, H, {
    "^": "",
    JS_CONST: {
      "^": "Object;code"
    }
  }], ["_interceptors", "dart:_interceptors",, J, {
    "^": "",
    getInterceptor: function(object) {
      return void 0;
    },
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var record, proto, objectProto, $constructor, interceptor;
      record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        Object.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    Interceptor: {
      "^": "Object;",
      $eq: function(receiver, other) {
        return receiver === other;
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      toString$0: ["super$Interceptor$toString", function(receiver) {
        return "Instance of '" + H.Primitives_objectTypeName(receiver) + "'";
      }],
      noSuchMethod$1: ["super$Interceptor$noSuchMethod", function(receiver, invocation) {
        H.interceptedTypeCheck(invocation, "$isInvocation");
        throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
      }, null, "get$noSuchMethod", 5, 0, null, 2],
      "%": "ArrayBuffer|DOMError|MediaError|Navigator|NavigatorConcurrentHardware|NavigatorUserMediaError|OverconstrainedError|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString|WorkerNavigator"
    },
    JSBool: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      get$hashCode: function(receiver) {
        return receiver ? 519018 : 218159;
      },
      $isbool: 1
    },
    JSNull: {
      "^": "Interceptor;",
      $eq: function(receiver, other) {
        return null == other;
      },
      toString$0: function(receiver) {
        return "null";
      },
      get$hashCode: function(receiver) {
        return 0;
      },
      noSuchMethod$1: [function(receiver, invocation) {
        return this.super$Interceptor$noSuchMethod(receiver, H.interceptedTypeCheck(invocation, "$isInvocation"));
      }, null, "get$noSuchMethod", 5, 0, null, 2],
      $isNull: 1
    },
    JavaScriptObject: {
      "^": "Interceptor;",
      get$hashCode: function(receiver) {
        return 0;
      },
      toString$0: ["super$JavaScriptObject$toString", function(receiver) {
        return String(receiver);
      }]
    },
    PlainJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    UnknownJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    JavaScriptFunction: {
      "^": "JavaScriptObject;",
      toString$0: function(receiver) {
        var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
        if (dartClosure == null)
          return this.super$JavaScriptObject$toString(receiver);
        return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
      },
      $signature: function() {
        return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
      },
      $isFunction: 1
    },
    JSArray: {
      "^": "Interceptor;$ti",
      add$1: function(receiver, value) {
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
        if (!!receiver.fixed$length)
          H.throwExpression(P.UnsupportedError$("add"));
        receiver.push(value);
      },
      removeAt$1: function(receiver, index) {
        if (!!receiver.fixed$length)
          H.throwExpression(P.UnsupportedError$("removeAt"));
        if (index < 0 || index >= receiver.length)
          throw H.wrapException(P.RangeError$value(index, null, null));
        return receiver.splice(index, 1)[0];
      },
      insert$2: function(receiver, index, value) {
        var t1;
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
        if (!!receiver.fixed$length)
          H.throwExpression(P.UnsupportedError$("insert"));
        t1 = receiver.length;
        if (index > t1)
          throw H.wrapException(P.RangeError$value(index, null, null));
        receiver.splice(index, 0, value);
      },
      remove$1: function(receiver, element) {
        var i;
        if (!!receiver.fixed$length)
          H.throwExpression(P.UnsupportedError$("remove"));
        for (i = 0; i < receiver.length; ++i)
          if (J.$eq$(receiver[i], element)) {
            receiver.splice(i, 1);
            return true;
          }
        return false;
      },
      addAll$1: function(receiver, collection) {
        var t1;
        H.assertSubtype(collection, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
        if (!!receiver.fixed$length)
          H.throwExpression(P.UnsupportedError$("addAll"));
        for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
          receiver.push(t1.get$current());
      },
      forEach$1: function(receiver, f) {
        var end, i;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(receiver, 0)]});
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          f.call$1(receiver[i]);
          if (receiver.length !== end)
            throw H.wrapException(P.ConcurrentModificationError$(receiver));
        }
      },
      map$1$1: function(receiver, f, $T) {
        var t1 = H.getTypeArgumentByIndex(receiver, 0);
        return new H.MappedListIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
      },
      join$1: function(receiver, separator) {
        var list, i;
        list = new Array(receiver.length);
        list.fixed$length = Array;
        for (i = 0; i < receiver.length; ++i)
          this.$indexSet(list, i, H.S(receiver[i]));
        return list.join(separator);
      },
      take$1: function(receiver, n) {
        return H.SubListIterable$(receiver, 0, n, H.getTypeArgumentByIndex(receiver, 0));
      },
      takeWhile$1: function(receiver, test) {
        var t1 = H.getTypeArgumentByIndex(receiver, 0);
        return new H.TakeWhileIterable(receiver, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), [t1]);
      },
      skip$1: function(receiver, n) {
        return H.SubListIterable$(receiver, n, null, H.getTypeArgumentByIndex(receiver, 0));
      },
      firstWhere$2$orElse: function(receiver, test, orElse) {
        var t1, end, i, element;
        t1 = H.getTypeArgumentByIndex(receiver, 0);
        H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]});
        H.functionTypeCheck(orElse, {func: 1, ret: t1});
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          element = receiver[i];
          if (test.call$1(element))
            return element;
          if (receiver.length !== end)
            throw H.wrapException(P.ConcurrentModificationError$(receiver));
        }
        return orElse.call$0();
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        if (start < 0 || start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, "start", null));
        if (end == null)
          end = receiver.length;
        else if (end < start || end > receiver.length)
          throw H.wrapException(P.RangeError$range(end, start, receiver.length, "end", null));
        if (start === end)
          return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
        return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      get$last: function(receiver) {
        var t1 = receiver.length;
        if (t1 > 0)
          return receiver[t1 - 1];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      get$single: function(receiver) {
        var t1 = receiver.length;
        if (t1 === 1) {
          if (0 >= t1)
            return H.ioore(receiver, 0);
          return receiver[0];
        }
        if (t1 === 0)
          throw H.wrapException(H.IterableElementError_noElement());
        throw H.wrapException(H.IterableElementError_tooMany());
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        var t1, $length, i;
        t1 = H.getTypeArgumentByIndex(receiver, 0);
        H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
        if (!!receiver.immutable$list)
          H.throwExpression(P.UnsupportedError$("setRange"));
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        $length = end - start;
        if ($length === 0)
          return;
        H.assertSubtype(iterable, "$isList", [t1], "$asList");
        t1 = J.getInterceptor$asx(iterable);
        if (skipCount + $length > t1.get$length(iterable))
          throw H.wrapException(H.IterableElementError_tooFew());
        if (skipCount < start)
          for (i = $length - 1; i >= 0; --i)
            receiver[start + i] = t1.$index(iterable, skipCount + i);
        else
          for (i = 0; i < $length; ++i)
            receiver[start + i] = t1.$index(iterable, skipCount + i);
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      every$1: function(receiver, test) {
        var end, i;
        H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          if (!test.call$1(receiver[i]))
            return false;
          if (receiver.length !== end)
            throw H.wrapException(P.ConcurrentModificationError$(receiver));
        }
        return true;
      },
      get$reversed: function(receiver) {
        return new H.ReversedListIterable(receiver, [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      sort$1: function(receiver, compare) {
        var t1 = H.getTypeArgumentByIndex(receiver, 0);
        H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
        if (!!receiver.immutable$list)
          H.throwExpression(P.UnsupportedError$("sort"));
        H.Sort_sort(receiver, compare == null ? J._interceptors_JSArray__compareAny$closure() : compare, t1);
      },
      sort$0: function($receiver) {
        return this.sort$1($receiver, null);
      },
      contains$1: function(receiver, other) {
        var i;
        for (i = 0; i < receiver.length; ++i)
          if (J.$eq$(receiver[i], other))
            return true;
        return false;
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      get$isNotEmpty: function(receiver) {
        return receiver.length !== 0;
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      get$iterator: function(receiver) {
        return new J.ArrayIterator(receiver, receiver.length, 0, [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      set$length: function(receiver, newLength) {
        if (!!receiver.fixed$length)
          H.throwExpression(P.UnsupportedError$("set length"));
        if (newLength < 0)
          throw H.wrapException(P.RangeError$range(newLength, 0, null, "newLength", null));
        receiver.length = newLength;
      },
      $index: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
        if (!!receiver.immutable$list)
          H.throwExpression(P.UnsupportedError$("indexed set"));
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isList: 1,
      static: {
        JSArray_JSArray$fixed: function($length, $E) {
          if ($length < 0 || $length > 4294967295)
            throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
          return J.JSArray_JSArray$markFixed(new Array($length), $E);
        },
        JSArray_JSArray$markFixed: function(allocation, $E) {
          return J.JSArray_markFixedList(H.setRuntimeTypeInfo(allocation, [$E]));
        },
        JSArray_markFixedList: function(list) {
          H.listTypeCheck(list);
          list.fixed$length = Array;
          return list;
        },
        JSArray_markUnmodifiableList: function(list) {
          list.fixed$length = Array;
          list.immutable$list = Array;
          return list;
        },
        JSArray__compareAny: [function(a, b) {
          return J.compareTo$1$ns(H.numberOrStringSuperNativeTypeCheck(a, "$isComparable"), H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
        }, "call$2", "_interceptors_JSArray__compareAny$closure", 8, 0, 64]
      }
    },
    JSUnmodifiableArray: {
      "^": "JSArray;$ti"
    },
    ArrayIterator: {
      "^": "Object;_iterable,__interceptors$_length,_index,0_current,$ti",
      get$current: function() {
        return this._current;
      },
      moveNext$0: function() {
        var t1, $length, t2;
        t1 = this._iterable;
        $length = t1.length;
        if (this.__interceptors$_length !== $length)
          throw H.wrapException(H.throwConcurrentModificationError(t1));
        t2 = this._index;
        if (t2 >= $length) {
          this._current = null;
          return false;
        }
        this._current = t1[t2];
        this._index = t2 + 1;
        return true;
      }
    },
    JSNumber: {
      "^": "Interceptor;",
      compareTo$1: function(receiver, b) {
        var bIsNegative;
        H.numTypeCheck(b);
        if (typeof b !== "number")
          throw H.wrapException(H.argumentErrorValue(b));
        if (receiver < b)
          return -1;
        else if (receiver > b)
          return 1;
        else if (receiver === b) {
          if (receiver === 0) {
            bIsNegative = this.get$isNegative(b);
            if (this.get$isNegative(receiver) === bIsNegative)
              return 0;
            if (this.get$isNegative(receiver))
              return -1;
            return 1;
          }
          return 0;
        } else if (isNaN(receiver)) {
          if (isNaN(b))
            return 0;
          return 1;
        } else
          return -1;
      },
      get$isNegative: function(receiver) {
        return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
      },
      toInt$0: function(receiver) {
        var t1;
        if (receiver >= -2147483648 && receiver <= 2147483647)
          return receiver | 0;
        if (isFinite(receiver)) {
          t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
          return t1 + 0;
        }
        throw H.wrapException(P.UnsupportedError$("" + receiver + ".toInt()"));
      },
      round$0: function(receiver) {
        if (receiver > 0) {
          if (receiver !== 1 / 0)
            return Math.round(receiver);
        } else if (receiver > -1 / 0)
          return 0 - Math.round(0 - receiver);
        throw H.wrapException(P.UnsupportedError$("" + receiver + ".round()"));
      },
      toRadixString$1: function(receiver, radix) {
        var result, match, t1, exponent;
        if (radix < 2 || radix > 36)
          throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
        result = receiver.toString(radix);
        if (C.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
          return result;
        match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
        if (match == null)
          H.throwExpression(P.UnsupportedError$("Unexpected toString result: " + result));
        t1 = J.getInterceptor$asx(match);
        result = t1.$index(match, 1);
        exponent = +t1.$index(match, 3);
        if (t1.$index(match, 2) != null) {
          result += t1.$index(match, 2);
          exponent -= t1.$index(match, 2).length;
        }
        return result + C.JSString_methods.$mul("0", exponent);
      },
      toString$0: function(receiver) {
        if (receiver === 0 && 1 / receiver < 0)
          return "-0.0";
        else
          return "" + receiver;
      },
      get$hashCode: function(receiver) {
        return receiver & 0x1FFFFFFF;
      },
      $add: function(receiver, other) {
        H.numTypeCheck(other);
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver + other;
      },
      $sub: function(receiver, other) {
        H.numTypeCheck(other);
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver - other;
      },
      _tdivFast$1: function(receiver, other) {
        return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
      },
      _tdivSlow$1: function(receiver, other) {
        var quotient = receiver / other;
        if (quotient >= -2147483648 && quotient <= 2147483647)
          return quotient | 0;
        if (quotient > 0) {
          if (quotient !== 1 / 0)
            return Math.floor(quotient);
        } else if (quotient > -1 / 0)
          return Math.ceil(quotient);
        throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
      },
      _shrOtherPositive$1: function(receiver, other) {
        var t1;
        if (receiver > 0)
          t1 = this._shrBothPositive$1(receiver, other);
        else {
          t1 = other > 31 ? 31 : other;
          t1 = receiver >> t1 >>> 0;
        }
        return t1;
      },
      _shrBothPositive$1: function(receiver, other) {
        return other > 31 ? 0 : receiver >>> other;
      },
      $lt: function(receiver, other) {
        H.numTypeCheck(other);
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver < other;
      },
      $gt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver > other;
      },
      $le: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver <= other;
      },
      $ge: function(receiver, other) {
        H.numTypeCheck(other);
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver >= other;
      },
      $isComparable: 1,
      $asComparable: function() {
        return [P.num];
      },
      $isdouble: 1,
      $isnum: 1
    },
    JSInt: {
      "^": "JSNumber;",
      $isint: 1
    },
    JSDouble: {
      "^": "JSNumber;"
    },
    JSString: {
      "^": "Interceptor;",
      codeUnitAt$1: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver.charCodeAt(index);
      },
      _codeUnitAt$1: function(receiver, index) {
        if (index >= receiver.length)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver.charCodeAt(index);
      },
      allMatches$2: function(receiver, string, start) {
        if (start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        return new H._StringAllMatchesIterable(string, receiver, start);
      },
      allMatches$1: function($receiver, string) {
        return this.allMatches$2($receiver, string, 0);
      },
      matchAsPrefix$2: function(receiver, string, start) {
        var t1, i;
        if (typeof start !== "number")
          return start.$lt();
        if (start < 0 || start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        t1 = receiver.length;
        if (start + t1 > string.length)
          return;
        for (i = 0; i < t1; ++i)
          if (this.codeUnitAt$1(string, start + i) !== this._codeUnitAt$1(receiver, i))
            return;
        return new H.StringMatch(start, string, receiver);
      },
      $add: function(receiver, other) {
        H.stringTypeCheck(other);
        if (typeof other !== "string")
          throw H.wrapException(P.ArgumentError$value(other, null, null));
        return receiver + other;
      },
      endsWith$1: function(receiver, other) {
        var otherLength, t1;
        otherLength = other.length;
        t1 = receiver.length;
        if (otherLength > t1)
          return false;
        return other === this.substring$1(receiver, t1 - otherLength);
      },
      split$1: function(receiver, pattern) {
        H.stringSuperNativeTypeCheck(pattern, "$isPattern");
        if (pattern == null)
          H.throwExpression(H.argumentErrorValue(pattern));
        if (typeof pattern === "string")
          return H.setRuntimeTypeInfo(receiver.split(pattern), [P.String]);
        else if (pattern instanceof H.JSSyntaxRegExp && pattern.get$_nativeAnchoredVersion().exec("").length - 2 === 0)
          return H.setRuntimeTypeInfo(receiver.split(pattern._nativeRegExp), [P.String]);
        else
          return this._defaultSplit$1(receiver, pattern);
      },
      _defaultSplit$1: function(receiver, pattern) {
        var result, t1, start, $length, match, matchStart, matchEnd;
        H.stringSuperNativeTypeCheck(pattern, "$isPattern");
        result = H.setRuntimeTypeInfo([], [P.String]);
        for (t1 = J.allMatches$1$s(pattern, receiver), t1 = t1.get$iterator(t1), start = 0, $length = 1; t1.moveNext$0();) {
          match = t1.get$current();
          matchStart = match.get$start(match);
          matchEnd = match.get$end();
          if (typeof matchStart !== "number")
            return H.iae(matchStart);
          $length = matchEnd - matchStart;
          if ($length === 0 && start === matchStart)
            continue;
          C.JSArray_methods.add$1(result, this.substring$2(receiver, start, matchStart));
          start = matchEnd;
        }
        if (start < receiver.length || $length > 0)
          C.JSArray_methods.add$1(result, this.substring$1(receiver, start));
        return result;
      },
      startsWith$2: function(receiver, pattern, index) {
        var endIndex;
        if (typeof index !== "number" || Math.floor(index) !== index)
          H.throwExpression(H.argumentErrorValue(index));
        if (typeof index !== "number")
          return index.$lt();
        if (index < 0 || index > receiver.length)
          throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
        if (typeof pattern === "string") {
          endIndex = index + pattern.length;
          if (endIndex > receiver.length)
            return false;
          return pattern === receiver.substring(index, endIndex);
        }
        return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
      },
      startsWith$1: function($receiver, pattern) {
        return this.startsWith$2($receiver, pattern, 0);
      },
      substring$2: function(receiver, startIndex, endIndex) {
        H.intTypeCheck(endIndex);
        if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
          H.throwExpression(H.argumentErrorValue(startIndex));
        if (endIndex == null)
          endIndex = receiver.length;
        if (typeof startIndex !== "number")
          return startIndex.$lt();
        if (startIndex < 0)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (startIndex > endIndex)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (endIndex > receiver.length)
          throw H.wrapException(P.RangeError$value(endIndex, null, null));
        return receiver.substring(startIndex, endIndex);
      },
      substring$1: function($receiver, startIndex) {
        return this.substring$2($receiver, startIndex, null);
      },
      trim$0: function(receiver) {
        var result, endIndex, startIndex, t1, endIndex0;
        result = receiver.trim();
        endIndex = result.length;
        if (endIndex === 0)
          return result;
        if (this._codeUnitAt$1(result, 0) === 133) {
          startIndex = J.JSString__skipLeadingWhitespace(result, 1);
          if (startIndex === endIndex)
            return "";
        } else
          startIndex = 0;
        t1 = endIndex - 1;
        endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
        if (startIndex === 0 && endIndex0 === endIndex)
          return result;
        return result.substring(startIndex, endIndex0);
      },
      $mul: function(receiver, times) {
        var s, result;
        H.intTypeCheck(times);
        if (typeof times !== "number")
          return H.iae(times);
        if (0 >= times)
          return "";
        if (times === 1 || receiver.length === 0)
          return receiver;
        if (times !== times >>> 0)
          throw H.wrapException(C.C_OutOfMemoryError);
        for (s = receiver, result = ""; true;) {
          if ((times & 1) === 1)
            result = s + result;
          times = times >>> 1;
          if (times === 0)
            break;
          s += s;
        }
        return result;
      },
      padLeft$2: function(receiver, width, padding) {
        var delta = width - receiver.length;
        if (delta <= 0)
          return receiver;
        return this.$mul(padding, delta) + receiver;
      },
      padLeft$1: function($receiver, width) {
        return this.padLeft$2($receiver, width, " ");
      },
      padRight$2: function(receiver, width, padding) {
        var delta = H.intTypeCheck(width) - receiver.length;
        if (delta <= 0)
          return receiver;
        return receiver + this.$mul(padding, delta);
      },
      padRight$1: function($receiver, width) {
        return this.padRight$2($receiver, width, " ");
      },
      indexOf$2: function(receiver, pattern, start) {
        var t1;
        if (start < 0 || start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
        t1 = receiver.indexOf(pattern, start);
        return t1;
      },
      indexOf$1: function($receiver, pattern) {
        return this.indexOf$2($receiver, pattern, 0);
      },
      lastIndexOf$2: function(receiver, pattern, start) {
        var t1, t2;
        if (start == null)
          start = receiver.length;
        else if (start < 0 || start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
        t1 = pattern.length;
        t2 = receiver.length;
        if (start + t1 > t2)
          start = t2 - t1;
        return receiver.lastIndexOf(pattern, start);
      },
      contains$2: function(receiver, other, startIndex) {
        if (startIndex > receiver.length)
          throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
        return H.stringContainsUnchecked(receiver, other, startIndex);
      },
      contains$1: function($receiver, other) {
        return this.contains$2($receiver, other, 0);
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      get$isNotEmpty: function(receiver) {
        return receiver.length !== 0;
      },
      compareTo$1: function(receiver, other) {
        var t1;
        H.stringTypeCheck(other);
        if (typeof other !== "string")
          throw H.wrapException(H.argumentErrorValue(other));
        if (receiver === other)
          t1 = 0;
        else
          t1 = receiver < other ? -1 : 1;
        return t1;
      },
      toString$0: function(receiver) {
        return receiver;
      },
      get$hashCode: function(receiver) {
        var t1, hash, i;
        for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
          hash = 536870911 & hash + receiver.charCodeAt(i);
          hash = 536870911 & hash + ((524287 & hash) << 10);
          hash ^= hash >> 6;
        }
        hash = 536870911 & hash + ((67108863 & hash) << 3);
        hash ^= hash >> 11;
        return 536870911 & hash + ((16383 & hash) << 15);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isComparable: 1,
      $asComparable: function() {
        return [P.String];
      },
      $isPattern: 1,
      $isString: 1,
      static: {
        JSString__isWhitespace: function(codeUnit) {
          if (codeUnit < 256)
            switch (codeUnit) {
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 32:
              case 133:
              case 160:
                return true;
              default:
                return false;
            }
          switch (codeUnit) {
            case 5760:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8232:
            case 8233:
            case 8239:
            case 8287:
            case 12288:
            case 65279:
              return true;
            default:
              return false;
          }
        },
        JSString__skipLeadingWhitespace: function(string, index) {
          var t1, codeUnit;
          for (t1 = string.length; index < t1;) {
            codeUnit = C.JSString_methods._codeUnitAt$1(string, index);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
            ++index;
          }
          return index;
        },
        JSString__skipTrailingWhitespace: function(string, index) {
          var index0, codeUnit;
          for (; index > 0; index = index0) {
            index0 = index - 1;
            codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
          }
          return index;
        }
      }
    }
  }], ["dart._internal", "dart:_internal",, H, {
    "^": "",
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooMany: function() {
      return new P.StateError("Too many elements");
    },
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    Sort_sort: function(a, compare, $E) {
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      H.Sort__doSort(a, 0, J.get$length$asx(a) - 1, compare, $E);
    },
    Sort__doSort: function(a, left, right, compare, $E) {
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      if (right - left <= 32)
        H.Sort__insertionSort(a, left, right, compare, $E);
      else
        H.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort: function(a, left, right, compare, $E) {
      var i, t1, el, j, j0;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort: function(a, left, right, compare, $E) {
      var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, great0, less0, pivots_are_equal, comp_pivot1, comp_pivot2, t2;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
      index1 = left + sixth;
      index5 = right - sixth;
      index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
      index2 = index3 - sixth;
      index4 = index3 + sixth;
      t1 = J.getInterceptor$asx(a);
      el1 = t1.$index(a, index1);
      el2 = t1.$index(a, index2);
      el3 = t1.$index(a, index3);
      el4 = t1.$index(a, index4);
      el5 = t1.$index(a, index5);
      if (J.$gt$n(compare.call$2(el1, el2), 0)) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el3), 0)) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el4), 0)) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el3, el4), 0)) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el5), 0)) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (typeof comp !== "number")
            return comp.$lt();
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (typeof comp !== "number")
                return comp.$gt();
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp_pivot1 = compare.call$2(ak, el2);
          if (typeof comp_pivot1 !== "number")
            return comp_pivot1.$lt();
          if (comp_pivot1 < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else {
            comp_pivot2 = compare.call$2(ak, el4);
            if (typeof comp_pivot2 !== "number")
              return comp_pivot2.$gt();
            if (comp_pivot2 > 0)
              for (; true;) {
                comp = compare.call$2(t1.$index(a, great), el4);
                if (typeof comp !== "number")
                  return comp.$gt();
                if (comp > 0) {
                  --great;
                  if (great < k)
                    break;
                  continue;
                } else {
                  comp = compare.call$2(t1.$index(a, great), el2);
                  if (typeof comp !== "number")
                    return comp.$lt();
                  great0 = great - 1;
                  if (comp < 0) {
                    t1.$indexSet(a, k, t1.$index(a, less));
                    less0 = less + 1;
                    t1.$indexSet(a, less, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    less = less0;
                  } else {
                    t1.$indexSet(a, k, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                  }
                  great = great0;
                  break;
                }
              }
          }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      H.Sort__doSort(a, left, less - 2, compare, $E);
      H.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                comp = compare.call$2(t1.$index(a, great), el2);
                if (typeof comp !== "number")
                  return comp.$lt();
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        H.Sort__doSort(a, less, great, compare, $E);
      } else
        H.Sort__doSort(a, less, great, compare, $E);
    },
    CodeUnits: {
      "^": "UnmodifiableListBase;__internal$_string",
      get$length: function(_) {
        return this.__internal$_string.length;
      },
      $index: function(_, i) {
        return C.JSString_methods.codeUnitAt$1(this.__internal$_string, i);
      },
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      }
    },
    EfficientLengthIterable: {
      "^": "Iterable;"
    },
    ListIterable: {
      "^": "EfficientLengthIterable;$ti",
      get$iterator: function(_) {
        return new H.ListIterator(this, this.get$length(this), 0, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      },
      forEach$1: function(_, action) {
        var $length, i;
        H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "ListIterable", 0)]});
        $length = this.get$length(this);
        for (i = 0; i < $length; ++i) {
          action.call$1(this.elementAt$1(0, i));
          if ($length !== this.get$length(this))
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
      },
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      get$first: function(_) {
        if (this.get$length(this) === 0)
          throw H.wrapException(H.IterableElementError_noElement());
        return this.elementAt$1(0, 0);
      },
      contains$1: function(_, element) {
        var $length, i;
        $length = this.get$length(this);
        for (i = 0; i < $length; ++i) {
          if (J.$eq$(this.elementAt$1(0, i), element))
            return true;
          if ($length !== this.get$length(this))
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
        return false;
      },
      join$1: function(_, separator) {
        var $length, first, t1, i;
        $length = this.get$length(this);
        if (separator.length !== 0) {
          if ($length === 0)
            return "";
          first = H.S(this.elementAt$1(0, 0));
          if ($length !== this.get$length(this))
            throw H.wrapException(P.ConcurrentModificationError$(this));
          for (t1 = first, i = 1; i < $length; ++i) {
            t1 = t1 + separator + H.S(this.elementAt$1(0, i));
            if ($length !== this.get$length(this))
              throw H.wrapException(P.ConcurrentModificationError$(this));
          }
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        } else {
          for (i = 0, t1 = ""; i < $length; ++i) {
            t1 += H.S(this.elementAt$1(0, i));
            if ($length !== this.get$length(this))
              throw H.wrapException(P.ConcurrentModificationError$(this));
          }
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }
      }
    },
    SubListIterable: {
      "^": "ListIterable;__internal$_iterable,_start,_endOrLength,$ti",
      get$_endIndex: function() {
        var $length, t1;
        $length = J.get$length$asx(this.__internal$_iterable);
        t1 = this._endOrLength;
        if (t1 == null || t1 > $length)
          return $length;
        return t1;
      },
      get$_startIndex: function() {
        var $length, t1;
        $length = J.get$length$asx(this.__internal$_iterable);
        t1 = this._start;
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > $length)
          return $length;
        return t1;
      },
      get$length: function(_) {
        var $length, t1, t2;
        $length = J.get$length$asx(this.__internal$_iterable);
        t1 = this._start;
        if (typeof t1 !== "number")
          return t1.$ge();
        if (t1 >= $length)
          return 0;
        t2 = this._endOrLength;
        if (t2 == null || t2 >= $length)
          return $length - t1;
        if (typeof t2 !== "number")
          return t2.$sub();
        return t2 - t1;
      },
      elementAt$1: function(_, index) {
        var t1, realIndex;
        t1 = this.get$_startIndex();
        if (typeof t1 !== "number")
          return t1.$add();
        realIndex = t1 + index;
        if (index >= 0) {
          t1 = this.get$_endIndex();
          if (typeof t1 !== "number")
            return H.iae(t1);
          t1 = realIndex >= t1;
        } else
          t1 = true;
        if (t1)
          throw H.wrapException(P.IndexError$(index, this, "index", null, null));
        return J.elementAt$1$ax(this.__internal$_iterable, realIndex);
      },
      skip$1: function(_, count) {
        var t1, newStart;
        t1 = this._start;
        if (typeof t1 !== "number")
          return t1.$add();
        newStart = t1 + count;
        t1 = this._endOrLength;
        if (t1 != null && newStart >= t1)
          return new H.EmptyIterable(this.$ti);
        return H.SubListIterable$(this.__internal$_iterable, newStart, t1, H.getTypeArgumentByIndex(this, 0));
      },
      toList$1$growable: function(_, growable) {
        var start, t1, t2, end, end0, $length, t3, result, t4, i;
        start = this._start;
        t1 = this.__internal$_iterable;
        t2 = J.getInterceptor$asx(t1);
        end = t2.get$length(t1);
        end0 = this._endOrLength;
        if (end0 != null && end0 < end)
          end = end0;
        if (typeof end !== "number")
          return end.$sub();
        if (typeof start !== "number")
          return H.iae(start);
        $length = end - start;
        if ($length < 0)
          $length = 0;
        t3 = this.$ti;
        if (growable) {
          result = H.setRuntimeTypeInfo([], t3);
          C.JSArray_methods.set$length(result, $length);
        } else {
          t4 = new Array($length);
          t4.fixed$length = Array;
          result = H.setRuntimeTypeInfo(t4, t3);
        }
        for (i = 0; i < $length; ++i) {
          C.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
          if (t2.get$length(t1) < end)
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      static: {
        SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
          if (typeof _start !== "number")
            return _start.$lt();
          if (_endOrLength != null) {
            if (_endOrLength < 0)
              H.throwExpression(P.RangeError$range(_endOrLength, 0, null, "end", null));
            if (_start > _endOrLength)
              H.throwExpression(P.RangeError$range(_start, 0, _endOrLength, "start", null));
          }
          return new H.SubListIterable(_iterable, _start, _endOrLength, [$E]);
        }
      }
    },
    ListIterator: {
      "^": "Object;__internal$_iterable,__internal$_length,__internal$_index,0__internal$_current,$ti",
      get$current: function() {
        return this.__internal$_current;
      },
      moveNext$0: function() {
        var t1, t2, $length, t3;
        t1 = this.__internal$_iterable;
        t2 = J.getInterceptor$asx(t1);
        $length = t2.get$length(t1);
        if (this.__internal$_length !== $length)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        t3 = this.__internal$_index;
        if (t3 >= $length) {
          this.__internal$_current = null;
          return false;
        }
        this.__internal$_current = t2.elementAt$1(t1, t3);
        ++this.__internal$_index;
        return true;
      }
    },
    MappedIterable: {
      "^": "Iterable;__internal$_iterable,_f,$ti",
      get$iterator: function(_) {
        return new H.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti);
      },
      get$length: function(_) {
        return J.get$length$asx(this.__internal$_iterable);
      },
      get$isEmpty: function(_) {
        return J.get$isEmpty$asx(this.__internal$_iterable);
      },
      $asIterable: function($S, $T) {
        return [$T];
      },
      static: {
        MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
          H.assertSubtype(iterable, "$isIterable", [$S], "$asIterable");
          H.functionTypeCheck($function, {func: 1, ret: $T, args: [$S]});
          if (!!J.getInterceptor(iterable).$isEfficientLengthIterable)
            return new H.EfficientLengthMappedIterable(iterable, $function, [$S, $T]);
          return new H.MappedIterable(iterable, $function, [$S, $T]);
        }
      }
    },
    EfficientLengthMappedIterable: {
      "^": "MappedIterable;__internal$_iterable,_f,$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function($S, $T) {
        return [$T];
      }
    },
    MappedIterator: {
      "^": "Iterator;0__internal$_current,_iterator,_f,$ti",
      moveNext$0: function() {
        var t1 = this._iterator;
        if (t1.moveNext$0()) {
          this.__internal$_current = this._f.call$1(t1.get$current());
          return true;
        }
        this.__internal$_current = null;
        return false;
      },
      get$current: function() {
        return this.__internal$_current;
      },
      $asIterator: function($S, $T) {
        return [$T];
      }
    },
    MappedListIterable: {
      "^": "ListIterable;__internal$_source,_f,$ti",
      get$length: function(_) {
        return J.get$length$asx(this.__internal$_source);
      },
      elementAt$1: function(_, index) {
        return this._f.call$1(J.elementAt$1$ax(this.__internal$_source, index));
      },
      $asEfficientLengthIterable: function($S, $T) {
        return [$T];
      },
      $asListIterable: function($S, $T) {
        return [$T];
      },
      $asIterable: function($S, $T) {
        return [$T];
      }
    },
    WhereIterable: {
      "^": "Iterable;__internal$_iterable,_f,$ti",
      get$iterator: function(_) {
        return new H.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti);
      }
    },
    WhereIterator: {
      "^": "Iterator;_iterator,_f,$ti",
      moveNext$0: function() {
        var t1, t2;
        for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
          if (t2.call$1(t1.get$current()))
            return true;
        return false;
      },
      get$current: function() {
        return this._iterator.get$current();
      }
    },
    TakeWhileIterable: {
      "^": "Iterable;__internal$_iterable,_f,$ti",
      get$iterator: function(_) {
        return new H.TakeWhileIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, false, this.$ti);
      }
    },
    TakeWhileIterator: {
      "^": "Iterator;_iterator,_f,_isFinished,$ti",
      moveNext$0: function() {
        if (this._isFinished)
          return false;
        var t1 = this._iterator;
        if (!t1.moveNext$0() || !this._f.call$1(t1.get$current())) {
          this._isFinished = true;
          return false;
        }
        return true;
      },
      get$current: function() {
        if (this._isFinished)
          return;
        return this._iterator.get$current();
      }
    },
    EmptyIterable: {
      "^": "EfficientLengthIterable;$ti",
      get$iterator: function(_) {
        return C.C_EmptyIterator;
      },
      forEach$1: function(_, action) {
        H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
      },
      get$isEmpty: function(_) {
        return true;
      },
      get$length: function(_) {
        return 0;
      },
      contains$1: function(_, element) {
        return false;
      }
    },
    EmptyIterator: {
      "^": "Object;$ti",
      moveNext$0: function() {
        return false;
      },
      get$current: function() {
        return;
      }
    },
    FixedLengthListMixin: {
      "^": "Object;$ti",
      set$length: function(receiver, newLength) {
        throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
      },
      add$1: function(receiver, value) {
        H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0));
        throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
      }
    },
    UnmodifiableListMixin: {
      "^": "Object;$ti",
      $indexSet: function(_, index, value) {
        H.intTypeCheck(index);
        H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
        throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
      },
      set$length: function(_, newLength) {
        throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
      },
      add$1: function(_, value) {
        H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
        throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
      }
    },
    UnmodifiableListBase: {
      "^": "ListBase+UnmodifiableListMixin;"
    },
    ReversedListIterable: {
      "^": "ListIterable;__internal$_source,$ti",
      get$length: function(_) {
        return J.get$length$asx(this.__internal$_source);
      },
      elementAt$1: function(_, index) {
        var t1, t2;
        t1 = this.__internal$_source;
        t2 = J.getInterceptor$asx(t1);
        return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
      }
    },
    Symbol: {
      "^": "Object;__internal$_name",
      get$hashCode: function(_) {
        var hash = this._hashCode;
        if (hash != null)
          return hash;
        hash = 536870911 & 664597 * J.get$hashCode$(this.__internal$_name);
        this._hashCode = hash;
        return hash;
      },
      toString$0: function(_) {
        return 'Symbol("' + H.S(this.__internal$_name) + '")';
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other instanceof H.Symbol) {
          t1 = this.__internal$_name;
          t2 = other.__internal$_name;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        return t1;
      },
      $isSymbol0: 1
    }
  }], ["dart._js", "dart:_js",, H, {
    "^": "",
    isBrowserObject: function(o) {
      var t1 = J.getInterceptor(o);
      return !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isWindow || !!t1.$isWorkerGlobalScope;
    }
  }], ["_js_helper", "dart:_js_helper",, H, {
    "^": "",
    getType: [function(index) {
      return init.types[H.intTypeCheck(index)];
    }, null, null, 4, 0, null, 12],
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseInt: function(source, radix) {
      var match, decimalMatch, maxCharCode, digitsPart, t1, i;
      if (typeof source !== "string")
        H.throwExpression(H.argumentErrorValue(source));
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return;
      if (3 >= match.length)
        return H.ioore(match, 3);
      decimalMatch = H.stringTypeCheck(match[3]);
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return;
      }
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((C.JSString_methods._codeUnitAt$1(digitsPart, i) | 32) > maxCharCode)
            return;
      }
      return parseInt(source, radix);
    },
    Primitives_parseDouble: function(source) {
      var result, trimmed;
      if (typeof source !== "string")
        H.throwExpression(H.argumentErrorValue(source));
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
        return;
      result = parseFloat(source);
      if (isNaN(result)) {
        trimmed = J.trim$0$s(source);
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
          return result;
        return;
      }
      return result;
    },
    Primitives_objectTypeName: function(object) {
      var interceptor, interceptorConstructor, interceptorConstructorName, $name, dispatchName, objectConstructor, match, decompiledName, t1;
      interceptor = J.getInterceptor(object);
      interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      if ($name == null || interceptor === C.Interceptor_methods || !!J.getInterceptor(object).$isUnknownJavaScriptObject) {
        dispatchName = C.JS_CONST_u2C(object);
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
          if ($name == null)
            $name = dispatchName;
        } else
          $name = dispatchName;
      }
      $name = $name;
      if ($name.length > 1 && C.JSString_methods._codeUnitAt$1($name, 0) === 36)
        $name = C.JSString_methods.substring$1($name, 1);
      t1 = H.joinArgumentsV2(H.listTypeCheck(H.getRuntimeTypeInfo(object)), 0, null);
      return function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }($name + t1, init.mangledGlobalNames);
    },
    Primitives__fromCharCodeApply: function(array) {
      var end, result, i, i0, chunkEnd;
      H.listTypeCheck(array);
      end = J.get$length$asx(array);
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var a, t1, i;
      a = H.setRuntimeTypeInfo([], [P.int]);
      for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(codePoints, "$isIterable")); t1.moveNext$0();) {
        i = t1.get$current();
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          C.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          C.JSArray_methods.add$1(a, 55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          C.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, i;
      for (H.listSuperNativeTypeCheck(charCodes, "$isIterable"), t1 = J.get$iterator$ax(charCodes); t1.moveNext$0();) {
        i = t1.get$current();
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(H.listTypeCheck(charCodes));
    },
    Primitives_stringFromNativeUint8List: function(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      if (typeof charCode !== "number")
        return H.iae(charCode);
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((55296 | C.JSInt_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
        }
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._core$_value);
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
      var t1, $arguments, namedArgumentList;
      t1 = {};
      H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
        namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      return J.noSuchMethod$1$($function, new H.JSInvocationMirror(C.Symbol_call, "call" + "$" + t1.argumentCount + t1.names, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunctionWithPositionalArguments: function($function, positionalArguments) {
      var $arguments, t1;
      $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, true, null);
      t1 = $arguments.length;
      if (t1 === 0) {
        if (!!$function.call$0)
          return $function.call$0();
      } else if (t1 === 1) {
        if (!!$function.call$1)
          return $function.call$1($arguments[0]);
      } else if (t1 === 2) {
        if (!!$function.call$2)
          return $function.call$2($arguments[0], $arguments[1]);
      } else if (t1 === 3) {
        if (!!$function.call$3)
          return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
      } else if (t1 === 4) {
        if (!!$function.call$4)
          return $function.call$4($arguments[0], $arguments[1], $arguments[2], $arguments[3]);
      } else if (t1 === 5)
        if (!!$function.call$5)
          return $function.call$5($arguments[0], $arguments[1], $arguments[2], $arguments[3], $arguments[4]);
      return H.Primitives__genericApplyFunctionWithPositionalArguments($function, $arguments);
    },
    Primitives__genericApplyFunctionWithPositionalArguments: function($function, $arguments) {
      var argumentCount, jsFunction, info, requiredArgumentCount, maxArgumentCount, pos;
      argumentCount = $arguments.length;
      jsFunction = $function["call" + "$" + argumentCount];
      if (jsFunction == null) {
        jsFunction = J.getInterceptor($function)["call*"];
        if (jsFunction == null)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        info = H.ReflectionInfo_ReflectionInfo(jsFunction);
        requiredArgumentCount = info.requiredParameterCount;
        maxArgumentCount = requiredArgumentCount + info.optionalParameterCount;
        if (info.areOptionalParametersNamed || requiredArgumentCount > argumentCount || maxArgumentCount < argumentCount)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        $arguments = P.List_List$from($arguments, true, null);
        for (pos = argumentCount; pos < maxArgumentCount; ++pos)
          C.JSArray_methods.add$1($arguments, init.metadata[info.defaultValue$1(0, pos)]);
      }
      return jsFunction.apply($function, $arguments);
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1;
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, "index", null);
      $length = H.intTypeCheck(J.get$length$asx(indexable));
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, "index", null, $length);
      return P.RangeError$value(index, "index", null);
    },
    diagnoseRangeError: function(start, end, $length) {
      if (typeof start !== "number" || Math.floor(start) !== start)
        return new P.ArgumentError(true, start, "start", null);
      if (start < 0 || start > $length)
        return new P.RangeError(0, $length, true, start, "start", "Invalid value");
      if (end != null)
        if (end < start || end > $length)
          return new P.RangeError(start, $length, true, end, "end", "Invalid value");
      return new P.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkNum: function(value) {
      if (typeof value !== "number")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: [function() {
      return J.toString$0$(this.dartException);
    }, null, null, 0, 0, null],
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    unwrapException: function(ex) {
      var t1, message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t2;
      t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              return t1.call$1(H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(H.NullError$(H.stringTypeCheck(message), match));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, null, null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception == null)
        return new H._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var $length, index, index0, index1;
      $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: [function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      H.interceptedTypeCheck(closure, "$isFunction");
      switch (H.intTypeCheck(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    }, null, null, 24, 0, null, 13, 14, 15, 16, 17, 18],
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      H.intTypeCheck(arity);
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, jsArguments, propertyName) {
      var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, applyTrampoline, i, stub, stubCallName;
      $function = functions[0];
      callName = $function.$callName;
      if (!!J.getInterceptor(reflectionInfo).$isList) {
        $function.$reflectionInfo = reflectionInfo;
        functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
      } else
        functionType = reflectionInfo;
      $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        isIntercepted = jsArguments.length == 1 && true;
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
        isIntercepted = false;
      }
      if (typeof functionType == "number")
        signatureFunction = function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, functionType);
      else if (typeof functionType == "function")
        if (isStatic)
          signatureFunction = functionType;
        else {
          getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
          signatureFunction = function(f, r) {
            return function() {
              return f.apply({$receiver: r(this)}, arguments);
            };
          }(functionType, getReceiver);
        }
      else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (t1 = functions.length, applyTrampoline = trampoline, i = 1; i < t1; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        if (t2 == null) {
          t2 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t2;
        }
        return new Function(t1 + H.S(t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t2;
      }
      return new Function(t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf, getReceiver;
      getSelf = H.BoundClosure_selfOf;
      getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var t1, t2, stubName, arity, lookedUpFunction, t3, t4, $arguments;
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t2 = $.BoundClosure_receiverFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("receiver");
        $.BoundClosure_receiverFieldNameCache = t2;
      }
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t3 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t4 = !t3 || arity >= 28;
      if (t4)
        return H.Closure_cspForwardInterceptedCall(arity, !t3, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, jsArguments, $name) {
      var t1, t2;
      t1 = J.JSArray_markFixedList(H.listTypeCheck(functions));
      H.intTypeCheck(applyTrampolineIndex);
      t2 = !!J.getInterceptor(reflectionInfo).$isList ? J.JSArray_markFixedList(reflectionInfo) : reflectionInfo;
      return H.Closure_fromTearOff(receiver, t1, applyTrampolineIndex, t2, !!isStatic, jsArguments, $name);
    },
    stringTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "String"));
    },
    doubleTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "double"));
    },
    numTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "num"));
    },
    boolTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "boolean")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "bool"));
    },
    intTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number" && Math.floor(value) === value)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "int"));
    },
    propertyTypeError: function(value, property) {
      throw H.wrapException(H.TypeErrorImplementation$(value, H.stringTypeCheck(property).substring(3)));
    },
    propertyTypeCastError: function(value, property) {
      var t1 = J.getInterceptor$asx(property);
      throw H.wrapException(H.CastErrorImplementation$(value, t1.substring$2(property, 3, t1.get$length(property))));
    },
    interceptedTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if ((typeof value === "object" || typeof value === "function") && J.getInterceptor(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = (typeof value === "object" || typeof value === "function") && J.getInterceptor(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    numberOrStringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (typeof value === "number")
        return value;
      if (J.getInterceptor(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    stringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (J.getInterceptor(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listTypeCheck: function(value) {
      if (value == null)
        return value;
      if (!!J.getInterceptor(value).$isList)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "List"));
    },
    listSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (!!J.getInterceptor(value).$isList)
        return value;
      if (J.getInterceptor(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    extractFunctionTypeObjectFromInternal: function(o) {
      var signature;
      if ("$signature" in o) {
        signature = o.$signature;
        if (typeof signature == "number")
          return init.types[H.intTypeCheck(signature)];
        else
          return o.$signature();
      }
      return;
    },
    functionTypeTest: function(value, functionTypeRti) {
      var functionTypeObject, t1;
      if (value == null)
        return false;
      if (typeof value == "function")
        return true;
      functionTypeObject = H.extractFunctionTypeObjectFromInternal(J.getInterceptor(value));
      if (functionTypeObject == null)
        return false;
      t1 = H.isFunctionSubtypeV2(functionTypeObject, null, functionTypeRti, null);
      return t1;
    },
    functionTypeCheck: function(value, functionTypeRti) {
      var $self, t1;
      if (value == null)
        return value;
      if ($._inTypeAssertion)
        return value;
      $._inTypeAssertion = true;
      try {
        if (H.functionTypeTest(value, functionTypeRti))
          return value;
        $self = H.runtimeTypeToString(functionTypeRti);
        t1 = H.TypeErrorImplementation$(value, $self);
        throw H.wrapException(t1);
      } finally {
        $._inTypeAssertion = false;
      }
    },
    futureOrCheck: function(o, futureOrRti) {
      if (o != null && !H.checkSubtypeOfRuntimeType(o, futureOrRti))
        H.throwExpression(H.TypeErrorImplementation$(o, H.runtimeTypeToString(futureOrRti)));
      return o;
    },
    _typeDescription: function(value) {
      var functionTypeObject;
      if (value instanceof H.Closure) {
        functionTypeObject = H.extractFunctionTypeObjectFromInternal(J.getInterceptor(value));
        if (functionTypeObject != null)
          return H.runtimeTypeToString(functionTypeObject);
        return "Closure";
      }
      return H.Primitives_objectTypeName(value);
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(H.stringTypeCheck(staticName)));
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$ti = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$ti;
    },
    getRuntimeTypeArguments: function(interceptor, object, substitutionName) {
      return H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(object));
    },
    getRuntimeTypeArgumentIntercepted: function(interceptor, target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti;
      H.intTypeCheck(index);
      rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : rti[index];
    },
    runtimeTypeToString: function(rti) {
      var t1 = H.runtimeTypeToStringV2(rti, null);
      return t1;
    },
    runtimeTypeToStringV2: function(rti, genericContext) {
      var t1, t2;
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (rti == null)
        return "dynamic";
      if (rti === -1)
        return "void";
      if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return rti[0].builtin$cls + H.joinArgumentsV2(rti, 1, genericContext);
      if (typeof rti == "function")
        return rti.builtin$cls;
      if (rti === -2)
        return "dynamic";
      if (typeof rti === "number") {
        H.intTypeCheck(rti);
        if (genericContext == null || rti < 0 || rti >= genericContext.length)
          return "unexpected-generic-index:" + rti;
        t1 = genericContext.length;
        t2 = t1 - rti - 1;
        if (t2 < 0 || t2 >= t1)
          return H.ioore(genericContext, t2);
        return H.S(genericContext[t2]);
      }
      if ('func' in rti)
        return H._functionRtiToStringV2(rti, genericContext);
      if ('futureOr' in rti)
        return "FutureOr<" + H.runtimeTypeToStringV2("type" in rti ? rti.type : null, genericContext) + ">";
      return "unknown-reified-type";
    },
    _functionRtiToStringV2: function(rti, genericContext) {
      var t1, boundsRti, outerContextLength, offset, i, i0, typeParameters, typeSep, t2, boundRti, returnTypeText, $arguments, argumentsText, sep, _i, argument, optionalArguments, namedArguments, t3;
      t1 = [P.String];
      H.assertSubtype(genericContext, "$isList", t1, "$asList");
      if ("bounds" in rti) {
        boundsRti = rti.bounds;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], t1);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsRti.length, i0 = i; i0 > 0; --i0)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i0));
        for (typeParameters = "<", typeSep = "", i0 = 0; i0 < i; ++i0, typeSep = ", ") {
          typeParameters += typeSep;
          t1 = genericContext.length;
          t2 = t1 - i0 - 1;
          if (t2 < 0)
            return H.ioore(genericContext, t2);
          typeParameters = C.JSString_methods.$add(typeParameters, genericContext[t2]);
          boundRti = boundsRti[i0];
          if (boundRti != null && boundRti !== P.Object)
            typeParameters += " extends " + H.runtimeTypeToStringV2(boundRti, genericContext);
        }
        typeParameters += ">";
      } else {
        typeParameters = "";
        outerContextLength = null;
      }
      returnTypeText = !!rti.v ? "void" : H.runtimeTypeToStringV2(rti.ret, genericContext);
      if ("args" in rti) {
        $arguments = rti.args;
        for (t1 = $arguments.length, argumentsText = "", sep = "", _i = 0; _i < t1; ++_i, sep = ", ") {
          argument = $arguments[_i];
          argumentsText = argumentsText + sep + H.runtimeTypeToStringV2(argument, genericContext);
        }
      } else {
        argumentsText = "";
        sep = "";
      }
      if ("opt" in rti) {
        optionalArguments = rti.opt;
        argumentsText += sep + "[";
        for (t1 = optionalArguments.length, sep = "", _i = 0; _i < t1; ++_i, sep = ", ") {
          argument = optionalArguments[_i];
          argumentsText = argumentsText + sep + H.runtimeTypeToStringV2(argument, genericContext);
        }
        argumentsText += "]";
      }
      if ("named" in rti) {
        namedArguments = rti.named;
        argumentsText += sep + "{";
        for (t1 = H.extractKeys(namedArguments), t2 = t1.length, sep = "", _i = 0; _i < t2; ++_i, sep = ", ") {
          t3 = H.stringTypeCheck(t1[_i]);
          argumentsText = argumentsText + sep + H.runtimeTypeToStringV2(namedArguments[t3], genericContext) + (" " + H.S(t3));
        }
        argumentsText += "}";
      }
      if (outerContextLength != null)
        genericContext.length = outerContextLength;
      return typeParameters + "(" + argumentsText + ") => " + returnTypeText;
    },
    joinArgumentsV2: function(types, startIndex, genericContext) {
      var buffer, index, separator, allDynamic, t1, argument;
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (types == null)
        return "";
      buffer = new P.StringBuffer("");
      for (index = startIndex, separator = "", allDynamic = true, t1 = ""; index < types.length; ++index, separator = ", ") {
        buffer._contents = t1 + separator;
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        t1 = buffer._contents += H.runtimeTypeToStringV2(argument, genericContext);
      }
      t1 = "<" + buffer.toString$0(0) + ">";
      return t1;
    },
    getRti: function(o) {
      var functionRti, type, rti;
      if (o instanceof H.Closure) {
        functionRti = H.extractFunctionTypeObjectFromInternal(J.getInterceptor(o));
        if (functionRti != null)
          return functionRti;
      }
      type = J.getInterceptor(o).constructor;
      if (o == null)
        return type;
      if (typeof o != "object")
        return type;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return type;
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      substitution = substitution.apply(null, $arguments);
      if (substitution == null)
        return;
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        return substitution;
      if (typeof substitution == "function")
        return substitution.apply(null, $arguments);
      return $arguments;
    },
    checkSubtypeV2: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor(object);
      if (interceptor[isField] == null)
        return false;
      return H.areSubtypesV2(H.substitute(interceptor[asField], $arguments), null, checks, null);
    },
    subtypeCast: function(object, isField, checks, asField) {
      var t1, t2;
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return object;
      t1 = H.checkSubtypeV2(object, isField, checks, asField);
      if (t1)
        return object;
      t1 = isField.substring(3);
      t2 = H.joinArgumentsV2(checks, 0, null);
      throw H.wrapException(H.CastErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(t1 + t2, init.mangledGlobalNames)));
    },
    assertSubtype: function(object, isField, checks, asField) {
      var t1, t2;
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return object;
      t1 = H.checkSubtypeV2(object, isField, checks, asField);
      if (t1)
        return object;
      t1 = isField.substring(3);
      t2 = H.joinArgumentsV2(checks, 0, null);
      throw H.wrapException(H.TypeErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(t1 + t2, init.mangledGlobalNames)));
    },
    assertIsSubtype: function(subtype, supertype, prefix, infix, suffix) {
      var t1;
      H.stringTypeCheck(prefix);
      H.stringTypeCheck(infix);
      H.stringTypeCheck(suffix);
      t1 = H.isSubtypeV2(subtype, null, supertype, null);
      if (!t1)
        H.throwTypeError("TypeError: " + H.S(prefix) + H.runtimeTypeToString(subtype) + H.S(infix) + H.runtimeTypeToString(supertype) + H.S(suffix));
    },
    throwTypeError: function(message) {
      throw H.wrapException(new H.TypeErrorImplementation(H.stringTypeCheck(message)));
    },
    areSubtypesV2: function(s, sEnv, t, tEnv) {
      var len, i;
      if (t == null)
        return true;
      if (s == null) {
        len = t.length;
        for (i = 0; i < len; ++i)
          if (!H.isSubtypeV2(null, null, t[i], tEnv))
            return false;
        return true;
      }
      len = s.length;
      for (i = 0; i < len; ++i)
        if (!H.isSubtypeV2(s[i], sEnv, t[i], tEnv))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return signature.apply(context, H.substitute(J.getInterceptor(context)["$as" + H.S(contextName)], H.getRuntimeTypeInfo(context)));
    },
    isSupertypeOfNullRecursive: function(type) {
      var typeArgument;
      if (typeof type === "number")
        return false;
      if ('futureOr' in type) {
        typeArgument = "type" in type ? type.type : null;
        return type == null || type.builtin$cls === "Object" || type.builtin$cls === "Null" || type === -1 || type === -2 || H.isSupertypeOfNullRecursive(typeArgument);
      }
      return false;
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var t1, type, rti;
      if (o == null) {
        t1 = t == null || t.builtin$cls === "Object" || t.builtin$cls === "Null" || t === -1 || t === -2 || H.isSupertypeOfNullRecursive(t);
        return t1;
      }
      t1 = t == null || t === -1 || t.builtin$cls === "Object" || t === -2;
      if (t1)
        return true;
      if (typeof t == "object") {
        t1 = 'futureOr' in t;
        if (t1)
          if (H.checkSubtypeOfRuntimeType(o, "type" in t ? t.type : null))
            return true;
        if ('func' in t)
          return H.functionTypeTest(o, t);
      }
      type = J.getInterceptor(o).constructor;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      t1 = H.isSubtypeV2(type, null, t, null);
      return t1;
    },
    assertSubtypeOfRuntimeType: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.TypeErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    isSubtypeV2: function(s, sEnv, t, tEnv) {
      var t1, typeOfS, tTypeArgument, futureSubstitution, futureArguments, t2, typeOfT, typeOfTString, substitution;
      if (s === t)
        return true;
      if (t == null || t === -1 || t.builtin$cls === "Object" || t === -2)
        return true;
      if (s === -2)
        return true;
      if (s == null || s === -1 || s.builtin$cls === "Object" || s === -2) {
        if (typeof t === "number")
          return false;
        if ('futureOr' in t)
          return H.isSubtypeV2(s, sEnv, "type" in t ? t.type : null, tEnv);
        return false;
      }
      if (typeof s === "number")
        return false;
      if (typeof t === "number")
        return false;
      if (s.builtin$cls === "Null")
        return true;
      if ('func' in t)
        return H.isFunctionSubtypeV2(s, sEnv, t, tEnv);
      if ('func' in s)
        return t.builtin$cls === "Function";
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      typeOfS = t1 ? s[0] : s;
      if ('futureOr' in t) {
        tTypeArgument = "type" in t ? t.type : null;
        if ('futureOr' in s)
          return H.isSubtypeV2("type" in s ? s.type : null, sEnv, tTypeArgument, tEnv);
        else if (H.isSubtypeV2(s, sEnv, tTypeArgument, tEnv))
          return true;
        else {
          if (!('$is' + "Future" in typeOfS.prototype))
            return false;
          futureSubstitution = typeOfS.prototype["$as" + "Future"];
          futureArguments = H.substitute(futureSubstitution, t1 ? s.slice(1) : null);
          return H.isSubtypeV2(typeof futureArguments === "object" && futureArguments !== null && futureArguments.constructor === Array ? futureArguments[0] : null, sEnv, tTypeArgument, tEnv);
        }
      }
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      typeOfT = t2 ? t[0] : t;
      if (typeOfT !== typeOfS) {
        typeOfTString = H.runtimeTypeToString(typeOfT);
        if (!('$is' + typeOfTString in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + typeOfTString];
      } else
        substitution = null;
      if (!t2)
        return true;
      t1 = t1 ? s.slice(1) : null;
      t2 = t.slice(1);
      return H.areSubtypesV2(H.substitute(substitution, t1), sEnv, t2, tEnv);
    },
    isFunctionSubtypeV2: function(s, sEnv, t, tEnv) {
      var sBounds, tBounds, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, tPos, sPos, sNamedParameters, tNamedParameters;
      if (!('func' in s))
        return false;
      if ("bounds" in s) {
        if (!("bounds" in t))
          return false;
        sBounds = s.bounds;
        tBounds = t.bounds;
        if (sBounds.length !== tBounds.length)
          return false;
      } else if ("bounds" in t)
        return false;
      if (!H.isSubtypeV2(s.ret, sEnv, t.ret, tEnv))
        return false;
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
      tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      for (pos = 0; pos < sParametersLen; ++pos)
        if (!H.isSubtypeV2(tParameterTypes[pos], tEnv, sParameterTypes[pos], sEnv))
          return false;
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos)
        if (!H.isSubtypeV2(tParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos)
        if (!H.isSubtypeV2(tOptionalParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      sNamedParameters = s.named;
      tNamedParameters = t.named;
      if (tNamedParameters == null)
        return true;
      if (sNamedParameters == null)
        return false;
      return H.namedParametersSubtypeCheckV2(sNamedParameters, sEnv, tNamedParameters, tEnv);
    },
    namedParametersSubtypeCheckV2: function(s, sEnv, t, tEnv) {
      var names, t1, i, $name;
      names = Object.getOwnPropertyNames(t);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        if (!H.isSubtypeV2(t[$name], tEnv, s[$name], sEnv))
          return false;
      }
      return true;
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, H.stringTypeCheck(property), {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var tag, record, interceptor, interceptorClass, mark, t1;
      tag = H.stringTypeCheck($.getTagFunction.call$1(obj));
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = H.stringTypeCheck($.alternateTagFunction.call$2(obj, tag));
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
      hooks = C.JS_CONST_bDt();
      hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_u2C), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1;
      if (typeof other === "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else {
        t1 = J.getInterceptor(other);
        if (!!t1.$isJSSyntaxRegExp) {
          t1 = C.JSString_methods.substring$1(receiver, startIndex);
          return other._nativeRegExp.test(t1);
        } else {
          t1 = t1.allMatches$1(other, C.JSString_methods.substring$1(receiver, startIndex));
          return !t1.get$isEmpty(t1);
        }
      }
    },
    stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
      var $length, t1, i;
      if (pattern === "")
        if (receiver === "")
          return replacement;
        else {
          $length = receiver.length;
          for (t1 = replacement, i = 0; i < $length; ++i)
            t1 = t1 + receiver[i] + replacement;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }
      else
        return receiver.replace(new RegExp(pattern.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&"), 'g'), replacement.replace(/\$/g, "$$$$"));
    },
    _stringIdentity: [function(string) {
      return string;
    }, "call$1", "_js_helper___stringIdentity$closure", 4, 0, 10],
    stringReplaceAllFuncUnchecked: function(receiver, pattern, onMatch, onNonMatch) {
      var t1, startIndex, t2, t3, t4, t5;
      if (onNonMatch == null)
        onNonMatch = H._js_helper___stringIdentity$closure();
      for (t1 = pattern.allMatches$1(0, receiver), t1 = new H._AllMatchesIterator(t1._re, t1._string, t1.__js_helper$_start), startIndex = 0, t2 = ""; t1.moveNext$0(); t2 = t3) {
        t3 = t1.__js_helper$_current;
        t4 = t3._match;
        t5 = t4.index;
        t3 = t2 + H.S(onNonMatch.call$1(C.JSString_methods.substring$2(receiver, startIndex, t5))) + H.S(onMatch.call$1(t3));
        startIndex = t5 + t4[0].length;
      }
      t1 = t2 + H.S(onNonMatch.call$1(C.JSString_methods.substring$1(receiver, startIndex)));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    ConstantMapView: {
      "^": "UnmodifiableMapView;_map,$ti"
    },
    ConstantMap: {
      "^": "Object;$ti",
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      get$isNotEmpty: function(_) {
        return this.get$length(this) !== 0;
      },
      toString$0: function(_) {
        return P.MapBase_mapToString(this);
      },
      $isMap: 1
    },
    ConstantStringMap: {
      "^": "ConstantMap;__js_helper$_length,_jsObject,__js_helper$_keys,$ti",
      get$length: function(_) {
        return this.__js_helper$_length;
      },
      containsKey$1: function(key) {
        if (typeof key !== "string")
          return false;
        if ("__proto__" === key)
          return false;
        return this._jsObject.hasOwnProperty(key);
      },
      $index: function(_, key) {
        if (!this.containsKey$1(key))
          return;
        return this._fetch$1(key);
      },
      _fetch$1: function(key) {
        return this._jsObject[H.stringTypeCheck(key)];
      },
      forEach$1: function(_, f) {
        var t1, keys, t2, i, key;
        t1 = H.getTypeArgumentByIndex(this, 1);
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), t1]});
        keys = this.__js_helper$_keys;
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          key = keys[i];
          f.call$2(key, H.assertSubtypeOfRuntimeType(this._fetch$1(key), t1));
        }
      },
      get$keys: function() {
        return new H._ConstantMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
      }
    },
    _ConstantMapKeyIterable: {
      "^": "Iterable;__js_helper$_map,$ti",
      get$iterator: function(_) {
        var t1 = this.__js_helper$_map.__js_helper$_keys;
        return new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$length: function(_) {
        return this.__js_helper$_map.__js_helper$_keys.length;
      }
    },
    JSInvocationMirror: {
      "^": "Object;__js_helper$_memberName,_internalName,_kind,0__js_helper$_typeArguments,__js_helper$_arguments,_namedArgumentNames,_typeArgumentCount,0_namedIndices",
      get$memberName: function() {
        var t1, t2, unmangledName, $name;
        t1 = this.__js_helper$_memberName;
        if (!!J.getInterceptor(t1).$isSymbol0)
          return t1;
        H.stringTypeCheck(t1);
        t2 = $.$get$mangledNames();
        unmangledName = t2.$index(0, t1);
        if (unmangledName != null) {
          t1 = unmangledName.split(":");
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          $name = t1[0];
        } else {
          if (t2.$index(0, this._internalName) == null)
            P.print("Warning: '" + H.S(t1) + "' is used reflectively but not in MirrorsUsed. This will break minified code.");
          $name = t1;
        }
        t1 = new H.Symbol($name);
        this.__js_helper$_memberName = t1;
        return t1;
      },
      get$positionalArguments: function() {
        var t1, t2, t3, t4, t5, argumentCount, list, index;
        if (this._kind === 1)
          return C.List_empty;
        t1 = this.__js_helper$_arguments;
        t2 = J.getInterceptor$asx(t1);
        t3 = t2.get$length(t1);
        t4 = J.get$length$asx(this._namedArgumentNames);
        t5 = this._typeArgumentCount;
        if (typeof t5 !== "number")
          return H.iae(t5);
        argumentCount = t3 - t4 - t5;
        if (argumentCount === 0)
          return C.List_empty;
        list = [];
        for (index = 0; index < argumentCount; ++index)
          list.push(t2.$index(t1, index));
        return J.JSArray_markUnmodifiableList(list);
      },
      get$namedArguments: function() {
        var t1, t2, namedArgumentCount, t3, t4, t5, t6, namedArgumentsStartIndex, map, i;
        if (this._kind !== 0)
          return C.Map_empty;
        t1 = this._namedArgumentNames;
        t2 = J.getInterceptor$asx(t1);
        namedArgumentCount = t2.get$length(t1);
        t3 = this.__js_helper$_arguments;
        t4 = J.getInterceptor$asx(t3);
        t5 = t4.get$length(t3);
        t6 = this._typeArgumentCount;
        if (typeof t6 !== "number")
          return H.iae(t6);
        namedArgumentsStartIndex = t5 - namedArgumentCount - t6;
        if (namedArgumentCount === 0)
          return C.Map_empty;
        t5 = P.Symbol0;
        map = new H.JsLinkedHashMap(0, 0, [t5, null]);
        for (i = 0; i < namedArgumentCount; ++i)
          map.$indexSet(0, new H.Symbol(H.stringTypeCheck(t2.$index(t1, i))), t4.$index(t3, namedArgumentsStartIndex + i));
        return new H.ConstantMapView(map, [t5, null]);
      },
      $isInvocation: 1
    },
    ReflectionInfo: {
      "^": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,0cachedSortedIndices",
      defaultValue$1: function(_, parameter) {
        var t1 = this.requiredParameterCount;
        if (typeof parameter !== "number")
          return parameter.$lt();
        if (parameter < t1)
          return;
        return this.data[3 + parameter - t1];
      },
      static: {
        ReflectionInfo_ReflectionInfo: function(jsFunction) {
          var data, requiredParametersInfo, optionalParametersInfo;
          data = jsFunction.$reflectionInfo;
          if (data == null)
            return;
          data = J.JSArray_markFixedList(data);
          requiredParametersInfo = data[0];
          optionalParametersInfo = data[1];
          return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 2) === 2, requiredParametersInfo >> 2, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2]);
        }
      }
    },
    Primitives_functionNoSuchMethod_closure: {
      "^": "Closure:67;_box_0,namedArgumentList,$arguments",
      call$2: function($name, argument) {
        var t1;
        H.stringTypeCheck($name);
        t1 = this._box_0;
        t1.names = t1.names + "$" + H.S($name);
        C.JSArray_methods.add$1(this.namedArgumentList, $name);
        C.JSArray_methods.add$1(this.$arguments, argument);
        ++t1.argumentCount;
      }
    },
    TypeErrorDecoder: {
      "^": "Object;_pattern,__js_helper$_arguments,_argumentsExpr,_expr,_method,_receiver",
      matchTypeError$1: function(message) {
        var match, result, t1;
        match = new RegExp(this._pattern).exec(message);
        if (match == null)
          return;
        result = Object.create(null);
        t1 = this.__js_helper$_arguments;
        if (t1 !== -1)
          result.arguments = match[t1 + 1];
        t1 = this._argumentsExpr;
        if (t1 !== -1)
          result.argumentsExpr = match[t1 + 1];
        t1 = this._expr;
        if (t1 !== -1)
          result.expr = match[t1 + 1];
        t1 = this._method;
        if (t1 !== -1)
          result.method = match[t1 + 1];
        t1 = this._receiver;
        if (t1 !== -1)
          result.receiver = match[t1 + 1];
        return result;
      },
      static: {
        TypeErrorDecoder_extractPattern: function(message) {
          var match, $arguments, argumentsExpr, expr, method, receiver;
          message = message.replace(String({}), '$receiver$').replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
          match = message.match(/\\\$[a-zA-Z]+\\\$/g);
          if (match == null)
            match = H.setRuntimeTypeInfo([], [P.String]);
          $arguments = match.indexOf("\\$arguments\\$");
          argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
          expr = match.indexOf("\\$expr\\$");
          method = match.indexOf("\\$method\\$");
          receiver = match.indexOf("\\$receiver\\$");
          return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
        },
        TypeErrorDecoder_provokeCallErrorOn: function(expression) {
          return function($expr$) {
            var $argumentsExpr$ = '$arguments$';
            try {
              $expr$.$method$($argumentsExpr$);
            } catch (e) {
              return e.message;
            }
          }(expression);
        },
        TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
          return function($expr$) {
            try {
              $expr$.$method$;
            } catch (e) {
              return e.message;
            }
          }(expression);
        }
      }
    },
    NullError: {
      "^": "Error;__js_helper$_message,_method",
      toString$0: function(_) {
        var t1 = this._method;
        if (t1 == null)
          return "NullError: " + H.S(this.__js_helper$_message);
        return "NullError: method not found: '" + t1 + "' on null";
      },
      static: {
        NullError$: function(_message, match) {
          return new H.NullError(_message, match == null ? null : match.method);
        }
      }
    },
    JsNoSuchMethodError: {
      "^": "Error;__js_helper$_message,_method,_receiver",
      toString$0: function(_) {
        var t1, t2;
        t1 = this._method;
        if (t1 == null)
          return "NoSuchMethodError: " + H.S(this.__js_helper$_message);
        t2 = this._receiver;
        if (t2 == null)
          return "NoSuchMethodError: method not found: '" + t1 + "' (" + H.S(this.__js_helper$_message) + ")";
        return "NoSuchMethodError: method not found: '" + t1 + "' on '" + t2 + "' (" + H.S(this.__js_helper$_message) + ")";
      },
      static: {
        JsNoSuchMethodError$: function(_message, match) {
          var t1, t2;
          t1 = match == null;
          t2 = t1 ? null : match.method;
          return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
        }
      }
    },
    UnknownJsTypeError: {
      "^": "Error;__js_helper$_message",
      toString$0: function(_) {
        var t1 = this.__js_helper$_message;
        return t1.length === 0 ? "Error" : "Error: " + t1;
      }
    },
    unwrapException_saveStackTrace: {
      "^": "Closure:7;ex",
      call$1: function(error) {
        if (!!J.getInterceptor(error).$isError)
          if (error.$thrownJsError == null)
            error.$thrownJsError = this.ex;
        return error;
      }
    },
    _StackTrace: {
      "^": "Object;_exception,0_trace",
      toString$0: function(_) {
        var t1, trace;
        t1 = this._trace;
        if (t1 != null)
          return t1;
        t1 = this._exception;
        trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
        t1 = trace == null ? "" : trace;
        this._trace = t1;
        return t1;
      },
      $isStackTrace: 1
    },
    Closure: {
      "^": "Object;",
      toString$0: function(_) {
        return "Closure '" + H.Primitives_objectTypeName(this).trim() + "'";
      },
      get$$call: function() {
        return this;
      },
      $isFunction: 1,
      get$$call: function() {
        return this;
      }
    },
    TearOffClosure: {
      "^": "Closure;"
    },
    StaticClosure: {
      "^": "TearOffClosure;",
      toString$0: function(_) {
        var $name = this.$static_name;
        if ($name == null)
          return "Closure of unknown static method";
        return "Closure '" + $name + "'";
      }
    },
    BoundClosure: {
      "^": "TearOffClosure;_self,__js_helper$_target,_receiver,_name",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof H.BoundClosure))
          return false;
        return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
      },
      get$hashCode: function(_) {
        var t1, receiverHashCode;
        t1 = this._receiver;
        if (t1 == null)
          receiverHashCode = H.Primitives_objectHashCode(this._self);
        else
          receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
        return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
      },
      toString$0: function(_) {
        var receiver = this._receiver;
        if (receiver == null)
          receiver = this._self;
        return "Closure '" + H.S(this._name) + "' of " + ("Instance of '" + H.Primitives_objectTypeName(receiver) + "'");
      },
      static: {
        BoundClosure_selfOf: function(closure) {
          return closure._self;
        },
        BoundClosure_receiverOf: function(closure) {
          return closure._receiver;
        },
        BoundClosure_computeFieldNamed: function(fieldName) {
          var template, names, t1, i, $name;
          template = new H.BoundClosure("self", "target", "receiver", "name");
          names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
          for (t1 = names.length, i = 0; i < t1; ++i) {
            $name = names[i];
            if (template[$name] === fieldName)
              return $name;
          }
        }
      }
    },
    TypeErrorImplementation: {
      "^": "Error;message",
      toString$0: function(_) {
        return this.message;
      },
      static: {
        TypeErrorImplementation$: function(value, type) {
          return new H.TypeErrorImplementation("TypeError: " + H.S(P.Error_safeToString(value)) + ": type '" + H._typeDescription(value) + "' is not a subtype of type '" + type + "'");
        }
      }
    },
    CastErrorImplementation: {
      "^": "Error;message",
      toString$0: function(_) {
        return this.message;
      },
      static: {
        CastErrorImplementation$: function(value, type) {
          return new H.CastErrorImplementation("CastError: " + H.S(P.Error_safeToString(value)) + ": type '" + H._typeDescription(value) + "' is not a subtype of type '" + type + "'");
        }
      }
    },
    RuntimeError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "RuntimeError: " + H.S(this.message);
      },
      static: {
        RuntimeError$: function(message) {
          return new H.RuntimeError(message);
        }
      }
    },
    TypeImpl: {
      "^": "Object;_rti,0__typeName,0_unmangledName,0_hashCode",
      get$_typeName: function() {
        var t1 = this.__typeName;
        if (t1 == null) {
          t1 = H.runtimeTypeToString(this._rti);
          this.__typeName = t1;
        }
        return t1;
      },
      toString$0: function(_) {
        var t1 = this._unmangledName;
        if (t1 == null) {
          t1 = function(str, names) {
            return str.replace(/[^<,> ]+/g, function(m) {
              return names[m] || m;
            });
          }(this.get$_typeName(), init.mangledGlobalNames);
          this._unmangledName = t1;
        }
        return t1;
      },
      get$hashCode: function(_) {
        var t1 = this._hashCode;
        if (t1 == null) {
          t1 = C.JSString_methods.get$hashCode(this.get$_typeName());
          this._hashCode = t1;
        }
        return t1;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H.TypeImpl && this.get$_typeName() === other.get$_typeName();
      }
    },
    JsLinkedHashMap: {
      "^": "MapBase;__js_helper$_length,0__js_helper$_strings,0__js_helper$_nums,0__js_helper$_rest,0__js_helper$_first,0__js_helper$_last,__js_helper$_modifications,$ti",
      get$length: function(_) {
        return this.__js_helper$_length;
      },
      get$isEmpty: function(_) {
        return this.__js_helper$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return !this.get$isEmpty(this);
      },
      get$keys: function() {
        return new H.LinkedHashMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
      },
      containsKey$1: function(key) {
        var strings, t1;
        if (typeof key === "string") {
          strings = this.__js_helper$_strings;
          if (strings == null)
            return false;
          return this._containsTableEntry$2(strings, key);
        } else {
          t1 = this.internalContainsKey$1(key);
          return t1;
        }
      },
      internalContainsKey$1: function(key) {
        var rest = this.__js_helper$_rest;
        if (rest == null)
          return false;
        return this.internalFindBucketIndex$2(this._getTableBucket$2(rest, this.internalComputeHashCode$1(key)), key) >= 0;
      },
      $index: function(_, key) {
        var strings, cell, t1, nums;
        if (typeof key === "string") {
          strings = this.__js_helper$_strings;
          if (strings == null)
            return;
          cell = this._getTableCell$2(strings, key);
          t1 = cell == null ? null : cell.hashMapCellValue;
          return t1;
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this.__js_helper$_nums;
          if (nums == null)
            return;
          cell = this._getTableCell$2(nums, key);
          t1 = cell == null ? null : cell.hashMapCellValue;
          return t1;
        } else
          return this.internalGet$1(key);
      },
      internalGet$1: function(key) {
        var rest, bucket, index;
        rest = this.__js_helper$_rest;
        if (rest == null)
          return;
        bucket = this._getTableBucket$2(rest, this.internalComputeHashCode$1(key));
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        return bucket[index].hashMapCellValue;
      },
      $indexSet: function(_, key, value) {
        var strings, nums;
        H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
        if (typeof key === "string") {
          strings = this.__js_helper$_strings;
          if (strings == null) {
            strings = this._newHashTable$0();
            this.__js_helper$_strings = strings;
          }
          this.__js_helper$_addHashTableEntry$3(strings, key, value);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this.__js_helper$_nums;
          if (nums == null) {
            nums = this._newHashTable$0();
            this.__js_helper$_nums = nums;
          }
          this.__js_helper$_addHashTableEntry$3(nums, key, value);
        } else
          this.internalSet$2(key, value);
      },
      internalSet$2: function(key, value) {
        var rest, hash, bucket, index;
        H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
        rest = this.__js_helper$_rest;
        if (rest == null) {
          rest = this._newHashTable$0();
          this.__js_helper$_rest = rest;
        }
        hash = this.internalComputeHashCode$1(key);
        bucket = this._getTableBucket$2(rest, hash);
        if (bucket == null)
          this._setTableEntry$3(rest, hash, [this._newLinkedCell$2(key, value)]);
        else {
          index = this.internalFindBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].hashMapCellValue = value;
          else
            bucket.push(this._newLinkedCell$2(key, value));
        }
      },
      clear$0: function(_) {
        if (this.__js_helper$_length > 0) {
          this.__js_helper$_last = null;
          this.__js_helper$_first = null;
          this.__js_helper$_rest = null;
          this.__js_helper$_nums = null;
          this.__js_helper$_strings = null;
          this.__js_helper$_length = 0;
          this._modified$0();
        }
      },
      forEach$1: function(_, action) {
        var cell, modifications;
        H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]});
        cell = this.__js_helper$_first;
        modifications = this.__js_helper$_modifications;
        for (; cell != null;) {
          action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
          if (modifications !== this.__js_helper$_modifications)
            throw H.wrapException(P.ConcurrentModificationError$(this));
          cell = cell.__js_helper$_next;
        }
      },
      __js_helper$_addHashTableEntry$3: function(table, key, value) {
        var cell;
        H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
        cell = this._getTableCell$2(table, key);
        if (cell == null)
          this._setTableEntry$3(table, key, this._newLinkedCell$2(key, value));
        else
          cell.hashMapCellValue = value;
      },
      _modified$0: function() {
        this.__js_helper$_modifications = this.__js_helper$_modifications + 1 & 67108863;
      },
      _newLinkedCell$2: function(key, value) {
        var cell, last;
        cell = new H.LinkedHashMapCell(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
        if (this.__js_helper$_first == null) {
          this.__js_helper$_last = cell;
          this.__js_helper$_first = cell;
        } else {
          last = this.__js_helper$_last;
          cell._previous = last;
          last.__js_helper$_next = cell;
          this.__js_helper$_last = cell;
        }
        ++this.__js_helper$_length;
        this._modified$0();
        return cell;
      },
      internalComputeHashCode$1: function(key) {
        return J.get$hashCode$(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i].hashMapCellKey, key))
            return i;
        return -1;
      },
      toString$0: function(_) {
        return P.MapBase_mapToString(this);
      },
      _getTableCell$2: function(table, key) {
        return table[key];
      },
      _getTableBucket$2: function(table, key) {
        return table[key];
      },
      _setTableEntry$3: function(table, key, value) {
        table[key] = value;
      },
      _deleteTableEntry$2: function(table, key) {
        delete table[key];
      },
      _containsTableEntry$2: function(table, key) {
        return this._getTableCell$2(table, key) != null;
      },
      _newHashTable$0: function() {
        var table = Object.create(null);
        this._setTableEntry$3(table, "<non-identifier-key>", table);
        this._deleteTableEntry$2(table, "<non-identifier-key>");
        return table;
      },
      $isLinkedHashMap: 1
    },
    LinkedHashMapCell: {
      "^": "Object;hashMapCellKey,hashMapCellValue,0__js_helper$_next,0_previous"
    },
    LinkedHashMapKeyIterable: {
      "^": "EfficientLengthIterable;__js_helper$_map,$ti",
      get$length: function(_) {
        return this.__js_helper$_map.__js_helper$_length;
      },
      get$isEmpty: function(_) {
        return this.__js_helper$_map.__js_helper$_length === 0;
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this.__js_helper$_map;
        t2 = new H.LinkedHashMapKeyIterator(t1, t1.__js_helper$_modifications, this.$ti);
        t2.__js_helper$_cell = t1.__js_helper$_first;
        return t2;
      },
      contains$1: function(_, element) {
        return this.__js_helper$_map.containsKey$1(element);
      },
      forEach$1: function(_, f) {
        var t1, cell, modifications;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
        t1 = this.__js_helper$_map;
        cell = t1.__js_helper$_first;
        modifications = t1.__js_helper$_modifications;
        for (; cell != null;) {
          f.call$1(cell.hashMapCellKey);
          if (modifications !== t1.__js_helper$_modifications)
            throw H.wrapException(P.ConcurrentModificationError$(t1));
          cell = cell.__js_helper$_next;
        }
      }
    },
    LinkedHashMapKeyIterator: {
      "^": "Object;__js_helper$_map,__js_helper$_modifications,0__js_helper$_cell,0__js_helper$_current,$ti",
      get$current: function() {
        return this.__js_helper$_current;
      },
      moveNext$0: function() {
        var t1 = this.__js_helper$_map;
        if (this.__js_helper$_modifications !== t1.__js_helper$_modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        else {
          t1 = this.__js_helper$_cell;
          if (t1 == null) {
            this.__js_helper$_current = null;
            return false;
          } else {
            this.__js_helper$_current = t1.hashMapCellKey;
            this.__js_helper$_cell = t1.__js_helper$_next;
            return true;
          }
        }
      }
    },
    initHooks_closure: {
      "^": "Closure:7;getTag",
      call$1: function(o) {
        return this.getTag(o);
      }
    },
    initHooks_closure0: {
      "^": "Closure:53;getUnknownTag",
      call$2: function(o, tag) {
        return this.getUnknownTag(o, tag);
      }
    },
    initHooks_closure1: {
      "^": "Closure:33;prototypeForTag",
      call$1: function(tag) {
        return this.prototypeForTag(H.stringTypeCheck(tag));
      }
    },
    JSSyntaxRegExp: {
      "^": "Object;pattern,_nativeRegExp,0_nativeGlobalRegExp,0_nativeAnchoredRegExp",
      toString$0: function(_) {
        return "RegExp/" + this.pattern + "/";
      },
      get$_nativeGlobalVersion: function() {
        var t1 = this._nativeGlobalRegExp;
        if (t1 != null)
          return t1;
        t1 = this._nativeRegExp;
        t1 = H.JSSyntaxRegExp_makeNative(this.pattern, t1.multiline, !t1.ignoreCase, true);
        this._nativeGlobalRegExp = t1;
        return t1;
      },
      get$_nativeAnchoredVersion: function() {
        var t1 = this._nativeAnchoredRegExp;
        if (t1 != null)
          return t1;
        t1 = this._nativeRegExp;
        t1 = H.JSSyntaxRegExp_makeNative(this.pattern + "|()", t1.multiline, !t1.ignoreCase, true);
        this._nativeAnchoredRegExp = t1;
        return t1;
      },
      allMatches$2: function(_, string, start) {
        if (start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        return new H._AllMatchesIterable(this, string, start);
      },
      allMatches$1: function($receiver, string) {
        return this.allMatches$2($receiver, string, 0);
      },
      _execGlobal$2: function(string, start) {
        var regexp, match;
        regexp = this.get$_nativeGlobalVersion();
        regexp.lastIndex = start;
        match = regexp.exec(string);
        if (match == null)
          return;
        return new H._MatchImplementation(this, match);
      },
      _execAnchored$2: function(string, start) {
        var regexp, match;
        regexp = this.get$_nativeAnchoredVersion();
        regexp.lastIndex = start;
        match = regexp.exec(string);
        if (match == null)
          return;
        if (0 >= match.length)
          return H.ioore(match, -1);
        if (match.pop() != null)
          return;
        return new H._MatchImplementation(this, match);
      },
      matchAsPrefix$2: function(_, string, start) {
        if (typeof start !== "number")
          return start.$lt();
        if (start < 0 || start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        return this._execAnchored$2(string, start);
      },
      $isPattern: 1,
      static: {
        JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
          var m, i, g, regexp;
          m = multiLine ? "m" : "";
          i = caseSensitive ? "" : "i";
          g = global ? "g" : "";
          regexp = function(source, modifiers) {
            try {
              return new RegExp(source, modifiers);
            } catch (e) {
              return e;
            }
          }(source, m + i + g);
          if (regexp instanceof RegExp)
            return regexp;
          throw H.wrapException(P.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
        }
      }
    },
    _MatchImplementation: {
      "^": "Object;pattern,_match",
      get$start: function(_) {
        return this._match.index;
      },
      get$end: function() {
        var t1 = this._match;
        return t1.index + t1[0].length;
      },
      group$1: function(index) {
        var t1 = this._match;
        if (index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      $index: function(_, index) {
        var t1 = this._match;
        if (index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      $isMatch: 1
    },
    _AllMatchesIterable: {
      "^": "IterableBase;_re,_string,__js_helper$_start",
      get$iterator: function(_) {
        return new H._AllMatchesIterator(this._re, this._string, this.__js_helper$_start);
      },
      $asIterable: function() {
        return [P.Match];
      }
    },
    _AllMatchesIterator: {
      "^": "Object;_regExp,_string,_nextIndex,0__js_helper$_current",
      get$current: function() {
        return this.__js_helper$_current;
      },
      moveNext$0: function() {
        var t1, t2, match, nextIndex;
        t1 = this._string;
        if (t1 == null)
          return false;
        t2 = this._nextIndex;
        if (t2 <= t1.length) {
          match = this._regExp._execGlobal$2(t1, t2);
          if (match != null) {
            this.__js_helper$_current = match;
            nextIndex = match.get$end();
            this._nextIndex = match._match.index === nextIndex ? nextIndex + 1 : nextIndex;
            return true;
          }
        }
        this.__js_helper$_current = null;
        this._string = null;
        return false;
      }
    },
    StringMatch: {
      "^": "Object;start>,input,pattern",
      get$end: function() {
        var t1 = this.start;
        if (typeof t1 !== "number")
          return t1.$add();
        return t1 + this.pattern.length;
      },
      $index: function(_, g) {
        return this.group$1(g);
      },
      group$1: function(group_) {
        if (group_ !== 0)
          throw H.wrapException(P.RangeError$value(group_, null, null));
        return this.pattern;
      },
      $isMatch: 1
    },
    _StringAllMatchesIterable: {
      "^": "Iterable;__js_helper$_input,_pattern,__js_helper$_index",
      get$iterator: function(_) {
        return new H._StringAllMatchesIterator(this.__js_helper$_input, this._pattern, this.__js_helper$_index);
      },
      $asIterable: function() {
        return [P.Match];
      }
    },
    _StringAllMatchesIterator: {
      "^": "Object;__js_helper$_input,_pattern,__js_helper$_index,0__js_helper$_current",
      moveNext$0: function() {
        var t1, t2, t3, t4, t5, index, end;
        t1 = this.__js_helper$_index;
        t2 = this._pattern;
        t3 = t2.length;
        t4 = this.__js_helper$_input;
        t5 = t4.length;
        if (t1 + t3 > t5) {
          this.__js_helper$_current = null;
          return false;
        }
        index = t4.indexOf(t2, t1);
        if (index < 0) {
          this.__js_helper$_index = t5 + 1;
          this.__js_helper$_current = null;
          return false;
        }
        end = index + t3;
        this.__js_helper$_current = new H.StringMatch(index, t4, t2);
        this.__js_helper$_index = end === this.__js_helper$_index ? end + 1 : end;
        return true;
      },
      get$current: function() {
        return this.__js_helper$_current;
      }
    }
  }], ["dart._js_names", "dart:_js_names",, H, {
    "^": "",
    extractKeys: function(victim) {
      return J.JSArray_JSArray$markFixed(victim ? Object.keys(victim) : [], null);
    },
    _LazyMangledNamesMap: {
      "^": "Object;",
      $index: ["super$_LazyMangledNamesMap$$index", function(_, key) {
        var result = this._jsMangledNames[H.stringTypeCheck(key)];
        return typeof result !== "string" ? null : result;
      }]
    },
    _LazyMangledInstanceNamesMap: {
      "^": "_LazyMangledNamesMap;_jsMangledNames",
      $index: function(_, key) {
        var result;
        H.stringTypeCheck(key);
        result = this.super$_LazyMangledNamesMap$$index(0, key);
        if (result == null && J.startsWith$1$s(key, "set$")) {
          result = this.super$_LazyMangledNamesMap$$index(0, "get$" + J.substring$1$s(key, "set$".length));
          return result != null ? result + "=" : null;
        }
        return result;
      }
    }
  }], ["dart2js._js_primitives", "dart:_js_primitives",, H, {
    "^": "",
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  }], ["dart.typed_data.implementation", "dart:_native_typed_data",, H, {
    "^": "",
    _ensureNativeList: function(list) {
      return list;
    },
    _checkValidIndex: function(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    _checkValidRange: function(start, end, $length) {
      var t1;
      H.intTypeCheck(start);
      if (!(start >>> 0 !== start))
        if (end == null) {
          if (typeof start !== "number")
            return start.$gt();
          t1 = start > $length;
        } else if (!(end >>> 0 !== end)) {
          if (typeof start !== "number")
            return start.$gt();
          t1 = start > end || end > $length;
        } else
          t1 = true;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeTypedData: {
      "^": "Interceptor;",
      _invalidPosition$3: function(receiver, position, $length, $name) {
        var t1 = P.RangeError$range(position, 0, $length, $name, null);
        throw H.wrapException(t1);
      },
      _checkPosition$3: function(receiver, position, $length, $name) {
        if (position >>> 0 !== position || position > $length)
          this._invalidPosition$3(receiver, position, $length, $name);
      },
      $isTypedData: 1,
      "%": "DataView;ArrayBufferView;NativeTypedArray|_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin|_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|_NativeTypedArrayOfInt_NativeTypedArray_ListMixin|_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfInt"
    },
    NativeTypedArray: {
      "^": "NativeTypedData;",
      get$length: function(receiver) {
        return receiver.length;
      },
      _setRangeFast$4: function(receiver, start, end, source, skipCount) {
        var targetLength, count, sourceLength;
        targetLength = receiver.length;
        this._checkPosition$3(receiver, start, targetLength, "start");
        this._checkPosition$3(receiver, end, targetLength, "end");
        if (start > end)
          throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
        count = end - start;
        sourceLength = source.length;
        if (sourceLength - skipCount < count)
          throw H.wrapException(P.StateError$("Not enough elements"));
        if (skipCount !== 0 || sourceLength !== count)
          source = source.subarray(skipCount, skipCount + count);
        receiver.set(source, start);
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: Isolate.functionThatReturnsNull
    },
    NativeTypedArrayOfDouble: {
      "^": "_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin;",
      $index: function(receiver, index) {
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.doubleTypeCheck(value);
        H._checkValidIndex(index, receiver, receiver.length);
        receiver[index] = value;
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.double];
      },
      $asFixedLengthListMixin: function() {
        return [P.double];
      },
      $asListMixin: function() {
        return [P.double];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.double];
      },
      $isList: 1,
      $asList: function() {
        return [P.double];
      },
      "%": "Float32Array|Float64Array"
    },
    NativeTypedArrayOfInt: {
      "^": "_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin;",
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.intTypeCheck(value);
        H._checkValidIndex(index, receiver, receiver.length);
        receiver[index] = value;
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        H.assertSubtype(iterable, "$isIterable", [P.int], "$asIterable");
        if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfInt) {
          this._setRangeFast$4(receiver, start, end, iterable, skipCount);
          return;
        }
        this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asFixedLengthListMixin: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.int];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      }
    },
    NativeInt16List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      "%": "Int16Array"
    },
    NativeInt32List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      "%": "Int32Array"
    },
    NativeInt8List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      "%": "Int8Array"
    },
    NativeUint16List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      $isUint16List: 1,
      "%": "Uint16Array"
    },
    NativeUint32List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Uint32Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
      },
      $isUint32List: 1,
      "%": "Uint32Array"
    },
    NativeUint8ClampedList: {
      "^": "NativeTypedArrayOfInt;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      "%": "CanvasPixelArray|Uint8ClampedArray"
    },
    NativeUint8List: {
      "^": "NativeTypedArrayOfInt;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      $isNativeUint8List: 1,
      "%": ";Uint8Array"
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: {
      "^": "NativeTypedArray+ListMixin;"
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: {
      "^": "_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin+FixedLengthListMixin;"
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: {
      "^": "NativeTypedArray+ListMixin;"
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: {
      "^": "_NativeTypedArrayOfInt_NativeTypedArray_ListMixin+FixedLengthListMixin;"
    }
  }], ["dart.async", "dart:async",, P, {
    "^": "",
    _AsyncRun__initializeScheduleImmediate: function() {
      var t1, div, span;
      t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateJsOverride$closure", 4, 0, 14],
    _AsyncRun__scheduleImmediateWithSetImmediate: [function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", 4, 0, 14],
    _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      P._TimerImpl$(0, callback);
    }, "call$1", "async__AsyncRun__scheduleImmediateWithTimer$closure", 4, 0, 14],
    _registerErrorHandler: function(errorHandler, zone) {
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object, P.StackTrace]}))
        return zone.registerBinaryCallback$3$1(errorHandler, null, P.Object, P.StackTrace);
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object]})) {
        zone.toString;
        return H.functionTypeCheck(errorHandler, {func: 1, ret: null, args: [P.Object]});
      }
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.callback.call$0();
      }
    },
    _startMicrotaskLoop: [function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    }, "call$0", "async___startMicrotaskLoop$closure", 0, 0, 1],
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(H.functionTypeCheck(callback, {func: 1, ret: -1}));
      if ($._nextCallback == null) {
        $._lastCallback = newEntry;
        $._nextCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else {
        $._lastCallback.next = newEntry;
        $._lastCallback = newEntry;
      }
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var t1, entry, t2;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback);
      t2 = $._lastPriorityCallback;
      if (t2 == null) {
        entry.next = t1;
        $._lastPriorityCallback = entry;
        $._nextCallback = entry;
      } else {
        entry.next = t2.next;
        t2.next = entry;
        $._lastPriorityCallback = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var t1, currentZone;
      t1 = {func: 1, ret: -1};
      H.functionTypeCheck(callback, t1);
      currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(null, null, C.C__RootZone, callback);
        return;
      }
      currentZone.toString;
      P._rootScheduleMicrotask(null, null, currentZone, H.functionTypeCheck(currentZone.bindCallbackGuarded$1(callback), t1));
    },
    _runUserCode: function(userCode, onSuccess, onError, $T) {
      var e, s, replacement, error, stackTrace, exception, error0;
      H.functionTypeCheck(userCode, {func: 1, ret: $T});
      H.functionTypeCheck(onSuccess, {func: 1, args: [$T]});
      H.functionTypeCheck(onError, {func: 1, args: [, P.StackTrace]});
      try {
        onSuccess.call$1(userCode.call$0());
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        $.Zone__current.toString;
        H.interceptedTypeCheck(s, "$isStackTrace");
        replacement = null;
        if (replacement == null)
          onError.call$2(e, s);
        else {
          error0 = J.get$error$x(replacement);
          error = error0;
          stackTrace = replacement.get$stackTrace();
          onError.call$2(error, stackTrace);
        }
      }
    },
    _cancelAndError: function(subscription, future, error, stackTrace) {
      var cancelFuture = subscription.cancel$0();
      if (!!J.getInterceptor(cancelFuture).$isFuture && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
      else
        future._completeError$2(error, stackTrace);
    },
    _cancelAndErrorClosure: function(subscription, future) {
      return new P._cancelAndErrorClosure_closure(subscription, future);
    },
    _cancelAndValue: function(subscription, future, value) {
      var cancelFuture = subscription.cancel$0();
      if (!!J.getInterceptor(cancelFuture).$isFuture && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
      else
        future._complete$1(value);
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R});
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      t1 = C.C__RootZone !== zone;
      if (t1) {
        if (t1) {
          zone.toString;
          t1 = false;
        } else
          t1 = true;
        f = !t1 ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, -1);
      }
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: {
      "^": "Closure:11;_box_0",
      call$1: [function(_) {
        var t1, f;
        t1 = this._box_0;
        f = t1.storedCallback;
        t1.storedCallback = null;
        f.call$0();
      }, null, null, 4, 0, null, 3, "call"]
    },
    _AsyncRun__initializeScheduleImmediate_closure: {
      "^": "Closure:32;_box_0,div,span",
      call$1: function(callback) {
        var t1, t2;
        this._box_0.storedCallback = H.functionTypeCheck(callback, {func: 1, ret: -1});
        t1 = this.div;
        t2 = this.span;
        t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
      }
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
      "^": "Closure:0;callback",
      call$0: [function() {
        this.callback.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: {
      "^": "Closure:0;callback",
      call$0: [function() {
        this.callback.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    _TimerImpl: {
      "^": "Object;_once,0_handle,_tick",
      _TimerImpl$2: function(milliseconds, callback) {
        if (self.setTimeout != null)
          this._handle = self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
        else
          throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
      },
      static: {
        _TimerImpl$: function(milliseconds, callback) {
          var t1 = new P._TimerImpl(true, 0);
          t1._TimerImpl$2(milliseconds, callback);
          return t1;
        }
      }
    },
    _TimerImpl_internalCallback: {
      "^": "Closure:1;$this,callback",
      call$0: [function() {
        var t1 = this.$this;
        t1._handle = null;
        t1._tick = 1;
        this.callback.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    _FutureListener: {
      "^": "Object;0_nextListener,result,state,callback,errorCallback,$ti",
      matchesErrorTest$1: function(asyncError) {
        if (this.state !== 6)
          return true;
        return this.result._zone.runUnary$2$2(H.functionTypeCheck(this.callback, {func: 1, ret: P.bool, args: [P.Object]}), asyncError.error, P.bool, P.Object);
      },
      handleError$1: function(asyncError) {
        var errorCallback, t1, t2, t3;
        errorCallback = this.errorCallback;
        t1 = P.Object;
        t2 = {futureOr: 1, type: H.getTypeArgumentByIndex(this, 1)};
        t3 = this.result._zone;
        if (H.functionTypeTest(errorCallback, {func: 1, args: [P.Object, P.StackTrace]}))
          return H.futureOrCheck(t3.runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, null, t1, P.StackTrace), t2);
        else
          return H.futureOrCheck(t3.runUnary$2$2(H.functionTypeCheck(errorCallback, {func: 1, args: [P.Object]}), asyncError.error, null, t1), t2);
      }
    },
    _Future: {
      "^": "Object;_state<,_zone,0_resultOrListeners<,$ti",
      then$1$2$onError: function(f, onError, $R) {
        var t1, currentZone, result, t2;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
        currentZone = $.Zone__current;
        if (currentZone !== C.C__RootZone) {
          currentZone.toString;
          H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
          if (onError != null)
            onError = P._registerErrorHandler(onError, currentZone);
        }
        H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
        result = new P._Future(0, $.Zone__current, [$R]);
        t2 = onError == null ? 1 : 3;
        this._addListener$1(new P._FutureListener(result, t2, f, onError, [t1, $R]));
        return result;
      },
      then$1$1: function(f, $R) {
        return this.then$1$2$onError(f, null, $R);
      },
      whenComplete$1: function(action) {
        var t1, result;
        H.functionTypeCheck(action, {func: 1});
        t1 = $.Zone__current;
        result = new P._Future(0, t1, this.$ti);
        if (t1 !== C.C__RootZone) {
          t1.toString;
          H.functionTypeCheck(action, {func: 1, ret: null});
        }
        t1 = H.getTypeArgumentByIndex(this, 0);
        this._addListener$1(new P._FutureListener(result, 8, action, null, [t1, t1]));
        return result;
      },
      _setValue$1: function(value) {
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
        this._state = 4;
        this._resultOrListeners = value;
      },
      _addListener$1: function(listener) {
        var t1, source;
        t1 = this._state;
        if (t1 <= 1) {
          listener._nextListener = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
          this._resultOrListeners = listener;
        } else {
          if (t1 === 2) {
            source = H.interceptedTypeCheck(this._resultOrListeners, "$is_Future");
            t1 = source._state;
            if (t1 < 4) {
              source._addListener$1(listener);
              return;
            }
            this._state = t1;
            this._resultOrListeners = source._resultOrListeners;
          }
          t1 = this._zone;
          t1.toString;
          P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__addListener_closure(this, listener), {func: 1, ret: -1}));
        }
      },
      _prependListeners$1: function(listeners) {
        var _box_0, t1, existingListeners, cursor, cursor0, source;
        _box_0 = {};
        _box_0.listeners = listeners;
        if (listeners == null)
          return;
        t1 = this._state;
        if (t1 <= 1) {
          existingListeners = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
          this._resultOrListeners = listeners;
          if (existingListeners != null) {
            for (cursor = listeners; cursor0 = cursor._nextListener, cursor0 != null; cursor = cursor0)
              ;
            cursor._nextListener = existingListeners;
          }
        } else {
          if (t1 === 2) {
            source = H.interceptedTypeCheck(this._resultOrListeners, "$is_Future");
            t1 = source._state;
            if (t1 < 4) {
              source._prependListeners$1(listeners);
              return;
            }
            this._state = t1;
            this._resultOrListeners = source._resultOrListeners;
          }
          _box_0.listeners = this._reverseListeners$1(listeners);
          t1 = this._zone;
          t1.toString;
          P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__prependListeners_closure(_box_0, this), {func: 1, ret: -1}));
        }
      },
      _removeListeners$0: function() {
        var current = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
        this._resultOrListeners = null;
        return this._reverseListeners$1(current);
      },
      _reverseListeners$1: function(listeners) {
        var current, prev, next;
        for (current = listeners, prev = null; current != null; prev = current, current = next) {
          next = current._nextListener;
          current._nextListener = prev;
        }
        return prev;
      },
      _complete$1: function(value) {
        var t1, t2, t3, listeners;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.futureOrCheck(value, {futureOr: 1, type: t1});
        t2 = this.$ti;
        t3 = H.checkSubtypeV2(value, "$isFuture", t2, "$asFuture");
        if (t3) {
          t1 = H.checkSubtypeV2(value, "$is_Future", t2, null);
          if (t1)
            P._Future__chainCoreFuture(value, this);
          else
            P._Future__chainForeignFuture(value, this);
        } else {
          listeners = this._removeListeners$0();
          H.assertSubtypeOfRuntimeType(value, t1);
          this._state = 4;
          this._resultOrListeners = value;
          P._Future__propagateToListeners(this, listeners);
        }
      },
      _completeError$2: [function(error, stackTrace) {
        var listeners;
        H.interceptedTypeCheck(stackTrace, "$isStackTrace");
        listeners = this._removeListeners$0();
        this._state = 8;
        this._resultOrListeners = new P.AsyncError(error, stackTrace);
        P._Future__propagateToListeners(this, listeners);
      }, function(error) {
        return this._completeError$2(error, null);
      }, "_completeError$1", "call$2", "call$1", "get$_completeError", 4, 2, 69, 5, 6, 7],
      $isFuture: 1,
      static: {
        _Future__chainForeignFuture: function(source, target) {
          var e, s, exception;
          target._state = 1;
          try {
            source.then$1$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), null);
          } catch (exception) {
            e = H.unwrapException(exception);
            s = H.getTraceFromException(exception);
            P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
          }
        },
        _Future__chainCoreFuture: function(source, target) {
          var t1, listeners;
          for (; t1 = source._state, t1 === 2;)
            source = H.interceptedTypeCheck(source._resultOrListeners, "$is_Future");
          if (t1 >= 4) {
            listeners = target._removeListeners$0();
            target._state = source._state;
            target._resultOrListeners = source._resultOrListeners;
            P._Future__propagateToListeners(target, listeners);
          } else {
            listeners = H.interceptedTypeCheck(target._resultOrListeners, "$is_FutureListener");
            target._state = 2;
            target._resultOrListeners = source;
            source._prependListeners$1(listeners);
          }
        },
        _Future__propagateToListeners: function(source, listeners) {
          var _box_1, t1, _box_0, hasError, asyncError, t2, t3, listeners0, sourceResult, zone, t4, oldZone, current, result;
          _box_1 = {};
          _box_1.source = source;
          for (t1 = source; true;) {
            _box_0 = {};
            hasError = t1._state === 8;
            if (listeners == null) {
              if (hasError) {
                asyncError = H.interceptedTypeCheck(t1._resultOrListeners, "$isAsyncError");
                t1 = t1._zone;
                t2 = asyncError.error;
                t3 = asyncError.stackTrace;
                t1.toString;
                P._rootHandleUncaughtError(null, null, t1, t2, t3);
              }
              return;
            }
            for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
              listeners._nextListener = null;
              P._Future__propagateToListeners(_box_1.source, listeners);
            }
            t1 = _box_1.source;
            sourceResult = t1._resultOrListeners;
            _box_0.listenerHasError = hasError;
            _box_0.listenerValueOrError = sourceResult;
            t2 = !hasError;
            if (t2) {
              t3 = listeners.state;
              t3 = (t3 & 1) !== 0 || t3 === 8;
            } else
              t3 = true;
            if (t3) {
              t3 = listeners.result;
              zone = t3._zone;
              if (hasError) {
                t4 = t1._zone;
                t4.toString;
                t4 = t4 == null ? zone == null : t4 === zone;
                if (!t4)
                  zone.toString;
                else
                  t4 = true;
                t4 = !t4;
              } else
                t4 = false;
              if (t4) {
                H.interceptedTypeCheck(sourceResult, "$isAsyncError");
                t1 = t1._zone;
                t2 = sourceResult.error;
                t3 = sourceResult.stackTrace;
                t1.toString;
                P._rootHandleUncaughtError(null, null, t1, t2, t3);
                return;
              }
              oldZone = $.Zone__current;
              if (oldZone == null ? zone != null : oldZone !== zone)
                $.Zone__current = zone;
              else
                oldZone = null;
              t1 = listeners.state;
              if (t1 === 8)
                new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_1, _box_0, listeners, hasError).call$0();
              else if (t2) {
                if ((t1 & 1) !== 0)
                  new P._Future__propagateToListeners_handleValueCallback(_box_0, listeners, sourceResult).call$0();
              } else if ((t1 & 2) !== 0)
                new P._Future__propagateToListeners_handleError(_box_1, _box_0, listeners).call$0();
              if (oldZone != null)
                $.Zone__current = oldZone;
              t1 = _box_0.listenerValueOrError;
              if (!!J.getInterceptor(t1).$isFuture) {
                if (t1._state >= 4) {
                  current = H.interceptedTypeCheck(t3._resultOrListeners, "$is_FutureListener");
                  t3._resultOrListeners = null;
                  listeners = t3._reverseListeners$1(current);
                  t3._state = t1._state;
                  t3._resultOrListeners = t1._resultOrListeners;
                  _box_1.source = t1;
                  continue;
                } else
                  P._Future__chainCoreFuture(t1, t3);
                return;
              }
            }
            result = listeners.result;
            current = H.interceptedTypeCheck(result._resultOrListeners, "$is_FutureListener");
            result._resultOrListeners = null;
            listeners = result._reverseListeners$1(current);
            t1 = _box_0.listenerHasError;
            t2 = _box_0.listenerValueOrError;
            if (!t1) {
              H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(result, 0));
              result._state = 4;
              result._resultOrListeners = t2;
            } else {
              H.interceptedTypeCheck(t2, "$isAsyncError");
              result._state = 8;
              result._resultOrListeners = t2;
            }
            _box_1.source = result;
            t1 = result;
          }
        }
      }
    },
    _Future__addListener_closure: {
      "^": "Closure:0;$this,listener",
      call$0: function() {
        P._Future__propagateToListeners(this.$this, this.listener);
      }
    },
    _Future__prependListeners_closure: {
      "^": "Closure:0;_box_0,$this",
      call$0: function() {
        P._Future__propagateToListeners(this.$this, this._box_0.listeners);
      }
    },
    _Future__chainForeignFuture_closure: {
      "^": "Closure:11;target",
      call$1: function(value) {
        var t1 = this.target;
        t1._state = 0;
        t1._complete$1(value);
      }
    },
    _Future__chainForeignFuture_closure0: {
      "^": "Closure:28;target",
      call$2: [function(error, stackTrace) {
        this.target._completeError$2(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
      }, function(error) {
        return this.call$2(error, null);
      }, "call$1", null, null, null, 4, 2, null, 5, 6, 7, "call"]
    },
    _Future__chainForeignFuture_closure1: {
      "^": "Closure:0;target,e,s",
      call$0: function() {
        this.target._completeError$2(this.e, this.s);
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: {
      "^": "Closure:1;_box_1,_box_0,listener,hasError",
      call$0: function() {
        var completeResult, e, s, t1, exception, t2, originalSource;
        completeResult = null;
        try {
          t1 = this.listener;
          completeResult = t1.result._zone.run$1$1(H.functionTypeCheck(t1.callback, {func: 1}), null);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          if (this.hasError) {
            t1 = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError").error;
            t2 = e;
            t2 = t1 == null ? t2 == null : t1 === t2;
            t1 = t2;
          } else
            t1 = false;
          t2 = this._box_0;
          if (t1)
            t2.listenerValueOrError = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError");
          else
            t2.listenerValueOrError = new P.AsyncError(e, s);
          t2.listenerHasError = true;
          return;
        }
        if (!!J.getInterceptor(completeResult).$isFuture) {
          if (completeResult instanceof P._Future && completeResult.get$_state() >= 4) {
            if (completeResult.get$_state() === 8) {
              t1 = this._box_0;
              t1.listenerValueOrError = H.interceptedTypeCheck(completeResult.get$_resultOrListeners(), "$isAsyncError");
              t1.listenerHasError = true;
            }
            return;
          }
          originalSource = this._box_1.source;
          t1 = this._box_0;
          t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), null);
          t1.listenerHasError = false;
        }
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
      "^": "Closure:29;originalSource",
      call$1: function(_) {
        return this.originalSource;
      }
    },
    _Future__propagateToListeners_handleValueCallback: {
      "^": "Closure:1;_box_0,listener,sourceResult",
      call$0: function() {
        var e, s, t1, t2, t3, t4, exception;
        try {
          t1 = this.listener;
          t1.toString;
          t2 = H.getTypeArgumentByIndex(t1, 0);
          t3 = H.assertSubtypeOfRuntimeType(this.sourceResult, t2);
          t4 = H.getTypeArgumentByIndex(t1, 1);
          this._box_0.listenerValueOrError = t1.result._zone.runUnary$2$2(H.functionTypeCheck(t1.callback, {func: 1, ret: {futureOr: 1, type: t4}, args: [t2]}), t3, {futureOr: 1, type: t4}, t2);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          t1 = this._box_0;
          t1.listenerValueOrError = new P.AsyncError(e, s);
          t1.listenerHasError = true;
        }
      }
    },
    _Future__propagateToListeners_handleError: {
      "^": "Closure:1;_box_1,_box_0,listener",
      call$0: function() {
        var asyncError, e, s, t1, t2, exception, t3, t4;
        try {
          asyncError = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError");
          t1 = this.listener;
          if (t1.matchesErrorTest$1(asyncError) && t1.errorCallback != null) {
            t2 = this._box_0;
            t2.listenerValueOrError = t1.handleError$1(asyncError);
            t2.listenerHasError = false;
          }
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          t1 = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError");
          t2 = t1.error;
          t3 = e;
          t4 = this._box_0;
          if (t2 == null ? t3 == null : t2 === t3)
            t4.listenerValueOrError = t1;
          else
            t4.listenerValueOrError = new P.AsyncError(e, s);
          t4.listenerHasError = true;
        }
      }
    },
    _AsyncCallbackEntry: {
      "^": "Object;callback,0next<"
    },
    Stream: {
      "^": "Object;$ti",
      contains$1: function(_, needle) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, [P.bool]);
        t1.subscription = null;
        t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_contains_closure(t1, this, needle, future), true, new P.Stream_contains_closure0(future), future.get$_completeError());
        return future;
      },
      get$length: function(_) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, [P.int]);
        t1.count = 0;
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1, this), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
        return future;
      },
      get$isEmpty: function(_) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, [P.bool]);
        t1.subscription = null;
        t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, this, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
        return future;
      }
    },
    Stream_contains_closure: {
      "^": "Closure;_box_0,$this,needle,future",
      call$1: [function(element) {
        var t1, t2;
        t1 = this._box_0;
        t2 = this.future;
        P._runUserCode(new P.Stream_contains__closure(H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgument(this.$this, "Stream", 0)), this.needle), new P.Stream_contains__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription, t2), P.bool);
      }, null, null, 4, 0, null, 19, "call"],
      $signature: function() {
        return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(this.$this, "Stream", 0)]};
      }
    },
    Stream_contains__closure: {
      "^": "Closure:8;element,needle",
      call$0: function() {
        return J.$eq$(this.element, this.needle);
      }
    },
    Stream_contains__closure0: {
      "^": "Closure:26;_box_0,future",
      call$1: function(isMatch) {
        if (H.boolTypeCheck(isMatch))
          P._cancelAndValue(this._box_0.subscription, this.future, true);
      }
    },
    Stream_contains_closure0: {
      "^": "Closure:0;future",
      call$0: [function() {
        this.future._complete$1(false);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_length_closure: {
      "^": "Closure;_box_0,$this",
      call$1: [function(_) {
        H.assertSubtypeOfRuntimeType(_, H.getRuntimeTypeArgument(this.$this, "Stream", 0));
        ++this._box_0.count;
      }, null, null, 4, 0, null, 3, "call"],
      $signature: function() {
        return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(this.$this, "Stream", 0)]};
      }
    },
    Stream_length_closure0: {
      "^": "Closure:0;_box_0,future",
      call$0: [function() {
        this.future._complete$1(this._box_0.count);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_isEmpty_closure: {
      "^": "Closure;_box_0,$this,future",
      call$1: [function(_) {
        H.assertSubtypeOfRuntimeType(_, H.getRuntimeTypeArgument(this.$this, "Stream", 0));
        P._cancelAndValue(this._box_0.subscription, this.future, false);
      }, null, null, 4, 0, null, 3, "call"],
      $signature: function() {
        return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(this.$this, "Stream", 0)]};
      }
    },
    Stream_isEmpty_closure0: {
      "^": "Closure:0;future",
      call$0: [function() {
        this.future._complete$1(true);
      }, null, null, 0, 0, null, "call"]
    },
    StreamSubscription: {
      "^": "Object;$ti"
    },
    StreamTransformerBase: {
      "^": "Object;"
    },
    _cancelAndError_closure: {
      "^": "Closure:1;future,error,stackTrace",
      call$0: function() {
        return this.future._completeError$2(this.error, this.stackTrace);
      }
    },
    _cancelAndErrorClosure_closure: {
      "^": "Closure:34;subscription,future",
      call$2: function(error, stackTrace) {
        P._cancelAndError(this.subscription, this.future, error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
      }
    },
    _cancelAndValue_closure: {
      "^": "Closure:1;future,value",
      call$0: function() {
        return this.future._complete$1(this.value);
      }
    },
    AsyncError: {
      "^": "Object;error>,stackTrace<",
      toString$0: function(_) {
        return H.S(this.error);
      },
      $isError: 1
    },
    _Zone: {
      "^": "Object;",
      $isZone: 1
    },
    _rootHandleUncaughtError_closure: {
      "^": "Closure:0;_box_0,stackTrace",
      call$0: function() {
        var t1, t2, error;
        t1 = this._box_0;
        t2 = t1.error;
        if (t2 == null) {
          error = new P.NullThrownError();
          t1.error = error;
          t1 = error;
        } else
          t1 = t2;
        t2 = this.stackTrace;
        if (t2 == null)
          throw H.wrapException(t1);
        error = H.wrapException(t1);
        error.stack = t2.toString$0(0);
        throw error;
      }
    },
    _RootZone: {
      "^": "_Zone;",
      runGuarded$1: function(f) {
        var e, s, exception;
        H.functionTypeCheck(f, {func: 1, ret: -1});
        try {
          if (C.C__RootZone === $.Zone__current) {
            f.call$0();
            return;
          }
          P._rootRun(null, null, this, f, -1);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          P._rootHandleUncaughtError(null, null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
        }
      },
      runUnaryGuarded$1$2: function(f, arg, $T) {
        var e, s, exception;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]});
        H.assertSubtypeOfRuntimeType(arg, $T);
        try {
          if (C.C__RootZone === $.Zone__current) {
            f.call$1(arg);
            return;
          }
          P._rootRunUnary(null, null, this, f, arg, -1, $T);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          P._rootHandleUncaughtError(null, null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
        }
      },
      bindCallback$1$1: function(f, $R) {
        return new P._RootZone_bindCallback_closure(this, H.functionTypeCheck(f, {func: 1, ret: $R}), $R);
      },
      bindCallbackGuarded$1: function(f) {
        return new P._RootZone_bindCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1}));
      },
      bindUnaryCallbackGuarded$1$1: function(f, $T) {
        return new P._RootZone_bindUnaryCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]}), $T);
      },
      $index: function(_, key) {
        return;
      },
      run$1$1: function(f, $R) {
        H.functionTypeCheck(f, {func: 1, ret: $R});
        if ($.Zone__current === C.C__RootZone)
          return f.call$0();
        return P._rootRun(null, null, this, f, $R);
      },
      runUnary$2$2: function(f, arg, $R, $T) {
        H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
        H.assertSubtypeOfRuntimeType(arg, $T);
        if ($.Zone__current === C.C__RootZone)
          return f.call$1(arg);
        return P._rootRunUnary(null, null, this, f, arg, $R, $T);
      },
      runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
        H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
        H.assertSubtypeOfRuntimeType(arg1, T1);
        H.assertSubtypeOfRuntimeType(arg2, T2);
        if ($.Zone__current === C.C__RootZone)
          return f.call$2(arg1, arg2);
        return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
      },
      registerBinaryCallback$3$1: function(f, $R, T1, T2) {
        return H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      }
    },
    _RootZone_bindCallback_closure: {
      "^": "Closure;$this,f,R",
      call$0: function() {
        return this.$this.run$1$1(this.f, this.R);
      },
      $signature: function() {
        return {func: 1, ret: this.R};
      }
    },
    _RootZone_bindCallbackGuarded_closure: {
      "^": "Closure:1;$this,f",
      call$0: function() {
        return this.$this.runGuarded$1(this.f);
      }
    },
    _RootZone_bindUnaryCallbackGuarded_closure: {
      "^": "Closure;$this,f,T",
      call$1: [function(arg) {
        var t1 = this.T;
        return this.$this.runUnaryGuarded$1$2(this.f, H.assertSubtypeOfRuntimeType(arg, t1), t1);
      }, null, null, 4, 0, null, 20, "call"],
      $signature: function() {
        return {func: 1, ret: -1, args: [this.T]};
      }
    }
  }], ["dart.collection", "dart:collection",, P, {
    "^": "",
    HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
      return new P._HashMap(0, [$K, $V]);
    },
    LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
      return new H.JsLinkedHashMap(0, 0, [$K, $V]);
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      H.listTypeCheck(keyValuePairs);
      return H.assertSubtype(H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap(0, 0, [$K, $V])), "$isLinkedHashMap", [$K, $V], "$asLinkedHashMap");
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap(0, 0, [$K, $V]);
    },
    HashSet_HashSet: function(equals, hashCode, isValidKey, $E) {
      return new P._HashSet(0, [$E]);
    },
    LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
      return new P._LinkedHashSet(0, 0, [$E]);
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = [];
      t1 = $.$get$_toStringVisiting();
      C.JSArray_methods.add$1(t1, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, H.listSuperNativeTypeCheck(parts, "$isIterable"), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1, t2;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      t1 = $.$get$_toStringVisiting();
      C.JSArray_methods.add$1(t1, iterable);
      try {
        t2 = buffer;
        t2.set$_contents(P.StringBuffer__writeAll(t2.get$_contents(), iterable, ", "));
      } finally {
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = buffer;
      t1.set$_contents(t1.get$_contents() + rightDelimiter);
      t1 = buffer.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var i, t1;
      for (i = 0; t1 = $.$get$_toStringVisiting(), i < t1.length; ++i)
        if (o === t1[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
      it = J.get$iterator$ax(iterable);
      $length = 0;
      count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashSet_LinkedHashSet$from: function(elements, $E) {
      var result, t1;
      result = P.LinkedHashSet_LinkedHashSet(null, null, null, $E);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        result.add$1(0, H.assertSubtypeOfRuntimeType(t1.get$current(), $E));
      return result;
    },
    MapBase_mapToString: function(m) {
      var t1, result, t2;
      t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($.$get$_toStringVisiting(), m);
        t2 = result;
        t2.set$_contents(t2.get$_contents() + "{");
        t1.first = true;
        m.forEach$1(0, new P.MapBase_mapToString_closure(t1, result));
        t1 = result;
        t1.set$_contents(t1.get$_contents() + "}");
      } finally {
        t1 = $.$get$_toStringVisiting();
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = result.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _HashMap: {
      "^": "MapBase;_length,0_strings,0_nums,0_rest,0_keys,$ti",
      get$length: function(_) {
        return this._length;
      },
      get$isEmpty: function(_) {
        return this._length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._length !== 0;
      },
      get$keys: function() {
        return new P._HashMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
      },
      containsKey$1: function(key) {
        var strings = this._strings;
        return strings == null ? false : strings[key] != null;
      },
      $index: function(_, key) {
        var strings, t1, nums;
        if (typeof key === "string" && key !== "__proto__") {
          strings = this._strings;
          t1 = strings == null ? null : P._HashMap__getTableEntry(strings, key);
          return t1;
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          t1 = nums == null ? null : P._HashMap__getTableEntry(nums, key);
          return t1;
        } else
          return this._get$1(key);
      },
      _get$1: function(key) {
        var rest, bucket, index;
        rest = this._rest;
        if (rest == null)
          return;
        bucket = this._getBucket$2(rest, key);
        index = this._findBucketIndex$2(bucket, key);
        return index < 0 ? null : bucket[index + 1];
      },
      forEach$1: function(_, action) {
        var t1, keys, $length, i, key;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(action, {func: 1, ret: -1, args: [t1, H.getTypeArgumentByIndex(this, 1)]});
        keys = this._collection$_computeKeys$0();
        for ($length = keys.length, i = 0; i < $length; ++i) {
          key = keys[i];
          action.call$2(H.assertSubtypeOfRuntimeType(key, t1), this.$index(0, key));
          if (keys !== this._keys)
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
      },
      _collection$_computeKeys$0: function() {
        var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
        t1 = this._keys;
        if (t1 != null)
          return t1;
        result = new Array(this._length);
        result.fixed$length = Array;
        strings = this._strings;
        if (strings != null) {
          names = Object.getOwnPropertyNames(strings);
          entries = names.length;
          for (index = 0, i = 0; i < entries; ++i) {
            result[index] = names[i];
            ++index;
          }
        } else
          index = 0;
        nums = this._nums;
        if (nums != null) {
          names = Object.getOwnPropertyNames(nums);
          entries = names.length;
          for (i = 0; i < entries; ++i) {
            result[index] = +names[i];
            ++index;
          }
        }
        rest = this._rest;
        if (rest != null) {
          names = Object.getOwnPropertyNames(rest);
          entries = names.length;
          for (i = 0; i < entries; ++i) {
            bucket = rest[names[i]];
            $length = bucket.length;
            for (i0 = 0; i0 < $length; i0 += 2) {
              result[index] = bucket[i0];
              ++index;
            }
          }
        }
        this._keys = result;
        return result;
      },
      _computeHashCode$1: function(key) {
        return J.get$hashCode$(key) & 0x3ffffff;
      },
      _getBucket$2: function(table, key) {
        return table[this._computeHashCode$1(key)];
      },
      _findBucketIndex$2: function(bucket, key) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; i += 2)
          if (J.$eq$(bucket[i], key))
            return i;
        return -1;
      },
      static: {
        _HashMap__getTableEntry: function(table, key) {
          var entry = table[key];
          return entry === table ? null : entry;
        }
      }
    },
    _HashMapKeyIterable: {
      "^": "EfficientLengthIterable;_map,$ti",
      get$length: function(_) {
        return this._map._length;
      },
      get$isEmpty: function(_) {
        return this._map._length === 0;
      },
      get$iterator: function(_) {
        var t1 = this._map;
        return new P._HashMapKeyIterator(t1, t1._collection$_computeKeys$0(), 0, this.$ti);
      },
      contains$1: function(_, element) {
        return this._map.containsKey$1(element);
      },
      forEach$1: function(_, f) {
        var t1, keys, $length, i;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
        t1 = this._map;
        keys = t1._collection$_computeKeys$0();
        for ($length = keys.length, i = 0; i < $length; ++i) {
          f.call$1(keys[i]);
          if (keys !== t1._keys)
            throw H.wrapException(P.ConcurrentModificationError$(t1));
        }
      }
    },
    _HashMapKeyIterator: {
      "^": "Object;_map,_keys,_offset,0_collection$_current,$ti",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var keys, offset, t1;
        keys = this._keys;
        offset = this._offset;
        t1 = this._map;
        if (keys !== t1._keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        else if (offset >= keys.length) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = keys[offset];
          this._offset = offset + 1;
          return true;
        }
      }
    },
    _HashSet: {
      "^": "_HashSetBase;_length,0_strings,0_nums,0_rest,0_collection$_elements,$ti",
      _newSet$0: function() {
        return new P._HashSet(0, this.$ti);
      },
      get$iterator: function(_) {
        return new P._HashSetIterator(this, this._computeElements$0(), 0, this.$ti);
      },
      get$length: function(_) {
        return this._length;
      },
      get$isEmpty: function(_) {
        return this._length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._length !== 0;
      },
      contains$1: function(_, object) {
        var strings, t1;
        if (typeof object === "string" && object !== "__proto__") {
          strings = this._strings;
          return strings == null ? false : strings[object] != null;
        } else {
          t1 = this._contains$1(object);
          return t1;
        }
      },
      _contains$1: function(object) {
        var rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(this._getBucket$2(rest, object), object) >= 0;
      },
      add$1: function(_, element) {
        var strings, nums;
        H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
        if (typeof element === "string" && element !== "__proto__") {
          strings = this._strings;
          if (strings == null) {
            strings = P._HashSet__newHashTable();
            this._strings = strings;
          }
          return this._addHashTableEntry$2(strings, element);
        } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
          nums = this._nums;
          if (nums == null) {
            nums = P._HashSet__newHashTable();
            this._nums = nums;
          }
          return this._addHashTableEntry$2(nums, element);
        } else
          return this._add$1(element);
      },
      _add$1: function(element) {
        var rest, hash, bucket;
        H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
        rest = this._rest;
        if (rest == null) {
          rest = P._HashSet__newHashTable();
          this._rest = rest;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [element];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(element);
        }
        ++this._length;
        this._collection$_elements = null;
        return true;
      },
      addAll$1: function(_, objects) {
        var t1;
        H.assertSubtype(objects, "$isIterable", this.$ti, "$asIterable");
        for (t1 = objects.get$iterator(objects); t1.moveNext$0();)
          this.add$1(0, t1.get$current());
      },
      _computeElements$0: function() {
        var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
        t1 = this._collection$_elements;
        if (t1 != null)
          return t1;
        result = new Array(this._length);
        result.fixed$length = Array;
        strings = this._strings;
        if (strings != null) {
          names = Object.getOwnPropertyNames(strings);
          entries = names.length;
          for (index = 0, i = 0; i < entries; ++i) {
            result[index] = names[i];
            ++index;
          }
        } else
          index = 0;
        nums = this._nums;
        if (nums != null) {
          names = Object.getOwnPropertyNames(nums);
          entries = names.length;
          for (i = 0; i < entries; ++i) {
            result[index] = +names[i];
            ++index;
          }
        }
        rest = this._rest;
        if (rest != null) {
          names = Object.getOwnPropertyNames(rest);
          entries = names.length;
          for (i = 0; i < entries; ++i) {
            bucket = rest[names[i]];
            $length = bucket.length;
            for (i0 = 0; i0 < $length; ++i0) {
              result[index] = bucket[i0];
              ++index;
            }
          }
        }
        this._collection$_elements = result;
        return result;
      },
      _addHashTableEntry$2: function(table, element) {
        H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
        if (table[element] != null)
          return false;
        table[element] = 0;
        ++this._length;
        this._collection$_elements = null;
        return true;
      },
      _computeHashCode$1: function(element) {
        return J.get$hashCode$(element) & 0x3ffffff;
      },
      _getBucket$2: function(table, element) {
        return table[this._computeHashCode$1(element)];
      },
      _findBucketIndex$2: function(bucket, element) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i], element))
            return i;
        return -1;
      },
      static: {
        _HashSet__newHashTable: function() {
          var table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          return table;
        }
      }
    },
    _HashSetIterator: {
      "^": "Object;_set,_collection$_elements,_offset,0_collection$_current,$ti",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var elements, offset, t1;
        elements = this._collection$_elements;
        offset = this._offset;
        t1 = this._set;
        if (elements !== t1._collection$_elements)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        else if (offset >= elements.length) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = elements[offset];
          this._offset = offset + 1;
          return true;
        }
      }
    },
    _LinkedHashSet: {
      "^": "_HashSetBase;_length,0_strings,0_nums,0_rest,0_first,0_last,_modifications,$ti",
      _newSet$0: function() {
        return new P._LinkedHashSet(0, 0, this.$ti);
      },
      get$iterator: function(_) {
        return P._LinkedHashSetIterator$(this, this._modifications, H.getTypeArgumentByIndex(this, 0));
      },
      get$length: function(_) {
        return this._length;
      },
      get$isEmpty: function(_) {
        return this._length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._length !== 0;
      },
      contains$1: function(_, object) {
        var strings, nums;
        if (typeof object === "string" && object !== "__proto__") {
          strings = this._strings;
          if (strings == null)
            return false;
          return H.interceptedTypeCheck(strings[object], "$is_LinkedHashSetCell") != null;
        } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
          nums = this._nums;
          if (nums == null)
            return false;
          return H.interceptedTypeCheck(nums[object], "$is_LinkedHashSetCell") != null;
        } else
          return this._contains$1(object);
      },
      _contains$1: function(object) {
        var rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(this._getBucket$2(rest, object), object) >= 0;
      },
      forEach$1: function(_, action) {
        var t1, cell, modifications;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(action, {func: 1, ret: -1, args: [t1]});
        cell = this._first;
        modifications = this._modifications;
        for (; cell != null;) {
          action.call$1(H.assertSubtypeOfRuntimeType(cell._collection$_element, t1));
          if (modifications !== this._modifications)
            throw H.wrapException(P.ConcurrentModificationError$(this));
          cell = cell._next;
        }
      },
      add$1: function(_, element) {
        var strings, nums;
        H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
        if (typeof element === "string" && element !== "__proto__") {
          strings = this._strings;
          if (strings == null) {
            strings = P._LinkedHashSet__newHashTable();
            this._strings = strings;
          }
          return this._addHashTableEntry$2(strings, element);
        } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
          nums = this._nums;
          if (nums == null) {
            nums = P._LinkedHashSet__newHashTable();
            this._nums = nums;
          }
          return this._addHashTableEntry$2(nums, element);
        } else
          return this._add$1(element);
      },
      _add$1: function(element) {
        var rest, hash, bucket;
        H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
        rest = this._rest;
        if (rest == null) {
          rest = P._LinkedHashSet__newHashTable();
          this._rest = rest;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._collection$_newLinkedCell$1(element)];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(this._collection$_newLinkedCell$1(element));
        }
        return true;
      },
      remove$1: function(_, object) {
        if (typeof object === "string" && object !== "__proto__")
          return this._removeHashTableEntry$2(this._strings, object);
        else if (typeof object === "number" && (object & 0x3ffffff) === object)
          return this._removeHashTableEntry$2(this._nums, object);
        else
          return this._remove$1(object);
      },
      _remove$1: function(object) {
        var rest, bucket, index;
        rest = this._rest;
        if (rest == null)
          return false;
        bucket = this._getBucket$2(rest, object);
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return false;
        this._unlinkCell$1(bucket.splice(index, 1)[0]);
        return true;
      },
      _filterWhere$2: function(test, removeMatching) {
        var t1, cell, element, next, modifications, t2;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]});
        cell = this._first;
        for (; cell != null; cell = next) {
          element = H.assertSubtypeOfRuntimeType(cell._collection$_element, t1);
          next = cell._next;
          modifications = this._modifications;
          t2 = test.call$1(element);
          if (modifications !== this._modifications)
            throw H.wrapException(P.ConcurrentModificationError$(this));
          if (false === t2)
            this.remove$1(0, element);
        }
      },
      _addHashTableEntry$2: function(table, element) {
        H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
        if (H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell") != null)
          return false;
        table[element] = this._collection$_newLinkedCell$1(element);
        return true;
      },
      _removeHashTableEntry$2: function(table, element) {
        var cell;
        if (table == null)
          return false;
        cell = H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell");
        if (cell == null)
          return false;
        this._unlinkCell$1(cell);
        delete table[element];
        return true;
      },
      _collection$_modified$0: function() {
        this._modifications = this._modifications + 1 & 67108863;
      },
      _collection$_newLinkedCell$1: function(element) {
        var cell, last;
        cell = new P._LinkedHashSetCell(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0)));
        if (this._first == null) {
          this._last = cell;
          this._first = cell;
        } else {
          last = this._last;
          cell._collection$_previous = last;
          last._next = cell;
          this._last = cell;
        }
        ++this._length;
        this._collection$_modified$0();
        return cell;
      },
      _unlinkCell$1: function(cell) {
        var previous, next;
        previous = cell._collection$_previous;
        next = cell._next;
        if (previous == null)
          this._first = next;
        else
          previous._next = next;
        if (next == null)
          this._last = previous;
        else
          next._collection$_previous = previous;
        --this._length;
        this._collection$_modified$0();
      },
      _computeHashCode$1: function(element) {
        return J.get$hashCode$(element) & 0x3ffffff;
      },
      _getBucket$2: function(table, element) {
        return table[this._computeHashCode$1(element)];
      },
      _findBucketIndex$2: function(bucket, element) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i]._collection$_element, element))
            return i;
        return -1;
      },
      static: {
        _LinkedHashSet__newHashTable: function() {
          var table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          return table;
        }
      }
    },
    _LinkedHashSetCell: {
      "^": "Object;_collection$_element,0_next,0_collection$_previous"
    },
    _LinkedHashSetIterator: {
      "^": "Object;_set,_modifications,0_cell,0_collection$_current,$ti",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var t1 = this._set;
        if (this._modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        else {
          t1 = this._cell;
          if (t1 == null) {
            this._collection$_current = null;
            return false;
          } else {
            this._collection$_current = H.assertSubtypeOfRuntimeType(t1._collection$_element, H.getTypeArgumentByIndex(this, 0));
            this._cell = t1._next;
            return true;
          }
        }
      },
      static: {
        _LinkedHashSetIterator$: function(_set, _modifications, $E) {
          var t1 = new P._LinkedHashSetIterator(_set, _modifications, [$E]);
          t1._cell = _set._first;
          return t1;
        }
      }
    },
    _HashSetBase: {
      "^": "SetBase;",
      intersection$1: function(_, other) {
        var result, t1, element;
        H.assertSubtype(other, "$isSet", [P.Object], "$asSet");
        result = this._newSet$0();
        for (t1 = this.get$iterator(this); t1.moveNext$0();) {
          element = t1.get$current();
          if (other.contains$1(0, element))
            result.add$1(0, element);
        }
        return result;
      },
      toSet$0: function(_) {
        var t1 = this._newSet$0();
        t1.addAll$1(0, this);
        return t1;
      }
    },
    IterableBase: {
      "^": "Iterable;"
    },
    ListBase: {
      "^": "_ListBase_Object_ListMixin;",
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isList: 1
    },
    ListMixin: {
      "^": "Object;$ti",
      get$iterator: function(receiver) {
        return new H.ListIterator(receiver, this.get$length(receiver), 0, [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      forEach$1: function(receiver, action) {
        var $length, i;
        H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]});
        $length = this.get$length(receiver);
        for (i = 0; i < $length; ++i) {
          action.call$1(this.$index(receiver, i));
          if ($length !== this.get$length(receiver))
            throw H.wrapException(P.ConcurrentModificationError$(receiver));
        }
      },
      get$isEmpty: function(receiver) {
        return this.get$length(receiver) === 0;
      },
      get$isNotEmpty: function(receiver) {
        return this.get$length(receiver) !== 0;
      },
      get$first: function(receiver) {
        if (this.get$length(receiver) === 0)
          throw H.wrapException(H.IterableElementError_noElement());
        return this.$index(receiver, 0);
      },
      get$last: function(receiver) {
        if (this.get$length(receiver) === 0)
          throw H.wrapException(H.IterableElementError_noElement());
        return this.$index(receiver, this.get$length(receiver) - 1);
      },
      get$single: function(receiver) {
        if (this.get$length(receiver) === 0)
          throw H.wrapException(H.IterableElementError_noElement());
        if (this.get$length(receiver) > 1)
          throw H.wrapException(H.IterableElementError_tooMany());
        return this.$index(receiver, 0);
      },
      contains$1: function(receiver, element) {
        var $length, i;
        $length = this.get$length(receiver);
        for (i = 0; i < $length; ++i) {
          if (J.$eq$(this.$index(receiver, i), element))
            return true;
          if ($length !== this.get$length(receiver))
            throw H.wrapException(P.ConcurrentModificationError$(receiver));
        }
        return false;
      },
      map$1$1: function(receiver, f, $T) {
        var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
        return new H.MappedListIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
      },
      skip$1: function(receiver, count) {
        return H.SubListIterable$(receiver, count, null, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
      },
      take$1: function(receiver, count) {
        return H.SubListIterable$(receiver, 0, count, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
      },
      takeWhile$1: function(receiver, test) {
        var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
        return new H.TakeWhileIterable(receiver, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), [t1]);
      },
      toList$1$growable: function(receiver, growable) {
        var result, i;
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(receiver));
        for (i = 0; i < this.get$length(receiver); ++i)
          C.JSArray_methods.$indexSet(result, i, this.$index(receiver, i));
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      add$1: function(receiver, element) {
        var t1;
        H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
        t1 = this.get$length(receiver);
        this.set$length(receiver, t1 + 1);
        this.$indexSet(receiver, t1, element);
      },
      _closeGap$2: function(receiver, start, end) {
        var $length, size, i;
        $length = this.get$length(receiver);
        size = end - start;
        for (i = end; i < $length; ++i)
          this.$indexSet(receiver, i - size, this.$index(receiver, i));
        this.set$length(receiver, $length - size);
      },
      sublist$2: function(receiver, start, end) {
        var listLength, $length, result, i;
        listLength = this.get$length(receiver);
        if (end == null)
          end = listLength;
        P.RangeError_checkValidRange(start, end, listLength, null, null, null);
        $length = end - start;
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
        C.JSArray_methods.set$length(result, $length);
        for (i = 0; i < $length; ++i)
          C.JSArray_methods.$indexSet(result, i, this.$index(receiver, start + i));
        return result;
      },
      setRange$4: ["super$ListMixin$setRange", function(receiver, start, end, iterable, skipCount) {
        var t1, $length, otherStart, otherList, i;
        t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
        H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
        P.RangeError_checkValidRange(start, end, this.get$length(receiver), null, null, null);
        $length = end - start;
        if ($length === 0)
          return;
        t1 = H.checkSubtypeV2(iterable, "$isList", [t1], "$asList");
        if (t1) {
          otherStart = skipCount;
          otherList = iterable;
        } else {
          otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
          otherStart = 0;
        }
        t1 = J.getInterceptor$asx(otherList);
        if (otherStart + $length > t1.get$length(otherList))
          throw H.wrapException(H.IterableElementError_tooFew());
        if (otherStart < start)
          for (i = $length - 1; i >= 0; --i)
            this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
        else
          for (i = 0; i < $length; ++i)
            this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      }],
      get$reversed: function(receiver) {
        return new H.ReversedListIterable(receiver, [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      }
    },
    MapBase: {
      "^": "MapMixin;"
    },
    MapBase_mapToString_closure: {
      "^": "Closure:35;_box_0,result",
      call$2: function(k, v) {
        var t1, t2;
        t1 = this._box_0;
        if (!t1.first)
          this.result._contents += ", ";
        t1.first = false;
        t1 = this.result;
        t2 = t1._contents += H.S(k);
        t1._contents = t2 + ": ";
        t1._contents += H.S(v);
      }
    },
    MapMixin: {
      "^": "Object;$ti",
      forEach$1: function(_, action) {
        var t1, key;
        H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "MapMixin", 0), H.getRuntimeTypeArgument(this, "MapMixin", 1)]});
        for (t1 = J.get$iterator$ax(this.get$keys()); t1.moveNext$0();) {
          key = t1.get$current();
          action.call$2(key, this.$index(0, key));
        }
      },
      get$length: function(_) {
        return J.get$length$asx(this.get$keys());
      },
      get$isEmpty: function(_) {
        return J.get$isEmpty$asx(this.get$keys());
      },
      get$isNotEmpty: function(_) {
        return J.get$isNotEmpty$asx(this.get$keys());
      },
      toString$0: function(_) {
        return P.MapBase_mapToString(this);
      },
      $isMap: 1
    },
    _UnmodifiableMapMixin: {
      "^": "Object;$ti"
    },
    MapView: {
      "^": "Object;$ti",
      $index: function(_, key) {
        return this._map.$index(0, key);
      },
      forEach$1: function(_, action) {
        this._map.forEach$1(0, H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]}));
      },
      get$isEmpty: function(_) {
        var t1 = this._map;
        return t1.get$isEmpty(t1);
      },
      get$isNotEmpty: function(_) {
        var t1 = this._map;
        return t1.get$isNotEmpty(t1);
      },
      get$length: function(_) {
        var t1 = this._map;
        return t1.get$length(t1);
      },
      get$keys: function() {
        return this._map.get$keys();
      },
      toString$0: function(_) {
        return P.MapBase_mapToString(this._map);
      },
      $isMap: 1
    },
    UnmodifiableMapView: {
      "^": "_UnmodifiableMapView_MapView__UnmodifiableMapMixin;$ti"
    },
    SetMixin: {
      "^": "Object;$ti",
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      get$isNotEmpty: function(_) {
        return this.get$length(this) !== 0;
      },
      addAll$1: function(_, elements) {
        var t1;
        for (t1 = J.get$iterator$ax(H.assertSubtype(elements, "$isIterable", this.$ti, "$asIterable")); t1.moveNext$0();)
          this.add$1(0, t1.get$current());
      },
      toList$1$growable: function(_, growable) {
        var result, t1, i, i0;
        if (growable) {
          result = H.setRuntimeTypeInfo([], this.$ti);
          C.JSArray_methods.set$length(result, this.get$length(this));
        } else {
          t1 = new Array(this.get$length(this));
          t1.fixed$length = Array;
          result = H.setRuntimeTypeInfo(t1, this.$ti);
        }
        for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
          i0 = i + 1;
          C.JSArray_methods.$indexSet(result, i, t1.get$current());
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      forEach$1: function(_, f) {
        var t1;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          f.call$1(t1.get$current());
      },
      join$1: function(_, separator) {
        var iterator, t1;
        iterator = this.get$iterator(this);
        if (!iterator.moveNext$0())
          return "";
        if (separator === "") {
          t1 = "";
          do
            t1 += H.S(iterator.get$current());
          while (iterator.moveNext$0());
        } else {
          t1 = H.S(iterator.get$current());
          for (; iterator.moveNext$0();)
            t1 = t1 + separator + H.S(iterator.get$current());
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isSet: 1
    },
    SetBase: {
      "^": "SetMixin;"
    },
    _ListBase_Object_ListMixin: {
      "^": "Object+ListMixin;"
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: {
      "^": "MapView+_UnmodifiableMapMixin;$ti"
    }
  }], ["dart.convert", "dart:convert",, P, {
    "^": "",
    _parseJson: function(source, reviver) {
      var parsed, e, exception, t1;
      if (typeof source !== "string")
        throw H.wrapException(H.argumentErrorValue(source));
      parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.FormatException$(String(e), null, null);
        throw H.wrapException(t1);
      }
      t1 = P._convertJsonToDartLazy(parsed);
      return t1;
    },
    _convertJsonToDartLazy: function(object) {
      var i;
      if (object == null)
        return;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new P._JsonMap(object, Object.create(null));
      for (i = 0; i < object.length; ++i)
        object[i] = P._convertJsonToDartLazy(object[i]);
      return object;
    },
    _JsonMap: {
      "^": "MapBase;_original,_processed,0_data",
      $index: function(_, key) {
        var t1, result;
        t1 = this._processed;
        if (t1 == null)
          return this._data.$index(0, key);
        else if (typeof key !== "string")
          return;
        else {
          result = t1[key];
          return typeof result == "undefined" ? this._process$1(key) : result;
        }
      },
      get$length: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          t1 = t1.get$length(t1);
        } else
          t1 = this._computeKeys$0().length;
        return t1;
      },
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      get$isNotEmpty: function(_) {
        return this.get$length(this) > 0;
      },
      get$keys: function() {
        if (this._processed == null)
          return this._data.get$keys();
        return new P._JsonMapKeyIterable(this);
      },
      containsKey$1: function(key) {
        if (this._processed == null)
          return this._data.containsKey$1(key);
        return Object.prototype.hasOwnProperty.call(this._original, key);
      },
      forEach$1: function(_, f) {
        var keys, i, key, value;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
        if (this._processed == null)
          return this._data.forEach$1(0, f);
        keys = this._computeKeys$0();
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          value = this._processed[key];
          if (typeof value == "undefined") {
            value = P._convertJsonToDartLazy(this._original[key]);
            this._processed[key] = value;
          }
          f.call$2(key, value);
          if (keys !== this._data)
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
      },
      _computeKeys$0: function() {
        var keys = H.listTypeCheck(this._data);
        if (keys == null) {
          keys = H.setRuntimeTypeInfo(Object.keys(this._original), [P.String]);
          this._data = keys;
        }
        return keys;
      },
      _process$1: function(key) {
        var result;
        if (!Object.prototype.hasOwnProperty.call(this._original, key))
          return;
        result = P._convertJsonToDartLazy(this._original[key]);
        return this._processed[key] = result;
      },
      $asMapMixin: function() {
        return [P.String, null];
      },
      $asMap: function() {
        return [P.String, null];
      }
    },
    _JsonMapKeyIterable: {
      "^": "ListIterable;_parent",
      get$length: function(_) {
        var t1 = this._parent;
        return t1.get$length(t1);
      },
      elementAt$1: function(_, index) {
        var t1 = this._parent;
        if (t1._processed == null)
          t1 = t1.get$keys().elementAt$1(0, index);
        else {
          t1 = t1._computeKeys$0();
          if (index < 0 || index >= t1.length)
            return H.ioore(t1, index);
          t1 = t1[index];
        }
        return t1;
      },
      get$iterator: function(_) {
        var t1 = this._parent;
        if (t1._processed == null) {
          t1 = t1.get$keys();
          t1 = t1.get$iterator(t1);
        } else {
          t1 = t1._computeKeys$0();
          t1 = new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
        }
        return t1;
      },
      contains$1: function(_, key) {
        return this._parent.containsKey$1(key);
      },
      $asEfficientLengthIterable: function() {
        return [P.String];
      },
      $asListIterable: function() {
        return [P.String];
      },
      $asIterable: function() {
        return [P.String];
      }
    },
    Codec: {
      "^": "Object;$ti"
    },
    Converter: {
      "^": "StreamTransformerBase;$ti"
    },
    Encoding: {
      "^": "Codec;",
      $asCodec: function() {
        return [P.String, [P.List, P.int]];
      }
    },
    JsonCodec: {
      "^": "Codec;_reviver,_toEncodable",
      decode$2$reviver: function(_, source, reviver) {
        var t1 = P._parseJson(source, this.get$decoder()._reviver);
        return t1;
      },
      decode$1: function($receiver, source) {
        return this.decode$2$reviver($receiver, source, null);
      },
      get$decoder: function() {
        return C.JsonDecoder_null;
      },
      $asCodec: function() {
        return [P.Object, P.String];
      }
    },
    JsonDecoder: {
      "^": "Converter;_reviver",
      $asConverter: function() {
        return [P.String, P.Object];
      }
    },
    Utf8Codec: {
      "^": "Encoding;_allowMalformed",
      get$encoder: function() {
        return C.C_Utf8Encoder;
      }
    },
    Utf8Encoder: {
      "^": "Converter;",
      convert$3: function(string, start, end) {
        var stringLength, $length, t1, encoder;
        stringLength = string.length;
        P.RangeError_checkValidRange(start, end, stringLength, null, null, null);
        $length = stringLength - start;
        if ($length === 0)
          return new Uint8Array(0);
        t1 = new Uint8Array($length * 3);
        encoder = new P._Utf8Encoder(0, 0, t1);
        if (encoder._fillBuffer$3(string, start, stringLength) !== stringLength)
          encoder._writeSurrogate$2(J.codeUnitAt$1$s(string, stringLength - 1), 0);
        return new Uint8Array(t1.subarray(0, H._checkValidRange(0, encoder._bufferIndex, t1.length)));
      },
      convert$1: function(string) {
        return this.convert$3(string, 0, null);
      },
      $asConverter: function() {
        return [P.String, [P.List, P.int]];
      }
    },
    _Utf8Encoder: {
      "^": "Object;_carry,_bufferIndex,_convert$_buffer",
      _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
        var t1, t2, t3, t4, rune;
        t1 = this._convert$_buffer;
        t2 = this._bufferIndex;
        t3 = t2 + 1;
        t4 = t1.length;
        if ((nextCodeUnit & 64512) === 56320) {
          rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
          this._bufferIndex = t3;
          if (t2 >= t4)
            return H.ioore(t1, t2);
          t1[t2] = 240 | rune >>> 18;
          t2 = t3 + 1;
          this._bufferIndex = t2;
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = 128 | rune >>> 12 & 63;
          t3 = t2 + 1;
          this._bufferIndex = t3;
          if (t2 >= t4)
            return H.ioore(t1, t2);
          t1[t2] = 128 | rune >>> 6 & 63;
          this._bufferIndex = t3 + 1;
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = 128 | rune & 63;
          return true;
        } else {
          this._bufferIndex = t3;
          if (t2 >= t4)
            return H.ioore(t1, t2);
          t1[t2] = 224 | leadingSurrogate >>> 12;
          t2 = t3 + 1;
          this._bufferIndex = t2;
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = 128 | leadingSurrogate >>> 6 & 63;
          this._bufferIndex = t2 + 1;
          if (t2 >= t4)
            return H.ioore(t1, t2);
          t1[t2] = 128 | leadingSurrogate & 63;
          return false;
        }
      },
      _fillBuffer$3: function(str, start, end) {
        var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, t5;
        if (start !== end && (J.codeUnitAt$1$s(str, end - 1) & 64512) === 55296)
          --end;
        for (t1 = this._convert$_buffer, t2 = t1.length, t3 = J.getInterceptor$s(str), stringIndex = start; stringIndex < end; ++stringIndex) {
          codeUnit = t3._codeUnitAt$1(str, stringIndex);
          if (codeUnit <= 127) {
            t4 = this._bufferIndex;
            if (t4 >= t2)
              break;
            this._bufferIndex = t4 + 1;
            t1[t4] = codeUnit;
          } else if ((codeUnit & 64512) === 55296) {
            if (this._bufferIndex + 3 >= t2)
              break;
            stringIndex0 = stringIndex + 1;
            if (this._writeSurrogate$2(codeUnit, C.JSString_methods._codeUnitAt$1(str, stringIndex0)))
              stringIndex = stringIndex0;
          } else if (codeUnit <= 2047) {
            t4 = this._bufferIndex;
            t5 = t4 + 1;
            if (t5 >= t2)
              break;
            this._bufferIndex = t5;
            if (t4 >= t2)
              return H.ioore(t1, t4);
            t1[t4] = 192 | codeUnit >>> 6;
            this._bufferIndex = t5 + 1;
            t1[t5] = 128 | codeUnit & 63;
          } else {
            t4 = this._bufferIndex;
            if (t4 + 2 >= t2)
              break;
            t5 = t4 + 1;
            this._bufferIndex = t5;
            if (t4 >= t2)
              return H.ioore(t1, t4);
            t1[t4] = 224 | codeUnit >>> 12;
            t4 = t5 + 1;
            this._bufferIndex = t4;
            if (t5 >= t2)
              return H.ioore(t1, t5);
            t1[t5] = 128 | codeUnit >>> 6 & 63;
            this._bufferIndex = t4 + 1;
            if (t4 >= t2)
              return H.ioore(t1, t4);
            t1[t4] = 128 | codeUnit & 63;
          }
        }
        return stringIndex;
      }
    },
    Utf8Decoder: {
      "^": "Converter;_allowMalformed",
      convert$3: function(codeUnits, start, end) {
        var t1, result, $length, buffer, decoder;
        H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
        t1 = this._allowMalformed;
        result = P.Utf8Decoder__convertIntercepted(t1, codeUnits, start, end);
        if (result != null)
          return result;
        $length = J.get$length$asx(codeUnits);
        P.RangeError_checkValidRange(start, end, $length, null, null, null);
        if (end == null)
          end = $length;
        buffer = new P.StringBuffer("");
        decoder = new P._Utf8Decoder(t1, buffer, true, 0, 0, 0);
        decoder.convert$3(codeUnits, start, end);
        if (decoder._expectedUnits > 0) {
          if (!t1)
            H.throwExpression(P.FormatException$("Unfinished UTF-8 octet sequence", codeUnits, end));
          buffer._contents += H.Primitives_stringFromCharCode(65533);
          decoder._convert$_value = 0;
          decoder._expectedUnits = 0;
          decoder._extraUnits = 0;
        }
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      $asConverter: function() {
        return [[P.List, P.int], P.String];
      },
      static: {
        Utf8Decoder__convertIntercepted: function(allowMalformed, codeUnits, start, end) {
          H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
          if (codeUnits instanceof Uint8Array)
            return P.Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end);
          return;
        },
        Utf8Decoder__convertInterceptedUint8List: function(allowMalformed, codeUnits, start, end) {
          var decoder, t1, $length;
          if (allowMalformed)
            return;
          decoder = $.$get$Utf8Decoder__decoder();
          if (decoder == null)
            return;
          t1 = 0 === start;
          if (t1 && end == null)
            return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits);
          $length = codeUnits.length;
          end = P.RangeError_checkValidRange(start, end, $length, null, null, null);
          if (t1 && end === $length)
            return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits);
          return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits.subarray(start, end));
        },
        Utf8Decoder__useTextDecoderChecked: function(decoder, codeUnits) {
          if (P.Utf8Decoder__unsafe(codeUnits))
            return;
          return P.Utf8Decoder__useTextDecoderUnchecked(decoder, codeUnits);
        },
        Utf8Decoder__useTextDecoderUnchecked: function(decoder, codeUnits) {
          var t1, exception;
          try {
            t1 = decoder.decode(codeUnits);
            return t1;
          } catch (exception) {
            H.unwrapException(exception);
          }
          return;
        },
        Utf8Decoder__unsafe: function(codeUnits) {
          var limit, i;
          limit = codeUnits.length - 2;
          for (i = 0; i < limit; ++i)
            if (codeUnits[i] === 237)
              if ((codeUnits[i + 1] & 224) === 160)
                return true;
          return false;
        },
        Utf8Decoder__makeDecoder: function() {
          var t1, exception;
          try {
            t1 = new TextDecoder("utf-8", {fatal: true});
            return t1;
          } catch (exception) {
            H.unwrapException(exception);
          }
          return;
        }
      }
    },
    _Utf8Decoder: {
      "^": "Object;_allowMalformed,_stringSink,_isFirstCharacter,_convert$_value,_expectedUnits,_extraUnits",
      convert$3: function(codeUnits, startIndex, endIndex) {
        var value, expectedUnits, extraUnits, scanOneByteCharacters, addSingleBytes, t1, t2, t3, i, unit, t4, oneBytes, i0;
        H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
        value = this._convert$_value;
        expectedUnits = this._expectedUnits;
        extraUnits = this._extraUnits;
        this._convert$_value = 0;
        this._expectedUnits = 0;
        this._extraUnits = 0;
        scanOneByteCharacters = new P._Utf8Decoder_convert_scanOneByteCharacters(endIndex);
        addSingleBytes = new P._Utf8Decoder_convert_addSingleBytes(this, startIndex, endIndex, codeUnits);
        $label0$0:
          for (t1 = this._stringSink, t2 = !this._allowMalformed, t3 = J.getInterceptor$asx(codeUnits), i = startIndex; true; i = i0) {
            $label1$1:
              if (expectedUnits > 0) {
                do {
                  if (i === endIndex)
                    break $label0$0;
                  unit = t3.$index(codeUnits, i);
                  if (typeof unit !== "number")
                    return unit.$and();
                  if ((unit & 192) !== 128) {
                    if (t2)
                      throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + C.JSInt_methods.toRadixString$1(unit, 16), codeUnits, i));
                    this._isFirstCharacter = false;
                    t1._contents += H.Primitives_stringFromCharCode(65533);
                    expectedUnits = 0;
                    break $label1$1;
                  } else {
                    value = (value << 6 | unit & 63) >>> 0;
                    --expectedUnits;
                    ++i;
                  }
                } while (expectedUnits > 0);
                t4 = extraUnits - 1;
                if (t4 < 0 || t4 >= 4)
                  return H.ioore(C.List_127_2047_65535_1114111, t4);
                if (value <= C.List_127_2047_65535_1114111[t4]) {
                  if (t2)
                    throw H.wrapException(P.FormatException$("Overlong encoding of 0x" + C.JSInt_methods.toRadixString$1(value, 16), codeUnits, i - extraUnits - 1));
                  value = 65533;
                  expectedUnits = 0;
                  extraUnits = 0;
                }
                if (value > 1114111) {
                  if (t2)
                    throw H.wrapException(P.FormatException$("Character outside valid Unicode range: 0x" + C.JSInt_methods.toRadixString$1(value, 16), codeUnits, i - extraUnits - 1));
                  value = 65533;
                }
                if (!this._isFirstCharacter || value !== 65279)
                  t1._contents += H.Primitives_stringFromCharCode(value);
                this._isFirstCharacter = false;
              }
            for (; i < endIndex; i = i0) {
              oneBytes = scanOneByteCharacters.call$2(codeUnits, i);
              if (typeof oneBytes !== "number")
                return oneBytes.$gt();
              if (oneBytes > 0) {
                this._isFirstCharacter = false;
                i0 = i + oneBytes;
                addSingleBytes.call$2(i, i0);
                if (i0 === endIndex)
                  break;
                i = i0;
              }
              i0 = i + 1;
              unit = t3.$index(codeUnits, i);
              if (typeof unit !== "number")
                return unit.$lt();
              if (unit < 0) {
                if (t2)
                  throw H.wrapException(P.FormatException$("Negative UTF-8 code unit: -0x" + C.JSInt_methods.toRadixString$1(-unit, 16), codeUnits, i0 - 1));
                t1._contents += H.Primitives_stringFromCharCode(65533);
              } else {
                if ((unit & 224) === 192) {
                  value = unit & 31;
                  expectedUnits = 1;
                  extraUnits = 1;
                  continue $label0$0;
                }
                if ((unit & 240) === 224) {
                  value = unit & 15;
                  expectedUnits = 2;
                  extraUnits = 2;
                  continue $label0$0;
                }
                if ((unit & 248) === 240 && unit < 245) {
                  value = unit & 7;
                  expectedUnits = 3;
                  extraUnits = 3;
                  continue $label0$0;
                }
                if (t2)
                  throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + C.JSInt_methods.toRadixString$1(unit, 16), codeUnits, i0 - 1));
                this._isFirstCharacter = false;
                t1._contents += H.Primitives_stringFromCharCode(65533);
                value = 65533;
                expectedUnits = 0;
                extraUnits = 0;
              }
            }
            break $label0$0;
          }
        if (expectedUnits > 0) {
          this._convert$_value = value;
          this._expectedUnits = expectedUnits;
          this._extraUnits = extraUnits;
        }
      }
    },
    _Utf8Decoder_convert_scanOneByteCharacters: {
      "^": "Closure:44;endIndex",
      call$2: function(units, from) {
        var to, t1, i, unit;
        H.assertSubtype(units, "$isList", [P.int], "$asList");
        to = this.endIndex;
        for (t1 = J.getInterceptor$asx(units), i = from; i < to; ++i) {
          unit = t1.$index(units, i);
          if (typeof unit !== "number")
            return unit.$and();
          if ((unit & 127) !== unit)
            return i - from;
        }
        return to - from;
      }
    },
    _Utf8Decoder_convert_addSingleBytes: {
      "^": "Closure:47;$this,startIndex,endIndex,codeUnits",
      call$2: function(from, to) {
        this.$this._stringSink._contents += P.String_String$fromCharCodes(this.codeUnits, from, to);
      }
    }
  }], ["dart.core", "dart:core",, P, {
    "^": "",
    int_parse: function(source, onError, radix) {
      var value;
      H.functionTypeCheck(onError, {func: 1, ret: P.int, args: [P.String]});
      value = H.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      if (onError != null)
        return onError.call$1(source);
      throw H.wrapException(P.FormatException$(source, null, null));
    },
    double_parse: function(source, onError) {
      var value = H.Primitives_parseDouble(source);
      if (value != null)
        return value;
      throw H.wrapException(P.FormatException$("Invalid double", source, null));
    },
    Error__objectToString: function(object) {
      var t1 = J.getInterceptor(object);
      if (!!t1.$isClosure)
        return t1.toString$0(object);
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    List_List$filled: function($length, fill, growable, $E) {
      var result, i;
      H.assertSubtypeOfRuntimeType(fill, $E);
      if (growable)
        result = H.setRuntimeTypeInfo(new Array($length), [$E]);
      else
        result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          C.JSArray_methods.$indexSet(result, i, fill);
      return H.assertSubtype(result, "$isList", [$E], "$asList");
    },
    List_List$from: function(elements, growable, $E) {
      var t1, list, t2;
      t1 = [$E];
      list = H.setRuntimeTypeInfo([], t1);
      for (t2 = J.get$iterator$ax(elements); t2.moveNext$0();)
        C.JSArray_methods.add$1(list, H.assertSubtypeOfRuntimeType(t2.get$current(), $E));
      if (growable)
        return list;
      return H.assertSubtype(J.JSArray_markFixedList(list), "$isList", t1, "$asList");
    },
    String_String$fromCharCodes: function(charCodes, start, end) {
      var t1, len;
      t1 = P.int;
      H.assertSubtype(charCodes, "$isIterable", [t1], "$asIterable");
      if (typeof charCodes === "object" && charCodes !== null && charCodes.constructor === Array) {
        H.assertSubtype(charCodes, "$isJSArray", [t1], "$asJSArray");
        len = charCodes.length;
        end = P.RangeError_checkValidRange(start, end, len, null, null, null);
        return H.Primitives_stringFromCharCodes(start > 0 || end < len ? C.JSArray_methods.sublist$2(charCodes, start, end) : charCodes);
      }
      if (!!J.getInterceptor(charCodes).$isNativeUint8List)
        return H.Primitives_stringFromNativeUint8List(charCodes, start, P.RangeError_checkValidRange(start, end, charCodes.length, null, null, null));
      return P.String__stringFromIterable(charCodes, start, end);
    },
    String__stringFromIterable: function(charCodes, start, end) {
      var t1, it, i, list;
      H.assertSubtype(charCodes, "$isIterable", [P.int], "$asIterable");
      if (start < 0)
        throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(charCodes), null, null));
      t1 = end == null;
      if (!t1 && end < start)
        throw H.wrapException(P.RangeError$range(end, start, J.get$length$asx(charCodes), null, null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw H.wrapException(P.RangeError$range(start, 0, i, null, null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current());
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw H.wrapException(P.RangeError$range(end, start, i, null, null));
          list.push(it.get$current());
        }
      return H.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp: function(source, caseSensitive, multiLine) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, false, true, false));
    },
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    Exception_Exception: function(message) {
      return new P._Exception(message);
    },
    print: function(object) {
      H.printString(H.S(object));
    },
    NoSuchMethodError_toString_closure: {
      "^": "Closure:51;_box_0,sb",
      call$2: function(key, value) {
        var t1, t2, t3;
        H.interceptedTypeCheck(key, "$isSymbol0");
        t1 = this.sb;
        t2 = this._box_0;
        t1._contents += t2.comma;
        t3 = t1._contents += H.S(key.__internal$_name);
        t1._contents = t3 + ": ";
        t1._contents += H.S(P.Error_safeToString(value));
        t2.comma = ", ";
      }
    },
    bool: {
      "^": "Object;"
    },
    "+bool": 0,
    DateTime: {
      "^": "Object;_core$_value,isUtc",
      add$1: function(_, duration) {
        return P.DateTime$_withValue(C.JSInt_methods.$add(this._core$_value, duration.get$inMilliseconds()), this.isUtc);
      },
      get$millisecondsSinceEpoch: function() {
        return this._core$_value;
      },
      DateTime$_withValue$2$isUtc: function(_value, isUtc) {
        var t1;
        if (Math.abs(this._core$_value) <= 864e13)
          t1 = false;
        else
          t1 = true;
        if (t1)
          throw H.wrapException(P.ArgumentError$("DateTime is outside valid range: " + this.get$millisecondsSinceEpoch()));
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof P.DateTime))
          return false;
        return this._core$_value === other._core$_value && this.isUtc === other.isUtc;
      },
      compareTo$1: function(_, other) {
        return C.JSInt_methods.compareTo$1(this._core$_value, H.interceptedTypeCheck(other, "$isDateTime")._core$_value);
      },
      get$hashCode: function(_) {
        var t1 = this._core$_value;
        return (t1 ^ C.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
      },
      toString$0: function(_) {
        var y, m, d, h, min, sec, ms;
        y = P.DateTime__fourDigits(H.Primitives_getYear(this));
        m = P.DateTime__twoDigits(H.Primitives_getMonth(this));
        d = P.DateTime__twoDigits(H.Primitives_getDay(this));
        h = P.DateTime__twoDigits(H.Primitives_getHours(this));
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(this));
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(this));
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(this));
        if (this.isUtc)
          return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
        else
          return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
      },
      $isComparable: 1,
      $asComparable: function() {
        return [P.DateTime];
      },
      static: {
        DateTime$_withValue: function(_value, isUtc) {
          var t1 = new P.DateTime(_value, isUtc);
          t1.DateTime$_withValue$2$isUtc(_value, isUtc);
          return t1;
        },
        DateTime__fourDigits: function(n) {
          var absN, sign;
          absN = Math.abs(n);
          sign = n < 0 ? "-" : "";
          if (absN >= 1000)
            return "" + n;
          if (absN >= 100)
            return sign + "0" + absN;
          if (absN >= 10)
            return sign + "00" + absN;
          return sign + "000" + absN;
        },
        DateTime__threeDigits: function(n) {
          if (n >= 100)
            return "" + n;
          if (n >= 10)
            return "0" + n;
          return "00" + n;
        },
        DateTime__twoDigits: function(n) {
          if (n >= 10)
            return "" + n;
          return "0" + n;
        }
      }
    },
    double: {
      "^": "num;"
    },
    "+double": 0,
    Error: {
      "^": "Object;",
      get$stackTrace: function() {
        return H.getTraceFromException(this.$thrownJsError);
      }
    },
    NullThrownError: {
      "^": "Error;",
      toString$0: function(_) {
        return "Throw of null.";
      }
    },
    ArgumentError: {
      "^": "Error;_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "Invalid argument" + (!this._hasValue ? "(s)" : "");
      },
      get$_errorExplanation: function() {
        return "";
      },
      toString$0: function(_) {
        var t1, nameString, message, prefix, explanation, errorValue;
        t1 = this.name;
        nameString = t1 != null ? " (" + t1 + ")" : "";
        t1 = this.message;
        message = t1 == null ? "" : ": " + H.S(t1);
        prefix = this.get$_errorName() + nameString + message;
        if (!this._hasValue)
          return prefix;
        explanation = this.get$_errorExplanation();
        errorValue = P.Error_safeToString(this.invalidValue);
        return prefix + explanation + ": " + H.S(errorValue);
      },
      static: {
        ArgumentError$: function(message) {
          return new P.ArgumentError(false, null, null, message);
        },
        ArgumentError$value: function(value, $name, message) {
          return new P.ArgumentError(true, value, $name, message);
        }
      }
    },
    RangeError: {
      "^": "ArgumentError;start,end,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        var t1, explanation, t2;
        t1 = this.start;
        if (t1 == null) {
          t1 = this.end;
          explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
        } else {
          t2 = this.end;
          if (t2 == null)
            explanation = ": Not greater than or equal to " + H.S(t1);
          else if (t2 > t1)
            explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
          else
            explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
        }
        return explanation;
      },
      static: {
        RangeError$: function(message) {
          return new P.RangeError(null, null, false, null, null, message);
        },
        RangeError$value: function(value, $name, message) {
          return new P.RangeError(null, null, true, value, $name, "Value not in range");
        },
        RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
          return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
        },
        RangeError_checkValidRange: function(start, end, $length, startName, endName, message) {
          if (typeof start !== "number")
            return H.iae(start);
          if (0 > start || start > $length)
            throw H.wrapException(P.RangeError$range(start, 0, $length, "start", message));
          if (end != null) {
            if (start > end || end > $length)
              throw H.wrapException(P.RangeError$range(end, start, $length, "end", message));
            return end;
          }
          return $length;
        }
      }
    },
    IndexError: {
      "^": "ArgumentError;indexable,length>,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        if (J.$lt$n(this.invalidValue, 0))
          return ": index must not be negative";
        var t1 = this.length;
        if (t1 === 0)
          return ": no indices are valid";
        return ": index should be less than " + H.S(t1);
      },
      static: {
        IndexError$: function(invalidValue, indexable, $name, message, $length) {
          var t1 = H.intTypeCheck($length != null ? $length : J.get$length$asx(indexable));
          return new P.IndexError(indexable, t1, true, invalidValue, $name, "Index out of range");
        }
      }
    },
    NoSuchMethodError: {
      "^": "Error;_core$_receiver,_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
      toString$0: function(_) {
        var _box_0, sb, t1, t2, _i, t3, t4, argument, memberName, receiverText, actualParameters;
        _box_0 = {};
        sb = new P.StringBuffer("");
        _box_0.comma = "";
        t1 = this._core$_arguments;
        if (t1 != null)
          for (t2 = t1.length, _i = 0, t3 = "", t4 = ""; _i < t2; ++_i, t4 = ", ") {
            argument = t1[_i];
            sb._contents = t3 + t4;
            t3 = sb._contents += H.S(P.Error_safeToString(argument));
            _box_0.comma = ", ";
          }
        t1 = this._namedArguments;
        if (t1 != null)
          t1.forEach$1(0, new P.NoSuchMethodError_toString_closure(_box_0, sb));
        memberName = this._memberName.__internal$_name;
        receiverText = P.Error_safeToString(this._core$_receiver);
        actualParameters = sb.toString$0(0);
        t1 = "NoSuchMethodError: method not found: '" + H.S(memberName) + "'\nReceiver: " + H.S(receiverText) + "\nArguments: [" + actualParameters + "]";
        return t1;
      },
      static: {
        NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
          return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
        }
      }
    },
    UnsupportedError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "Unsupported operation: " + this.message;
      },
      static: {
        UnsupportedError$: function(message) {
          return new P.UnsupportedError(message);
        }
      }
    },
    UnimplementedError: {
      "^": "Error;message",
      toString$0: function(_) {
        var t1 = this.message;
        return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
      },
      static: {
        UnimplementedError$: function(message) {
          return new P.UnimplementedError(message);
        }
      }
    },
    StateError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "Bad state: " + this.message;
      },
      static: {
        StateError$: function(message) {
          return new P.StateError(message);
        }
      }
    },
    ConcurrentModificationError: {
      "^": "Error;modifiedObject",
      toString$0: function(_) {
        var t1 = this.modifiedObject;
        if (t1 == null)
          return "Concurrent modification during iteration.";
        return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
      },
      static: {
        ConcurrentModificationError$: function(modifiedObject) {
          return new P.ConcurrentModificationError(modifiedObject);
        }
      }
    },
    OutOfMemoryError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Out of Memory";
      },
      get$stackTrace: function() {
        return;
      },
      $isError: 1
    },
    StackOverflowError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Stack Overflow";
      },
      get$stackTrace: function() {
        return;
      },
      $isError: 1
    },
    CyclicInitializationError: {
      "^": "Error;variableName",
      toString$0: function(_) {
        var t1 = this.variableName;
        return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + t1 + "' during its initialization";
      }
    },
    _Exception: {
      "^": "Object;message",
      toString$0: function(_) {
        return "Exception: " + this.message;
      }
    },
    FormatException: {
      "^": "Object;message,source>,offset>",
      toString$0: function(_) {
        var t1, report, offset, source, lineNum, lineStart, previousCharWasCR, i, char, lineEnd, end, start, prefix, postfix, slice;
        t1 = this.message;
        report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException";
        offset = this.offset;
        source = this.source;
        if (typeof source !== "string")
          return offset != null ? report + (" (at offset " + H.S(offset) + ")") : report;
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = C.JSString_methods.substring$2(source, 0, 75) + "...";
          return report + "\n" + source;
        }
        for (lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          char = C.JSString_methods._codeUnitAt$1(source, i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        lineEnd = source.length;
        for (i = offset; i < source.length; ++i) {
          char = C.JSString_methods.codeUnitAt$1(source, i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = C.JSString_methods.substring$2(source, start, end);
        return report + prefix + slice + postfix + "\n" + C.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      },
      static: {
        FormatException$: function(message, source, offset) {
          return new P.FormatException(message, source, offset);
        }
      }
    },
    int: {
      "^": "num;"
    },
    "+int": 0,
    Iterable: {
      "^": "Object;$ti",
      where$1: ["super$Iterable$where", function(_, test) {
        var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
        return new H.WhereIterable(this, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), [t1]);
      }],
      contains$1: function(_, element) {
        var t1;
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          if (J.$eq$(t1.get$current(), element))
            return true;
        return false;
      },
      forEach$1: function(_, f) {
        var t1;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "Iterable", 0)]});
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          f.call$1(t1.get$current());
      },
      join$1: function(_, separator) {
        var iterator, t1;
        iterator = this.get$iterator(this);
        if (!iterator.moveNext$0())
          return "";
        if (separator === "") {
          t1 = "";
          do
            t1 += H.S(iterator.get$current());
          while (iterator.moveNext$0());
        } else {
          t1 = H.S(iterator.get$current());
          for (; iterator.moveNext$0();)
            t1 = t1 + separator + H.S(iterator.get$current());
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      get$length: function(_) {
        var it, count;
        it = this.get$iterator(this);
        for (count = 0; it.moveNext$0();)
          ++count;
        return count;
      },
      get$isEmpty: function(_) {
        return !this.get$iterator(this).moveNext$0();
      },
      get$isNotEmpty: function(_) {
        return !this.get$isEmpty(this);
      },
      firstWhere$2$orElse: function(_, test, orElse) {
        var t1, element;
        t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
        H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]});
        H.functionTypeCheck(orElse, {func: 1, ret: t1});
        for (t1 = this.get$iterator(this); t1.moveNext$0();) {
          element = t1.get$current();
          if (test.call$1(element))
            return element;
        }
        return orElse.call$0();
      },
      elementAt$1: function(_, index) {
        var t1, elementIndex, element;
        if (index < 0)
          H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
        for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
          element = t1.get$current();
          if (index === elementIndex)
            return element;
          ++elementIndex;
        }
        throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToShortString(this, "(", ")");
      }
    },
    Iterator: {
      "^": "Object;$ti"
    },
    List: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $isIterable: 1
    },
    "+List": 0,
    Null: {
      "^": "Object;",
      get$hashCode: function(_) {
        return P.Object.prototype.get$hashCode.call(this, this);
      },
      toString$0: function(_) {
        return "null";
      }
    },
    "+Null": 0,
    num: {
      "^": "Object;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.num];
      }
    },
    "+num": 0,
    Object: {
      "^": ";",
      $eq: function(_, other) {
        return this === other;
      },
      get$hashCode: function(_) {
        return H.Primitives_objectHashCode(this);
      },
      toString$0: ["super$Object$toString", function(_) {
        return "Instance of '" + H.Primitives_objectTypeName(this) + "'";
      }],
      noSuchMethod$1: [function(_, invocation) {
        H.interceptedTypeCheck(invocation, "$isInvocation");
        throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
      }, null, "get$noSuchMethod", 5, 0, null, 2],
      toString: function() {
        return this.toString$0(this);
      }
    },
    Match: {
      "^": "Object;"
    },
    Set: {
      "^": "EfficientLengthIterable;$ti"
    },
    StackTrace: {
      "^": "Object;"
    },
    String: {
      "^": "Object;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.String];
      },
      $isPattern: 1
    },
    "+String": 0,
    StringBuffer: {
      "^": "Object;_contents@",
      get$length: function(_) {
        return this._contents.length;
      },
      toString$0: function(_) {
        var t1 = this._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      get$isEmpty: function(_) {
        return this._contents.length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._contents.length !== 0;
      },
      $isStringSink: 1,
      static: {
        StringBuffer__writeAll: function(string, objects, separator) {
          var iterator = J.get$iterator$ax(objects);
          if (!iterator.moveNext$0())
            return string;
          if (separator.length === 0) {
            do
              string += H.S(iterator.get$current());
            while (iterator.moveNext$0());
          } else {
            string += H.S(iterator.get$current());
            for (; iterator.moveNext$0();)
              string = string + separator + H.S(iterator.get$current());
          }
          return string;
        }
      }
    },
    Symbol0: {
      "^": "Object;"
    },
    _Uri: {
      "^": "Object;scheme<,_userInfo,_host,_port,path>,_query,_fragment,0_pathSegments,0_core$_text,0_hashCodeCache,0_queryParameters,0_queryParameterLists",
      get$userInfo: function() {
        return this._userInfo;
      },
      get$host: function(_) {
        var t1 = this._host;
        if (t1 == null)
          return "";
        if (C.JSString_methods.startsWith$1(t1, "["))
          return C.JSString_methods.substring$2(t1, 1, t1.length - 1);
        return t1;
      },
      get$port: function(_) {
        var t1 = this._port;
        if (t1 == null)
          return P._Uri__defaultPort(this.scheme);
        return t1;
      },
      get$query: function() {
        var t1 = this._query;
        return t1 == null ? "" : t1;
      },
      get$fragment: function() {
        var t1 = this._fragment;
        return t1 == null ? "" : t1;
      },
      get$hasAuthority: function() {
        return this._host != null;
      },
      get$hasQuery: function() {
        return this._query != null;
      },
      get$hasFragment: function() {
        return this._fragment != null;
      },
      toString$0: function(_) {
        var t1, t2, t3, t4;
        t1 = this._core$_text;
        if (t1 == null) {
          t1 = this.scheme;
          t2 = t1.length !== 0 ? H.S(t1) + ":" : "";
          t3 = this._host;
          t4 = t3 == null;
          if (!t4 || t1 === "file") {
            t1 = t2 + "//";
            t2 = this._userInfo;
            if (t2.length !== 0)
              t1 = t1 + H.S(t2) + "@";
            if (!t4)
              t1 += t3;
            t2 = this._port;
            if (t2 != null)
              t1 = t1 + ":" + H.S(t2);
          } else
            t1 = t2;
          t1 += H.S(this.path);
          t2 = this._query;
          if (t2 != null)
            t1 = t1 + "?" + t2;
          t2 = this._fragment;
          if (t2 != null)
            t1 = t1 + "#" + t2;
          t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
          this._core$_text = t1;
        }
        return t1;
      },
      $eq: function(_, other) {
        var t1, t2, t3;
        if (other == null)
          return false;
        if (this === other)
          return true;
        t1 = J.getInterceptor(other);
        if (!!t1.$isUri) {
          t2 = this.scheme;
          t3 = other.get$scheme();
          if (t2 == null ? t3 == null : t2 === t3)
            if (this._host != null === other.get$hasAuthority()) {
              t2 = this._userInfo;
              t3 = other.get$userInfo();
              if (t2 == null ? t3 == null : t2 === t3) {
                t2 = this.get$host(this);
                t3 = t1.get$host(other);
                if (t2 == null ? t3 == null : t2 === t3) {
                  t2 = this.get$port(this);
                  t3 = t1.get$port(other);
                  if (t2 == null ? t3 == null : t2 === t3) {
                    t2 = this.path;
                    t1 = t1.get$path(other);
                    if (t2 == null ? t1 == null : t2 === t1) {
                      t1 = this._query;
                      t2 = t1 == null;
                      if (!t2 === other.get$hasQuery()) {
                        if (t2)
                          t1 = "";
                        if (t1 === other.get$query()) {
                          t1 = this._fragment;
                          t2 = t1 == null;
                          if (!t2 === other.get$hasFragment()) {
                            if (t2)
                              t1 = "";
                            t1 = t1 === other.get$fragment();
                          } else
                            t1 = false;
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                } else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = false;
          else
            t1 = false;
          return t1;
        }
        return false;
      },
      get$hashCode: function(_) {
        var t1 = this._hashCodeCache;
        if (t1 == null) {
          t1 = C.JSString_methods.get$hashCode(this.toString$0(0));
          this._hashCodeCache = t1;
        }
        return t1;
      },
      $isUri: 1,
      static: {
        _Uri__defaultPort: function(scheme) {
          if (scheme === "http")
            return 80;
          if (scheme === "https")
            return 443;
          return 0;
        }
      }
    }
  }], ["dart.dom.html", "dart:html",, W, {
    "^": "",
    _JenkinsSmiHash_combine: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_hash4: function(a, b, c, d) {
      var t1, hash;
      t1 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, a), b), c), d);
      hash = 536870911 & t1 + ((67108863 & t1) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    _convertNativeToDart_Window: function(win) {
      if (win == null)
        return;
      return W._DOMWindowCrossFrame__createSafe(win);
    },
    _convertNativeToDart_EventTarget: function(e) {
      var $window;
      if (e == null)
        return;
      if ("postMessage" in e) {
        $window = W._DOMWindowCrossFrame__createSafe(e);
        if (!!J.getInterceptor($window).$isEventTarget)
          return $window;
        return;
      } else
        return H.interceptedTypeCheck(e, "$isEventTarget");
    },
    _wrapZone: function(callback, $T) {
      var t1;
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [$T]});
      t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    HtmlElement: {
      "^": "Element;",
      "%": "HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLContentElement|HTMLDListElement|HTMLDataElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOptGroupElement|HTMLOptionElement|HTMLParagraphElement|HTMLParamElement|HTMLPictureElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLShadowElement|HTMLSlotElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTimeElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
    },
    AnchorElement: {
      "^": "HtmlElement;0type=",
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "HTMLAnchorElement"
    },
    AreaElement: {
      "^": "HtmlElement;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "HTMLAreaElement"
    },
    Blob: {
      "^": "Interceptor;0type=",
      $isBlob: 1,
      "%": "Blob|File"
    },
    ButtonElement: {
      "^": "HtmlElement;0type=",
      $isButtonElement: 1,
      "%": "HTMLButtonElement"
    },
    CanvasElement: {
      "^": "HtmlElement;0height=,0width=",
      "%": "HTMLCanvasElement"
    },
    CharacterData: {
      "^": "Node;0length=",
      "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
    },
    Client: {
      "^": "Interceptor;0type=",
      "%": "Client|WindowClient"
    },
    CssStyleDeclaration: {
      "^": "_CssStyleDeclaration_Interceptor_CssStyleDeclarationBase;0length=",
      getPropertyValue$1: function(receiver, propertyName) {
        var propValue = receiver.getPropertyValue(this._browserPropertyName$1(receiver, propertyName));
        return propValue == null ? "" : propValue;
      },
      _browserPropertyName$1: function(receiver, propertyName) {
        var t1, $name;
        t1 = $.$get$CssStyleDeclaration__propertyCache();
        $name = t1[propertyName];
        if (typeof $name === "string")
          return $name;
        $name = this._supportedBrowserPropertyName$1(receiver, propertyName);
        t1[propertyName] = $name;
        return $name;
      },
      _supportedBrowserPropertyName$1: function(receiver, propertyName) {
        var prefixed;
        if (propertyName.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, function(_, letter) {
          return letter.toUpperCase();
        }) in receiver)
          return propertyName;
        prefixed = P.Device_cssPrefix() + propertyName;
        if (prefixed in receiver)
          return prefixed;
        return propertyName;
      },
      get$bottom: function(receiver) {
        return receiver.bottom;
      },
      get$height: function(receiver) {
        return receiver.height;
      },
      get$left: function(receiver) {
        return receiver.left;
      },
      get$right: function(receiver) {
        return receiver.right;
      },
      get$top: function(receiver) {
        return receiver.top;
      },
      get$width: function(receiver) {
        return receiver.width;
      },
      "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
    },
    CssStyleDeclarationBase: {
      "^": "Object;",
      get$bottom: function(receiver) {
        return this.getPropertyValue$1(receiver, "bottom");
      },
      get$height: function(receiver) {
        return this.getPropertyValue$1(receiver, "height");
      },
      get$left: function(receiver) {
        return this.getPropertyValue$1(receiver, "left");
      },
      get$right: function(receiver) {
        return this.getPropertyValue$1(receiver, "right");
      },
      get$top: function(receiver) {
        return this.getPropertyValue$1(receiver, "top");
      },
      get$width: function(receiver) {
        return this.getPropertyValue$1(receiver, "width");
      }
    },
    Document: {
      "^": "Node;",
      "%": "XMLDocument;Document"
    },
    DocumentFragment: {
      "^": "Node;",
      appendText$1: function(receiver, text) {
        receiver.appendChild(document.createTextNode(text));
      },
      "%": "DocumentFragment|ShadowRoot"
    },
    DomException: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "DOMException"
    },
    DomRectReadOnly: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
      },
      $eq: function(receiver, other) {
        var t1;
        if (other == null)
          return false;
        t1 = H.checkSubtypeV2(other, "$isRectangle", [P.num], "$asRectangle");
        if (!t1)
          return false;
        t1 = J.getInterceptor$x(other);
        return receiver.left === t1.get$left(other) && receiver.top === t1.get$top(other) && receiver.width === t1.get$width(other) && receiver.height === t1.get$height(other);
      },
      get$hashCode: function(receiver) {
        return W._JenkinsSmiHash_hash4(receiver.left & 0x1FFFFFFF, receiver.top & 0x1FFFFFFF, receiver.width & 0x1FFFFFFF, receiver.height & 0x1FFFFFFF);
      },
      get$bottom: function(receiver) {
        return receiver.bottom;
      },
      get$height: function(receiver) {
        return receiver.height;
      },
      get$left: function(receiver) {
        return receiver.left;
      },
      get$right: function(receiver) {
        return receiver.right;
      },
      get$top: function(receiver) {
        return receiver.top;
      },
      get$width: function(receiver) {
        return receiver.width;
      },
      get$x: function(receiver) {
        return receiver.x;
      },
      get$y: function(receiver) {
        return receiver.y;
      },
      $isRectangle: 1,
      $asRectangle: function() {
        return [P.num];
      },
      "%": ";DOMRectReadOnly"
    },
    Element: {
      "^": "Node;",
      get$offset: function(receiver) {
        return P.Rectangle$(C.JSNumber_methods.round$0(receiver.offsetLeft), C.JSNumber_methods.round$0(receiver.offsetTop), C.JSNumber_methods.round$0(receiver.offsetWidth), C.JSNumber_methods.round$0(receiver.offsetHeight), P.num);
      },
      appendText$1: function(receiver, text) {
        receiver.appendChild(document.createTextNode(text));
      },
      toString$0: function(receiver) {
        return receiver.localName;
      },
      $isElement: 1,
      "%": ";Element"
    },
    EmbedElement: {
      "^": "HtmlElement;0height=,0type=,0width=",
      "%": "HTMLEmbedElement"
    },
    ErrorEvent: {
      "^": "Event;0error=",
      "%": "ErrorEvent"
    },
    Event: {
      "^": "Interceptor;0type=",
      $isEvent: 1,
      "%": "AnimationEvent|AnimationPlaybackEvent|ApplicationCacheErrorEvent|AudioProcessingEvent|BeforeInstallPromptEvent|BeforeUnloadEvent|BlobEvent|ClipboardEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|FontFaceSetLoadEvent|GamepadEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaEncryptedEvent|MediaKeyMessageEvent|MediaQueryListEvent|MediaStreamEvent|MediaStreamTrackEvent|MojoInterfaceRequestEvent|MutationEvent|OfflineAudioCompletionEvent|PageTransitionEvent|PaymentRequestUpdateEvent|PopStateEvent|PresentationConnectionAvailableEvent|PresentationConnectionCloseEvent|ProgressEvent|PromiseRejectionEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCPeerConnectionIceEvent|RTCTrackEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|TrackEvent|TransitionEvent|USBConnectionEvent|VRDeviceEvent|VRDisplayEvent|VRSessionEvent|WebGLContextEvent|WebKitTransitionEvent;Event|InputEvent"
    },
    EventTarget: {
      "^": "Interceptor;",
      addEventListener$3: ["super$EventTarget$addEventListener", function(receiver, type, listener, useCapture) {
        H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
        if (listener != null)
          this._addEventListener$3(receiver, type, listener, false);
      }],
      _addEventListener$3: function(receiver, type, listener, options) {
        return receiver.addEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), false);
      },
      _removeEventListener$3: function(receiver, type, listener, options) {
        return receiver.removeEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), false);
      },
      $isEventTarget: 1,
      "%": "ServiceWorker;EventTarget"
    },
    ExtendableEvent: {
      "^": "Event;",
      "%": "AbortPaymentEvent|BackgroundFetchClickEvent|BackgroundFetchEvent|BackgroundFetchFailEvent|BackgroundFetchedEvent|CanMakePaymentEvent|FetchEvent|ForeignFetchEvent|InstallEvent|NotificationEvent|PaymentRequestEvent|PushEvent|SyncEvent;ExtendableEvent"
    },
    ExtendableMessageEvent: {
      "^": "ExtendableEvent;0source=",
      "%": "ExtendableMessageEvent"
    },
    FieldSetElement: {
      "^": "HtmlElement;0type=",
      "%": "HTMLFieldSetElement"
    },
    FormElement: {
      "^": "HtmlElement;0length=",
      "%": "HTMLFormElement"
    },
    HtmlCollection: {
      "^": "_HtmlCollection_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isNode");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $asImmutableListMixin: function() {
        return [W.Node];
      },
      "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
    },
    HtmlDocument: {
      "^": "Document;",
      get$head: function(receiver) {
        return receiver.head;
      },
      "%": "HTMLDocument"
    },
    IFrameElement: {
      "^": "HtmlElement;0height=,0width=",
      "%": "HTMLIFrameElement"
    },
    ImageData: {
      "^": "Interceptor;0height=,0width=",
      $isImageData: 1,
      "%": "ImageData"
    },
    ImageElement: {
      "^": "HtmlElement;0height=,0width=",
      "%": "HTMLImageElement"
    },
    InputElement: {
      "^": "HtmlElement;0height=,0type=,0width=",
      accept$1$1: function($receiver, arg0) {
        return $receiver.accept.call$1$1(arg0);
      },
      $isCheckboxInputElement: 1,
      "%": "HTMLInputElement"
    },
    LinkElement: {
      "^": "HtmlElement;0type=",
      "%": "HTMLLinkElement"
    },
    MediaElement: {
      "^": "HtmlElement;0error=",
      "%": "HTMLAudioElement;HTMLMediaElement"
    },
    MessageEvent: {
      "^": "Event;",
      get$source: function(receiver) {
        return W._convertNativeToDart_EventTarget(receiver.source);
      },
      "%": "MessageEvent"
    },
    MessagePort: {
      "^": "EventTarget;",
      addEventListener$3: function(receiver, type, listener, useCapture) {
        H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
        if (type === "message")
          receiver.start();
        this.super$EventTarget$addEventListener(receiver, type, listener, false);
      },
      "%": "MessagePort"
    },
    MidiPort: {
      "^": "EventTarget;0type=",
      "%": "MIDIInput|MIDIOutput|MIDIPort"
    },
    MouseEvent: {
      "^": "UIEvent;",
      get$offset: function(receiver) {
        var t1, target, t2, t3, t4, point;
        if (!!receiver.offsetX)
          return new P.Point(receiver.offsetX, receiver.offsetY, [P.num]);
        else {
          t1 = receiver.target;
          if (!J.getInterceptor(W._convertNativeToDart_EventTarget(t1)).$isElement)
            throw H.wrapException(P.UnsupportedError$("offsetX is only supported on elements"));
          target = H.interceptedTypeCheck(W._convertNativeToDart_EventTarget(t1), "$isElement");
          t1 = receiver.clientX;
          t2 = receiver.clientY;
          t3 = [P.num];
          t4 = target.getBoundingClientRect();
          point = new P.Point(t1, t2, t3).$sub(0, new P.Point(t4.left, t4.top, t3));
          return new P.Point(J.toInt$0$n(point.x), J.toInt$0$n(point.y), t3);
        }
      },
      $isMouseEvent: 1,
      "%": "WheelEvent;DragEvent|MouseEvent"
    },
    Node: {
      "^": "EventTarget;0text:textContent=",
      toString$0: function(receiver) {
        var value = receiver.nodeValue;
        return value == null ? this.super$Interceptor$toString(receiver) : value;
      },
      contains$1: function(receiver, other) {
        return receiver.contains(other);
      },
      $isNode: 1,
      "%": "DocumentType;Node"
    },
    NodeList0: {
      "^": "_NodeList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isNode");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $asImmutableListMixin: function() {
        return [W.Node];
      },
      "%": "NodeList|RadioNodeList"
    },
    OListElement: {
      "^": "HtmlElement;0type=",
      "%": "HTMLOListElement"
    },
    ObjectElement: {
      "^": "HtmlElement;0height=,0type=,0width=",
      "%": "HTMLObjectElement"
    },
    OutputElement: {
      "^": "HtmlElement;0type=",
      "%": "HTMLOutputElement"
    },
    PointerEvent: {
      "^": "MouseEvent;0height=,0width=",
      "%": "PointerEvent"
    },
    PushMessageData: {
      "^": "Interceptor;",
      text$0: [function(receiver) {
        return receiver.text();
      }, "call$0", "get$text", 1, 0, 3],
      "%": "PushMessageData"
    },
    ScriptElement: {
      "^": "HtmlElement;0type=",
      "%": "HTMLScriptElement"
    },
    SelectElement: {
      "^": "HtmlElement;0length=,0type=",
      "%": "HTMLSelectElement"
    },
    SensorErrorEvent: {
      "^": "Event;0error=",
      "%": "SensorErrorEvent"
    },
    SourceElement: {
      "^": "HtmlElement;0type=",
      "%": "HTMLSourceElement"
    },
    SpeechRecognitionError: {
      "^": "Event;0error=",
      "%": "SpeechRecognitionError"
    },
    StyleElement: {
      "^": "HtmlElement;0type=",
      "%": "HTMLStyleElement"
    },
    TextAreaElement: {
      "^": "HtmlElement;0type=",
      $isTextAreaElement: 1,
      "%": "HTMLTextAreaElement"
    },
    TrackElement: {
      "^": "HtmlElement;0kind=",
      "%": "HTMLTrackElement"
    },
    UIEvent: {
      "^": "Event;",
      "%": "CompositionEvent|FocusEvent|KeyboardEvent|TextEvent|TouchEvent;UIEvent"
    },
    VideoElement: {
      "^": "MediaElement;0height=,0width=",
      "%": "HTMLVideoElement"
    },
    Window: {
      "^": "EventTarget;",
      get$top: function(receiver) {
        return W._convertNativeToDart_Window(receiver.top);
      },
      $isWindow: 1,
      $isWindowBase: 1,
      "%": "DOMWindow|Window"
    },
    WorkerGlobalScope: {
      "^": "EventTarget;",
      $isWorkerGlobalScope: 1,
      "%": "DedicatedWorkerGlobalScope|ServiceWorkerGlobalScope|SharedWorkerGlobalScope|WorkerGlobalScope"
    },
    _Attr: {
      "^": "Node;",
      $is_Attr: 1,
      "%": "Attr"
    },
    _DomRect: {
      "^": "DomRectReadOnly;",
      toString$0: function(receiver) {
        return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
      },
      $eq: function(receiver, other) {
        var t1;
        if (other == null)
          return false;
        t1 = H.checkSubtypeV2(other, "$isRectangle", [P.num], "$asRectangle");
        if (!t1)
          return false;
        t1 = J.getInterceptor$x(other);
        return receiver.left === t1.get$left(other) && receiver.top === t1.get$top(other) && receiver.width === t1.get$width(other) && receiver.height === t1.get$height(other);
      },
      get$hashCode: function(receiver) {
        return W._JenkinsSmiHash_hash4(receiver.left & 0x1FFFFFFF, receiver.top & 0x1FFFFFFF, receiver.width & 0x1FFFFFFF, receiver.height & 0x1FFFFFFF);
      },
      get$height: function(receiver) {
        return receiver.height;
      },
      get$width: function(receiver) {
        return receiver.width;
      },
      get$x: function(receiver) {
        return receiver.x;
      },
      get$y: function(receiver) {
        return receiver.y;
      },
      "%": "ClientRect|DOMRect"
    },
    _NamedNodeMap: {
      "^": "__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isNode");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $asImmutableListMixin: function() {
        return [W.Node];
      },
      "%": "MozNamedAttrMap|NamedNodeMap"
    },
    _AttributeMap: {
      "^": "MapBase;",
      putIfAbsent$2: function(key, ifAbsent) {
        var t1;
        H.functionTypeCheck(ifAbsent, {func: 1, ret: P.String});
        t1 = this._element;
        if (!t1.hasAttribute(key))
          t1.setAttribute(key, H.stringTypeCheck(ifAbsent.call$0()));
        return t1.getAttribute(key);
      },
      forEach$1: function(_, f) {
        var t1, t2, t3, _i, key;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String, P.String]});
        for (t1 = this.get$keys(), t2 = t1.length, t3 = this._element, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          key = t1[_i];
          f.call$2(key, t3.getAttribute(key));
        }
      },
      get$keys: function() {
        var attributes, keys, len, i, attr;
        attributes = this._element.attributes;
        keys = H.setRuntimeTypeInfo([], [P.String]);
        for (len = attributes.length, i = 0; i < len; ++i) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          attr = H.interceptedTypeCheck(attributes[i], "$is_Attr");
          if (attr.namespaceURI == null)
            C.JSArray_methods.add$1(keys, attr.name);
        }
        return keys;
      },
      get$isEmpty: function(_) {
        return this.get$keys().length === 0;
      },
      get$isNotEmpty: function(_) {
        return this.get$keys().length !== 0;
      },
      $asMapMixin: function() {
        return [P.String, P.String];
      },
      $asMap: function() {
        return [P.String, P.String];
      }
    },
    _ElementAttributeMap: {
      "^": "_AttributeMap;_element",
      $index: function(_, key) {
        return this._element.getAttribute(H.stringTypeCheck(key));
      },
      remove$1: function(_, key) {
        var t1, value;
        t1 = this._element;
        value = t1.getAttribute(key);
        t1.removeAttribute(key);
        return value;
      },
      get$length: function(_) {
        return this.get$keys().length;
      }
    },
    _EventStream: {
      "^": "Stream;$ti",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
        H.functionTypeCheck(onDone, {func: 1, ret: -1});
        return W._EventStreamSubscription$(this._target, this._eventType, onData, false, t1);
      }
    },
    _ElementEventStreamImpl: {
      "^": "_EventStream;_target,_eventType,_useCapture,$ti"
    },
    _EventStreamSubscription: {
      "^": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture,$ti",
      cancel$0: function() {
        if (this._target == null)
          return;
        this._unlisten$0();
        this._target = null;
        this._onData = null;
        return;
      },
      _tryResume$0: function() {
        var t1 = this._onData;
        if (t1 != null && this._pauseCount <= 0)
          J.addEventListener$3$x(this._target, this._eventType, t1, false);
      },
      _unlisten$0: function() {
        var t1, t2, t3;
        t1 = this._onData;
        t2 = t1 != null;
        if (t2) {
          t3 = this._target;
          t3.toString;
          H.functionTypeCheck(t1, {func: 1, args: [W.Event]});
          if (t2)
            J._removeEventListener$3$x(t3, this._eventType, t1, false);
        }
      },
      static: {
        _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
          var t1 = onData == null ? null : W._wrapZone(new W._EventStreamSubscription_closure(onData), W.Event);
          t1 = new W._EventStreamSubscription(0, _target, _eventType, t1, false, [$T]);
          t1._tryResume$0();
          return t1;
        }
      }
    },
    _EventStreamSubscription_closure: {
      "^": "Closure:57;onData",
      call$1: [function(e) {
        return this.onData.call$1(H.interceptedTypeCheck(e, "$isEvent"));
      }, null, null, 4, 0, null, 21, "call"]
    },
    ImmutableListMixin: {
      "^": "Object;$ti",
      get$iterator: function(receiver) {
        return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0)]);
      },
      add$1: function(receiver, value) {
        H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0));
        throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
      }
    },
    FixedSizeListIterator: {
      "^": "Object;_array,_html$_length,_position,0_html$_current,$ti",
      moveNext$0: function() {
        var nextPosition, t1;
        nextPosition = this._position + 1;
        t1 = this._html$_length;
        if (nextPosition < t1) {
          this._html$_current = J.$index$asx(this._array, nextPosition);
          this._position = nextPosition;
          return true;
        }
        this._html$_current = null;
        this._position = t1;
        return false;
      },
      get$current: function() {
        return this._html$_current;
      }
    },
    _DOMWindowCrossFrame: {
      "^": "Object;_window",
      get$top: function(_) {
        return W._DOMWindowCrossFrame__createSafe(this._window.top);
      },
      $isEventTarget: 1,
      $isWindowBase: 1,
      static: {
        _DOMWindowCrossFrame__createSafe: function(w) {
          if (w === window)
            return H.interceptedTypeCheck(w, "$isWindowBase");
          else
            return new W._DOMWindowCrossFrame(w);
        }
      }
    },
    _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase: {
      "^": "Interceptor+CssStyleDeclarationBase;"
    },
    _HtmlCollection_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_HtmlCollection_Interceptor_ListMixin+ImmutableListMixin;"
    },
    _NodeList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _NodeList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_NodeList_Interceptor_ListMixin+ImmutableListMixin;"
    },
    __NamedNodeMap_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "__NamedNodeMap_Interceptor_ListMixin+ImmutableListMixin;"
    }
  }], ["html_common", "dart:html_common",, P, {
    "^": "",
    Device_isOpera: function() {
      var t1 = $.Device__isOpera;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
        $.Device__isOpera = t1;
      }
      return t1;
    },
    Device_cssPrefix: function() {
      var prefix, t1;
      prefix = $.Device__cachedCssPrefix;
      if (prefix != null)
        return prefix;
      t1 = $.Device__isFirefox;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Firefox", 0);
        $.Device__isFirefox = t1;
      }
      if (t1)
        prefix = "-moz-";
      else {
        t1 = $.Device__isIE;
        if (t1 == null) {
          t1 = !P.Device_isOpera() && J.contains$2$asx(window.navigator.userAgent, "Trident/", 0);
          $.Device__isIE = t1;
        }
        if (t1)
          prefix = "-ms-";
        else
          prefix = P.Device_isOpera() ? "-o-" : "-webkit-";
      }
      $.Device__cachedCssPrefix = prefix;
      return prefix;
    }
  }], ["dart.dom.indexed_db", "dart:indexed_db",, P, {
    "^": "",
    KeyRange: {
      "^": "Interceptor;",
      $isKeyRange: 1,
      "%": "IDBKeyRange"
    },
    Request: {
      "^": "EventTarget;0error=,0source=",
      "%": "IDBOpenDBRequest|IDBRequest|IDBVersionChangeRequest"
    }
  }], ["dart.js", "dart:js",, P, {
    "^": "",
    _callDartFunction: [function(callback, captureThis, $self, $arguments) {
      var arguments0, dartArgs, t1;
      H.boolTypeCheck(captureThis);
      H.listTypeCheck($arguments);
      if (captureThis) {
        arguments0 = [$self];
        C.JSArray_methods.addAll$1(arguments0, $arguments);
        $arguments = arguments0;
      }
      dartArgs = P.List_List$from(J.map$1$1$ax($arguments, P.js___convertToDart$closure(), null), true, null);
      H.interceptedTypeCheck(callback, "$isFunction");
      t1 = H.Primitives_applyFunctionWithPositionalArguments(callback, dartArgs);
      return P._convertToJS(t1);
    }, null, null, 16, 0, null, 22, 23, 24, 25],
    _defineProperty: function(o, $name, value) {
      var exception;
      try {
        if (Object.isExtensible(o) && !Object.prototype.hasOwnProperty.call(o, $name)) {
          Object.defineProperty(o, $name, {value: value});
          return true;
        }
      } catch (exception) {
        H.unwrapException(exception);
      }
      return false;
    },
    _getOwnProperty: function(o, $name) {
      if (Object.prototype.hasOwnProperty.call(o, $name))
        return o[$name];
      return;
    },
    _convertToJS: [function(o) {
      var t1;
      if (o == null || typeof o === "string" || typeof o === "number" || typeof o === "boolean")
        return o;
      t1 = J.getInterceptor(o);
      if (!!t1.$isJsObject)
        return o._js$_jsObject;
      if (H.isBrowserObject(o))
        return o;
      if (!!t1.$isTypedData)
        return o;
      if (!!t1.$isDateTime)
        return H.Primitives_lazyAsJsDate(o);
      if (!!t1.$isFunction)
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.$get$_dartProxyCtor()));
    }, "call$1", "js___convertToJS$closure", 4, 0, 7, 8],
    _getJsProxy: function(o, propertyName, createProxy) {
      var jsProxy;
      H.functionTypeCheck(createProxy, {func: 1, args: [,]});
      jsProxy = P._getOwnProperty(o, propertyName);
      if (jsProxy == null) {
        jsProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, jsProxy);
      }
      return jsProxy;
    },
    _convertToDart: [function(o) {
      var ms, t1;
      if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
        return o;
      else if (o instanceof Object && H.isBrowserObject(o))
        return o;
      else if (o instanceof Object && !!J.getInterceptor(o).$isTypedData)
        return o;
      else if (o instanceof Date) {
        ms = H.intTypeCheck(o.getTime());
        t1 = new P.DateTime(ms, false);
        t1.DateTime$_withValue$2$isUtc(ms, false);
        return t1;
      } else if (o.constructor === $.$get$_dartProxyCtor())
        return o.o;
      else
        return P._wrapToDart(o);
    }, "call$1", "js___convertToDart$closure", 4, 0, 66, 8],
    _wrapToDart: function(o) {
      if (typeof o == "function")
        return P._getDartProxy(o, $.$get$DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
      if (o instanceof Array)
        return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
      return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
    },
    _getDartProxy: function(o, propertyName, createProxy) {
      var dartProxy;
      H.functionTypeCheck(createProxy, {func: 1, args: [,]});
      dartProxy = P._getOwnProperty(o, propertyName);
      if (dartProxy == null || !(o instanceof Object)) {
        dartProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, dartProxy);
      }
      return dartProxy;
    },
    JsObject: {
      "^": "Object;_js$_jsObject",
      $index: ["super$JsObject$$index", function(_, property) {
        if (typeof property !== "string" && typeof property !== "number")
          throw H.wrapException(P.ArgumentError$("property is not a String or num"));
        return P._convertToDart(this._js$_jsObject[property]);
      }],
      $indexSet: ["super$JsObject$$indexSet", function(_, property, value) {
        if (typeof property !== "string" && typeof property !== "number")
          throw H.wrapException(P.ArgumentError$("property is not a String or num"));
        this._js$_jsObject[property] = P._convertToJS(value);
      }],
      get$hashCode: function(_) {
        return 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof P.JsObject && this._js$_jsObject === other._js$_jsObject;
      },
      toString$0: function(_) {
        var t1, exception;
        try {
          t1 = String(this._js$_jsObject);
          return t1;
        } catch (exception) {
          H.unwrapException(exception);
          t1 = this.super$Object$toString(this);
          return t1;
        }
      },
      callMethod$2: function(method, args) {
        var t1, t2;
        t1 = this._js$_jsObject;
        if (args == null)
          t2 = null;
        else {
          t2 = H.getTypeArgumentByIndex(args, 0);
          t2 = P.List_List$from(new H.MappedListIterable(args, H.functionTypeCheck(P.js___convertToJS$closure(), {func: 1, ret: null, args: [t2]}), [t2, null]), true, null);
        }
        return P._convertToDart(t1[method].apply(t1, t2));
      }
    },
    JsFunction: {
      "^": "JsObject;_js$_jsObject"
    },
    JsArray: {
      "^": "_JsArray_JsObject_ListMixin;_js$_jsObject,$ti",
      _checkIndex$1: function(index) {
        var t1 = index < 0 || index >= this.get$length(this);
        if (t1)
          throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this), null, null));
      },
      $index: function(_, index) {
        if (typeof index === "number" && index === C.JSInt_methods.toInt$0(index))
          this._checkIndex$1(H.intTypeCheck(index));
        return H.assertSubtypeOfRuntimeType(this.super$JsObject$$index(0, index), H.getTypeArgumentByIndex(this, 0));
      },
      $indexSet: function(_, index, value) {
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
        if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index))
          this._checkIndex$1(H.intTypeCheck(index));
        this.super$JsObject$$indexSet(0, index, value);
      },
      get$length: function(_) {
        var len = this._js$_jsObject.length;
        if (typeof len === "number" && len >>> 0 === len)
          return len;
        throw H.wrapException(P.StateError$("Bad JsArray length"));
      },
      set$length: function(_, $length) {
        this.super$JsObject$$indexSet(0, "length", $length);
      },
      add$1: function(_, value) {
        this.callMethod$2("push", [H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0))]);
      },
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isList: 1
    },
    _convertToJS_closure: {
      "^": "Closure:7;",
      call$1: function(o) {
        var jsFunction;
        H.interceptedTypeCheck(o, "$isFunction");
        jsFunction = function(_call, f, captureThis) {
          return function() {
            return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
          };
        }(P._callDartFunction, o, false);
        P._defineProperty(jsFunction, $.$get$DART_CLOSURE_PROPERTY_NAME(), o);
        return jsFunction;
      }
    },
    _convertToJS_closure0: {
      "^": "Closure:7;ctor",
      call$1: function(o) {
        return new this.ctor(o);
      }
    },
    _wrapToDart_closure: {
      "^": "Closure:58;",
      call$1: function(o) {
        return new P.JsFunction(o);
      }
    },
    _wrapToDart_closure0: {
      "^": "Closure:62;",
      call$1: function(o) {
        return new P.JsArray(o, [null]);
      }
    },
    _wrapToDart_closure1: {
      "^": "Closure:63;",
      call$1: function(o) {
        return new P.JsObject(o);
      }
    },
    _JsArray_JsObject_ListMixin: {
      "^": "JsObject+ListMixin;"
    }
  }], ["dart.math", "dart:math",, P, {
    "^": "",
    _JenkinsSmiHash_combine0: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_finish: function(hash) {
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    Point: {
      "^": "Object;x>,y>,$ti",
      toString$0: function(_) {
        return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
      },
      $eq: function(_, other) {
        var t1, t2, t3;
        if (other == null)
          return false;
        t1 = H.checkSubtypeV2(other, "$isPoint", [P.num], null);
        if (!t1)
          return false;
        t1 = this.x;
        t2 = J.getInterceptor$x(other);
        t3 = t2.get$x(other);
        if (t1 == null ? t3 == null : t1 === t3) {
          t1 = this.y;
          t2 = t2.get$y(other);
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        var t1, t2;
        t1 = J.get$hashCode$(this.x);
        t2 = J.get$hashCode$(this.y);
        return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
      },
      $sub: function(_, other) {
        var t1, t2, t3, t4, t5;
        t1 = this.$ti;
        H.assertSubtype(other, "$isPoint", t1, "$asPoint");
        t2 = this.x;
        t3 = other.x;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = H.getTypeArgumentByIndex(this, 0);
        t3 = H.assertSubtypeOfRuntimeType(t2 - t3, t4);
        t2 = this.y;
        t5 = other.y;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t5 !== "number")
          return H.iae(t5);
        return new P.Point(t3, H.assertSubtypeOfRuntimeType(t2 - t5, t4), t1);
      }
    },
    _RectangleBase: {
      "^": "Object;$ti",
      get$right: function(_) {
        var t1, t2;
        t1 = this.left;
        t2 = this.width;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        return H.assertSubtypeOfRuntimeType(t1 + t2, H.getTypeArgumentByIndex(this, 0));
      },
      get$bottom: function(_) {
        var t1, t2;
        t1 = this.top;
        t2 = this.height;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        return H.assertSubtypeOfRuntimeType(t1 + t2, H.getTypeArgumentByIndex(this, 0));
      },
      toString$0: function(_) {
        return "Rectangle (" + H.S(this.left) + ", " + H.S(this.top) + ") " + H.S(this.width) + " x " + H.S(this.height);
      },
      $eq: function(_, other) {
        var t1, t2, t3, t4, t5;
        if (other == null)
          return false;
        t1 = H.checkSubtypeV2(other, "$isRectangle", [P.num], "$asRectangle");
        if (!t1)
          return false;
        t1 = this.left;
        t2 = J.getInterceptor$x(other);
        t3 = t2.get$left(other);
        if (t1 == null ? t3 == null : t1 === t3) {
          t3 = this.top;
          t4 = t2.get$top(other);
          if (t3 == null ? t4 == null : t3 === t4) {
            t4 = this.width;
            if (typeof t1 !== "number")
              return t1.$add();
            if (typeof t4 !== "number")
              return H.iae(t4);
            t5 = H.getTypeArgumentByIndex(this, 0);
            if (H.assertSubtypeOfRuntimeType(t1 + t4, t5) === t2.get$right(other)) {
              t1 = this.height;
              if (typeof t3 !== "number")
                return t3.$add();
              if (typeof t1 !== "number")
                return H.iae(t1);
              t2 = H.assertSubtypeOfRuntimeType(t3 + t1, t5) === t2.get$bottom(other);
              t1 = t2;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        var t1, t2, t3, t4, t5, t6;
        t1 = this.left;
        t2 = J.get$hashCode$(t1);
        t3 = this.top;
        t4 = J.get$hashCode$(t3);
        t5 = this.width;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = H.getTypeArgumentByIndex(this, 0);
        t5 = H.assertSubtypeOfRuntimeType(t1 + t5, t6);
        t1 = this.height;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t6 = H.assertSubtypeOfRuntimeType(t3 + t1, t6);
        return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t2), t4), t5 & 0x1FFFFFFF), t6 & 0x1FFFFFFF));
      }
    },
    Rectangle: {
      "^": "_RectangleBase;left>,top>,width>,height>,$ti",
      static: {
        Rectangle$: function(left, $top, width, height, $T) {
          var t1, t2;
          if (typeof width !== "number")
            return width.$lt();
          if (width < 0)
            t1 = -width * 0;
          else
            t1 = width;
          H.assertSubtypeOfRuntimeType(t1, $T);
          if (typeof height !== "number")
            return height.$lt();
          if (height < 0)
            t2 = -height * 0;
          else
            t2 = height;
          return new P.Rectangle(left, $top, t1, H.assertSubtypeOfRuntimeType(t2, $T), [$T]);
        }
      }
    }
  }], ["dart.dom.svg", "dart:svg",, P, {
    "^": "",
    FEBlendElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEBlendElement"
    },
    FEColorMatrixElement: {
      "^": "SvgElement;0type=,0height=,0width=,0x=,0y=",
      "%": "SVGFEColorMatrixElement"
    },
    FEComponentTransferElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEComponentTransferElement"
    },
    FECompositeElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFECompositeElement"
    },
    FEConvolveMatrixElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEConvolveMatrixElement"
    },
    FEDiffuseLightingElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEDiffuseLightingElement"
    },
    FEDisplacementMapElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEDisplacementMapElement"
    },
    FEFloodElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEFloodElement"
    },
    FEGaussianBlurElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEGaussianBlurElement"
    },
    FEImageElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEImageElement"
    },
    FEMergeElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEMergeElement"
    },
    FEMorphologyElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEMorphologyElement"
    },
    FEOffsetElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEOffsetElement"
    },
    FEPointLightElement: {
      "^": "SvgElement;0x=,0y=",
      "%": "SVGFEPointLightElement"
    },
    FESpecularLightingElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFESpecularLightingElement"
    },
    FESpotLightElement: {
      "^": "SvgElement;0x=,0y=",
      "%": "SVGFESpotLightElement"
    },
    FETileElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFETileElement"
    },
    FETurbulenceElement: {
      "^": "SvgElement;0type=,0height=,0width=,0x=,0y=",
      "%": "SVGFETurbulenceElement"
    },
    FilterElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFilterElement"
    },
    ForeignObjectElement: {
      "^": "GraphicsElement;0height=,0width=,0x=,0y=",
      "%": "SVGForeignObjectElement"
    },
    GeometryElement: {
      "^": "GraphicsElement;",
      "%": "SVGCircleElement|SVGEllipseElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement;SVGGeometryElement"
    },
    GraphicsElement: {
      "^": "SvgElement;",
      "%": "SVGAElement|SVGClipPathElement|SVGDefsElement|SVGGElement|SVGSwitchElement;SVGGraphicsElement"
    },
    ImageElement0: {
      "^": "GraphicsElement;0height=,0width=,0x=,0y=",
      "%": "SVGImageElement"
    },
    MaskElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGMaskElement"
    },
    PatternElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGPatternElement"
    },
    RectElement: {
      "^": "GeometryElement;0height=,0width=,0x=,0y=",
      "%": "SVGRectElement"
    },
    ScriptElement0: {
      "^": "SvgElement;0type=",
      "%": "SVGScriptElement"
    },
    StyleElement0: {
      "^": "SvgElement;0type=",
      "%": "SVGStyleElement"
    },
    SvgElement: {
      "^": "Element;",
      "%": "SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGGradientElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGRadialGradientElement|SVGSetElement|SVGStopElement|SVGSymbolElement|SVGTitleElement|SVGViewElement;SVGElement"
    },
    SvgSvgElement: {
      "^": "GraphicsElement;0height=,0width=,0x=,0y=",
      "%": "SVGSVGElement"
    },
    TextContentElement: {
      "^": "GraphicsElement;",
      "%": "SVGTextPathElement;SVGTextContentElement"
    },
    TextPositioningElement: {
      "^": "TextContentElement;0x=,0y=",
      "%": "SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"
    },
    UseElement: {
      "^": "GraphicsElement;0height=,0width=,0x=,0y=",
      "%": "SVGUseElement"
    }
  }], ["dart.dom.web_audio", "dart:web_audio",, P, {
    "^": ""
  }], ["dart.dom.web_gl", "dart:web_gl",, P, {
    "^": ""
  }], ["dart.dom.web_sql", "dart:web_sql",, P, {
    "^": ""
  }], ["analyzer.dart.ast.ast", "package:analyzer/dart/ast/ast.dart",, Y, {
    "^": "",
    AnnotatedNode: {
      "^": "AstNode;"
    },
    Annotation: {
      "^": "AstNode;"
    },
    AstNode: {
      "^": "Object;"
    },
    CatchClause: {
      "^": "AstNode;"
    },
    ClassMember: {
      "^": "Declaration;"
    },
    Combinator: {
      "^": "AstNode;"
    },
    CommentReference: {
      "^": "AstNode;"
    },
    CompilationUnitMember: {
      "^": "Declaration;"
    },
    Configuration: {
      "^": "AstNode;"
    },
    ConstructorInitializer: {
      "^": "AstNode;"
    },
    Declaration: {
      "^": "AnnotatedNode;"
    },
    Directive: {
      "^": "AnnotatedNode;"
    },
    EnumConstantDeclaration: {
      "^": "Declaration;"
    },
    Expression: {
      "^": "AstNode;"
    },
    FormalParameter: {
      "^": "AstNode;"
    },
    Identifier: {
      "^": "Expression;"
    },
    InterpolationElement: {
      "^": "AstNode;"
    },
    Label: {
      "^": "AstNode;"
    },
    Literal: {
      "^": "Expression;"
    },
    MapLiteralEntry: {
      "^": "AstNode;"
    },
    NamedExpression: {
      "^": "Expression;"
    },
    NamedType: {
      "^": "TypeAnnotation;"
    },
    SimpleIdentifier: {
      "^": "Identifier;"
    },
    Statement: {
      "^": "AstNode;"
    },
    StringLiteral: {
      "^": "Literal;"
    },
    SwitchMember: {
      "^": "AstNode;"
    },
    TypeAnnotation: {
      "^": "AstNode;"
    },
    TypeName: {
      "^": "NamedType;"
    },
    TypeParameter: {
      "^": "Declaration;"
    },
    VariableDeclaration: {
      "^": "Declaration;"
    }
  }], ["", "package:analyzer/dart/ast/ast_factory.dart",, A, {
    "^": "",
    AstFactory: {
      "^": "Object;"
    }
  }], ["", "package:analyzer/dart/ast/standard_ast_factory.dart",, X, {}], ["analyzer.dart.ast.visitor", "package:analyzer/dart/ast/visitor.dart",, M, {
    "^": "",
    ThrowingAstVisitor: {
      "^": "Object;",
      $isAstVisitor: 1
    }
  }], ["", "package:analyzer/error/error.dart",, V, {
    "^": "",
    AnalysisError: {
      "^": "Object;errorCode,_message<,_correction,source>,offset>,length>,isStaticOnly",
      get$hashCode: function(_) {
        var hashCode, t1, t2;
        hashCode = this.offset;
        t1 = this._message;
        t1 = t1 != null ? C.JSString_methods.get$hashCode(t1) : 0;
        t2 = this.source;
        t2 = t2 != null ? t2.get$hashCode(t2) : 0;
        return (hashCode ^ t1 ^ t2) >>> 0;
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other === this)
          return true;
        if (other instanceof V.AnalysisError) {
          if (this.errorCode !== other.errorCode)
            return false;
          if (this.offset !== other.offset || this.length !== other.length)
            return false;
          t1 = this._message;
          t2 = other._message;
          if (t1 == null ? t2 != null : t1 !== t2)
            return false;
          if (!J.$eq$(this.source, other.source))
            return false;
          return true;
        }
        return false;
      },
      toString$0: function(_) {
        var t1 = this.source;
        t1 = H.S(t1 != null ? t1.fullName : "<unknown source>") + "(" + this.offset + ".." + (this.offset + this.length - 1) + "): " + H.S(this._message);
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      static: {
        AnalysisError$: function(source, offset, $length, errorCode, $arguments) {
          var t1, correctionTemplate;
          t1 = new V.AnalysisError(errorCode, null, null, source, offset, $length, false);
          t1._message = G.formatList(errorCode.message, $arguments);
          correctionTemplate = errorCode.correction;
          if (correctionTemplate != null)
            t1._correction = G.formatList(correctionTemplate, $arguments);
          return t1;
        }
      }
    }
  }], ["analyzer.error.listener", "package:analyzer/error/listener.dart",, Z, {
    "^": "",
    BooleanErrorListener: {
      "^": "Object;_errorReported<",
      onError$1: function(_, error) {
        this._errorReported = true;
      },
      $isAnalysisErrorListener: 1
    }
  }], ["analyzer.exception.exception", "package:analyzer/exception/exception.dart",, B, {
    "^": "",
    AnalysisException: {
      "^": "Object;message,cause",
      toString$0: function(_) {
        var t1 = new H.TypeImpl(H.getRti(this)).toString$0(0) + ": " + (this.message + "\n");
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    CaughtException: {
      "^": "Object;exception,0stackTrace<",
      CaughtException$2: function(exception, stackTrace) {
        var st, exception;
        if (stackTrace == null)
          try {
            throw H.wrapException(this);
          } catch (exception) {
            H.unwrapException(exception);
            st = H.getTraceFromException(exception);
            stackTrace = st;
          }
        this.stackTrace = H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      },
      toString$0: function(_) {
        var t1, t2;
        t1 = this.exception.message + "\n";
        t2 = this.stackTrace;
        if (t2 != null)
          t1 += t2.toString$0(0) + "\n";
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      static: {
        CaughtException$: function(exception, stackTrace) {
          var t1 = new B.CaughtException(exception);
          t1.CaughtException$2(exception, stackTrace);
          return t1;
        }
      }
    }
  }], ["", "package:analyzer/instrumentation/instrumentation.dart",, M, {
    "^": "",
    InstrumentationService: {
      "^": "Object;_instrumentationServer,_subprocessCounter"
    }
  }], ["", "package:analyzer/source/line_info.dart",, E, {
    "^": "",
    CharacterLocation: {
      "^": "LineInfo_Location;lineNumber,columnNumber"
    },
    LineInfo: {
      "^": "Object;lineStarts,_previousLine",
      getLocation$1: function(offset) {
        var t1, t2, max, t3, t4, t5, min, midpoint;
        t1 = this.lineStarts;
        t2 = t1.length;
        max = t2 - 1;
        t3 = this._previousLine;
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        t4 = t1[t3];
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (offset >= t4) {
          if (t3 !== max) {
            t5 = t3 + 1;
            if (t5 >= t2)
              return H.ioore(t1, t5);
            t5 = t1[t5];
            if (typeof t5 !== "number")
              return H.iae(t5);
            t5 = offset < t5;
            t2 = t5;
          } else
            t2 = true;
          if (t2)
            return new E.CharacterLocation(t3 + 1, offset - t4 + 1);
          min = t3;
        } else
          min = 0;
        for (; min < max;) {
          midpoint = C.JSInt_methods._tdivFast$1(max - min + 1, 2) + min;
          if (midpoint < 0 || midpoint >= t1.length)
            return H.ioore(t1, midpoint);
          if (J.$gt$n(t1[midpoint], offset))
            max = midpoint - 1;
          else
            min = midpoint;
        }
        this._previousLine = min;
        if (min < 0 || min >= t1.length)
          return H.ioore(t1, min);
        t1 = t1[min];
        if (typeof t1 !== "number")
          return H.iae(t1);
        return new E.CharacterLocation(min + 1, offset - t1 + 1);
      }
    }
  }], ["", "package:analyzer/src/context/cache.dart",, B, {
    "^": "",
    CachePartition: {
      "^": "Object;"
    },
    SdkCachePartition: {
      "^": "CachePartition;"
    }
  }], ["", "package:analyzer/src/context/context.dart",, M, {
    "^": "",
    PartitionManager: {
      "^": "Object;_sdkPartitions"
    }
  }], ["", "package:analyzer/src/dart/ast/ast.dart",, U, {
    "^": "",
    AdjacentStringsImpl: {
      "^": "StringLiteralImpl;0_ast$_strings,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._ast$_strings.get$beginToken();
      },
      get$endToken: function() {
        return this._ast$_strings.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitAdjacentStrings$1(this);
      },
      $isAdjacentStrings: 1
    },
    AnnotatedNodeImpl: {
      "^": "AstNodeImpl;",
      AnnotatedNodeImpl$2: function(comment, metadata) {
        var t1;
        this._comment = this._becomeParentOf$1$1(comment, U.CommentImpl);
        t1 = Y.Annotation;
        t1 = new U.NodeListImpl(this, H.setRuntimeTypeInfo([], [t1]), [t1]);
        t1.addAll$1(0, metadata);
        this._metadata = t1;
      },
      get$beginToken: function() {
        var t1, commentToken, metadataToken;
        if (this._comment == null) {
          t1 = this._metadata;
          if (t1.get$length(t1) === 0)
            return this.get$firstTokenAfterCommentAndMetadata();
          return this._metadata.get$beginToken();
        } else {
          t1 = this._metadata;
          if (t1.get$length(t1) === 0) {
            t1 = this._comment.tokens;
            if (0 >= t1.length)
              return H.ioore(t1, 0);
            return t1[0];
          }
        }
        t1 = this._comment.tokens;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        commentToken = t1[0];
        metadataToken = this._metadata.get$beginToken();
        if (commentToken.offset < metadataToken.offset)
          return commentToken;
        return metadataToken;
      },
      get$metadata: function() {
        return this._metadata;
      }
    },
    AnnotationImpl: {
      "^": "AstNodeImpl;atSign,0_ast$_name<,period,0_constructorName,0_ast$_arguments,0_ast$_element,0elementAnnotation,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.atSign;
      },
      get$endToken: function() {
        var t1 = this._ast$_arguments;
        if (t1 != null)
          return t1.rightParenthesis;
        else {
          t1 = this._constructorName;
          if (t1 != null)
            return t1.token;
        }
        return this._ast$_name.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitAnnotation$1(this);
      },
      $isAnnotation: 1
    },
    ArgumentListImpl: {
      "^": "AstNodeImpl;leftParenthesis,0_ast$_arguments,rightParenthesis,0_correspondingStaticParameters,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.leftParenthesis;
      },
      get$endToken: function() {
        return this.rightParenthesis;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitArgumentList$1(this);
      },
      $isArgumentList: 1
    },
    AsExpressionImpl: {
      "^": "ExpressionImpl;0_expression,asOperator,0_type<,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._expression.get$beginToken();
      },
      get$endToken: function() {
        return this._type.get$endToken();
      },
      get$precedence: function() {
        return 7;
      },
      get$type: function(_) {
        return this._type;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitAsExpression$1(this);
      },
      $isAsExpression: 1,
      static: {
        AsExpressionImpl$: function(expression, asOperator, type) {
          var t1 = new U.AsExpressionImpl(asOperator);
          t1._expression = t1._becomeParentOf$1$1(expression, U.ExpressionImpl);
          t1._type = t1._becomeParentOf$1$1(type, U.TypeAnnotationImpl);
          return t1;
        }
      }
    },
    AssertInitializerImpl: {
      "^": "ConstructorInitializerImpl;assertKeyword,leftParenthesis,0_condition,comma,0_ast$_message,rightParenthesis,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.assertKeyword;
      },
      get$endToken: function() {
        return this.rightParenthesis;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitAssertInitializer$1(this);
      },
      $isAssertInitializer: 1,
      static: {
        AssertInitializerImpl$: function(assertKeyword, leftParenthesis, condition, comma, message, rightParenthesis) {
          var t1, t2;
          t1 = new U.AssertInitializerImpl(assertKeyword, leftParenthesis, comma, rightParenthesis);
          t2 = U.ExpressionImpl;
          t1._condition = t1._becomeParentOf$1$1(condition, t2);
          t1._ast$_message = t1._becomeParentOf$1$1(message, t2);
          return t1;
        }
      }
    },
    AssertStatementImpl: {
      "^": "StatementImpl;assertKeyword,leftParenthesis,0_condition,comma,0_ast$_message,rightParenthesis,semicolon<,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.assertKeyword;
      },
      get$endToken: function() {
        return this.semicolon;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitAssertStatement$1(this);
      },
      $isAssertStatement: 1,
      static: {
        AssertStatementImpl$: function(assertKeyword, leftParenthesis, condition, comma, message, rightParenthesis, semicolon) {
          var t1, t2;
          t1 = new U.AssertStatementImpl(assertKeyword, leftParenthesis, comma, rightParenthesis, semicolon);
          t2 = U.ExpressionImpl;
          t1._condition = t1._becomeParentOf$1$1(condition, t2);
          t1._ast$_message = t1._becomeParentOf$1$1(message, t2);
          return t1;
        }
      }
    },
    AssignmentExpressionImpl: {
      "^": "ExpressionImpl;0_leftHandSide,operator>,0_rightHandSide,0staticElement,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._leftHandSide.get$beginToken();
      },
      get$endToken: function() {
        return this._rightHandSide.get$endToken();
      },
      get$precedence: function() {
        return 1;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitAssignmentExpression$1(this);
      },
      $isAssignmentExpression: 1,
      static: {
        AssignmentExpressionImpl$: function(leftHandSide, operator, rightHandSide) {
          var t1, t2, message;
          t1 = new U.AssignmentExpressionImpl(operator);
          t2 = leftHandSide == null;
          if (t2 || rightHandSide == null) {
            if (t2)
              message = rightHandSide == null ? "Both the left-hand and right-hand sides are null" : "The left-hand size is null";
            else
              message = "The right-hand size is null";
            t2 = $.$get$AnalysisEngine_instance()._logger;
            B.CaughtException$(new B.AnalysisException(message, null), null);
            t2.toString;
          }
          t2 = U.ExpressionImpl;
          t1._leftHandSide = t1._becomeParentOf$1$1(leftHandSide, t2);
          t1._rightHandSide = t1._becomeParentOf$1$1(rightHandSide, t2);
          return t1;
        }
      }
    },
    AstNodeImpl: {
      "^": "Object;",
      get$isSynthetic: function() {
        return false;
      },
      get$length: function(_) {
        var beginToken, endToken;
        beginToken = this.get$beginToken();
        endToken = this.get$endToken();
        if (beginToken == null || endToken == null)
          return -1;
        return endToken.offset + endToken.get$length(endToken) - beginToken.offset;
      },
      get$offset: function(_) {
        var beginToken = this.get$beginToken();
        if (beginToken == null)
          return -1;
        return beginToken.offset;
      },
      toString$0: function(_) {
        var buffer, t1;
        buffer = new P.StringBuffer("");
        this.accept$1$1(0, new A.ToSourceVisitor2(buffer), P.Object);
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      _becomeParentOf$1$1: function(child, $T) {
        H.assertIsSubtype($T, U.AstNodeImpl, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
        H.assertSubtypeOfRuntimeType(child, $T);
        if (child != null)
          child._ast$_parent = this;
        return child;
      },
      $isAstNode: 1
    },
    AwaitExpressionImpl: {
      "^": "ExpressionImpl;awaitKeyword,0_expression,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        var t1 = this.awaitKeyword;
        if (t1 != null)
          return t1;
        return this._expression.get$beginToken();
      },
      get$endToken: function() {
        return this._expression.get$endToken();
      },
      get$precedence: function() {
        return 0;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitAwaitExpression$1(this);
      },
      $isAwaitExpression: 1
    },
    BinaryExpressionImpl: {
      "^": "ExpressionImpl;0_leftOperand,operator>,0_rightOperand,0staticElement,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._leftOperand.get$beginToken();
      },
      get$endToken: function() {
        return this._rightOperand.get$endToken();
      },
      get$leftOperand: function() {
        return this._leftOperand;
      },
      get$precedence: function() {
        return this.operator.type.precedence;
      },
      get$rightOperand: function() {
        return this._rightOperand;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitBinaryExpression$1(this);
      },
      $isBinaryExpression: 1,
      static: {
        BinaryExpressionImpl$: function(leftOperand, operator, rightOperand) {
          var t1, t2;
          t1 = new U.BinaryExpressionImpl(operator);
          t2 = U.ExpressionImpl;
          t1._leftOperand = t1._becomeParentOf$1$1(leftOperand, t2);
          t1._rightOperand = t1._becomeParentOf$1$1(rightOperand, t2);
          return t1;
        }
      }
    },
    BlockFunctionBodyImpl: {
      "^": "FunctionBodyImpl;keyword<,star,0_ast$_block,0localVariableInfo,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        var t1 = this.keyword;
        if (t1 != null)
          return t1;
        return this._ast$_block.leftBracket;
      },
      get$endToken: function() {
        return this._ast$_block.rightBracket;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitBlockFunctionBody$1(this);
      },
      $isBlockFunctionBody: 1
    },
    BlockImpl: {
      "^": "StatementImpl;leftBracket,0_statements,rightBracket,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.leftBracket;
      },
      get$endToken: function() {
        return this.rightBracket;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitBlock$1(this);
      },
      $isBlock: 1
    },
    BooleanLiteralImpl: {
      "^": "LiteralImpl;literal,value,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.literal;
      },
      get$endToken: function() {
        return this.literal;
      },
      get$isSynthetic: function() {
        return this.literal.get$isSynthetic();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitBooleanLiteral$1(this);
      },
      $isBooleanLiteral: 1
    },
    BreakStatementImpl: {
      "^": "StatementImpl;breakKeyword,0_label,semicolon<,0target,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.breakKeyword;
      },
      get$endToken: function() {
        return this.semicolon;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitBreakStatement$1(this);
      },
      $isBreakStatement: 1
    },
    CascadeExpressionImpl: {
      "^": "ExpressionImpl;0_ast$_target,0_cascadeSections,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._ast$_target.get$beginToken();
      },
      get$endToken: function() {
        return this._cascadeSections.get$endToken();
      },
      get$precedence: function() {
        return 2;
      },
      get$target: function(_) {
        return this._ast$_target;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitCascadeExpression$1(this);
      },
      $isCascadeExpression: 1,
      static: {
        CascadeExpressionImpl$: function(target, cascadeSections) {
          var t1, t2;
          t1 = new U.CascadeExpressionImpl();
          t1._ast$_target = t1._becomeParentOf$1$1(target, U.ExpressionImpl);
          t2 = Y.Expression;
          t2 = new U.NodeListImpl(t1, H.setRuntimeTypeInfo([], [t2]), [t2]);
          t2.addAll$1(0, cascadeSections);
          t1._cascadeSections = t2;
          return t1;
        }
      }
    },
    CatchClauseImpl: {
      "^": "AstNodeImpl;onKeyword,0_exceptionType,catchKeyword,leftParenthesis,0_exceptionParameter,comma,0_stackTraceParameter,rightParenthesis,0_body,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        var t1 = this.onKeyword;
        if (t1 != null)
          return t1;
        return this.catchKeyword;
      },
      get$endToken: function() {
        return this._body.rightBracket;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitCatchClause$1(this);
      },
      $isCatchClause: 1,
      static: {
        CatchClauseImpl$: function(onKeyword, exceptionType, catchKeyword, leftParenthesis, exceptionParameter, comma, stackTraceParameter, rightParenthesis, body) {
          var t1, t2;
          t1 = new U.CatchClauseImpl(onKeyword, catchKeyword, leftParenthesis, comma, rightParenthesis);
          t1._exceptionType = t1._becomeParentOf$1$1(exceptionType, U.TypeAnnotationImpl);
          t2 = U.SimpleIdentifierImpl;
          t1._exceptionParameter = t1._becomeParentOf$1$1(exceptionParameter, t2);
          t1._stackTraceParameter = t1._becomeParentOf$1$1(stackTraceParameter, t2);
          t1._body = t1._becomeParentOf$1$1(body, U.BlockImpl);
          return t1;
        }
      }
    },
    ClassDeclarationImpl: {
      "^": "NamedCompilationUnitMemberImpl;abstractKeyword,classKeyword,0_typeParameters,0_extendsClause,0_withClause,0_implementsClause,0_nativeClause,leftBracket,0_members,rightBracket,0_ast$_name,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      get$endToken: function() {
        return this.rightBracket;
      },
      get$firstTokenAfterCommentAndMetadata: function() {
        var t1 = this.abstractKeyword;
        if (t1 != null)
          return t1;
        return this.classKeyword;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitClassDeclaration$1(this);
      },
      $isClassDeclaration: 1
    },
    ClassMemberImpl: {
      "^": "DeclarationImpl;",
      $isClassMember: 1
    },
    ClassTypeAliasImpl: {
      "^": "TypeAliasImpl;0_typeParameters,equals,abstractKeyword,0_superclass,0_withClause,0_implementsClause,typedefKeyword,semicolon,0_ast$_name,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      get$firstTokenAfterCommentAndMetadata: function() {
        var t1 = this.abstractKeyword;
        if (t1 != null)
          return t1;
        return this.typedefKeyword;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitClassTypeAlias$1(this);
      },
      $isClassTypeAlias: 1
    },
    CombinatorImpl: {
      "^": "AstNodeImpl;keyword<",
      get$beginToken: function() {
        return this.keyword;
      },
      $isCombinator: 1
    },
    CommentImpl: {
      "^": "AstNodeImpl;tokens,_type<,0_references,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        var t1 = this.tokens;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        return t1[0];
      },
      get$endToken: function() {
        var t1, t2, t3;
        t1 = this.tokens;
        t2 = t1.length;
        t3 = t2 - 1;
        if (t3 < 0)
          return H.ioore(t1, t3);
        return t1[t3];
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitComment$1(this);
      },
      $isComment0: 1
    },
    CommentReferenceImpl: {
      "^": "AstNodeImpl;newKeyword,0_identifier,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._identifier.get$beginToken();
      },
      get$endToken: function() {
        return this._identifier.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitCommentReference$1(this);
      },
      $isCommentReference: 1
    },
    CommentType: {
      "^": "Object;name",
      toString$0: function(_) {
        return this.name;
      }
    },
    CompilationUnitImpl: {
      "^": "AstNodeImpl;beginToken<,0_scriptTag,0_directives,0_declarations,endToken<,0element,0lineInfo,0localDeclarations,0_ast$_parent,0_propertyMap",
      get$length: function(_) {
        var endToken = this.endToken;
        if (endToken == null)
          return 0;
        return endToken.offset + endToken.get$length(endToken);
      },
      get$offset: function(_) {
        return 0;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitCompilationUnit$1(this);
      },
      $isCompilationUnit: 1,
      static: {
        CompilationUnitImpl$: function(beginToken, scriptTag, directives, declarations, endToken) {
          var t1, t2;
          t1 = new U.CompilationUnitImpl(beginToken, endToken);
          t1._scriptTag = t1._becomeParentOf$1$1(scriptTag, U.ScriptTagImpl);
          t2 = Y.Directive;
          t2 = new U.NodeListImpl(t1, H.setRuntimeTypeInfo([], [t2]), [t2]);
          t2.addAll$1(0, directives);
          t1._directives = t2;
          t2 = Y.CompilationUnitMember;
          t2 = new U.NodeListImpl(t1, H.setRuntimeTypeInfo([], [t2]), [t2]);
          t2.addAll$1(0, declarations);
          t1._declarations = t2;
          return t1;
        }
      }
    },
    CompilationUnitMemberImpl: {
      "^": "DeclarationImpl;",
      $isCompilationUnitMember: 1
    },
    ConditionalExpressionImpl: {
      "^": "ExpressionImpl;0_condition,question,0_thenExpression,colon,0_elseExpression,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._condition.get$beginToken();
      },
      get$endToken: function() {
        return this._elseExpression.get$endToken();
      },
      get$precedence: function() {
        return 3;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitConditionalExpression$1(this);
      },
      $isConditionalExpression: 1,
      static: {
        ConditionalExpressionImpl$: function(condition, question, thenExpression, colon, elseExpression) {
          var t1, t2;
          t1 = new U.ConditionalExpressionImpl(question, colon);
          t2 = U.ExpressionImpl;
          t1._condition = t1._becomeParentOf$1$1(condition, t2);
          t1._thenExpression = t1._becomeParentOf$1$1(thenExpression, t2);
          t1._elseExpression = t1._becomeParentOf$1$1(elseExpression, t2);
          return t1;
        }
      }
    },
    ConfigurationImpl: {
      "^": "AstNodeImpl;ifKeyword,leftParenthesis,0_ast$_name<,equalToken,0_ast$_value,rightParenthesis,0_uri,0uriSource,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.ifKeyword;
      },
      get$endToken: function() {
        return this._uri.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitConfiguration$1(this);
      },
      $isConfiguration: 1
    },
    ConstructorDeclarationImpl: {
      "^": "ClassMemberImpl;externalKeyword<,constKeyword<,factoryKeyword<,0_returnType,period,0_ast$_name<,0_parameters,separator,0_initializers,0_redirectedConstructor,0_body,0element,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      get$endToken: function() {
        var t1 = this._body;
        if (t1 != null)
          return t1.get$endToken();
        else {
          t1 = this._initializers;
          if (t1.get$length(t1) !== 0)
            return this._initializers.get$endToken();
        }
        return this._parameters.rightParenthesis;
      },
      get$firstTokenAfterCommentAndMetadata: function() {
        var leftMost = L.Token_lexicallyFirst(H.setRuntimeTypeInfo([this.externalKeyword, this.constKeyword, this.factoryKeyword], [L.Token]));
        if (leftMost != null)
          return leftMost;
        return this._returnType.get$beginToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitConstructorDeclaration$1(this);
      },
      $isConstructorDeclaration: 1
    },
    ConstructorFieldInitializerImpl: {
      "^": "ConstructorInitializerImpl;thisKeyword,period,0_fieldName,equals,0_expression,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        var t1 = this.thisKeyword;
        if (t1 != null)
          return t1;
        return this._fieldName.token;
      },
      get$endToken: function() {
        return this._expression.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitConstructorFieldInitializer$1(this);
      },
      $isConstructorFieldInitializer: 1,
      static: {
        ConstructorFieldInitializerImpl$: function(thisKeyword, period, fieldName, equals, expression) {
          var t1 = new U.ConstructorFieldInitializerImpl(thisKeyword, period, equals);
          t1._fieldName = t1._becomeParentOf$1$1(fieldName, U.SimpleIdentifierImpl);
          t1._expression = t1._becomeParentOf$1$1(expression, U.ExpressionImpl);
          return t1;
        }
      }
    },
    ConstructorInitializerImpl: {
      "^": "AstNodeImpl;",
      $isConstructorInitializer: 1
    },
    ConstructorNameImpl: {
      "^": "AstNodeImpl;0_type<,period,0_ast$_name<,0staticElement,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._type._ast$_name.get$beginToken();
      },
      get$endToken: function() {
        var t1 = this._ast$_name;
        if (t1 != null)
          return t1.token;
        return this._type.get$endToken();
      },
      get$type: function(_) {
        return this._type;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitConstructorName$1(this);
      },
      $isConstructorName: 1,
      static: {
        ConstructorNameImpl$: function(type, period, $name) {
          var t1 = new U.ConstructorNameImpl(period);
          t1._type = t1._becomeParentOf$1$1(type, U.TypeNameImpl);
          t1._ast$_name = t1._becomeParentOf$1$1($name, U.SimpleIdentifierImpl);
          return t1;
        }
      }
    },
    ContinueStatementImpl: {
      "^": "StatementImpl;continueKeyword,0_label,semicolon<,0target,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.continueKeyword;
      },
      get$endToken: function() {
        return this.semicolon;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitContinueStatement$1(this);
      },
      $isContinueStatement: 1
    },
    DeclarationImpl: {
      "^": "AnnotatedNodeImpl;"
    },
    DeclaredIdentifierImpl: {
      "^": "DeclarationImpl;keyword<,0_type<,0_identifier,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      get$endToken: function() {
        return this._identifier.token;
      },
      get$firstTokenAfterCommentAndMetadata: function() {
        var t1 = this.keyword;
        if (t1 != null)
          return t1;
        else {
          t1 = this._type;
          if (t1 != null)
            return t1.get$beginToken();
        }
        return this._identifier.token;
      },
      get$type: function(_) {
        return this._type;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitDeclaredIdentifier$1(this);
      },
      $isDeclaredIdentifier: 1,
      static: {
        DeclaredIdentifierImpl$: function(comment, metadata, keyword, type, identifier) {
          var t1 = new U.DeclaredIdentifierImpl(keyword);
          t1.AnnotatedNodeImpl$2(comment, metadata);
          t1._type = t1._becomeParentOf$1$1(type, U.TypeAnnotationImpl);
          t1._identifier = t1._becomeParentOf$1$1(identifier, U.SimpleIdentifierImpl);
          return t1;
        }
      }
    },
    DeclaredSimpleIdentifier: {
      "^": "SimpleIdentifierImpl;token,0_staticElement,0auxiliaryElements,0staticType,0_ast$_parent,0_propertyMap"
    },
    DefaultFormalParameterImpl: {
      "^": "FormalParameterImpl;0_parameter,kind>,separator,0_defaultValue,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._parameter.get$beginToken();
      },
      get$covariantKeyword: function() {
        return;
      },
      get$endToken: function() {
        var t1 = this._defaultValue;
        if (t1 != null)
          return t1.get$endToken();
        return this._parameter.get$endToken();
      },
      get$metadata: function() {
        return this._parameter._metadata;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitDefaultFormalParameter$1(this);
      },
      $isDefaultFormalParameter: 1,
      static: {
        DefaultFormalParameterImpl$: function(parameter, kind, separator, defaultValue) {
          var t1 = new U.DefaultFormalParameterImpl(kind, separator);
          t1._parameter = t1._becomeParentOf$1$1(parameter, U.NormalFormalParameterImpl);
          t1._defaultValue = t1._becomeParentOf$1$1(defaultValue, U.ExpressionImpl);
          return t1;
        }
      }
    },
    DirectiveImpl: {
      "^": "AnnotatedNodeImpl;",
      $isDirective: 1
    },
    DoStatementImpl: {
      "^": "StatementImpl;doKeyword,0_body,whileKeyword,leftParenthesis,0_condition,rightParenthesis,semicolon<,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.doKeyword;
      },
      get$endToken: function() {
        return this.semicolon;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitDoStatement$1(this);
      },
      $isDoStatement: 1,
      static: {
        DoStatementImpl$: function(doKeyword, body, whileKeyword, leftParenthesis, condition, rightParenthesis, semicolon) {
          var t1 = new U.DoStatementImpl(doKeyword, whileKeyword, leftParenthesis, rightParenthesis, semicolon);
          t1._body = t1._becomeParentOf$1$1(body, U.StatementImpl);
          t1._condition = t1._becomeParentOf$1$1(condition, U.ExpressionImpl);
          return t1;
        }
      }
    },
    DottedNameImpl: {
      "^": "AstNodeImpl;0_components,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._components.get$beginToken();
      },
      get$endToken: function() {
        return this._components.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitDottedName$1(this);
      },
      $isDottedName: 1
    },
    DoubleLiteralImpl: {
      "^": "LiteralImpl;literal,value,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.literal;
      },
      get$endToken: function() {
        return this.literal;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitDoubleLiteral$1(this);
      },
      $isDoubleLiteral: 1
    },
    EmptyFunctionBodyImpl: {
      "^": "FunctionBodyImpl;semicolon<,0localVariableInfo,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.semicolon;
      },
      get$endToken: function() {
        return this.semicolon;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitEmptyFunctionBody$1(this);
      },
      $isEmptyFunctionBody: 1
    },
    EmptyStatementImpl: {
      "^": "StatementImpl;semicolon<,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.semicolon;
      },
      get$endToken: function() {
        return this.semicolon;
      },
      get$isSynthetic: function() {
        return this.semicolon.get$isSynthetic();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitEmptyStatement$1(this);
      },
      $isEmptyStatement: 1
    },
    EnumConstantDeclarationImpl: {
      "^": "DeclarationImpl;0_ast$_name<,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      get$endToken: function() {
        return this._ast$_name.token;
      },
      get$firstTokenAfterCommentAndMetadata: function() {
        return this._ast$_name.token;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitEnumConstantDeclaration$1(this);
      },
      $isEnumConstantDeclaration: 1
    },
    EnumDeclarationImpl: {
      "^": "NamedCompilationUnitMemberImpl;enumKeyword,leftBracket,0_constants,rightBracket,0_ast$_name,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      get$endToken: function() {
        return this.rightBracket;
      },
      get$firstTokenAfterCommentAndMetadata: function() {
        return this.enumKeyword;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitEnumDeclaration$1(this);
      },
      $isEnumDeclaration: 1,
      static: {
        EnumDeclarationImpl$: function(comment, metadata, enumKeyword, $name, leftBracket, constants, rightBracket) {
          var t1, t2;
          t1 = new U.EnumDeclarationImpl(enumKeyword, leftBracket, rightBracket);
          t1.AnnotatedNodeImpl$2(comment, metadata);
          t1._ast$_name = t1._becomeParentOf$1$1($name, U.SimpleIdentifierImpl);
          t2 = Y.EnumConstantDeclaration;
          t2 = new U.NodeListImpl(t1, H.setRuntimeTypeInfo([], [t2]), [t2]);
          t2.addAll$1(0, constants);
          t1._constants = t2;
          return t1;
        }
      }
    },
    ExportDirectiveImpl: {
      "^": "NamespaceDirectiveImpl;keyword,0_configurations,0_combinators,semicolon,0selectedUriContent,0selectedSource,0_uri,0uriContent,0uriSource,0_ast$_element,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitExportDirective$1(this);
      },
      $isExportDirective: 1
    },
    ExpressionFunctionBodyImpl: {
      "^": "FunctionBodyImpl;keyword<,functionDefinition,0_expression,semicolon<,0localVariableInfo,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        var t1 = this.keyword;
        if (t1 != null)
          return t1;
        return this.functionDefinition;
      },
      get$endToken: function() {
        var t1 = this.semicolon;
        if (t1 != null)
          return t1;
        return this._expression.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitExpressionFunctionBody$1(this);
      },
      $isExpressionFunctionBody: 1
    },
    ExpressionImpl: {
      "^": "AstNodeImpl;",
      get$isAssignable: function() {
        return false;
      },
      $isExpression: 1
    },
    ExpressionStatementImpl: {
      "^": "StatementImpl;0_expression,semicolon<,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._expression.get$beginToken();
      },
      get$endToken: function() {
        var t1 = this.semicolon;
        if (t1 != null)
          return t1;
        return this._expression.get$endToken();
      },
      get$isSynthetic: function() {
        return this._expression.get$isSynthetic() && this.semicolon.get$isSynthetic();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitExpressionStatement$1(this);
      },
      $isExpressionStatement: 1
    },
    ExtendsClauseImpl: {
      "^": "AstNodeImpl;extendsKeyword,0_superclass,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.extendsKeyword;
      },
      get$endToken: function() {
        return this._superclass.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitExtendsClause$1(this);
      },
      $isExtendsClause: 1
    },
    FieldDeclarationImpl: {
      "^": "ClassMemberImpl;covariantKeyword<,staticKeyword<,0_fieldList,semicolon<,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      get$endToken: function() {
        return this.semicolon;
      },
      get$firstTokenAfterCommentAndMetadata: function() {
        var t1 = this.covariantKeyword;
        if (t1 != null)
          return t1;
        else {
          t1 = this.staticKeyword;
          if (t1 != null)
            return t1;
        }
        return this._fieldList.get$beginToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitFieldDeclaration$1(this);
      },
      $isFieldDeclaration: 1
    },
    FieldFormalParameterImpl: {
      "^": "NormalFormalParameterImpl;keyword<,0_type<,thisKeyword,period,0_typeParameters,0_parameters,0_comment,0_metadata,covariantKeyword,0_identifier,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        var metadata, t1;
        metadata = this._metadata;
        if (metadata.get$length(metadata) !== 0)
          return metadata.get$beginToken();
        else {
          t1 = this.covariantKeyword;
          if (t1 != null)
            return t1;
          else {
            t1 = this.keyword;
            if (t1 != null)
              return t1;
            else {
              t1 = this._type;
              if (t1 != null)
                return t1.get$beginToken();
            }
          }
        }
        return this.thisKeyword;
      },
      get$endToken: function() {
        var t1 = this._parameters;
        if (t1 != null)
          return t1.rightParenthesis;
        return this._identifier.token;
      },
      get$type: function(_) {
        return this._type;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitFieldFormalParameter$1(this);
      },
      $isFieldFormalParameter: 1
    },
    ForEachStatementImpl: {
      "^": "StatementImpl;awaitKeyword,forKeyword,leftParenthesis,0_loopVariable,0_identifier,inKeyword,0_ast$_iterable,rightParenthesis,0_body,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.forKeyword;
      },
      get$endToken: function() {
        return this._body.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitForEachStatement$1(this);
      },
      $isForEachStatement: 1,
      static: {
        ForEachStatementImpl$withDeclaration: function(awaitKeyword, forKeyword, leftParenthesis, loopVariable, inKeyword, iterator, rightParenthesis, body) {
          var t1 = new U.ForEachStatementImpl(awaitKeyword, forKeyword, leftParenthesis, inKeyword, rightParenthesis);
          t1._loopVariable = t1._becomeParentOf$1$1(loopVariable, U.DeclaredIdentifierImpl);
          t1._ast$_iterable = t1._becomeParentOf$1$1(iterator, U.ExpressionImpl);
          t1._body = t1._becomeParentOf$1$1(body, U.StatementImpl);
          return t1;
        },
        ForEachStatementImpl$withReference: function(awaitKeyword, forKeyword, leftParenthesis, identifier, inKeyword, iterator, rightParenthesis, body) {
          var t1 = new U.ForEachStatementImpl(awaitKeyword, forKeyword, leftParenthesis, inKeyword, rightParenthesis);
          t1._identifier = t1._becomeParentOf$1$1(identifier, U.SimpleIdentifierImpl);
          t1._ast$_iterable = t1._becomeParentOf$1$1(iterator, U.ExpressionImpl);
          t1._body = t1._becomeParentOf$1$1(body, U.StatementImpl);
          return t1;
        }
      }
    },
    FormalParameterImpl: {
      "^": "AstNodeImpl;",
      $isFormalParameter: 1
    },
    FormalParameterListImpl: {
      "^": "AstNodeImpl;leftParenthesis,0_parameters,leftDelimiter,rightDelimiter,rightParenthesis,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.leftParenthesis;
      },
      get$endToken: function() {
        return this.rightParenthesis;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitFormalParameterList$1(this);
      },
      $isFormalParameterList: 1,
      static: {
        FormalParameterListImpl$: function(leftParenthesis, parameters, leftDelimiter, rightDelimiter, rightParenthesis) {
          var t1, t2;
          t1 = new U.FormalParameterListImpl(leftParenthesis, leftDelimiter, rightDelimiter, rightParenthesis);
          t2 = Y.FormalParameter;
          t2 = new U.NodeListImpl(t1, H.setRuntimeTypeInfo([], [t2]), [t2]);
          t2.addAll$1(0, parameters);
          t1._parameters = t2;
          return t1;
        }
      }
    },
    ForStatementImpl: {
      "^": "StatementImpl;forKeyword,leftParenthesis,0_variableList,0_initialization,leftSeparator,0_condition,rightSeparator,0_updaters,rightParenthesis,0_body,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.forKeyword;
      },
      get$endToken: function() {
        return this._body.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitForStatement$1(this);
      },
      $isForStatement: 1,
      static: {
        ForStatementImpl$: function(forKeyword, leftParenthesis, variableList, initialization, leftSeparator, condition, rightSeparator, updaters, rightParenthesis, body) {
          var t1, t2;
          t1 = new U.ForStatementImpl(forKeyword, leftParenthesis, leftSeparator, rightSeparator, rightParenthesis);
          t1._variableList = t1._becomeParentOf$1$1(variableList, U.VariableDeclarationListImpl);
          t2 = U.ExpressionImpl;
          t1._initialization = t1._becomeParentOf$1$1(initialization, t2);
          t1._condition = t1._becomeParentOf$1$1(condition, t2);
          t2 = Y.Expression;
          t2 = new U.NodeListImpl(t1, H.setRuntimeTypeInfo([], [t2]), [t2]);
          t2.addAll$1(0, updaters);
          t1._updaters = t2;
          t1._body = t1._becomeParentOf$1$1(body, U.StatementImpl);
          return t1;
        }
      }
    },
    FunctionBodyImpl: {
      "^": "AstNodeImpl;",
      get$keyword: function() {
        return;
      },
      $isFunctionBody: 1
    },
    FunctionDeclarationImpl: {
      "^": "NamedCompilationUnitMemberImpl;externalKeyword<,0_returnType,propertyKeyword<,0_functionExpression,0_ast$_name,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      get$endToken: function() {
        return this._functionExpression.get$endToken();
      },
      get$firstTokenAfterCommentAndMetadata: function() {
        var t1 = this.externalKeyword;
        if (t1 != null)
          return t1;
        else {
          t1 = this._returnType;
          if (t1 != null)
            return t1.get$beginToken();
          else {
            t1 = this.propertyKeyword;
            if (t1 != null)
              return t1;
            else {
              t1 = this._ast$_name;
              if (t1 != null)
                return t1.token;
            }
          }
        }
        return this._functionExpression.get$beginToken();
      },
      get$returnType: function() {
        return this._returnType;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitFunctionDeclaration$1(this);
      },
      $isFunctionDeclaration: 1,
      static: {
        FunctionDeclarationImpl$: function(comment, metadata, externalKeyword, returnType, propertyKeyword, $name, functionExpression) {
          var t1 = new U.FunctionDeclarationImpl(externalKeyword, propertyKeyword);
          t1.AnnotatedNodeImpl$2(comment, metadata);
          t1._ast$_name = t1._becomeParentOf$1$1($name, U.SimpleIdentifierImpl);
          t1._returnType = t1._becomeParentOf$1$1(returnType, U.TypeAnnotationImpl);
          t1._functionExpression = t1._becomeParentOf$1$1(functionExpression, U.FunctionExpressionImpl);
          return t1;
        }
      }
    },
    FunctionDeclarationStatementImpl: {
      "^": "StatementImpl;0_functionDeclaration,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._functionDeclaration.get$beginToken();
      },
      get$endToken: function() {
        return this._functionDeclaration._functionExpression.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitFunctionDeclarationStatement$1(this);
      },
      $isFunctionDeclarationStatement: 1
    },
    FunctionExpressionImpl: {
      "^": "ExpressionImpl;0_typeParameters,0_parameters,0_body,0element,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        var t1 = this._typeParameters;
        if (t1 != null)
          return t1.leftBracket;
        else {
          t1 = this._parameters;
          if (t1 != null)
            return t1.leftParenthesis;
          else {
            t1 = this._body;
            if (t1 != null)
              return t1.get$beginToken();
          }
        }
        throw H.wrapException(P.StateError$("Non-external functions must have a body"));
      },
      get$body: function(_) {
        return this._body;
      },
      get$endToken: function() {
        var t1 = this._body;
        if (t1 != null)
          return t1.get$endToken();
        else {
          t1 = this._parameters;
          if (t1 != null)
            return t1.rightParenthesis;
        }
        throw H.wrapException(P.StateError$("Non-external functions must have a body"));
      },
      get$parameters: function() {
        return this._parameters;
      },
      get$precedence: function() {
        return 16;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitFunctionExpression$1(this);
      },
      $isFunctionExpression: 1,
      static: {
        FunctionExpressionImpl$: function(typeParameters, parameters, body) {
          var t1 = new U.FunctionExpressionImpl();
          t1._typeParameters = t1._becomeParentOf$1$1(typeParameters, U.TypeParameterListImpl);
          t1._parameters = t1._becomeParentOf$1$1(parameters, U.FormalParameterListImpl);
          t1._body = t1._becomeParentOf$1$1(body, U.FunctionBodyImpl);
          return t1;
        }
      }
    },
    FunctionExpressionInvocationImpl: {
      "^": "InvocationExpressionImpl;0_function,0staticElement,0_argumentList,0_typeArguments,0staticInvokeType,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._function.get$beginToken();
      },
      get$endToken: function() {
        return this._argumentList.rightParenthesis;
      },
      get$precedence: function() {
        return 15;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitFunctionExpressionInvocation$1(this);
      },
      $isFunctionExpressionInvocation: 1
    },
    FunctionTypeAliasImpl: {
      "^": "TypeAliasImpl;0_returnType,0_typeParameters,0_parameters,typedefKeyword,semicolon,0_ast$_name,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitFunctionTypeAlias$1(this);
      },
      $isFunctionTypeAlias: 1,
      static: {
        FunctionTypeAliasImpl$: function(comment, metadata, keyword, returnType, $name, typeParameters, parameters, semicolon) {
          var t1 = new U.FunctionTypeAliasImpl(keyword, semicolon);
          t1.AnnotatedNodeImpl$2(comment, metadata);
          t1._ast$_name = t1._becomeParentOf$1$1($name, U.SimpleIdentifierImpl);
          t1._returnType = t1._becomeParentOf$1$1(returnType, U.TypeAnnotationImpl);
          t1._typeParameters = t1._becomeParentOf$1$1(typeParameters, U.TypeParameterListImpl);
          t1._parameters = t1._becomeParentOf$1$1(parameters, U.FormalParameterListImpl);
          return t1;
        }
      }
    },
    FunctionTypedFormalParameterImpl: {
      "^": "NormalFormalParameterImpl;0_returnType,0_typeParameters,0_parameters,question,0_comment,0_metadata,covariantKeyword,0_identifier,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        var t1 = this._metadata.get$beginToken();
        if (t1 == null)
          t1 = this.covariantKeyword;
        if (t1 == null) {
          t1 = this._returnType;
          t1 = t1 == null ? null : t1.get$beginToken();
        }
        if (t1 == null) {
          t1 = this._identifier;
          t1 = t1 == null ? null : t1.token;
        }
        return t1;
      },
      get$endToken: function() {
        return this._parameters.rightParenthesis;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitFunctionTypedFormalParameter$1(this);
      },
      $isFunctionTypedFormalParameter: 1
    },
    GenericFunctionTypeImpl: {
      "^": "TypeAnnotationImpl;0_returnType,functionKeyword,0_typeParameters,0_parameters,0type>,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        var t1 = this._returnType;
        return t1 == null ? this.functionKeyword : t1.get$beginToken();
      },
      get$endToken: function() {
        return this._parameters.rightParenthesis;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitGenericFunctionType$1(this);
      },
      $isGenericFunctionType: 1,
      static: {
        GenericFunctionTypeImpl$: function(returnType, functionKeyword, typeParameters, parameters) {
          var t1 = new U.GenericFunctionTypeImpl(functionKeyword);
          t1._returnType = t1._becomeParentOf$1$1(returnType, U.TypeAnnotationImpl);
          t1._typeParameters = t1._becomeParentOf$1$1(typeParameters, U.TypeParameterListImpl);
          t1._parameters = t1._becomeParentOf$1$1(parameters, U.FormalParameterListImpl);
          return t1;
        }
      }
    },
    GenericTypeAliasImpl: {
      "^": "TypeAliasImpl;0_typeParameters,equals,0_functionType,typedefKeyword,semicolon,0_ast$_name,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitGenericTypeAlias$1(this);
      },
      $isGenericTypeAlias: 1,
      static: {
        GenericTypeAliasImpl$: function(comment, metadata, typedefToken, $name, typeParameters, equals, functionType, semicolon) {
          var t1 = new U.GenericTypeAliasImpl(equals, typedefToken, semicolon);
          t1.AnnotatedNodeImpl$2(comment, metadata);
          t1._ast$_name = t1._becomeParentOf$1$1($name, U.SimpleIdentifierImpl);
          t1._typeParameters = t1._becomeParentOf$1$1(typeParameters, U.TypeParameterListImpl);
          t1._functionType = t1._becomeParentOf$1$1(functionType, U.GenericFunctionTypeImpl);
          return t1;
        }
      }
    },
    HideCombinatorImpl: {
      "^": "CombinatorImpl;0_hiddenNames,keyword,0_ast$_parent,0_propertyMap",
      get$endToken: function() {
        return this._hiddenNames.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitHideCombinator$1(this);
      },
      $isHideCombinator: 1
    },
    IdentifierImpl: {
      "^": "ExpressionImpl;",
      get$isAssignable: function() {
        return true;
      },
      $isIdentifier: 1
    },
    IfStatementImpl: {
      "^": "StatementImpl;ifKeyword,leftParenthesis,0_condition,rightParenthesis,0_thenStatement,elseKeyword,0_elseStatement,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.ifKeyword;
      },
      get$endToken: function() {
        var t1 = this._elseStatement;
        if (t1 != null)
          return t1.get$endToken();
        return this._thenStatement.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitIfStatement$1(this);
      },
      $isIfStatement: 1,
      static: {
        IfStatementImpl$: function(ifKeyword, leftParenthesis, condition, rightParenthesis, thenStatement, elseKeyword, elseStatement) {
          var t1, t2;
          t1 = new U.IfStatementImpl(ifKeyword, leftParenthesis, rightParenthesis, elseKeyword);
          t1._condition = t1._becomeParentOf$1$1(condition, U.ExpressionImpl);
          t2 = U.StatementImpl;
          t1._thenStatement = t1._becomeParentOf$1$1(thenStatement, t2);
          t1._elseStatement = t1._becomeParentOf$1$1(elseStatement, t2);
          return t1;
        }
      }
    },
    ImplementsClauseImpl: {
      "^": "AstNodeImpl;implementsKeyword,0_interfaces,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.implementsKeyword;
      },
      get$endToken: function() {
        return this._interfaces.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitImplementsClause$1(this);
      },
      $isImplementsClause: 1
    },
    ImportDirectiveImpl: {
      "^": "NamespaceDirectiveImpl;deferredKeyword,asKeyword,0_prefix,keyword,0_configurations,0_combinators,semicolon,0selectedUriContent,0selectedSource,0_uri,0uriContent,0uriSource,0_ast$_element,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitImportDirective$1(this);
      },
      $isImportDirective: 1,
      static: {
        ImportDirectiveImpl$: function(comment, metadata, keyword, libraryUri, configurations, deferredKeyword, asKeyword, prefix, combinators, semicolon) {
          var t1, t2;
          t1 = new U.ImportDirectiveImpl(deferredKeyword, asKeyword, keyword, semicolon);
          t1.AnnotatedNodeImpl$2(comment, metadata);
          t1._uri = t1._becomeParentOf$1$1(libraryUri, U.StringLiteralImpl);
          t2 = Y.Configuration;
          t2 = new U.NodeListImpl(t1, H.setRuntimeTypeInfo([], [t2]), [t2]);
          t2.addAll$1(0, configurations);
          t1._configurations = t2;
          t2 = Y.Combinator;
          t2 = new U.NodeListImpl(t1, H.setRuntimeTypeInfo([], [t2]), [t2]);
          t2.addAll$1(0, combinators);
          t1._combinators = t2;
          t1._prefix = t1._becomeParentOf$1$1(prefix, U.SimpleIdentifierImpl);
          return t1;
        }
      }
    },
    IndexExpressionImpl: {
      "^": "ExpressionImpl;0_ast$_target,period,leftBracket,0_ast$_index,rightBracket,0staticElement,0auxiliaryElements,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        var t1 = this._ast$_target;
        if (t1 != null)
          return t1.get$beginToken();
        return this.period;
      },
      get$endToken: function() {
        return this.rightBracket;
      },
      set$index: function(_, expression) {
        this._ast$_index = this._becomeParentOf$1$1(H.interceptedTypeCheck(expression, "$isExpression"), U.ExpressionImpl);
      },
      get$isAssignable: function() {
        return true;
      },
      get$precedence: function() {
        return 15;
      },
      get$target: function(_) {
        return this._ast$_target;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitIndexExpression$1(this);
      },
      $isIndexExpression: 1,
      static: {
        IndexExpressionImpl$forTarget: function(target, leftBracket, index, rightBracket) {
          var t1, t2;
          t1 = new U.IndexExpressionImpl(null, leftBracket, rightBracket);
          t2 = U.ExpressionImpl;
          t1._ast$_target = t1._becomeParentOf$1$1(target, t2);
          t1._ast$_index = t1._becomeParentOf$1$1(index, t2);
          return t1;
        }
      }
    },
    InstanceCreationExpressionImpl: {
      "^": "ExpressionImpl;keyword<,0_constructorName,0_argumentList,0staticElement,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        var t1 = this.keyword;
        return t1 == null ? this._constructorName._type._ast$_name.get$beginToken() : t1;
      },
      get$endToken: function() {
        return this._argumentList.rightParenthesis;
      },
      get$precedence: function() {
        return 16;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitInstanceCreationExpression$1(this);
      },
      $isInstanceCreationExpression: 1,
      static: {
        InstanceCreationExpressionImpl$: function(keyword, constructorName, argumentList) {
          var t1 = new U.InstanceCreationExpressionImpl(keyword);
          t1._constructorName = t1._becomeParentOf$1$1(constructorName, U.ConstructorNameImpl);
          t1._argumentList = t1._becomeParentOf$1$1(argumentList, U.ArgumentListImpl);
          return t1;
        }
      }
    },
    IntegerLiteralImpl: {
      "^": "LiteralImpl;literal,value,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.literal;
      },
      get$endToken: function() {
        return this.literal;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitIntegerLiteral$1(this);
      },
      $isIntegerLiteral: 1
    },
    InterpolationElementImpl: {
      "^": "AstNodeImpl;",
      $isInterpolationElement: 1
    },
    InterpolationExpressionImpl: {
      "^": "InterpolationElementImpl;leftBracket,0_expression,rightBracket,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.leftBracket;
      },
      get$endToken: function() {
        var t1 = this.rightBracket;
        if (t1 != null)
          return t1;
        return this._expression.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitInterpolationExpression$1(this);
      },
      $isInterpolationExpression: 1
    },
    InterpolationStringImpl: {
      "^": "InterpolationElementImpl;contents,value,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.contents;
      },
      get$endToken: function() {
        return this.contents;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitInterpolationString$1(this);
      },
      $isInterpolationString: 1
    },
    InvocationExpressionImpl: {
      "^": "ExpressionImpl;",
      InvocationExpressionImpl$2: function(typeArguments, argumentList) {
        this._typeArguments = this._becomeParentOf$1$1(typeArguments, U.TypeArgumentListImpl);
        this._argumentList = this._becomeParentOf$1$1(argumentList, U.ArgumentListImpl);
      },
      $isInvocationExpression: 1
    },
    IsExpressionImpl: {
      "^": "ExpressionImpl;0_expression,isOperator,notOperator,0_type<,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._expression.get$beginToken();
      },
      get$endToken: function() {
        return this._type.get$endToken();
      },
      get$precedence: function() {
        return 7;
      },
      get$type: function(_) {
        return this._type;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitIsExpression$1(this);
      },
      $isIsExpression: 1,
      static: {
        IsExpressionImpl$: function(expression, isOperator, notOperator, type) {
          var t1 = new U.IsExpressionImpl(isOperator, notOperator);
          t1._expression = t1._becomeParentOf$1$1(expression, U.ExpressionImpl);
          t1._type = t1._becomeParentOf$1$1(type, U.TypeAnnotationImpl);
          return t1;
        }
      }
    },
    LabeledStatementImpl: {
      "^": "StatementImpl;0_labels,0_statement,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        var t1 = this._labels;
        if (t1.get$length(t1) !== 0)
          return this._labels.get$beginToken();
        return this._statement.get$beginToken();
      },
      get$endToken: function() {
        return this._statement.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitLabeledStatement$1(this);
      },
      $isLabeledStatement: 1,
      static: {
        LabeledStatementImpl$: function(labels, statement) {
          var t1, t2;
          t1 = new U.LabeledStatementImpl();
          t2 = Y.Label;
          t2 = new U.NodeListImpl(t1, H.setRuntimeTypeInfo([], [t2]), [t2]);
          t2.addAll$1(0, labels);
          t1._labels = t2;
          t1._statement = t1._becomeParentOf$1$1(statement, U.StatementImpl);
          return t1;
        }
      }
    },
    LabelImpl: {
      "^": "AstNodeImpl;0_label,colon,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._label.token;
      },
      get$endToken: function() {
        return this.colon;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitLabel$1(this);
      },
      $isLabel: 1
    },
    LibraryDirectiveImpl: {
      "^": "DirectiveImpl;libraryKeyword,0_ast$_name<,semicolon<,0_ast$_element,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      get$endToken: function() {
        return this.semicolon;
      },
      get$firstTokenAfterCommentAndMetadata: function() {
        return this.libraryKeyword;
      },
      get$keyword: function() {
        return this.libraryKeyword;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitLibraryDirective$1(this);
      },
      $isLibraryDirective: 1
    },
    LibraryIdentifierImpl: {
      "^": "IdentifierImpl;0_components,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._components.get$beginToken();
      },
      get$endToken: function() {
        return this._components.get$endToken();
      },
      get$name: function(_) {
        var $length, needsPeriod, i, t1, identifier;
        $length = this._components._elements.length;
        for (needsPeriod = false, i = 0, t1 = ""; i < $length; ++i) {
          identifier = this._components.$index(0, i);
          if (needsPeriod)
            t1 += ".";
          else
            needsPeriod = true;
          t1 += H.S(identifier.token.get$lexeme());
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      get$precedence: function() {
        return 15;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitLibraryIdentifier$1(this);
      },
      $isLibraryIdentifier: 1
    },
    ListLiteralImpl: {
      "^": "TypedLiteralImpl;leftBracket,0_elements<,rightBracket,constKeyword,0_typeArguments,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        var t1, typeArguments;
        t1 = this.constKeyword;
        if (t1 != null)
          return t1;
        typeArguments = this._typeArguments;
        if (typeArguments != null)
          return typeArguments.leftBracket;
        return this.leftBracket;
      },
      get$endToken: function() {
        return this.rightBracket;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitListLiteral$1(this);
      },
      $isListLiteral: 1
    },
    LiteralImpl: {
      "^": "ExpressionImpl;",
      get$precedence: function() {
        return 16;
      }
    },
    MapLiteralEntryImpl: {
      "^": "AstNodeImpl;0_key,separator,0_ast$_value,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._key.get$beginToken();
      },
      get$endToken: function() {
        return this._ast$_value.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitMapLiteralEntry$1(this);
      },
      $isMapLiteralEntry: 1,
      static: {
        MapLiteralEntryImpl$: function(key, separator, value) {
          var t1, t2;
          t1 = new U.MapLiteralEntryImpl(separator);
          t2 = U.ExpressionImpl;
          t1._key = t1._becomeParentOf$1$1(key, t2);
          t1._ast$_value = t1._becomeParentOf$1$1(value, t2);
          return t1;
        }
      }
    },
    MapLiteralImpl: {
      "^": "TypedLiteralImpl;leftBracket,0_entries,rightBracket,constKeyword,0_typeArguments,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        var t1, typeArguments;
        t1 = this.constKeyword;
        if (t1 != null)
          return t1;
        typeArguments = this._typeArguments;
        if (typeArguments != null)
          return typeArguments.leftBracket;
        return this.leftBracket;
      },
      get$endToken: function() {
        return this.rightBracket;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitMapLiteral$1(this);
      },
      $isMapLiteral: 1
    },
    MethodDeclarationImpl: {
      "^": "ClassMemberImpl;externalKeyword<,modifierKeyword,0_returnType,propertyKeyword<,operatorKeyword,0_ast$_name<,0_typeParameters,0_parameters,0_body,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      get$body: function(_) {
        return this._body;
      },
      get$endToken: function() {
        return this._body.get$endToken();
      },
      get$firstTokenAfterCommentAndMetadata: function() {
        var t1 = this.externalKeyword;
        if (t1 != null)
          return t1;
        else {
          t1 = this.modifierKeyword;
          if (t1 != null)
            return t1;
          else {
            t1 = this._returnType;
            if (t1 != null)
              return t1.get$beginToken();
            else {
              t1 = this.propertyKeyword;
              if (t1 != null)
                return t1;
              else {
                t1 = this.operatorKeyword;
                if (t1 != null)
                  return t1;
              }
            }
          }
        }
        return this._ast$_name.token;
      },
      get$name: function(_) {
        return this._ast$_name;
      },
      get$parameters: function() {
        return this._parameters;
      },
      get$returnType: function() {
        return this._returnType;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitMethodDeclaration$1(this);
      },
      $isMethodDeclaration: 1
    },
    MethodInvocationImpl: {
      "^": "InvocationExpressionImpl;0_ast$_target,operator>,0_methodName,0_argumentList,0_typeArguments,0staticInvokeType,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        var t1 = this._ast$_target;
        if (t1 != null)
          return t1.get$beginToken();
        else {
          t1 = this.operator;
          if (t1 != null)
            return t1;
        }
        return this._methodName.token;
      },
      get$endToken: function() {
        return this._argumentList.rightParenthesis;
      },
      get$precedence: function() {
        return 15;
      },
      get$target: function(_) {
        return this._ast$_target;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitMethodInvocation$1(this);
      },
      $isMethodInvocation: 1,
      static: {
        MethodInvocationImpl$: function(target, operator, methodName, typeArguments, argumentList) {
          var t1 = new U.MethodInvocationImpl(operator);
          t1.InvocationExpressionImpl$2(typeArguments, argumentList);
          t1._ast$_target = t1._becomeParentOf$1$1(target, U.ExpressionImpl);
          t1._methodName = t1._becomeParentOf$1$1(methodName, U.SimpleIdentifierImpl);
          return t1;
        }
      }
    },
    NamedCompilationUnitMemberImpl: {
      "^": "CompilationUnitMemberImpl;0_ast$_name<",
      get$name: function(_) {
        return this._ast$_name;
      }
    },
    NamedExpressionImpl: {
      "^": "ExpressionImpl;0_ast$_name<,0_expression,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._ast$_name._label.token;
      },
      get$endToken: function() {
        return this._expression.get$endToken();
      },
      get$precedence: function() {
        return 0;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitNamedExpression$1(this);
      },
      $isNamedExpression: 1,
      static: {
        NamedExpressionImpl$: function($name, expression) {
          var t1 = new U.NamedExpressionImpl();
          t1._ast$_name = t1._becomeParentOf$1$1($name, U.LabelImpl);
          t1._expression = t1._becomeParentOf$1$1(expression, U.ExpressionImpl);
          return t1;
        }
      }
    },
    NamespaceDirectiveImpl: {
      "^": "UriBasedDirectiveImpl;keyword<,semicolon<",
      get$endToken: function() {
        return this.semicolon;
      },
      get$firstTokenAfterCommentAndMetadata: function() {
        return this.keyword;
      },
      get$source: function(_) {
        return this.selectedSource;
      }
    },
    NativeClauseImpl: {
      "^": "AstNodeImpl;nativeKeyword,0_ast$_name<,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.nativeKeyword;
      },
      get$endToken: function() {
        return this._ast$_name.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitNativeClause$1(this);
      },
      $isNativeClause: 1
    },
    NativeFunctionBodyImpl: {
      "^": "FunctionBodyImpl;nativeKeyword,0_stringLiteral,semicolon<,0localVariableInfo,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.nativeKeyword;
      },
      get$endToken: function() {
        return this.semicolon;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitNativeFunctionBody$1(this);
      },
      $isNativeFunctionBody: 1
    },
    NodeListImpl: {
      "^": "_NodeListImpl_Object_ListMixin;_owner,_elements<,$ti",
      get$beginToken: function() {
        var t1, t2;
        t1 = this._elements;
        t2 = t1.length;
        if (t2 === 0)
          return;
        if (0 >= t2)
          return H.ioore(t1, 0);
        return t1[0].get$beginToken();
      },
      get$endToken: function() {
        var t1, $length, t2;
        t1 = this._elements;
        $length = t1.length;
        if ($length === 0)
          return;
        t2 = $length - 1;
        if (t2 < 0)
          return H.ioore(t1, t2);
        return t1[t2].get$endToken();
      },
      get$length: function(_) {
        return this._elements.length;
      },
      set$length: function(_, newLength) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize NodeList."));
      },
      $index: function(_, index) {
        var t1;
        if (typeof index !== "number")
          return index.$lt();
        if (index < 0 || index >= this._elements.length)
          throw H.wrapException(P.RangeError$("Index: " + index + ", Size: " + this._elements.length));
        t1 = this._elements;
        if (index < 0 || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      $indexSet: function(_, index, node) {
        H.intTypeCheck(index);
        H.assertSubtypeOfRuntimeType(node, H.getTypeArgumentByIndex(this, 0));
        if (typeof index !== "number")
          return index.$lt();
        if (index < 0 || index >= this._elements.length)
          throw H.wrapException(P.RangeError$("Index: " + index + ", Size: " + this._elements.length));
        H.interceptedTypeCast(node, "$isAstNodeImpl");
        this._owner._becomeParentOf$1$1(node, U.AstNodeImpl);
        C.JSArray_methods.$indexSet(this._elements, index, node);
      },
      add$1: function(_, node) {
        var t1, t2;
        H.assertSubtypeOfRuntimeType(node, H.getTypeArgumentByIndex(this, 0));
        t1 = this._elements.length;
        if (t1 > t1)
          H.throwExpression(P.RangeError$("Index: " + t1 + ", Size: " + this._elements.length));
        this._owner._becomeParentOf$1$1(node, U.AstNodeImpl);
        t2 = this._elements;
        if (t1 === 0)
          C.JSArray_methods.add$1(t2, node);
        else
          C.JSArray_methods.insert$2(t2, t1, node);
      },
      addAll$1: function(_, nodes) {
        var t1, $length, t2, t3, i, node;
        t1 = this.$ti;
        H.assertSubtype(nodes, "$isIterable", t1, "$asIterable");
        if (nodes != null && !J.get$isEmpty$asx(nodes)) {
          t1 = H.checkSubtypeV2(nodes, "$isList", t1, "$asList");
          if (t1) {
            t1 = J.getInterceptor$asx(nodes);
            $length = t1.get$length(nodes);
            for (t2 = this._owner, t3 = U.AstNodeImpl, i = 0; i < $length; ++i) {
              node = t1.$index(nodes, i);
              C.JSArray_methods.add$1(this._elements, node);
              H.interceptedTypeCast(node, "$isAstNodeImpl");
              H.assertIsSubtype(t3, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (node != null)
                node._ast$_parent = t2;
            }
          } else
            for (t1 = J.get$iterator$ax(nodes), t2 = this._owner, t3 = U.AstNodeImpl; t1.moveNext$0();) {
              node = t1.get$current();
              C.JSArray_methods.add$1(this._elements, node);
              H.interceptedTypeCast(node, "$isAstNodeImpl");
              H.assertIsSubtype(t3, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (node != null)
                node._ast$_parent = t2;
            }
          return true;
        }
        return false;
      },
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isList: 1,
      $isNodeList: 1
    },
    NormalFormalParameterImpl: {
      "^": "FormalParameterImpl;covariantKeyword<",
      NormalFormalParameterImpl$4: function(comment, metadata, covariantKeyword, identifier) {
        var t1;
        this._comment = this._becomeParentOf$1$1(comment, U.CommentImpl);
        t1 = Y.Annotation;
        t1 = new U.NodeListImpl(this, H.setRuntimeTypeInfo([], [t1]), [t1]);
        t1.addAll$1(0, metadata);
        this._metadata = t1;
        this._identifier = this._becomeParentOf$1$1(identifier, U.SimpleIdentifierImpl);
      },
      get$kind: function(_) {
        var $parent = this._ast$_parent;
        if (!!J.getInterceptor($parent).$isDefaultFormalParameter)
          return $parent.kind;
        return C.ParameterKind_REQUIRED_0_false;
      },
      get$metadata: function() {
        return this._metadata;
      },
      $isNormalFormalParameter: 1
    },
    NullLiteralImpl: {
      "^": "LiteralImpl;literal,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.literal;
      },
      get$endToken: function() {
        return this.literal;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitNullLiteral$1(this);
      },
      $isNullLiteral: 1
    },
    ParenthesizedExpressionImpl: {
      "^": "ExpressionImpl;leftParenthesis,0_expression,rightParenthesis,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.leftParenthesis;
      },
      get$endToken: function() {
        return this.rightParenthesis;
      },
      get$precedence: function() {
        return 15;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitParenthesizedExpression$1(this);
      },
      $isParenthesizedExpression: 1
    },
    PartDirectiveImpl: {
      "^": "UriBasedDirectiveImpl;partKeyword,semicolon<,0_uri,0uriContent,0uriSource,0_ast$_element,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      get$endToken: function() {
        return this.semicolon;
      },
      get$firstTokenAfterCommentAndMetadata: function() {
        return this.partKeyword;
      },
      get$keyword: function() {
        return this.partKeyword;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitPartDirective$1(this);
      },
      $isPartDirective: 1
    },
    PartOfDirectiveImpl: {
      "^": "DirectiveImpl;partKeyword,ofKeyword,0_uri,0_libraryName,semicolon<,0_ast$_element,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      get$endToken: function() {
        return this.semicolon;
      },
      get$firstTokenAfterCommentAndMetadata: function() {
        return this.partKeyword;
      },
      get$keyword: function() {
        return this.partKeyword;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitPartOfDirective$1(this);
      },
      $isPartOfDirective: 1,
      static: {
        PartOfDirectiveImpl$: function(comment, metadata, partKeyword, ofKeyword, uri, libraryName, semicolon) {
          var t1 = new U.PartOfDirectiveImpl(partKeyword, ofKeyword, semicolon);
          t1.AnnotatedNodeImpl$2(comment, metadata);
          t1._uri = t1._becomeParentOf$1$1(uri, U.StringLiteralImpl);
          t1._libraryName = t1._becomeParentOf$1$1(libraryName, U.LibraryIdentifierImpl);
          return t1;
        }
      }
    },
    PostfixExpressionImpl: {
      "^": "ExpressionImpl;0_operand,operator>,0staticElement,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._operand.get$beginToken();
      },
      get$endToken: function() {
        return this.operator;
      },
      get$precedence: function() {
        return 15;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitPostfixExpression$1(this);
      },
      $isPostfixExpression: 1
    },
    PrefixedIdentifierImpl: {
      "^": "IdentifierImpl;_prefix,period,_identifier,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._prefix.token;
      },
      get$endToken: function() {
        return this._identifier.token;
      },
      get$precedence: function() {
        return 15;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitPrefixedIdentifier$1(this);
      },
      $isPrefixedIdentifier: 1,
      static: {
        PrefixedIdentifierImpl$: function(prefix, period, identifier) {
          var t1, t2;
          t1 = new U.PrefixedIdentifierImpl(null, period, null);
          t2 = U.SimpleIdentifierImpl;
          t1._prefix = t1._becomeParentOf$1$1(prefix, t2);
          t1._identifier = t1._becomeParentOf$1$1(identifier, t2);
          return t1;
        }
      }
    },
    PrefixExpressionImpl: {
      "^": "ExpressionImpl;operator>,0_operand,0staticElement,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.operator;
      },
      get$endToken: function() {
        return this._operand.get$endToken();
      },
      get$precedence: function() {
        return 14;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitPrefixExpression$1(this);
      },
      $isPrefixExpression: 1
    },
    PropertyAccessImpl: {
      "^": "ExpressionImpl;0_ast$_target,operator>,0_propertyName,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        var t1 = this._ast$_target;
        if (t1 != null)
          return t1.get$beginToken();
        return this.operator;
      },
      get$endToken: function() {
        return this._propertyName.token;
      },
      get$isAssignable: function() {
        return true;
      },
      get$isCascaded: function() {
        var t1 = this.operator;
        return t1 != null && t1.type === C.TokenType_cv8;
      },
      get$precedence: function() {
        return 15;
      },
      get$target: function(_) {
        return this._ast$_target;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitPropertyAccess$1(this);
      },
      $isPropertyAccess: 1,
      static: {
        PropertyAccessImpl$: function(target, operator, propertyName) {
          var t1 = new U.PropertyAccessImpl(operator);
          t1._ast$_target = t1._becomeParentOf$1$1(target, U.ExpressionImpl);
          t1._propertyName = t1._becomeParentOf$1$1(propertyName, U.SimpleIdentifierImpl);
          return t1;
        }
      }
    },
    RedirectingConstructorInvocationImpl: {
      "^": "ConstructorInitializerImpl;thisKeyword,period,0_constructorName,0_argumentList,0staticElement,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.thisKeyword;
      },
      get$endToken: function() {
        return this._argumentList.rightParenthesis;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitRedirectingConstructorInvocation$1(this);
      },
      $isRedirectingConstructorInvocation: 1,
      static: {
        RedirectingConstructorInvocationImpl$: function(thisKeyword, period, constructorName, argumentList) {
          var t1 = new U.RedirectingConstructorInvocationImpl(thisKeyword, period);
          t1._constructorName = t1._becomeParentOf$1$1(constructorName, U.SimpleIdentifierImpl);
          t1._argumentList = t1._becomeParentOf$1$1(argumentList, U.ArgumentListImpl);
          return t1;
        }
      }
    },
    RethrowExpressionImpl: {
      "^": "ExpressionImpl;rethrowKeyword,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.rethrowKeyword;
      },
      get$endToken: function() {
        return this.rethrowKeyword;
      },
      get$precedence: function() {
        return 0;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitRethrowExpression$1(this);
      },
      $isRethrowExpression: 1
    },
    ReturnStatementImpl: {
      "^": "StatementImpl;returnKeyword,0_expression,semicolon<,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.returnKeyword;
      },
      get$endToken: function() {
        return this.semicolon;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitReturnStatement$1(this);
      },
      $isReturnStatement: 1
    },
    ScriptTagImpl: {
      "^": "AstNodeImpl;scriptTag,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.scriptTag;
      },
      get$endToken: function() {
        return this.scriptTag;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitScriptTag$1(this);
      },
      $isScriptTag: 1
    },
    ShowCombinatorImpl: {
      "^": "CombinatorImpl;0_shownNames,keyword,0_ast$_parent,0_propertyMap",
      get$endToken: function() {
        return this._shownNames.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitShowCombinator$1(this);
      },
      $isShowCombinator: 1
    },
    SimpleFormalParameterImpl: {
      "^": "NormalFormalParameterImpl;keyword<,0_type<,0element,0_comment,0_metadata,covariantKeyword,0_identifier,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        var metadata, t1;
        metadata = this._metadata;
        if (metadata.get$length(metadata) !== 0)
          return metadata.get$beginToken();
        else {
          t1 = this.covariantKeyword;
          if (t1 != null)
            return t1;
          else {
            t1 = this.keyword;
            if (t1 != null)
              return t1;
            else {
              t1 = this._type;
              if (t1 != null)
                return t1.get$beginToken();
            }
          }
        }
        t1 = this._identifier;
        return t1 == null ? null : t1.token;
      },
      get$endToken: function() {
        var t1 = this._identifier;
        t1 = t1 == null ? null : t1.token;
        if (t1 == null) {
          t1 = this._type;
          t1 = t1 == null ? null : t1.get$endToken();
        }
        return t1;
      },
      get$type: function(_) {
        return this._type;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitSimpleFormalParameter$1(this);
      },
      $isSimpleFormalParameter: 1
    },
    SimpleIdentifierImpl: {
      "^": "IdentifierImpl;token<,0_staticElement,0auxiliaryElements,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.token;
      },
      get$endToken: function() {
        return this.token;
      },
      get$isSynthetic: function() {
        return this.token.get$isSynthetic();
      },
      get$precedence: function() {
        return 16;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitSimpleIdentifier$1(this);
      },
      $isSimpleIdentifier: 1
    },
    SimpleStringLiteralImpl: {
      "^": "SingleStringLiteralImpl;literal,0_ast$_value,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.literal;
      },
      get$endToken: function() {
        return this.literal;
      },
      get$isMultiline: function() {
        return U.StringLexemeHelper$(this.literal.get$lexeme(), true, true).isMultiline;
      },
      get$isSynthetic: function() {
        return this.literal.get$isSynthetic();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitSimpleStringLiteral$1(this);
      },
      $isSimpleStringLiteral: 1
    },
    SingleStringLiteralImpl: {
      "^": "StringLiteralImpl;",
      $isSingleStringLiteral: 1
    },
    StatementImpl: {
      "^": "AstNodeImpl;",
      $isStatement: 1
    },
    StringInterpolationImpl: {
      "^": "SingleStringLiteralImpl;0_elements<,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._elements.get$beginToken();
      },
      get$endToken: function() {
        return this._elements.get$endToken();
      },
      get$isMultiline: function() {
        var t1 = this._elements;
        return U.StringLexemeHelper$(H.interceptedTypeCheck(t1.get$first(t1), "$isInterpolationString").contents.get$lexeme(), true, false).isMultiline;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitStringInterpolation$1(this);
      },
      $isStringInterpolation: 1
    },
    StringLexemeHelper: {
      "^": "Object;lexeme<,isFirst,isLast,isRaw,isSingleQuoted,isMultiline,start,0end",
      _trimInitialWhitespace$1: function(start) {
        var t1, $length, t2, index, currentChar, t3;
        t1 = this.lexeme;
        $length = t1.length;
        for (t2 = J.getInterceptor$s(t1), index = start; index < $length;) {
          currentChar = t2._codeUnitAt$1(t1, index);
          if (currentChar === 13) {
            t2 = index + 1;
            if (t2 < $length && C.JSString_methods._codeUnitAt$1(t1, t2) === 10)
              return index + 2;
            return t2;
          } else if (currentChar === 10)
            return index + 1;
          else if (currentChar === 92) {
            t3 = index + 1;
            if (t3 >= $length)
              return start;
            currentChar = C.JSString_methods._codeUnitAt$1(t1, t3);
            if (currentChar !== 13 && currentChar !== 10 && currentChar !== 9 && currentChar !== 32)
              return start;
          } else if (currentChar !== 9 && currentChar !== 32)
            return start;
          ++index;
        }
        return start;
      },
      static: {
        StringLexemeHelper$: function(lexeme, isFirst, isLast) {
          var t1, t2, t3;
          t1 = new U.StringLexemeHelper(lexeme, isFirst, isLast, false, false, false, 0);
          if (isFirst) {
            t2 = lexeme.length;
            t3 = t2 !== 0 && J._codeUnitAt$1$s(lexeme, 0) === 114;
            t1.isRaw = t3;
            if (t3) {
              t1.start = 1;
              t3 = 1;
            } else
              t3 = 0;
            if (O.StringUtilities_startsWith3(lexeme, t3, 39, 39, 39)) {
              t1.isSingleQuoted = true;
              t1.isMultiline = true;
              t2 = t3 + 3;
              t1.start = t2;
              t2 = t1._trimInitialWhitespace$1(t2);
              t1.start = t2;
            } else if (O.StringUtilities_startsWith3(lexeme, t3, 34, 34, 34)) {
              t1.isMultiline = true;
              t2 = t3 + 3;
              t1.start = t2;
              t2 = t1._trimInitialWhitespace$1(t2);
              t1.start = t2;
            } else {
              t2 = t3 < t2;
              if (t2 && J._codeUnitAt$1$s(lexeme, t3) === 39) {
                t1.isSingleQuoted = true;
                t2 = t3 + 1;
                t1.start = t2;
              } else if (t2 && J._codeUnitAt$1$s(lexeme, t3) === 34) {
                t2 = t3 + 1;
                t1.start = t2;
              } else
                t2 = t3;
            }
          } else
            t2 = 0;
          t3 = lexeme.length;
          t1.end = t3;
          if (isLast) {
            if (t2 + 3 <= t3)
              t2 = O.StringUtilities_endsWith3(lexeme, 34, 34, 34) || O.StringUtilities_endsWith3(lexeme, 39, 39, 39);
            else
              t2 = false;
            if (t2) {
              t2 = t1.end;
              if (typeof t2 !== "number")
                return t2.$sub();
              t1.end = t2 - 3;
            } else {
              t2 = t1.start;
              t3 = t1.end;
              if (typeof t3 !== "number")
                return H.iae(t3);
              if (t2 + 1 <= t3)
                t2 = O.StringUtilities_endsWithChar(lexeme, 34) || O.StringUtilities_endsWithChar(lexeme, 39);
              else
                t2 = false;
              if (t2) {
                t2 = t1.end;
                if (typeof t2 !== "number")
                  return t2.$sub();
                t1.end = t2 - 1;
              }
            }
          }
          return t1;
        }
      }
    },
    StringLiteralImpl: {
      "^": "LiteralImpl;",
      $isStringLiteral: 1
    },
    SuperConstructorInvocationImpl: {
      "^": "ConstructorInitializerImpl;superKeyword,period,0_constructorName,0_argumentList,0staticElement,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.superKeyword;
      },
      get$endToken: function() {
        return this._argumentList.rightParenthesis;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitSuperConstructorInvocation$1(this);
      },
      $isSuperConstructorInvocation: 1,
      static: {
        SuperConstructorInvocationImpl$: function(superKeyword, period, constructorName, argumentList) {
          var t1 = new U.SuperConstructorInvocationImpl(superKeyword, period);
          t1._constructorName = t1._becomeParentOf$1$1(constructorName, U.SimpleIdentifierImpl);
          t1._argumentList = t1._becomeParentOf$1$1(argumentList, U.ArgumentListImpl);
          return t1;
        }
      }
    },
    SuperExpressionImpl: {
      "^": "ExpressionImpl;superKeyword,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.superKeyword;
      },
      get$endToken: function() {
        return this.superKeyword;
      },
      get$precedence: function() {
        return 16;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitSuperExpression$1(this);
      },
      $isSuperExpression: 1
    },
    SwitchCaseImpl: {
      "^": "SwitchMemberImpl;0_expression,0_labels,keyword,colon,0_statements,0_ast$_parent,0_propertyMap",
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitSwitchCase$1(this);
      },
      $isSwitchCase: 1
    },
    SwitchDefaultImpl: {
      "^": "SwitchMemberImpl;0_labels,keyword,colon,0_statements,0_ast$_parent,0_propertyMap",
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitSwitchDefault$1(this);
      },
      $isSwitchDefault: 1
    },
    SwitchMemberImpl: {
      "^": "AstNodeImpl;keyword<",
      get$beginToken: function() {
        var t1 = this._labels;
        if (t1.get$length(t1) !== 0)
          return this._labels.get$beginToken();
        return this.keyword;
      },
      get$endToken: function() {
        var t1 = this._statements;
        if (t1.get$length(t1) !== 0)
          return this._statements.get$endToken();
        return this.colon;
      },
      $isSwitchMember: 1
    },
    SwitchStatementImpl: {
      "^": "StatementImpl;switchKeyword,leftParenthesis,0_expression,rightParenthesis,leftBracket,0_members,rightBracket,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.switchKeyword;
      },
      get$endToken: function() {
        return this.rightBracket;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitSwitchStatement$1(this);
      },
      $isSwitchStatement: 1,
      static: {
        SwitchStatementImpl$: function(switchKeyword, leftParenthesis, expression, rightParenthesis, leftBracket, members, rightBracket) {
          var t1, t2;
          t1 = new U.SwitchStatementImpl(switchKeyword, leftParenthesis, rightParenthesis, leftBracket, rightBracket);
          t1._expression = t1._becomeParentOf$1$1(expression, U.ExpressionImpl);
          t2 = Y.SwitchMember;
          t2 = new U.NodeListImpl(t1, H.setRuntimeTypeInfo([], [t2]), [t2]);
          t2.addAll$1(0, members);
          t1._members = t2;
          return t1;
        }
      }
    },
    SymbolLiteralImpl: {
      "^": "LiteralImpl;poundSign,components,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.poundSign;
      },
      get$endToken: function() {
        var t1, t2, t3;
        t1 = this.components;
        t2 = t1.length;
        t3 = t2 - 1;
        if (t3 < 0)
          return H.ioore(t1, t3);
        return t1[t3];
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitSymbolLiteral$1(this);
      },
      $isSymbolLiteral: 1
    },
    ThisExpressionImpl: {
      "^": "ExpressionImpl;thisKeyword,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.thisKeyword;
      },
      get$endToken: function() {
        return this.thisKeyword;
      },
      get$precedence: function() {
        return 16;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitThisExpression$1(this);
      },
      $isThisExpression: 1
    },
    ThrowExpressionImpl: {
      "^": "ExpressionImpl;throwKeyword,0_expression,0staticType,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.throwKeyword;
      },
      get$endToken: function() {
        var t1 = this._expression;
        if (t1 != null)
          return t1.get$endToken();
        return this.throwKeyword;
      },
      get$precedence: function() {
        return 0;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitThrowExpression$1(this);
      },
      $isThrowExpression: 1
    },
    TopLevelVariableDeclarationImpl: {
      "^": "CompilationUnitMemberImpl;0_variableList,semicolon<,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      get$endToken: function() {
        return this.semicolon;
      },
      get$firstTokenAfterCommentAndMetadata: function() {
        return this._variableList.get$beginToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitTopLevelVariableDeclaration$1(this);
      },
      $isTopLevelVariableDeclaration: 1
    },
    TryStatementImpl: {
      "^": "StatementImpl;tryKeyword,0_body,0_catchClauses,finallyKeyword,0_finallyBlock,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.tryKeyword;
      },
      get$endToken: function() {
        var t1 = this._finallyBlock;
        if (t1 != null)
          return t1.rightBracket;
        else {
          t1 = this.finallyKeyword;
          if (t1 != null)
            return t1;
          else {
            t1 = this._catchClauses;
            if (t1.get$length(t1) !== 0)
              return this._catchClauses.get$endToken();
          }
        }
        return this._body.rightBracket;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitTryStatement$1(this);
      },
      $isTryStatement: 1,
      static: {
        TryStatementImpl$: function(tryKeyword, body, catchClauses, finallyKeyword, finallyBlock) {
          var t1, t2, t3;
          t1 = new U.TryStatementImpl(tryKeyword, finallyKeyword);
          t2 = U.BlockImpl;
          t1._body = t1._becomeParentOf$1$1(body, t2);
          t3 = Y.CatchClause;
          t3 = new U.NodeListImpl(t1, H.setRuntimeTypeInfo([], [t3]), [t3]);
          t3.addAll$1(0, catchClauses);
          t1._catchClauses = t3;
          t1._finallyBlock = t1._becomeParentOf$1$1(finallyBlock, t2);
          return t1;
        }
      }
    },
    TypeAliasImpl: {
      "^": "NamedCompilationUnitMemberImpl;semicolon<",
      get$endToken: function() {
        return this.semicolon;
      },
      get$firstTokenAfterCommentAndMetadata: function() {
        return this.typedefKeyword;
      }
    },
    TypeAnnotationImpl: {
      "^": "AstNodeImpl;",
      $isTypeAnnotation: 1
    },
    TypeArgumentListImpl: {
      "^": "AstNodeImpl;leftBracket,0_ast$_arguments,rightBracket,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.leftBracket;
      },
      get$endToken: function() {
        return this.rightBracket;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitTypeArgumentList$1(this);
      },
      $isTypeArgumentList: 1
    },
    TypedLiteralImpl: {
      "^": "LiteralImpl;constKeyword<",
      $isTypedLiteral: 1
    },
    TypeNameImpl: {
      "^": "TypeAnnotationImpl;0_ast$_name<,0_typeArguments,question,0type>,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._ast$_name.get$beginToken();
      },
      get$endToken: function() {
        var t1 = this._typeArguments;
        if (t1 != null)
          return t1.rightBracket;
        return this._ast$_name.get$endToken();
      },
      get$isSynthetic: function() {
        return this._ast$_name.get$isSynthetic() && this._typeArguments == null;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitTypeName$1(this);
      },
      $isTypeName: 1,
      static: {
        TypeNameImpl$: function($name, typeArguments, question) {
          var t1 = new U.TypeNameImpl(question);
          t1._ast$_name = t1._becomeParentOf$1$1($name, U.IdentifierImpl);
          t1._typeArguments = t1._becomeParentOf$1$1(typeArguments, U.TypeArgumentListImpl);
          return t1;
        }
      }
    },
    TypeParameterImpl: {
      "^": "DeclarationImpl;0_ast$_name<,extendsKeyword,0_bound,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      get$endToken: function() {
        var t1 = this._bound;
        if (t1 == null)
          return this._ast$_name.token;
        return t1.get$endToken();
      },
      get$firstTokenAfterCommentAndMetadata: function() {
        return this._ast$_name.token;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitTypeParameter$1(this);
      },
      $isTypeParameter: 1,
      static: {
        TypeParameterImpl$: function(comment, metadata, $name, extendsKeyword, bound) {
          var t1 = new U.TypeParameterImpl(extendsKeyword);
          t1.AnnotatedNodeImpl$2(comment, metadata);
          t1._ast$_name = t1._becomeParentOf$1$1($name, U.SimpleIdentifierImpl);
          t1._bound = t1._becomeParentOf$1$1(bound, U.TypeAnnotationImpl);
          return t1;
        }
      }
    },
    TypeParameterListImpl: {
      "^": "AstNodeImpl;leftBracket,0_typeParameters,rightBracket,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.leftBracket;
      },
      get$endToken: function() {
        return this.rightBracket;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitTypeParameterList$1(this);
      },
      $isTypeParameterList: 1
    },
    UriBasedDirectiveImpl: {
      "^": "DirectiveImpl;",
      get$source: function(_) {
        return this.uriSource;
      }
    },
    VariableDeclarationImpl: {
      "^": "DeclarationImpl;0_ast$_name<,equals,0_initializer<,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      get$endToken: function() {
        var t1 = this._initializer;
        if (t1 != null)
          return t1.get$endToken();
        return this._ast$_name.token;
      },
      get$firstTokenAfterCommentAndMetadata: function() {
        return this._ast$_name.token;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitVariableDeclaration$1(this);
      },
      $isVariableDeclaration: 1,
      static: {
        VariableDeclarationImpl$: function($name, equals, initializer) {
          var t1 = new U.VariableDeclarationImpl(equals);
          t1.AnnotatedNodeImpl$2(null, null);
          t1._ast$_name = t1._becomeParentOf$1$1($name, U.SimpleIdentifierImpl);
          t1._initializer = t1._becomeParentOf$1$1(initializer, U.ExpressionImpl);
          return t1;
        }
      }
    },
    VariableDeclarationListImpl: {
      "^": "AnnotatedNodeImpl;keyword<,0_type<,0_variables<,0_comment,0_metadata,0_ast$_parent,0_propertyMap",
      get$endToken: function() {
        return this._variables.get$endToken();
      },
      get$firstTokenAfterCommentAndMetadata: function() {
        var t1 = this.keyword;
        if (t1 != null)
          return t1;
        else {
          t1 = this._type;
          if (t1 != null)
            return t1.get$beginToken();
        }
        return this._variables.get$beginToken();
      },
      get$type: function(_) {
        return this._type;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitVariableDeclarationList$1(this);
      },
      $isVariableDeclarationList: 1,
      static: {
        VariableDeclarationListImpl$: function(comment, metadata, keyword, type, variables) {
          var t1, t2;
          t1 = new U.VariableDeclarationListImpl(keyword);
          t1.AnnotatedNodeImpl$2(comment, metadata);
          t1._type = t1._becomeParentOf$1$1(type, U.TypeAnnotationImpl);
          t2 = Y.VariableDeclaration;
          t2 = new U.NodeListImpl(t1, H.setRuntimeTypeInfo([], [t2]), [t2]);
          t2.addAll$1(0, variables);
          t1._variables = t2;
          return t1;
        }
      }
    },
    VariableDeclarationStatementImpl: {
      "^": "StatementImpl;0_variableList,semicolon<,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this._variableList.get$beginToken();
      },
      get$endToken: function() {
        return this.semicolon;
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitVariableDeclarationStatement$1(this);
      },
      $isVariableDeclarationStatement: 1
    },
    WhileStatementImpl: {
      "^": "StatementImpl;whileKeyword,leftParenthesis,0_condition,rightParenthesis,0_body,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.whileKeyword;
      },
      get$endToken: function() {
        return this._body.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitWhileStatement$1(this);
      },
      $isWhileStatement: 1,
      static: {
        WhileStatementImpl$: function(whileKeyword, leftParenthesis, condition, rightParenthesis, body) {
          var t1 = new U.WhileStatementImpl(whileKeyword, leftParenthesis, rightParenthesis);
          t1._condition = t1._becomeParentOf$1$1(condition, U.ExpressionImpl);
          t1._body = t1._becomeParentOf$1$1(body, U.StatementImpl);
          return t1;
        }
      }
    },
    WithClauseImpl: {
      "^": "AstNodeImpl;withKeyword,0_mixinTypes,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        return this.withKeyword;
      },
      get$endToken: function() {
        return this._mixinTypes.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitWithClause$1(this);
      },
      $isWithClause: 1
    },
    YieldStatementImpl: {
      "^": "StatementImpl;yieldKeyword,star,0_expression,semicolon<,0_ast$_parent,0_propertyMap",
      get$beginToken: function() {
        var t1 = this.yieldKeyword;
        if (t1 != null)
          return t1;
        return this._expression.get$beginToken();
      },
      get$endToken: function() {
        var t1 = this.semicolon;
        if (t1 != null)
          return t1;
        return this._expression.get$endToken();
      },
      accept$1$1: function(_, visitor, $E) {
        return H.assertSubtype(visitor, "$isAstVisitor", [$E], "$asAstVisitor").visitYieldStatement$1(this);
      },
      $isYieldStatement: 1
    },
    _NodeListImpl_Object_ListMixin: {
      "^": "Object+ListMixin;"
    }
  }], ["", "package:analyzer/src/dart/ast/ast_factory.dart",, A, {
    "^": "",
    AstFactoryImpl: {
      "^": "AstFactory;",
      classDeclaration$12: function(comment, metadata, abstractKeyword, classKeyword, $name, typeParameters, extendsClause, withClause, implementsClause, leftBracket, members, rightBracket) {
        var t1, t2, t3;
        H.assertSubtype(metadata, "$isList", [Y.Annotation], "$asList");
        t1 = Y.ClassMember;
        t2 = [t1];
        H.assertSubtype(members, "$isList", t2, "$asList");
        t3 = new U.ClassDeclarationImpl(abstractKeyword, classKeyword, leftBracket, rightBracket);
        t3.AnnotatedNodeImpl$2(comment, metadata);
        t3._ast$_name = t3._becomeParentOf$1$1($name, U.SimpleIdentifierImpl);
        t3._typeParameters = t3._becomeParentOf$1$1(typeParameters, U.TypeParameterListImpl);
        t3._extendsClause = t3._becomeParentOf$1$1(extendsClause, U.ExtendsClauseImpl);
        t3._withClause = t3._becomeParentOf$1$1(withClause, U.WithClauseImpl);
        t3._implementsClause = t3._becomeParentOf$1$1(implementsClause, U.ImplementsClauseImpl);
        t1 = new U.NodeListImpl(t3, H.setRuntimeTypeInfo([], t2), [t1]);
        t1.addAll$1(0, members);
        t3._members = t1;
        return t3;
      },
      classTypeAlias$11: function(comment, metadata, keyword, $name, typeParameters, equals, abstractKeyword, superclass, withClause, implementsClause, semicolon) {
        var t1 = new U.ClassTypeAliasImpl(equals, abstractKeyword, keyword, semicolon);
        t1.AnnotatedNodeImpl$2(comment, H.assertSubtype(metadata, "$isList", [Y.Annotation], "$asList"));
        t1._ast$_name = t1._becomeParentOf$1$1($name, U.SimpleIdentifierImpl);
        t1._typeParameters = t1._becomeParentOf$1$1(typeParameters, U.TypeParameterListImpl);
        t1._superclass = t1._becomeParentOf$1$1(superclass, U.TypeNameImpl);
        t1._withClause = t1._becomeParentOf$1$1(withClause, U.WithClauseImpl);
        t1._implementsClause = t1._becomeParentOf$1$1(implementsClause, U.ImplementsClauseImpl);
        return t1;
      },
      constructorDeclaration$13: function(comment, metadata, externalKeyword, constKeyword, factoryKeyword, returnType, period, $name, parameters, separator, initializers, redirectedConstructor, body) {
        var t1, t2, t3;
        H.assertSubtype(metadata, "$isList", [Y.Annotation], "$asList");
        t1 = Y.ConstructorInitializer;
        t2 = [t1];
        H.assertSubtype(initializers, "$isList", t2, "$asList");
        t3 = new U.ConstructorDeclarationImpl(externalKeyword, constKeyword, factoryKeyword, period, separator);
        t3.AnnotatedNodeImpl$2(comment, metadata);
        t3._returnType = t3._becomeParentOf$1$1(returnType, U.IdentifierImpl);
        t3._ast$_name = t3._becomeParentOf$1$1($name, U.SimpleIdentifierImpl);
        t3._parameters = t3._becomeParentOf$1$1(parameters, U.FormalParameterListImpl);
        t1 = new U.NodeListImpl(t3, H.setRuntimeTypeInfo([], t2), [t1]);
        t1.addAll$1(0, initializers);
        t3._initializers = t1;
        t3._redirectedConstructor = t3._becomeParentOf$1$1(redirectedConstructor, U.ConstructorNameImpl);
        t3._body = t3._becomeParentOf$1$1(body, U.FunctionBodyImpl);
        return t3;
      },
      documentationComment$2: function(tokens, references) {
        var t1, t2, t3;
        H.assertSubtype(tokens, "$isList", [L.Token], "$asList");
        t1 = Y.CommentReference;
        t2 = [t1];
        H.assertSubtype(references, "$isList", t2, "$asList");
        t3 = new U.CommentImpl(tokens, C.CommentType_DOCUMENTATION);
        t1 = new U.NodeListImpl(t3, H.setRuntimeTypeInfo([], t2), [t1]);
        t1.addAll$1(0, references);
        t3._references = t1;
        return t3;
      },
      fieldDeclaration2$6$comment$covariantKeyword$fieldList$metadata$semicolon$staticKeyword: function(comment, covariantKeyword, fieldList, metadata, semicolon, staticKeyword) {
        var t1 = new U.FieldDeclarationImpl(covariantKeyword, staticKeyword, semicolon);
        t1.AnnotatedNodeImpl$2(comment, H.assertSubtype(metadata, "$isList", [Y.Annotation], "$asList"));
        t1._fieldList = t1._becomeParentOf$1$1(fieldList, U.VariableDeclarationListImpl);
        return t1;
      },
      fieldDeclaration2$5$comment$covariantKeyword$fieldList$metadata$semicolon: function(comment, covariantKeyword, fieldList, metadata, semicolon) {
        return this.fieldDeclaration2$6$comment$covariantKeyword$fieldList$metadata$semicolon$staticKeyword(comment, covariantKeyword, fieldList, metadata, semicolon, null);
      },
      fieldFormalParameter2$10$comment$covariantKeyword$identifier$keyword$metadata$parameters$period$thisKeyword$type$typeParameters: function(comment, covariantKeyword, identifier, keyword, metadata, parameters, period, thisKeyword, type, typeParameters) {
        var t1 = new U.FieldFormalParameterImpl(keyword, thisKeyword, period, covariantKeyword);
        t1.NormalFormalParameterImpl$4(comment, H.assertSubtype(metadata, "$isList", [Y.Annotation], "$asList"), covariantKeyword, identifier);
        t1._type = t1._becomeParentOf$1$1(type, U.TypeAnnotationImpl);
        t1._typeParameters = t1._becomeParentOf$1$1(typeParameters, U.TypeParameterListImpl);
        t1._parameters = t1._becomeParentOf$1$1(parameters, U.FormalParameterListImpl);
        return t1;
      },
      fieldFormalParameter2$8$comment$covariantKeyword$identifier$keyword$metadata$period$thisKeyword$type: function(comment, covariantKeyword, identifier, keyword, metadata, period, thisKeyword, type) {
        return this.fieldFormalParameter2$10$comment$covariantKeyword$identifier$keyword$metadata$parameters$period$thisKeyword$type$typeParameters(comment, covariantKeyword, identifier, keyword, metadata, null, period, thisKeyword, type, null);
      },
      functionTypedFormalParameter2$8$comment$covariantKeyword$identifier$metadata$parameters$question$returnType$typeParameters: function(comment, covariantKeyword, identifier, metadata, parameters, question, returnType, typeParameters) {
        var t1 = new U.FunctionTypedFormalParameterImpl(question, covariantKeyword);
        t1.NormalFormalParameterImpl$4(comment, H.assertSubtype(metadata, "$isList", [Y.Annotation], "$asList"), covariantKeyword, identifier);
        t1._returnType = t1._becomeParentOf$1$1(returnType, U.TypeAnnotationImpl);
        t1._typeParameters = t1._becomeParentOf$1$1(typeParameters, U.TypeParameterListImpl);
        t1._parameters = t1._becomeParentOf$1$1(parameters, U.FormalParameterListImpl);
        return t1;
      },
      methodDeclaration$11: function(comment, metadata, externalKeyword, modifierKeyword, returnType, propertyKeyword, operatorKeyword, $name, typeParameters, parameters, body) {
        var t1 = new U.MethodDeclarationImpl(externalKeyword, modifierKeyword, propertyKeyword, operatorKeyword);
        t1.AnnotatedNodeImpl$2(comment, H.assertSubtype(metadata, "$isList", [Y.Annotation], "$asList"));
        t1._returnType = t1._becomeParentOf$1$1(returnType, U.TypeAnnotationImpl);
        t1._ast$_name = t1._becomeParentOf$1$1($name, U.SimpleIdentifierImpl);
        t1._typeParameters = t1._becomeParentOf$1$1(typeParameters, U.TypeParameterListImpl);
        t1._parameters = t1._becomeParentOf$1$1(parameters, U.FormalParameterListImpl);
        t1._body = t1._becomeParentOf$1$1(body, U.FunctionBodyImpl);
        return t1;
      },
      simpleFormalParameter2$6$comment$covariantKeyword$identifier$keyword$metadata$type: function(comment, covariantKeyword, identifier, keyword, metadata, type) {
        var t1 = new U.SimpleFormalParameterImpl(keyword, covariantKeyword);
        t1.NormalFormalParameterImpl$4(comment, H.assertSubtype(metadata, "$isList", [Y.Annotation], "$asList"), covariantKeyword, identifier);
        t1._type = t1._becomeParentOf$1$1(type, U.TypeAnnotationImpl);
        return t1;
      },
      simpleIdentifier$2$isDeclaration: function(token, isDeclaration) {
        if (isDeclaration)
          return new U.DeclaredSimpleIdentifier(token);
        return new U.SimpleIdentifierImpl(token);
      },
      simpleIdentifier$1: function(token) {
        return this.simpleIdentifier$2$isDeclaration(token, false);
      }
    }
  }], ["", "package:analyzer/src/dart/ast/utilities.dart",, A, {
    "^": "",
    ToSourceVisitor2: {
      "^": "Object;sink",
      safelyVisitFunctionWithPrefix$2: function(prefix, body) {
        var t1 = J.getInterceptor(body);
        if (!t1.$isEmptyFunctionBody)
          this.sink._contents += prefix;
        if (body != null)
          t1.accept$1$1(body, this, P.Object);
      },
      safelyVisitNodeListWithSeparator$2: function(nodes, separator) {
        var size, t1, t2, i;
        H.assertSubtype(nodes, "$isNodeList", [Y.AstNode], "$asNodeList");
        if (nodes != null) {
          size = nodes._elements.length;
          for (t1 = P.Object, t2 = this.sink, i = 0; i < size; ++i) {
            if (i > 0)
              t2._contents += separator;
            J.accept$1$1$x(nodes.$index(0, i), this, t1);
          }
        }
      },
      safelyVisitNodeListWithSeparatorAndPrefix$3: function(prefix, nodes, separator) {
        var size, t1, t2, i;
        H.assertSubtype(nodes, "$isNodeList", [Y.AstNode], "$asNodeList");
        if (nodes != null) {
          size = nodes._elements.length;
          if (size > 0) {
            t1 = this.sink;
            t1._contents += prefix;
            for (t2 = P.Object, i = 0; i < size; ++i) {
              if (i > 0)
                t1._contents += separator;
              J.accept$1$1$x(nodes.$index(0, i), this, t2);
            }
          }
        }
      },
      safelyVisitNodeListWithSeparatorAndSuffix$3: function(nodes, separator, suffix) {
        var size, t1, t2, i;
        H.assertSubtype(nodes, "$isNodeList", [Y.AstNode], "$asNodeList");
        if (nodes != null) {
          size = nodes._elements.length;
          if (size > 0) {
            for (t1 = P.Object, t2 = this.sink, i = 0; i < size; ++i) {
              if (i > 0)
                t2._contents += separator;
              J.accept$1$1$x(nodes.$index(0, i), this, t1);
            }
            t2._contents += suffix;
          }
        }
      },
      safelyVisitNodeWithPrefix$2: function(prefix, node) {
        if (node != null) {
          this.sink._contents += prefix;
          node.accept$1$1(0, this, P.Object);
        }
      },
      safelyVisitNodeWithSuffix$2: function(node, suffix) {
        if (node != null) {
          node.accept$1$1(0, this, P.Object);
          this.sink._contents += suffix;
        }
      },
      safelyVisitTokenWithSuffix$2: function(token, suffix) {
        var t1, t2;
        if (token != null) {
          t1 = this.sink;
          t2 = t1._contents += H.S(token.get$lexeme());
          t1._contents = t2 + suffix;
        }
      },
      visitAdjacentStrings$1: function(node) {
        this.safelyVisitNodeListWithSeparator$2(node._ast$_strings, " ");
        return;
      },
      visitAnnotation$1: function(node) {
        var t1;
        this.sink._contents += "@";
        t1 = node._ast$_name;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        this.safelyVisitNodeWithPrefix$2(".", node._constructorName);
        t1 = node._ast$_arguments;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitArgumentList$1: function(node) {
        var t1 = this.sink;
        t1._contents += "(";
        this.safelyVisitNodeListWithSeparator$2(node._ast$_arguments, ", ");
        t1._contents += ")";
        return;
      },
      visitAsExpression$1: function(node) {
        var t1 = node._expression;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        this.sink._contents += " as ";
        t1 = node._type;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitAssertInitializer$1: function(node) {
        var t1, t2;
        t1 = this.sink;
        t1._contents += "assert (";
        t2 = node._condition;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t2 = node._ast$_message;
        if (t2 != null) {
          t1._contents += ", ";
          t2.accept$1$1(0, this, P.Object);
        }
        t1._contents += ");";
        return;
      },
      visitAssertStatement$1: function(node) {
        var t1, t2;
        t1 = this.sink;
        t1._contents += "assert (";
        t2 = node._condition;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t2 = node._ast$_message;
        if (t2 != null) {
          t1._contents += ", ";
          t2.accept$1$1(0, this, P.Object);
        }
        t1._contents += ");";
        return;
      },
      visitAssignmentExpression$1: function(node) {
        var t1, t2;
        t1 = node._leftHandSide;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        t1 = this.sink;
        t1._contents += " ";
        t2 = t1._contents += H.S(node.operator.get$lexeme());
        t1._contents = t2 + " ";
        t2 = node._rightHandSide;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        return;
      },
      visitAwaitExpression$1: function(node) {
        var t1;
        this.sink._contents += "await ";
        t1 = node._expression;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitBinaryExpression$1: function(node) {
        var t1, t2;
        this._writeOperand$2(node, node._leftOperand);
        t1 = this.sink;
        t1._contents += " ";
        t2 = t1._contents += H.S(node.operator.get$lexeme());
        t1._contents = t2 + " ";
        this._writeOperand$2(node, node._rightOperand);
        return;
      },
      visitBlock$1: function(node) {
        var t1 = this.sink;
        t1._contents += "{";
        this.safelyVisitNodeListWithSeparator$2(node._statements, " ");
        t1._contents += "}";
        return;
      },
      visitBlockFunctionBody$1: function(node) {
        var keyword, t1, t2;
        keyword = node.keyword;
        if (keyword != null) {
          t1 = this.sink;
          t2 = t1._contents += H.S(keyword.get$lexeme());
          if (node.star != null) {
            t2 += "*";
            t1._contents = t2;
          }
          t1._contents = t2 + " ";
        }
        t1 = node._ast$_block;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitBooleanLiteral$1: function(node) {
        this.sink._contents += H.S(node.literal.get$lexeme());
        return;
      },
      visitBreakStatement$1: function(node) {
        var t1 = this.sink;
        t1._contents += "break";
        this.safelyVisitNodeWithPrefix$2(" ", node._label);
        t1._contents += ";";
        return;
      },
      visitCascadeExpression$1: function(node) {
        var t1 = node._ast$_target;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        this.safelyVisitNodeListWithSeparator$2(H.assertSubtype(node._cascadeSections, "$isNodeList", [Y.AstNode], "$asNodeList"), "");
        return;
      },
      visitCatchClause$1: function(node) {
        var t1, t2;
        this.safelyVisitNodeWithPrefix$2("on ", node._exceptionType);
        if (node.catchKeyword != null) {
          if (node._exceptionType != null)
            this.sink._contents += " ";
          t1 = this.sink;
          t1._contents += "catch (";
          t2 = node._exceptionParameter;
          if (t2 != null)
            t2.accept$1$1(0, this, P.Object);
          this.safelyVisitNodeWithPrefix$2(", ", node._stackTraceParameter);
          t1._contents += ") ";
        } else
          this.sink._contents += " ";
        t1 = node._body;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitClassDeclaration$1: function(node) {
        var t1, t2;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        this.safelyVisitTokenWithSuffix$2(node.abstractKeyword, " ");
        t1 = this.sink;
        t1._contents += "class ";
        t2 = node._ast$_name;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t2 = node._typeParameters;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        this.safelyVisitNodeWithPrefix$2(" ", node._extendsClause);
        this.safelyVisitNodeWithPrefix$2(" ", node._withClause);
        this.safelyVisitNodeWithPrefix$2(" ", node._implementsClause);
        t1._contents += " {";
        this.safelyVisitNodeListWithSeparator$2(node._members, " ");
        t1._contents += "}";
        return;
      },
      visitClassTypeAlias$1: function(node) {
        var t1, t2;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        if (node.abstractKeyword != null)
          this.sink._contents += "abstract ";
        t1 = this.sink;
        t1._contents += "class ";
        t2 = node._ast$_name;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t2 = node._typeParameters;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t1._contents += " = ";
        t2 = node._superclass;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        this.safelyVisitNodeWithPrefix$2(" ", node._withClause);
        this.safelyVisitNodeWithPrefix$2(" ", node._implementsClause);
        t1._contents += ";";
        return;
      },
      visitComment$1: function(node) {
        return;
      },
      visitCommentReference$1: function(node) {
        return;
      },
      visitCompilationUnit$1: function(node) {
        var scriptTag, directives, t1, prefix;
        scriptTag = node._scriptTag;
        directives = node._directives;
        t1 = scriptTag == null;
        if (!t1)
          scriptTag.accept$1$1(0, this, P.Object);
        this.safelyVisitNodeListWithSeparatorAndPrefix$3(t1 ? "" : " ", directives, " ");
        prefix = t1 && directives.get$length(directives) === 0 ? "" : " ";
        this.safelyVisitNodeListWithSeparatorAndPrefix$3(prefix, node._declarations, " ");
        return;
      },
      visitConditionalExpression$1: function(node) {
        var t1, t2;
        t1 = node._condition;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        t1 = this.sink;
        t1._contents += " ? ";
        t2 = node._thenExpression;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t1._contents += " : ";
        t1 = node._elseExpression;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitConfiguration$1: function(node) {
        var t1, t2;
        t1 = this.sink;
        t1._contents += "if (";
        t2 = node._ast$_name;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        this.safelyVisitNodeWithPrefix$2(" == ", node._ast$_value);
        t1._contents += ") ";
        t1 = node._uri;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitConstructorDeclaration$1: function(node) {
        var t1;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        this.safelyVisitTokenWithSuffix$2(node.externalKeyword, " ");
        this.safelyVisitTokenWithSuffix$2(node.constKeyword, " ");
        this.safelyVisitTokenWithSuffix$2(node.factoryKeyword, " ");
        t1 = node._returnType;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        this.safelyVisitNodeWithPrefix$2(".", node._ast$_name);
        t1 = node._parameters;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        this.safelyVisitNodeListWithSeparatorAndPrefix$3(" : ", node._initializers, ", ");
        this.safelyVisitNodeWithPrefix$2(" = ", node._redirectedConstructor);
        this.safelyVisitFunctionWithPrefix$2(" ", node._body);
        return;
      },
      visitConstructorFieldInitializer$1: function(node) {
        var t1;
        this.safelyVisitTokenWithSuffix$2(node.thisKeyword, ".");
        t1 = node._fieldName;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        this.sink._contents += " = ";
        t1 = node._expression;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitConstructorName$1: function(node) {
        var t1 = node._type;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        this.safelyVisitNodeWithPrefix$2(".", node._ast$_name);
        return;
      },
      visitContinueStatement$1: function(node) {
        var t1 = this.sink;
        t1._contents += "continue";
        this.safelyVisitNodeWithPrefix$2(" ", node._label);
        t1._contents += ";";
        return;
      },
      visitDeclaredIdentifier$1: function(node) {
        var t1;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        this.safelyVisitTokenWithSuffix$2(node.keyword, " ");
        this.safelyVisitNodeWithSuffix$2(node._type, " ");
        t1 = node._identifier;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitDefaultFormalParameter$1: function(node) {
        var t1 = node._parameter;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        t1 = node.separator;
        if (t1 != null) {
          if (t1.get$lexeme() !== ":")
            this.sink._contents += " ";
          this.sink._contents += H.S(t1.get$lexeme());
          this.safelyVisitNodeWithPrefix$2(" ", node._defaultValue);
        }
        return;
      },
      visitDoStatement$1: function(node) {
        var t1, t2;
        t1 = this.sink;
        t1._contents += "do ";
        t2 = node._body;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t1._contents += " while (";
        t2 = node._condition;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t1._contents += ");";
        return;
      },
      visitDottedName$1: function(node) {
        this.safelyVisitNodeListWithSeparator$2(node._components, ".");
        return;
      },
      visitDoubleLiteral$1: function(node) {
        this.sink._contents += H.S(node.literal.get$lexeme());
        return;
      },
      visitEmptyFunctionBody$1: function(node) {
        this.sink._contents += ";";
        return;
      },
      visitEmptyStatement$1: function(node) {
        this.sink._contents += ";";
        return;
      },
      visitEnumConstantDeclaration$1: function(node) {
        var t1;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        t1 = node._ast$_name;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitEnumDeclaration$1: function(node) {
        var t1, t2;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        t1 = this.sink;
        t1._contents += "enum ";
        t2 = node._ast$_name;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t1._contents += " {";
        this.safelyVisitNodeListWithSeparator$2(node._constants, ", ");
        t1._contents += "}";
        return;
      },
      visitExportDirective$1: function(node) {
        var t1, t2;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        t1 = this.sink;
        t1._contents += "export ";
        t2 = node._uri;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        this.safelyVisitNodeListWithSeparatorAndPrefix$3(" ", node._combinators, " ");
        t1._contents += ";";
        return;
      },
      visitExpressionFunctionBody$1: function(node) {
        var keyword, t1, t2;
        keyword = node.keyword;
        if (keyword != null) {
          t1 = this.sink;
          t2 = t1._contents += H.S(keyword.get$lexeme());
          t1._contents = t2 + " ";
        }
        t1 = this.sink;
        t1._contents += "=> ";
        t2 = node._expression;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        if (node.semicolon != null)
          t1._contents += ";";
        return;
      },
      visitExpressionStatement$1: function(node) {
        var t1 = node._expression;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        this.sink._contents += ";";
        return;
      },
      visitExtendsClause$1: function(node) {
        var t1;
        this.sink._contents += "extends ";
        t1 = node._superclass;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitFieldDeclaration$1: function(node) {
        var t1;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        this.safelyVisitTokenWithSuffix$2(node.staticKeyword, " ");
        t1 = node._fieldList;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        this.sink._contents += ";";
        return;
      },
      visitFieldFormalParameter$1: function(node) {
        var t1;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        this.safelyVisitTokenWithSuffix$2(node.covariantKeyword, " ");
        this.safelyVisitTokenWithSuffix$2(node.keyword, " ");
        this.safelyVisitNodeWithSuffix$2(node._type, " ");
        this.sink._contents += "this.";
        t1 = node._identifier;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        t1 = node._typeParameters;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        t1 = node._parameters;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitForEachStatement$1: function(node) {
        var loopVariable, t1, t2;
        loopVariable = node._loopVariable;
        if (node.awaitKeyword != null)
          this.sink._contents += "await ";
        t1 = this.sink;
        t1._contents += "for (";
        if (loopVariable == null) {
          t2 = node._identifier;
          if (t2 != null)
            t2.accept$1$1(0, this, P.Object);
        } else
          loopVariable.accept$1$1(0, this, P.Object);
        t1._contents += " in ";
        t2 = node._ast$_iterable;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t1._contents += ") ";
        t1 = node._body;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitFormalParameterList$1: function(node) {
        var t1, parameters, size, t2, groupEnd, i, parameter, t3, t4;
        t1 = this.sink;
        t1._contents += "(";
        parameters = node._parameters;
        size = parameters._elements.length;
        for (t2 = P.Object, groupEnd = null, i = 0; i < size; ++i) {
          parameter = parameters.$index(0, i);
          if (i > 0)
            t1._contents += ", ";
          if (groupEnd == null && !!J.getInterceptor(parameter).$isDefaultFormalParameter) {
            t3 = parameter.kind;
            t4 = t1._contents;
            if (t3 === C.ParameterKind_NAMED_2_true) {
              t1._contents = t4 + "{";
              groupEnd = "}";
            } else {
              t1._contents = t4 + "[";
              groupEnd = "]";
            }
          }
          parameter.accept$1$1(0, this, t2);
        }
        if (groupEnd != null)
          t1._contents += groupEnd;
        t1._contents += ")";
        return;
      },
      visitForStatement$1: function(node) {
        var initialization, t1, t2;
        initialization = node._initialization;
        t1 = this.sink;
        t1._contents += "for (";
        if (initialization != null)
          initialization.accept$1$1(0, this, P.Object);
        else {
          t2 = node._variableList;
          if (t2 != null)
            t2.accept$1$1(0, this, P.Object);
        }
        t1._contents += ";";
        this.safelyVisitNodeWithPrefix$2(" ", node._condition);
        t1._contents += ";";
        this.safelyVisitNodeListWithSeparatorAndPrefix$3(" ", node._updaters, ", ");
        t1._contents += ") ";
        t1 = node._body;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitFunctionDeclaration$1: function(node) {
        var t1;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        this.safelyVisitTokenWithSuffix$2(node.externalKeyword, " ");
        this.safelyVisitNodeWithSuffix$2(node._returnType, " ");
        this.safelyVisitTokenWithSuffix$2(node.propertyKeyword, " ");
        t1 = node._ast$_name;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        t1 = node._functionExpression;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitFunctionDeclarationStatement$1: function(node) {
        var t1 = node._functionDeclaration;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitFunctionExpression$1: function(node) {
        var t1 = node._typeParameters;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        t1 = node._parameters;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        t1 = node._body;
        if (!J.getInterceptor(t1).$isEmptyFunctionBody)
          this.sink._contents += " ";
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitFunctionExpressionInvocation$1: function(node) {
        var t1 = node._function;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        t1 = node._typeArguments;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        t1 = node._argumentList;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitFunctionTypeAlias$1: function(node) {
        var t1, t2;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        t1 = this.sink;
        t1._contents += "typedef ";
        this.safelyVisitNodeWithSuffix$2(node._returnType, " ");
        t2 = node._ast$_name;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t2 = node._typeParameters;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t2 = node._parameters;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t1._contents += ";";
        return;
      },
      visitFunctionTypedFormalParameter$1: function(node) {
        var t1;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        this.safelyVisitTokenWithSuffix$2(node.covariantKeyword, " ");
        this.safelyVisitNodeWithSuffix$2(node._returnType, " ");
        t1 = node._identifier;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        t1 = node._typeParameters;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        t1 = node._parameters;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        if (node.question != null)
          this.sink._contents += "?";
        return;
      },
      visitGenericFunctionType$1: function(node) {
        var t1 = node._returnType;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        this.sink._contents += " Function";
        t1 = node._typeParameters;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        t1 = node._parameters;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitGenericTypeAlias$1: function(node) {
        var t1, t2;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        t1 = this.sink;
        t1._contents += "typedef ";
        t2 = node._ast$_name;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t2 = node._typeParameters;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t1._contents += " = ";
        t1 = node._functionType;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitHideCombinator$1: function(node) {
        this.sink._contents += "hide ";
        this.safelyVisitNodeListWithSeparator$2(node._hiddenNames, ", ");
        return;
      },
      visitIfStatement$1: function(node) {
        var t1, t2;
        t1 = this.sink;
        t1._contents += "if (";
        t2 = node._condition;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t1._contents += ") ";
        t1 = node._thenStatement;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        this.safelyVisitNodeWithPrefix$2(" else ", node._elseStatement);
        return;
      },
      visitImplementsClause$1: function(node) {
        this.sink._contents += "implements ";
        this.safelyVisitNodeListWithSeparator$2(node._interfaces, ", ");
        return;
      },
      visitImportDirective$1: function(node) {
        var t1, t2;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        t1 = this.sink;
        t1._contents += "import ";
        t2 = node._uri;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        if (node.deferredKeyword != null)
          t1._contents += " deferred";
        this.safelyVisitNodeWithPrefix$2(" as ", node._prefix);
        this.safelyVisitNodeListWithSeparatorAndPrefix$3(" ", node._combinators, " ");
        t1._contents += ";";
        return;
      },
      visitIndexExpression$1: function(node) {
        var t1, t2;
        if (node.period != null)
          this.sink._contents += "..";
        else {
          t1 = node._ast$_target;
          if (t1 != null)
            t1.accept$1$1(0, this, P.Object);
        }
        t1 = this.sink;
        t1._contents += "[";
        t2 = node._ast$_index;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t1._contents += "]";
        return;
      },
      visitInstanceCreationExpression$1: function(node) {
        var t1;
        this.safelyVisitTokenWithSuffix$2(node.keyword, " ");
        t1 = node._constructorName;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        t1 = node._argumentList;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitIntegerLiteral$1: function(node) {
        this.sink._contents += H.S(node.literal.get$lexeme());
        return;
      },
      visitInterpolationExpression$1: function(node) {
        var t1, t2, t3;
        t1 = node.rightBracket;
        t2 = this.sink;
        t3 = t2._contents;
        if (t1 != null) {
          t2._contents = t3 + "${";
          t1 = node._expression;
          if (t1 != null)
            t1.accept$1$1(0, this, P.Object);
          t2._contents += "}";
        } else {
          t2._contents = t3 + "$";
          t1 = node._expression;
          if (t1 != null)
            t1.accept$1$1(0, this, P.Object);
        }
        return;
      },
      visitInterpolationString$1: function(node) {
        this.sink._contents += H.S(node.contents.get$lexeme());
        return;
      },
      visitIsExpression$1: function(node) {
        var t1, t2;
        t1 = node._expression;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        t1 = this.sink;
        t2 = t1._contents;
        if (node.notOperator == null)
          t1._contents = t2 + " is ";
        else
          t1._contents = t2 + " is! ";
        t1 = node._type;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitLabel$1: function(node) {
        var t1 = node._label;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        this.sink._contents += ":";
        return;
      },
      visitLabeledStatement$1: function(node) {
        var t1;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._labels, " ", " ");
        t1 = node._statement;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitLibraryDirective$1: function(node) {
        var t1, t2;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        t1 = this.sink;
        t1._contents += "library ";
        t2 = node._ast$_name;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t1._contents += ";";
        return;
      },
      visitLibraryIdentifier$1: function(node) {
        this.sink._contents += node.get$name(node);
        return;
      },
      visitListLiteral$1: function(node) {
        var t1, t2;
        t1 = node.constKeyword;
        if (t1 != null) {
          t2 = this.sink;
          t1 = t2._contents += H.S(t1.get$lexeme());
          t2._contents = t1 + " ";
        }
        this.safelyVisitNodeWithSuffix$2(node._typeArguments, " ");
        t1 = this.sink;
        t1._contents += "[";
        this.safelyVisitNodeListWithSeparator$2(node._elements, ", ");
        t1._contents += "]";
        return;
      },
      visitMapLiteral$1: function(node) {
        var t1, t2;
        t1 = node.constKeyword;
        if (t1 != null) {
          t2 = this.sink;
          t1 = t2._contents += H.S(t1.get$lexeme());
          t2._contents = t1 + " ";
        }
        this.safelyVisitNodeWithSuffix$2(node._typeArguments, " ");
        t1 = this.sink;
        t1._contents += "{";
        this.safelyVisitNodeListWithSeparator$2(node._entries, ", ");
        t1._contents += "}";
        return;
      },
      visitMapLiteralEntry$1: function(node) {
        var t1 = node._key;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        this.sink._contents += " : ";
        t1 = node._ast$_value;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitMethodDeclaration$1: function(node) {
        var t1, t2;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        this.safelyVisitTokenWithSuffix$2(node.externalKeyword, " ");
        this.safelyVisitTokenWithSuffix$2(node.modifierKeyword, " ");
        this.safelyVisitNodeWithSuffix$2(node._returnType, " ");
        t1 = node.propertyKeyword;
        this.safelyVisitTokenWithSuffix$2(t1, " ");
        this.safelyVisitTokenWithSuffix$2(node.operatorKeyword, " ");
        t2 = node._ast$_name;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        if ((t1 == null ? null : t1.get$keyword()) !== C.Keyword_cXJ) {
          t1 = node._typeParameters;
          if (t1 != null)
            t1.accept$1$1(0, this, P.Object);
          t1 = node._parameters;
          if (t1 != null)
            t1.accept$1$1(0, this, P.Object);
        }
        this.safelyVisitFunctionWithPrefix$2(" ", node._body);
        return;
      },
      visitMethodInvocation$1: function(node) {
        var t1 = node.operator;
        if (t1 != null && t1.type === C.TokenType_cv8)
          this.sink._contents += "..";
        else {
          t1 = node._ast$_target;
          if (t1 != null) {
            t1.accept$1$1(0, this, P.Object);
            this.sink._contents += H.S(node.operator.get$lexeme());
          }
        }
        t1 = node._methodName;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        t1 = node._typeArguments;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        t1 = node._argumentList;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitNamedExpression$1: function(node) {
        var t1 = node._ast$_name;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        this.safelyVisitNodeWithPrefix$2(" ", node._expression);
        return;
      },
      visitNativeClause$1: function(node) {
        var t1;
        this.sink._contents += "native ";
        t1 = node._ast$_name;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitNativeFunctionBody$1: function(node) {
        var t1, t2;
        t1 = this.sink;
        t1._contents += "native ";
        t2 = node._stringLiteral;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t1._contents += ";";
        return;
      },
      visitNullLiteral$1: function(node) {
        this.sink._contents += "null";
        return;
      },
      visitParenthesizedExpression$1: function(node) {
        var t1, t2;
        t1 = this.sink;
        t1._contents += "(";
        t2 = node._expression;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t1._contents += ")";
        return;
      },
      visitPartDirective$1: function(node) {
        var t1, t2;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        t1 = this.sink;
        t1._contents += "part ";
        t2 = node._uri;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t1._contents += ";";
        return;
      },
      visitPartOfDirective$1: function(node) {
        var t1, t2;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        t1 = this.sink;
        t1._contents += "part of ";
        t2 = node._libraryName;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t1._contents += ";";
        return;
      },
      visitPostfixExpression$1: function(node) {
        this._writeOperand$2(node, node._operand);
        this.sink._contents += H.S(node.operator.get$lexeme());
        return;
      },
      visitPrefixedIdentifier$1: function(node) {
        var t1 = node._prefix;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        this.sink._contents += ".";
        t1 = node._identifier;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitPrefixExpression$1: function(node) {
        this.sink._contents += H.S(node.operator.get$lexeme());
        this._writeOperand$2(node, node._operand);
        return;
      },
      visitPropertyAccess$1: function(node) {
        var t1;
        if (node.get$isCascaded())
          this.sink._contents += "..";
        else {
          t1 = node._ast$_target;
          if (t1 != null)
            t1.accept$1$1(0, this, P.Object);
          this.sink._contents += H.S(node.operator.get$lexeme());
        }
        t1 = node._propertyName;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitRedirectingConstructorInvocation$1: function(node) {
        var t1;
        this.sink._contents += "this";
        this.safelyVisitNodeWithPrefix$2(".", node._constructorName);
        t1 = node._argumentList;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitRethrowExpression$1: function(node) {
        this.sink._contents += "rethrow";
        return;
      },
      visitReturnStatement$1: function(node) {
        var expression, t1, t2;
        expression = node._expression;
        t1 = this.sink;
        t2 = t1._contents;
        if (expression == null)
          t1._contents = t2 + "return;";
        else {
          t1._contents = t2 + "return ";
          expression.accept$1$1(0, this, P.Object);
          t1._contents += ";";
        }
        return;
      },
      visitScriptTag$1: function(node) {
        this.sink._contents += H.S(node.scriptTag.get$lexeme());
        return;
      },
      visitShowCombinator$1: function(node) {
        this.sink._contents += "show ";
        this.safelyVisitNodeListWithSeparator$2(node._shownNames, ", ");
        return;
      },
      visitSimpleFormalParameter$1: function(node) {
        var t1;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        this.safelyVisitTokenWithSuffix$2(node.covariantKeyword, " ");
        this.safelyVisitTokenWithSuffix$2(node.keyword, " ");
        t1 = node._type;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        if (node._type != null && node._identifier != null)
          this.sink._contents += " ";
        t1 = node._identifier;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitSimpleIdentifier$1: function(node) {
        this.sink._contents += H.S(node.token.get$lexeme());
        return;
      },
      visitSimpleStringLiteral$1: function(node) {
        this.sink._contents += H.S(node.literal.get$lexeme());
        return;
      },
      visitStringInterpolation$1: function(node) {
        this.safelyVisitNodeListWithSeparator$2(H.assertSubtype(node._elements, "$isNodeList", [Y.AstNode], "$asNodeList"), "");
        return;
      },
      visitSuperConstructorInvocation$1: function(node) {
        var t1;
        this.sink._contents += "super";
        this.safelyVisitNodeWithPrefix$2(".", node._constructorName);
        t1 = node._argumentList;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitSuperExpression$1: function(node) {
        this.sink._contents += "super";
        return;
      },
      visitSwitchCase$1: function(node) {
        var t1, t2;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._labels, " ", " ");
        t1 = this.sink;
        t1._contents += "case ";
        t2 = node._expression;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t1._contents += ": ";
        this.safelyVisitNodeListWithSeparator$2(node._statements, " ");
        return;
      },
      visitSwitchDefault$1: function(node) {
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._labels, " ", " ");
        this.sink._contents += "default: ";
        this.safelyVisitNodeListWithSeparator$2(node._statements, " ");
        return;
      },
      visitSwitchStatement$1: function(node) {
        var t1, t2;
        t1 = this.sink;
        t1._contents += "switch (";
        t2 = node._expression;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t1._contents += ") {";
        this.safelyVisitNodeListWithSeparator$2(node._members, " ");
        t1._contents += "}";
        return;
      },
      visitSymbolLiteral$1: function(node) {
        var t1, t2, components, i;
        t1 = this.sink;
        t2 = t1._contents += "#";
        components = node.components;
        for (i = 0; i < components.length; ++i) {
          if (i > 0)
            t1._contents = t2 + ".";
          t2 = t1._contents += H.S(components[i].get$lexeme());
        }
        return;
      },
      visitThisExpression$1: function(node) {
        this.sink._contents += "this";
        return;
      },
      visitThrowExpression$1: function(node) {
        var t1;
        this.sink._contents += "throw ";
        t1 = node._expression;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitTopLevelVariableDeclaration$1: function(node) {
        this.safelyVisitNodeWithSuffix$2(node._variableList, ";");
        return;
      },
      visitTryStatement$1: function(node) {
        var t1;
        this.sink._contents += "try ";
        t1 = node._body;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        this.safelyVisitNodeListWithSeparatorAndPrefix$3(" ", node._catchClauses, " ");
        this.safelyVisitNodeWithPrefix$2(" finally ", node._finallyBlock);
        return;
      },
      visitTypeArgumentList$1: function(node) {
        var t1 = this.sink;
        t1._contents += "<";
        this.safelyVisitNodeListWithSeparator$2(node._ast$_arguments, ", ");
        t1._contents += ">";
        return;
      },
      visitTypeName$1: function(node) {
        var t1 = node._ast$_name;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        t1 = node._typeArguments;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        if (node.question != null)
          this.sink._contents += "?";
        return;
      },
      visitTypeParameter$1: function(node) {
        var t1;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        t1 = node._ast$_name;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        this.safelyVisitNodeWithPrefix$2(" extends ", node._bound);
        return;
      },
      visitTypeParameterList$1: function(node) {
        var t1 = this.sink;
        t1._contents += "<";
        this.safelyVisitNodeListWithSeparator$2(node._typeParameters, ", ");
        t1._contents += ">";
        return;
      },
      visitVariableDeclaration$1: function(node) {
        var t1;
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        t1 = node._ast$_name;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        this.safelyVisitNodeWithPrefix$2(" = ", node._initializer);
        return;
      },
      visitVariableDeclarationList$1: function(node) {
        this.safelyVisitNodeListWithSeparatorAndSuffix$3(node._metadata, " ", " ");
        this.safelyVisitTokenWithSuffix$2(node.keyword, " ");
        this.safelyVisitNodeWithSuffix$2(node._type, " ");
        this.safelyVisitNodeListWithSeparator$2(node._variables, ", ");
        return;
      },
      visitVariableDeclarationStatement$1: function(node) {
        var t1 = node._variableList;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        this.sink._contents += ";";
        return;
      },
      visitWhileStatement$1: function(node) {
        var t1, t2;
        t1 = this.sink;
        t1._contents += "while (";
        t2 = node._condition;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t1._contents += ") ";
        t1 = node._body;
        if (t1 != null)
          t1.accept$1$1(0, this, P.Object);
        return;
      },
      visitWithClause$1: function(node) {
        this.sink._contents += "with ";
        this.safelyVisitNodeListWithSeparator$2(node._mixinTypes, ", ");
        return;
      },
      visitYieldStatement$1: function(node) {
        var t1, t2;
        t1 = this.sink;
        t2 = t1._contents;
        if (node.star != null)
          t1._contents = t2 + "yield* ";
        else
          t1._contents = t2 + "yield ";
        t2 = node._expression;
        if (t2 != null)
          t2.accept$1$1(0, this, P.Object);
        t1._contents += ";";
        return;
      },
      _writeOperand$2: function(node, operand) {
        var needsParenthesis;
        if (operand != null) {
          needsParenthesis = operand.get$precedence() < node.get$precedence();
          if (needsParenthesis)
            this.sink._contents += "(";
          operand.accept$1$1(0, this, P.Object);
          if (needsParenthesis)
            this.sink._contents += ")";
        }
      },
      $isAstVisitor: 1,
      $asAstVisitor: function() {
        return [P.Object];
      }
    }
  }], ["analyzer.src.dart.error.syntactic_errors", "package:analyzer/src/dart/error/syntactic_errors.dart",, O, {
    "^": "",
    ParserErrorCode: {
      "^": "ErrorCode;name,message,correction,isUnresolvedIdentifier",
      get$type: function(_) {
        return C.ErrorType_3X9;
      }
    }
  }], ["analyzer.src.dart.scanner.scanner", "package:analyzer/src/dart/scanner/scanner.dart",, Z, {
    "^": "",
    Scanner: {
      "^": "Scanner0;source>,_scanner$_errorListener,_reader,_preserveComments,0_tokens,0_tail,0_firstComment,0_lastComment,_tokenStart,_lineStarts,_groupingStack,_stackEnd,_hasUnmatchedGroups,scanGenericMethodComments,scanLazyAssignmentOperators",
      static: {
        Scanner_Scanner$fasta: function(source, errorListener, contents, offset) {
          var t1 = H.setRuntimeTypeInfo([], [P.int]);
          C.JSArray_methods.add$1(t1, 0);
          return new Z._Scanner2(source, contents, offset, errorListener, true, t1, false, false);
        }
      }
    },
    _Scanner2: {
      "^": "Object;source>,_scanner$_contents,_readerOffset,_scanner$_errorListener,_scanner$_preserveComments,lineStarts,0firstToken,scanGenericMethodComments,scanLazyAssignmentOperators",
      get$tail: function() {
        throw H.wrapException("unsupported operation");
      },
      reportError$3: [function(errorCode, offset, $arguments) {
        this._scanner$_errorListener.onError$1(0, V.AnalysisError$(this.source, offset, 1, errorCode, H.assertSubtype($arguments, "$isList", [P.Object], "$asList")));
      }, "call$3", "get$reportError", 12, 0, 65],
      setSourceStart$2: function(line, column) {
        var offset, t1, i;
        offset = this._readerOffset;
        if (line < 1 || column < 1 || offset < 0 || line + column - 2 >= offset)
          return;
        t1 = this.lineStarts;
        C.JSArray_methods.removeAt$1(t1, 0);
        for (i = 2; i < line; ++i)
          C.JSArray_methods.add$1(t1, 1);
        C.JSArray_methods.add$1(t1, offset - column + 1);
      },
      tokenize$0: function() {
        var result, t1, token, delta;
        result = G.scanString(this._scanner$_contents, true, null, false, false);
        t1 = result.lineStarts;
        if (t1.get$length(t1) === 0)
          H.throwExpression(H.IterableElementError_noElement());
        t1.$index(0, t1.get$length(t1) - 1);
        t1.set$length(0, t1.get$length(t1) - 1);
        t1.$index(0, 0);
        t1._closeGap$2(t1, 0, 1);
        C.JSArray_methods.addAll$1(this.lineStarts, t1);
        token = result.tokens;
        for (t1 = this.get$reportError(); token.type === C.TokenType_uv8;) {
          H.interceptedTypeCheck(token, "$isErrorToken");
          A.translateErrorToken(token, t1);
          token = token.next;
        }
        this.firstToken = token;
        t1 = this._readerOffset;
        if (t1 !== -1) {
          delta = t1 + 1;
          do {
            token.offset = token.offset + delta;
            token = token.next;
          } while (token.type !== C.TokenType_Emx);
        }
        return this.firstToken;
      }
    }
  }], ["", "package:analyzer/src/error/codes.dart",, A, {
    "^": "",
    CompileTimeErrorCode: {
      "^": "ErrorCode;name,message,correction,isUnresolvedIdentifier",
      get$type: function(_) {
        return C.ErrorType_cLp;
      }
    }
  }], ["", "package:analyzer/src/generated/engine.dart",, O, {
    "^": "",
    AnalysisEngine: {
      "^": "Object;_logger,enginePlugin,_instrumentationService,partitionManager,0_taskManager"
    },
    NullLogger: {
      "^": "Object;"
    }
  }], ["analyzer.src.generated.java_core", "package:analyzer/src/generated/java_core.dart",, G, {
    "^": "",
    formatList: function(pattern, $arguments) {
      H.assertSubtype($arguments, "$isList", [P.Object], "$asList");
      if ($arguments == null || $arguments.length === 0)
        return pattern;
      return H.stringReplaceAllFuncUnchecked(pattern, P.RegExp_RegExp("\\{(\\d+)\\}", true, false), H.functionTypeCheck(new G.formatList_closure($arguments), {func: 1, ret: P.String, args: [P.Match]}), null);
    },
    Character_digit: function(codePoint, radix) {
      if (radix !== 16)
        throw H.wrapException(P.ArgumentError$("only radix == 16 is supported"));
      if (48 <= codePoint && codePoint <= 57)
        return codePoint - 48;
      if (65 <= codePoint && codePoint <= 70)
        return 10 + (codePoint - 65);
      if (97 <= codePoint && codePoint <= 102)
        return 10 + (codePoint - 97);
      return -1;
    },
    Character_toChars: function(codePoint) {
      var offset;
      if (codePoint < 0 || codePoint > 1114111)
        throw H.wrapException(P.ArgumentError$(null));
      if (codePoint < 65536)
        return H.Primitives_stringFromCharCode(codePoint);
      offset = codePoint - 65536;
      return P.String_String$fromCharCodes(H.setRuntimeTypeInfo([((offset & 2147483647) >>> 10) + 55296, (offset & 1023) + 56320], [P.int]), 0, null);
    },
    formatList_closure: {
      "^": "Closure:15;$arguments",
      call$1: function(match) {
        var index, t1, arg;
        index = P.int_parse(match.group$1(1), null, null);
        t1 = this.$arguments;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        arg = t1[index];
        return arg == null ? null : J.toString$0$(arg);
      }
    }
  }], ["analyzer.src.generated.java_engine", "package:analyzer/src/generated/java_engine.dart",, O, {
    "^": "",
    StringUtilities_endsWith3: function(str, c1, c2, c3) {
      var $length = str.length;
      return $length >= 3 && J.getInterceptor$s(str).codeUnitAt$1(str, $length - 3) === c1 && C.JSString_methods.codeUnitAt$1(str, $length - 2) === c2 && C.JSString_methods.codeUnitAt$1(str, $length - 1) === c3;
    },
    StringUtilities_endsWithChar: function(str, c) {
      var $length = str.length;
      return $length > 0 && J.codeUnitAt$1$s(str, $length - 1) === c;
    },
    StringUtilities_indexOf2: function(str, start, c1, c2) {
      var last, t1, index;
      last = str.length - 1;
      for (t1 = J.getInterceptor$s(str), index = start; index < last;) {
        if (t1.codeUnitAt$1(str, index) === c1 && C.JSString_methods.codeUnitAt$1(str, index + 1) === c2)
          return index;
        ++index;
      }
      return -1;
    },
    StringUtilities_indexOfFirstNotLetterDigit: function(string, startIndex) {
      var last, t1, index, c, t2;
      last = string.length;
      for (t1 = J.getInterceptor$s(string), index = startIndex; index < last;) {
        c = t1.codeUnitAt$1(string, index);
        if (!(c >= 65 && c <= 90))
          t2 = c >= 97 && c <= 122;
        else
          t2 = true;
        if (!t2)
          t2 = c >= 48 && c <= 57;
        else
          t2 = true;
        if (!t2)
          return index;
        ++index;
      }
      return last;
    },
    StringUtilities_startsWith3: function(str, start, c1, c2, c3) {
      return str.length - start >= 3 && J.getInterceptor$s(str)._codeUnitAt$1(str, start) === c1 && C.JSString_methods._codeUnitAt$1(str, start + 1) === c2 && C.JSString_methods._codeUnitAt$1(str, start + 2) === c3;
    }
  }], ["analyzer.parser", "package:analyzer/src/generated/parser.dart",, X, {
    "^": "",
    CommentAndMetadata: {
      "^": "Object;comment<,metadata<"
    },
    FinalConstVarOrType: {
      "^": "Object;keyword<,type>"
    },
    Modifiers: {
      "^": "Object;0abstractKeyword,0constKeyword<,0covariantKeyword<,0externalKeyword<,0factoryKeyword<,0finalKeyword<,0staticKeyword<,0varKeyword<",
      toString$0: function(_) {
        var buffer, t1;
        buffer = new P.StringBuffer("");
        this._appendKeyword$3(buffer, this._appendKeyword$3(buffer, this._appendKeyword$3(buffer, this._appendKeyword$3(buffer, this._appendKeyword$3(buffer, this._appendKeyword$3(buffer, this._appendKeyword$3(buffer, false, this.abstractKeyword), this.constKeyword), this.externalKeyword), this.factoryKeyword), this.finalKeyword), this.staticKeyword), this.varKeyword);
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      _appendKeyword$3: function(buffer, needsSpace, keyword) {
        if (keyword != null) {
          if (needsSpace)
            buffer._contents += H.Primitives_stringFromCharCode(32);
          buffer._contents += H.S(keyword.get$lexeme());
          return true;
        }
        return needsSpace;
      }
    },
    Parser: {
      "^": "Object;_parser$_source,_errorListener,_errorListenerLock,_enableNnbd,_enableOptionalNewAndConst,_parseFunctionBodies,0_currentToken,_treeDepth,_inAsync,_inGenerator,_inLoop,_inSwitch,_inInitializer,parseGenericMethods,parseGenericMethodComments,0allowNativeClause",
      set$enableOptionalNewAndConst: function(enable) {
        this._enableOptionalNewAndConst = true;
      },
      get$hasReturnTypeInTypeAlias: function() {
        var next = this.skipTypeAnnotation$1(this._currentToken);
        if (next == null)
          return false;
        return next.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(next);
      },
      computeStringValue$3: function(lexeme, isFirst, isLast) {
        var helper, start, end, t1, buffer, index;
        helper = U.StringLexemeHelper$(lexeme, isFirst, isLast);
        start = helper.start;
        end = helper.end;
        if (typeof end !== "number")
          return end.$ge();
        if (end < start) {
          t1 = $.$get$AnalysisEngine_instance()._logger;
          H.S(lexeme);
          "" + isFirst;
          "" + isLast;
          t1.toString;
          return "";
        }
        if (helper.isRaw)
          return J.substring$2$s(lexeme, start, end);
        buffer = new P.StringBuffer("");
        for (index = start; index < end;)
          index = this._translateCharacter$3(buffer, lexeme, index);
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      createSyntheticIdentifier$1$isDeclaration: function(isDeclaration) {
        var t1, t2, syntheticToken;
        t1 = this._currentToken;
        if (t1.type.kind === 107) {
          t1 = t1.get$lexeme();
          t2 = new L.SyntheticStringToken(null, C.TokenType_GbN, this._currentToken.offset, null);
          t2._setCommentParent$1(null);
          $.$get$StringUtilities_INTERNER().toString;
          t2._value = t1;
          syntheticToken = this._injectToken$1(t2);
        } else {
          t1 = new L.StringToken(C.TokenType_GbN, t1.offset, null);
          t1._setCommentParent$1(null);
          $.$get$StringUtilities_INTERNER().toString;
          t1._value = "";
          syntheticToken = this._injectToken$1(t1);
        }
        return $.$get$astFactory().simpleIdentifier$2$isDeclaration(syntheticToken, isDeclaration);
      },
      createSyntheticIdentifier$0: function() {
        return this.createSyntheticIdentifier$1$isDeclaration(false);
      },
      getAndAdvance$0: function() {
        var token = this._currentToken;
        this._currentToken = token.next;
        return token;
      },
      isFunctionDeclaration$0: function() {
        var keyword, afterReturnType, afterIdentifier, afterName, type;
        keyword = this._currentToken.get$keyword();
        afterReturnType = this.skipTypeWithoutFunction$1(this._currentToken);
        if (afterReturnType != null && afterReturnType.get$keyword() === C.Keyword_Lwp)
          afterReturnType = this.skipGenericFunctionTypeAfterReturnType$1(afterReturnType);
        if (afterReturnType == null)
          afterReturnType = this._currentToken;
        afterIdentifier = this.skipSimpleIdentifier$1(afterReturnType);
        if (afterIdentifier == null)
          afterIdentifier = this.skipSimpleIdentifier$1(this._currentToken);
        if (afterIdentifier == null)
          return false;
        if (this.isFunctionExpression$1(afterIdentifier))
          return true;
        if (keyword === C.Keyword_cXJ) {
          afterName = this.skipSimpleIdentifier$1(this._currentToken.next);
          if (afterName == null)
            return false;
          type = afterName.type;
          return type === C.TokenType_ECn || type === C.TokenType_cOk;
        } else if (afterReturnType.get$keyword() === C.Keyword_cXJ) {
          afterName = this.skipSimpleIdentifier$1(afterReturnType.next);
          if (afterName == null)
            return false;
          type = afterName.type;
          return type === C.TokenType_ECn || type === C.TokenType_cOk;
        }
        return false;
      },
      isFunctionExpression$1: function(token) {
        var afterTypeParameters, afterParameters, lexeme, t1;
        if (this._inInitializer)
          return false;
        afterTypeParameters = this._skipTypeParameterList$1(token);
        afterParameters = this._skipFormalParameterList$1(afterTypeParameters == null ? token : afterTypeParameters);
        if (afterParameters == null)
          return false;
        if (afterParameters.matchesAny$1(C.List_4aQ))
          return true;
        lexeme = afterParameters.get$lexeme();
        t1 = $.$get$Parser_ASYNC();
        if (lexeme == null ? t1 != null : lexeme !== t1) {
          t1 = $.$get$Parser_SYNC();
          t1 = lexeme == null ? t1 == null : lexeme === t1;
        } else
          t1 = true;
        return t1;
      },
      isInitializedVariableDeclaration$0: function() {
        var keyword, t1, allowAdditionalTokens, token, type;
        keyword = this._currentToken.get$keyword();
        if (keyword === C.Keyword_IU6 || keyword === C.Keyword_Owc || keyword === C.Keyword_FmR)
          return true;
        if (keyword === C.Keyword_M8y)
          return !this._currentToken.next.matchesAny$1(C.List_vMb);
        t1 = this._currentToken;
        allowAdditionalTokens = t1.type === C.TokenType_GbN || false;
        token = this.skipTypeName$1(t1);
        if (token == null)
          return false;
        for (; this._atGenericFunctionTypeAfterReturnType$1(token);) {
          token = this.skipGenericFunctionTypeAfterReturnType$1(token);
          if (token == null)
            return false;
        }
        if (token.type !== C.TokenType_GbN)
          allowAdditionalTokens = false;
        token = this.skipSimpleIdentifier$1(token);
        if (token == null)
          return false;
        type = token.type;
        if (type === C.TokenType_tca || type === C.TokenType_O55 || type === C.TokenType_FmR || token.get$keyword() === C.Keyword_a54)
          return true;
        if (allowAdditionalTokens)
          if (type === C.TokenType_2ty || type.kind === 107 || type === C.TokenType_GbN || type === C.TokenType_cOk)
            return true;
        return false;
      },
      isSwitchMember$0: function() {
        var token, keyword;
        token = this._currentToken;
        while (true) {
          if (!(token.type === C.TokenType_GbN && token.next.type === C.TokenType_gg4))
            break;
          token = token.next.next;
        }
        keyword = token.get$keyword();
        return keyword === C.Keyword_Am8 || keyword === C.Keyword_ea7;
      },
      parseAdditiveExpression$0: function() {
        var t1, t2, expression, t3, t4, t5, expression0;
        if (this._currentToken.get$keyword() === C.Keyword_WnT && this._currentToken.next.type.precedence === 13) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          expression = new U.SuperExpressionImpl(t2);
        } else
          expression = this.parseMultiplicativeExpression$0();
        for (t1 = U.ExpressionImpl, t2 = U.AstNodeImpl; t3 = this._currentToken, t3.type.precedence === 13; expression = expression0) {
          t4 = $.$get$astFactory();
          this._currentToken = t3.next;
          t5 = this.parseMultiplicativeExpression$0();
          t4.toString;
          expression0 = new U.BinaryExpressionImpl(t3);
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (expression != null)
            expression._ast$_parent = expression0;
          expression0._leftOperand = expression;
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (t5 != null)
            t5._ast$_parent = expression0;
          expression0._rightOperand = t5;
        }
        return expression;
      },
      parseArgument$0: function() {
        var t1, t2, t3;
        t1 = this._currentToken;
        if ((t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1)) && this._currentToken.next.type === C.TokenType_gg4) {
          t1 = $.$get$astFactory();
          t2 = this.parseLabel$0();
          t3 = this.parseExpression2$0();
          t1.toString;
          return U.NamedExpressionImpl$(t2, t3);
        } else
          return this.parseExpression2$0();
      },
      parseArgumentList$0: function() {
        var leftParenthesis, isLikelyMissingComma, wasInInitializer, previousStartOfArgument, argument, $arguments, foundNamedArgument, generatedError, rightParenthesis, t1, t2, t3, t4, token;
        leftParenthesis = this.getAndAdvance$0();
        t1 = this._currentToken;
        if (t1.type === C.TokenType_coy) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          t2 = new U.ArgumentListImpl(H.interceptedTypeCheck(leftParenthesis, "$isToken"), t2);
          t1 = Y.Expression;
          t1 = new U.NodeListImpl(t2, H.setRuntimeTypeInfo([], [t1]), [t1]);
          t1.addAll$1(0, null);
          t2._ast$_arguments = t1;
          return t2;
        }
        isLikelyMissingComma = new X.Parser_parseArgumentList_isLikelyMissingComma(this, leftParenthesis);
        wasInInitializer = this._inInitializer;
        this._inInitializer = false;
        try {
          previousStartOfArgument = t1;
          argument = this.parseArgument$0();
          t1 = Y.Expression;
          t2 = [t1];
          $arguments = H.setRuntimeTypeInfo([argument], t2);
          foundNamedArgument = !!J.getInterceptor(argument).$isNamedExpression;
          generatedError = false;
          t3 = this._parser$_source;
          while (true) {
            if (!this._optional$1(C.TokenType_O55))
              t4 = isLikelyMissingComma.call$0() && !J.$eq$(previousStartOfArgument, this._currentToken);
            else
              t4 = true;
            if (!t4)
              break;
            t4 = this._currentToken;
            if (t4.type === C.TokenType_coy)
              break;
            previousStartOfArgument = t4;
            argument = this.parseArgument$0();
            J.add$1$ax($arguments, argument);
            if (!!J.getInterceptor(argument).$isNamedExpression)
              foundNamedArgument = true;
            else if (foundNamedArgument)
              if (!generatedError)
                if (!argument.get$isSynthetic()) {
                  token = this._currentToken;
                  if (token.type === C.TokenType_Emx)
                    token = token.previous;
                  this._reportError$1(V.AnalysisError$(t3, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_AHF, null));
                  generatedError = true;
                }
          }
          rightParenthesis = this._expect$1(C.TokenType_coy);
          $.$get$astFactory().toString;
          t3 = H.interceptedTypeCheck(leftParenthesis, "$isToken");
          t4 = H.assertSubtype($arguments, "$isList", t2, "$asList");
          t3 = new U.ArgumentListImpl(t3, H.interceptedTypeCheck(rightParenthesis, "$isToken"));
          t1 = new U.NodeListImpl(t3, H.setRuntimeTypeInfo([], t2), [t1]);
          t1.addAll$1(0, t4);
          t3._ast$_arguments = t1;
          return t3;
        } finally {
          this._inInitializer = wasInInitializer;
        }
      },
      parseAssignableExpression$1: function(primaryAllowed) {
        var expression, t1, isOptional, t2, t3, t4, t5, t6, typeArguments, argumentList, t7, expression0, t8, t9, t10, selectorExpression;
        expression = this.parsePrimaryExpression$0();
        t1 = !primaryAllowed;
        isOptional = !t1 || this._isValidAssignableExpression$1(expression);
        for (t2 = U.ExpressionImpl, t3 = U.AstNodeImpl, t4 = U.ArgumentListImpl, t5 = U.TypeArgumentListImpl, t6 = U.SimpleIdentifierImpl; true; expression = selectorExpression, isOptional = true) {
          for (; this._isLikelyArgumentList$0();) {
            typeArguments = this._parseOptionalTypeArguments$0();
            argumentList = this.parseArgumentList$0();
            t7 = J.getInterceptor(expression);
            if (!!t7.$isSimpleIdentifier) {
              $.$get$astFactory().toString;
              expression0 = new U.MethodInvocationImpl(null);
              H.assertIsSubtype(t5, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (typeArguments != null)
                typeArguments._ast$_parent = expression0;
              expression0._typeArguments = typeArguments;
              H.assertIsSubtype(t4, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (argumentList != null)
                argumentList._ast$_parent = expression0;
              expression0._argumentList = argumentList;
              H.assertIsSubtype(t2, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              expression0._ast$_target = null;
              H.assertIsSubtype(t6, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              expression._ast$_parent = expression0;
              expression0._methodName = expression;
              expression = expression0;
            } else if (!!t7.$isPrefixedIdentifier) {
              t7 = $.$get$astFactory();
              t8 = expression._prefix;
              t9 = expression.period;
              t10 = expression._identifier;
              t7.toString;
              expression = new U.MethodInvocationImpl(t9);
              H.assertIsSubtype(t5, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (typeArguments != null)
                typeArguments._ast$_parent = expression;
              expression._typeArguments = typeArguments;
              H.assertIsSubtype(t4, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (argumentList != null)
                argumentList._ast$_parent = expression;
              expression._argumentList = argumentList;
              H.assertIsSubtype(t2, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (t8 != null)
                t8._ast$_parent = expression;
              expression._ast$_target = t8;
              H.assertIsSubtype(t6, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (t10 != null)
                t10._ast$_parent = expression;
              expression._methodName = t10;
            } else if (!!t7.$isPropertyAccess) {
              t7 = $.$get$astFactory();
              t8 = expression._ast$_target;
              t9 = expression.operator;
              t10 = expression._propertyName;
              t7.toString;
              expression = new U.MethodInvocationImpl(t9);
              H.assertIsSubtype(t5, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (typeArguments != null)
                typeArguments._ast$_parent = expression;
              expression._typeArguments = typeArguments;
              H.assertIsSubtype(t4, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (argumentList != null)
                argumentList._ast$_parent = expression;
              expression._argumentList = argumentList;
              H.assertIsSubtype(t2, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (t8 != null)
                t8._ast$_parent = expression;
              expression._ast$_target = t8;
              H.assertIsSubtype(t6, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (t10 != null)
                t10._ast$_parent = expression;
              expression._methodName = t10;
            } else {
              $.$get$astFactory().toString;
              expression0 = new U.FunctionExpressionInvocationImpl();
              H.assertIsSubtype(t5, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (typeArguments != null)
                typeArguments._ast$_parent = expression0;
              expression0._typeArguments = typeArguments;
              H.assertIsSubtype(t4, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (argumentList != null)
                argumentList._ast$_parent = expression0;
              expression0._argumentList = argumentList;
              H.assertIsSubtype(t2, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (expression != null)
                expression._ast$_parent = expression0;
              expression0._function = expression;
              expression = expression0;
            }
            if (t1)
              isOptional = false;
          }
          selectorExpression = this.parseAssignableSelector$2(expression, isOptional || !!J.getInterceptor(expression).$isPrefixedIdentifier);
          if (selectorExpression == null ? expression == null : selectorExpression === expression)
            return expression;
        }
      },
      parseAssignableSelector$3$allowConditional: function(prefix, optional, allowConditional) {
        var leftBracket, wasInInitializer, index, rightBracket, t1, type, isQuestionPeriod, t2, operator;
        t1 = this._currentToken;
        type = t1.type;
        if (type === C.TokenType_AGi) {
          leftBracket = this.getAndAdvance$0();
          wasInInitializer = this._inInitializer;
          this._inInitializer = false;
          try {
            index = this.parseExpression2$0();
            rightBracket = this._expect$1(C.TokenType_zra);
            $.$get$astFactory().toString;
            t1 = U.IndexExpressionImpl$forTarget(prefix, H.interceptedTypeCheck(leftBracket, "$isToken"), H.interceptedTypeCheck(index, "$isExpression"), H.interceptedTypeCheck(rightBracket, "$isToken"));
            return t1;
          } finally {
            this._inInitializer = wasInInitializer;
          }
        } else {
          isQuestionPeriod = type === C.TokenType_ifb;
          if (type === C.TokenType_wCI || isQuestionPeriod) {
            if (isQuestionPeriod && !allowConditional) {
              t2 = [P.Object];
              t2 = H.assertSubtype(H.setRuntimeTypeInfo([t1.get$lexeme()], t2), "$isList", t2, "$asList");
              this._reportErrorForToken$3(C.ParserErrorCode_Art, this._currentToken, t2);
            }
            operator = this.getAndAdvance$0();
            t1 = $.$get$astFactory();
            t2 = this.parseSimpleIdentifier$0();
            t1.toString;
            return U.PropertyAccessImpl$(prefix, operator, t2);
          } else if (type === C.TokenType_Qq8) {
            this._splitIndex$0();
            leftBracket = this.getAndAdvance$0();
            index = this.parseSimpleIdentifier$0();
            rightBracket = this.getAndAdvance$0();
            $.$get$astFactory().toString;
            return U.IndexExpressionImpl$forTarget(prefix, leftBracket, index, rightBracket);
          } else {
            if (!optional)
              this._reportErrorForToken$3(C.ParserErrorCode_My6, t1, null);
            return prefix;
          }
        }
      },
      parseAssignableSelector$2: function(prefix, optional) {
        return this.parseAssignableSelector$3$allowConditional(prefix, optional, true);
      },
      parseBitwiseAndExpression$0: function() {
        var t1, t2, expression, t3, t4, t5, expression0;
        if (this._currentToken.get$keyword() === C.Keyword_WnT && this._currentToken.next.type === C.TokenType_OxW) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          expression = new U.SuperExpressionImpl(t2);
        } else
          expression = this.parseShiftExpression$0();
        for (t1 = U.ExpressionImpl, t2 = U.AstNodeImpl; t3 = this._currentToken, t3.type === C.TokenType_OxW; expression = expression0) {
          t4 = $.$get$astFactory();
          this._currentToken = t3.next;
          t5 = this.parseShiftExpression$0();
          t4.toString;
          expression0 = new U.BinaryExpressionImpl(t3);
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (expression != null)
            expression._ast$_parent = expression0;
          expression0._leftOperand = expression;
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (t5 != null)
            t5._ast$_parent = expression0;
          expression0._rightOperand = t5;
        }
        return expression;
      },
      parseBitwiseOrExpression$0: function() {
        var t1, t2, expression, t3, t4, t5, expression0;
        if (this._currentToken.get$keyword() === C.Keyword_WnT && this._currentToken.next.type === C.TokenType_ssu) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          expression = new U.SuperExpressionImpl(t2);
        } else
          expression = this.parseBitwiseXorExpression$0();
        for (t1 = U.ExpressionImpl, t2 = U.AstNodeImpl; t3 = this._currentToken, t3.type === C.TokenType_ssu; expression = expression0) {
          t4 = $.$get$astFactory();
          this._currentToken = t3.next;
          t5 = this.parseBitwiseXorExpression$0();
          t4.toString;
          expression0 = new U.BinaryExpressionImpl(t3);
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (expression != null)
            expression._ast$_parent = expression0;
          expression0._leftOperand = expression;
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (t5 != null)
            t5._ast$_parent = expression0;
          expression0._rightOperand = t5;
        }
        return expression;
      },
      parseBitwiseXorExpression$0: function() {
        var t1, t2, expression, t3, t4, t5, expression0;
        if (this._currentToken.get$keyword() === C.Keyword_WnT && this._currentToken.next.type === C.TokenType_SGC) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          expression = new U.SuperExpressionImpl(t2);
        } else
          expression = this.parseBitwiseAndExpression$0();
        for (t1 = U.ExpressionImpl, t2 = U.AstNodeImpl; t3 = this._currentToken, t3.type === C.TokenType_SGC; expression = expression0) {
          t4 = $.$get$astFactory();
          this._currentToken = t3.next;
          t5 = this.parseBitwiseAndExpression$0();
          t4.toString;
          expression0 = new U.BinaryExpressionImpl(t3);
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (expression != null)
            expression._ast$_parent = expression0;
          expression0._leftOperand = expression;
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (t5 != null)
            t5._ast$_parent = expression0;
          expression0._rightOperand = t5;
        }
        return expression;
      },
      parseBlock$0: function() {
        var isEndOfBlock, leftBracket, t1, t2, statements, statementStart, t3, t4, statement, token, t5, rightBracket;
        isEndOfBlock = new X.Parser_parseBlock_isEndOfBlock(this);
        leftBracket = this.getAndAdvance$0();
        t1 = Y.Statement;
        t2 = [t1];
        statements = H.setRuntimeTypeInfo([], t2);
        statementStart = this._currentToken;
        for (t3 = this._parser$_source, t4 = [P.Object]; !isEndOfBlock.call$0();) {
          statement = this.parseStatement2$0();
          token = this._currentToken;
          if (token == null ? statementStart == null : token === statementStart) {
            t5 = H.assertSubtype(H.setRuntimeTypeInfo([token.get$lexeme()], t4), "$isList", t4, "$asList");
            if (token.type === C.TokenType_Emx)
              token = token.previous;
            this._reportError$1(V.AnalysisError$(t3, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_yjH, t5));
            this._currentToken = this._currentToken.next;
          } else if (statement != null)
            C.JSArray_methods.add$1(statements, statement);
          statementStart = this._currentToken;
        }
        rightBracket = this._expect$1(C.TokenType_2ty);
        $.$get$astFactory().toString;
        H.assertSubtype(statements, "$isList", t2, "$asList");
        t3 = new U.BlockImpl(leftBracket, rightBracket);
        t1 = new U.NodeListImpl(t3, H.setRuntimeTypeInfo([], t2), [t1]);
        t1.addAll$1(0, statements);
        t3._statements = t1;
        return t3;
      },
      parseCascadeSection$0: function() {
        var period, expression, leftBracket, wasInInitializer, index, rightBracket, t1, functionName, t2, t3, expression0, typeArguments, t4, t5, t6, progress, selector, currentExpression, t7, t8, t9, t10, operator;
        period = this.getAndAdvance$0();
        expression = null;
        t1 = this._currentToken;
        if (t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1))
          functionName = this._parseSimpleIdentifierUnchecked$0();
        else {
          t1 = this._currentToken;
          if (t1.type === C.TokenType_AGi) {
            leftBracket = this.getAndAdvance$0();
            wasInInitializer = this._inInitializer;
            this._inInitializer = false;
            try {
              index = this.parseExpression2$0();
              rightBracket = this._expect$1(C.TokenType_zra);
              t1 = $.$get$astFactory();
              t2 = period;
              t1.toString;
              H.interceptedTypeCheck(t2, "$isToken");
              t1 = H.interceptedTypeCheck(leftBracket, "$isToken");
              t3 = H.interceptedTypeCheck(index, "$isExpression");
              expression0 = new U.IndexExpressionImpl(t2, t1, H.interceptedTypeCheck(rightBracket, "$isToken"));
              expression0._ast$_index = expression0._becomeParentOf$1$1(t3, U.ExpressionImpl);
              expression = expression0;
              period = null;
            } finally {
              this._inInitializer = wasInInitializer;
            }
            functionName = null;
          } else {
            this._reportErrorForToken$3(C.ParserErrorCode_U06, t1, H.setRuntimeTypeInfo([t1.get$lexeme()], [P.Object]));
            functionName = this.createSyntheticIdentifier$0();
          }
        }
        if (this._isLikelyArgumentList$0()) {
          t1 = U.ExpressionImpl;
          do {
            typeArguments = this._parseOptionalTypeArguments$0();
            if (functionName != null) {
              t2 = $.$get$astFactory();
              t3 = expression;
              t4 = period;
              t5 = this.parseArgumentList$0();
              t2.toString;
              expression = U.MethodInvocationImpl$(H.interceptedTypeCheck(t3, "$isExpression"), H.interceptedTypeCheck(t4, "$isToken"), functionName, typeArguments, t5);
              period = null;
              functionName = null;
            } else if (expression == null) {
              t2 = $.$get$astFactory();
              t3 = expression;
              t4 = period;
              t5 = this.createSyntheticIdentifier$0();
              t6 = this.parseArgumentList$0();
              t2.toString;
              expression = U.MethodInvocationImpl$(H.interceptedTypeCheck(t3, "$isExpression"), H.interceptedTypeCheck(t4, "$isToken"), t5, typeArguments, t6);
            } else {
              t2 = $.$get$astFactory();
              t3 = expression;
              t4 = this.parseArgumentList$0();
              t2.toString;
              H.interceptedTypeCheck(t3, "$isExpression");
              expression0 = new U.FunctionExpressionInvocationImpl();
              expression0.InvocationExpressionImpl$2(typeArguments, t4);
              expression0._function = expression0._becomeParentOf$1$1(t3, t1);
              expression = expression0;
            }
          } while (this._isLikelyArgumentList$0());
        } else if (functionName != null) {
          t1 = $.$get$astFactory();
          t2 = expression;
          t3 = period;
          t1.toString;
          expression = U.PropertyAccessImpl$(H.interceptedTypeCheck(t2, "$isExpression"), H.interceptedTypeCheck(t3, "$isToken"), functionName);
          period = null;
        }
        for (t1 = U.ExpressionImpl, t2 = U.AstNodeImpl, t3 = U.ArgumentListImpl, t4 = U.TypeArgumentListImpl, t5 = U.SimpleIdentifierImpl, progress = true; progress;) {
          selector = this.parseAssignableSelector$2(expression, true);
          t6 = expression;
          if (selector == null ? t6 != null : selector !== t6) {
            expression = selector;
            for (; this._isLikelyArgumentList$0();) {
              typeArguments = this._parseOptionalTypeArguments$0();
              currentExpression = expression;
              if (!!J.getInterceptor(currentExpression).$isPropertyAccess) {
                t6 = $.$get$astFactory();
                t7 = currentExpression._ast$_target;
                t8 = currentExpression.operator;
                t9 = currentExpression._propertyName;
                t10 = this.parseArgumentList$0();
                t6.toString;
                expression0 = new U.MethodInvocationImpl(t8);
                H.assertIsSubtype(t4, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
                if (typeArguments != null)
                  typeArguments._ast$_parent = expression0;
                expression0._typeArguments = typeArguments;
                H.assertIsSubtype(t3, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
                if (t10 != null)
                  t10._ast$_parent = expression0;
                expression0._argumentList = t10;
                H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
                if (t7 != null)
                  t7._ast$_parent = expression0;
                expression0._ast$_target = t7;
                H.assertIsSubtype(t5, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
                if (t9 != null)
                  t9._ast$_parent = expression0;
                expression0._methodName = t9;
                expression = expression0;
              } else {
                t6 = $.$get$astFactory();
                t7 = expression;
                t8 = this.parseArgumentList$0();
                t6.toString;
                H.interceptedTypeCheck(t7, "$isExpression");
                expression0 = new U.FunctionExpressionInvocationImpl();
                H.assertIsSubtype(t4, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
                if (typeArguments != null)
                  typeArguments._ast$_parent = expression0;
                expression0._typeArguments = typeArguments;
                H.assertIsSubtype(t3, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
                if (t8 != null)
                  t8._ast$_parent = expression0;
                expression0._argumentList = t8;
                H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
                if (t7 != null)
                  t7._ast$_parent = expression0;
                expression0._function = t7;
                expression = expression0;
              }
            }
            progress = true;
          } else
            progress = false;
        }
        if (this._currentToken.type.precedence === 1) {
          operator = this.getAndAdvance$0();
          this._ensureAssignable$1(expression);
          t1 = $.$get$astFactory();
          t2 = expression;
          t3 = this.parseExpressionWithoutCascade$0();
          t1.toString;
          expression = U.AssignmentExpressionImpl$(H.interceptedTypeCheck(t2, "$isExpression"), operator, t3);
        }
        return expression;
      },
      parseClassDeclaration$2: function(commentAndMetadata, abstractKeyword) {
        var keyword, $name, t1, className, type, typeParameters, equals, superclass, withClause, t2, implementsClause, t3, semicolon, t4, leftBracket, extendsClause, foundClause, keyword0, token, realType, typeFromComment, token0, name0, nativeClause, members, rightBracket, classDeclaration;
        keyword = this.getAndAdvance$0();
        $name = this.parseSimpleIdentifier$1$isDeclaration(true);
        t1 = $name.token;
        className = t1.get$lexeme();
        type = this._currentToken.type;
        if (type === C.TokenType_Drw) {
          typeParameters = this.parseTypeParameterList$0();
          type = this._currentToken.type;
        } else
          typeParameters = null;
        if (type === C.TokenType_tca) {
          equals = this._expect$1(C.TokenType_tca);
          superclass = this.parseTypeName$1(false);
          if (this._currentToken.get$keyword() === C.Keyword_EK0)
            withClause = this.parseWithClause$0();
          else {
            t2 = [P.Object];
            t2 = H.assertSubtype(H.setRuntimeTypeInfo(["with"], t2), "$isList", t2, "$asList");
            this._reportErrorForToken$3(C.ParserErrorCode_HuN, this._currentToken, t2);
            withClause = null;
          }
          implementsClause = this._currentToken.get$keyword() === C.Keyword_uPL ? this.parseImplementsClause$0() : null;
          t2 = this._currentToken;
          t3 = t2.type;
          if (t3 === C.TokenType_FmR)
            semicolon = this.getAndAdvance$0();
          else {
            t4 = [P.Object];
            if (t3 === C.TokenType_cOk) {
              t2 = H.assertSubtype(H.setRuntimeTypeInfo([";"], t4), "$isList", t4, "$asList");
              this._reportErrorForToken$3(C.ParserErrorCode_HuN, this._currentToken, t2);
              leftBracket = this.getAndAdvance$0();
              this._parseClassMembers$2(t1.get$lexeme(), this._getEndToken$1(leftBracket));
              this._expect$1(C.TokenType_2ty);
            } else
              this._reportErrorForToken$3(C.ParserErrorCode_HuN, t2.previous, H.setRuntimeTypeInfo([";"], t4));
            t1 = new L.StringToken(C.TokenType_FmR, this._currentToken.offset, null);
            t1._setCommentParent$1(null);
            $.$get$StringUtilities_INTERNER().toString;
            t1._value = "";
            semicolon = this._injectToken$1(t1);
          }
          return $.$get$astFactory().classTypeAlias$11(commentAndMetadata.comment, commentAndMetadata.metadata, keyword, $name, typeParameters, equals, abstractKeyword, superclass, withClause, implementsClause, semicolon);
        }
        for (t1 = this._parser$_source, t2 = U.TypeNameImpl, t3 = U.AstNodeImpl, extendsClause = null, withClause = null, implementsClause = null, foundClause = true; foundClause;) {
          keyword0 = this._currentToken.get$keyword();
          if (keyword0 === C.Keyword_scn)
            if (extendsClause == null) {
              token = this._currentToken;
              this._currentToken = token.next;
              realType = this._parseTypeName$1(false);
              typeFromComment = this._parseOptionalTypeNameComment$0();
              superclass = typeFromComment == null ? realType : typeFromComment;
              token0 = superclass.question;
              if (token0 != null) {
                if (token0.type === C.TokenType_Emx)
                  token0 = token0.previous;
                this._reportError$1(V.AnalysisError$(t1, token0.offset, Math.max(token0.get$length(token0), 1), C.ParserErrorCode_CNb, null));
              }
              $.$get$astFactory().toString;
              extendsClause = new U.ExtendsClauseImpl(token);
              H.assertIsSubtype(t2, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              superclass._ast$_parent = extendsClause;
              extendsClause._superclass = superclass;
              if (withClause != null) {
                token = withClause.withKeyword;
                if (token.type === C.TokenType_Emx)
                  token = token.previous;
                this._reportError$1(V.AnalysisError$(t1, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_wEo, null));
              } else if (implementsClause != null) {
                token = implementsClause.implementsKeyword;
                if (token.type === C.TokenType_Emx)
                  token = token.previous;
                this._reportError$1(V.AnalysisError$(t1, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_iPa, null));
              }
            } else {
              token = extendsClause.extendsKeyword;
              if (token.type === C.TokenType_Emx)
                token = token.previous;
              this._reportError$1(V.AnalysisError$(t1, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_jRY, null));
              token = this._currentToken;
              this._currentToken = token.next;
              realType = this._parseTypeName$1(false);
              typeFromComment = this._parseOptionalTypeNameComment$0();
              superclass = typeFromComment == null ? realType : typeFromComment;
              token0 = superclass.question;
              if (token0 != null) {
                if (token0.type === C.TokenType_Emx)
                  token0 = token0.previous;
                this._reportError$1(V.AnalysisError$(t1, token0.offset, Math.max(token0.get$length(token0), 1), C.ParserErrorCode_CNb, null));
              }
              $.$get$astFactory().toString;
              t4 = new U.ExtendsClauseImpl(token);
              H.assertIsSubtype(t2, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              superclass._ast$_parent = t4;
              t4._superclass = superclass;
            }
          else if (keyword0 === C.Keyword_EK0)
            if (withClause == null) {
              withClause = this.parseWithClause$0();
              if (implementsClause != null) {
                token = implementsClause.implementsKeyword;
                if (token.type === C.TokenType_Emx)
                  token = token.previous;
                this._reportError$1(V.AnalysisError$(t1, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_cJC, null));
              }
            } else {
              token = withClause.withKeyword;
              if (token.type === C.TokenType_Emx)
                token = token.previous;
              this._reportError$1(V.AnalysisError$(t1, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_j00, null));
              this.parseWithClause$0();
            }
          else if (keyword0 === C.Keyword_uPL)
            if (implementsClause == null)
              implementsClause = this.parseImplementsClause$0();
            else {
              token = implementsClause.implementsKeyword;
              if (token.type === C.TokenType_Emx)
                token = token.previous;
              this._reportError$1(V.AnalysisError$(t1, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_GFX, null));
              this.parseImplementsClause$0();
            }
          else
            foundClause = false;
        }
        if (withClause != null && extendsClause == null)
          this._reportErrorForToken$2(C.ParserErrorCode_NQR, withClause.withKeyword);
        if (this._currentToken.get$keyword() === C.Keyword_2No && this._currentToken.next.type === C.TokenType_86y) {
          keyword0 = this.getAndAdvance$0();
          name0 = this.parseStringLiteral$0();
          $.$get$astFactory().toString;
          nativeClause = new U.NativeClauseImpl(keyword0);
          nativeClause._ast$_name = nativeClause._becomeParentOf$1$1(name0, U.StringLiteralImpl);
        } else
          nativeClause = null;
        t1 = this._currentToken;
        if (t1.type === C.TokenType_cOk) {
          leftBracket = this.getAndAdvance$0();
          members = this._parseClassMembers$2(className, this._getEndToken$1(leftBracket));
          rightBracket = this._expect$1(C.TokenType_2ty);
        } else {
          t1 = new L.StringToken(C.TokenType_cOk, t1.offset, null);
          t1._setCommentParent$1(null);
          $.$get$StringUtilities_INTERNER().toString;
          t1._value = "";
          leftBracket = this._injectToken$1(t1);
          t1 = new L.StringToken(C.TokenType_2ty, this._currentToken.offset, null);
          t1._setCommentParent$1(null);
          $.$get$StringUtilities_INTERNER().toString;
          t1._value = "";
          rightBracket = this._injectToken$1(t1);
          this._reportErrorForToken$3(C.ParserErrorCode_kUZ, this._currentToken, null);
          members = null;
        }
        classDeclaration = $.$get$astFactory().classDeclaration$12(commentAndMetadata.comment, commentAndMetadata.metadata, abstractKeyword, keyword, $name, typeParameters, extendsClause, withClause, implementsClause, leftBracket, members, rightBracket);
        classDeclaration._nativeClause = classDeclaration._becomeParentOf$1$1(nativeClause, U.NativeClauseImpl);
        return classDeclaration;
      },
      parseClassMember$1: function(className) {
        var commentAndMetadata, modifiers, type, keyword, t1, returnType, next, isFollowedByIdentifier, t2, t3, variables, t4, t5, t6, t7, t8, methodName, typeParameters, parameters, token, type0, typeFromComment;
        commentAndMetadata = this.parseCommentAndMetadata$0();
        modifiers = this.parseModifiers$0();
        keyword = this._currentToken.get$keyword();
        t1 = keyword === C.Keyword_FmR;
        if (t1 || this._atGenericFunctionTypeAfterReturnType$1(this._currentToken)) {
          if (t1)
            returnType = this._atGenericFunctionTypeAfterReturnType$1(this._currentToken.next) ? this.parseTypeAnnotation$1(false) : U.TypeNameImpl$($.$get$astFactory().simpleIdentifier$1(this.getAndAdvance$0()), null, null);
          else
            returnType = this.parseTypeAnnotation$1(false);
          keyword = this._currentToken.get$keyword();
          next = this._currentToken.next;
          t1 = next.type;
          isFollowedByIdentifier = t1 === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(next);
          if (keyword === C.Keyword_cXJ && isFollowedByIdentifier) {
            this._validateModifiersForGetterOrSetterOrMethod$1(modifiers);
            return this.parseGetter$4(commentAndMetadata, modifiers.get$externalKeyword(), modifiers.get$staticKeyword(), returnType);
          } else if (keyword === C.Keyword_rb5 && isFollowedByIdentifier) {
            this._validateModifiersForGetterOrSetterOrMethod$1(modifiers);
            return this.parseSetter$4(commentAndMetadata, modifiers.get$externalKeyword(), modifiers.get$staticKeyword(), returnType);
          } else {
            if (keyword === C.Keyword_IEU)
              t1 = this._isOperator$1(next) || t1 === C.TokenType_sxw;
            else
              t1 = false;
            if (t1) {
              this._validateModifiersForOperator$1(modifiers);
              return this._parseOperatorAfterKeyword$4(commentAndMetadata, modifiers.get$externalKeyword(), returnType, this.getAndAdvance$0());
            } else {
              t1 = this._currentToken;
              if ((t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1)) && this._currentToken.next.matchesAny$1(C.List_2nU)) {
                this._validateModifiersForGetterOrSetterOrMethod$1(modifiers);
                return this._parseMethodDeclarationAfterReturnType$4(commentAndMetadata, modifiers.get$externalKeyword(), modifiers.get$staticKeyword(), returnType);
              } else {
                t1 = this._currentToken;
                if ((t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1)) && this._currentToken.next.matchesAny$1(C.List_KHg))
                  return this.parseInitializedIdentifierList$5(commentAndMetadata, modifiers.get$staticKeyword(), modifiers.get$covariantKeyword(), this._validateModifiersForField$1(modifiers), returnType);
                else {
                  if (this._isOperator$1(this._currentToken)) {
                    this._validateModifiersForOperator$1(modifiers);
                    return this.parseOperator$3(commentAndMetadata, modifiers.get$externalKeyword(), H.interceptedTypeCheck(returnType, "$isTypeName"));
                  }
                  this._reportErrorForToken$2(C.ParserErrorCode_wDo, this._currentToken);
                  return;
                }
              }
            }
          }
        }
        next = this._currentToken.next;
        t1 = next.type;
        isFollowedByIdentifier = t1 === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(next);
        if (keyword === C.Keyword_cXJ && isFollowedByIdentifier) {
          this._validateModifiersForGetterOrSetterOrMethod$1(modifiers);
          return this.parseGetter$4(commentAndMetadata, modifiers.get$externalKeyword(), modifiers.get$staticKeyword(), null);
        } else if (keyword === C.Keyword_rb5 && isFollowedByIdentifier) {
          this._validateModifiersForGetterOrSetterOrMethod$1(modifiers);
          return this.parseSetter$4(commentAndMetadata, modifiers.get$externalKeyword(), modifiers.get$staticKeyword(), null);
        } else if (keyword === C.Keyword_IEU && this._isOperator$1(next)) {
          this._validateModifiersForOperator$1(modifiers);
          return this._parseOperatorAfterKeyword$4(commentAndMetadata, modifiers.get$externalKeyword(), null, this.getAndAdvance$0());
        } else {
          t2 = this._currentToken;
          if (!(t2.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t2))) {
            if (this._currentToken.get$keyword() === C.Keyword_xkS) {
              this._reportErrorForToken$3(C.ParserErrorCode_6j6, this._currentToken, null);
              this.parseClassDeclaration$2(commentAndMetadata, null);
              return;
            } else if (this._currentToken.get$keyword() === C.Keyword_alK && this._currentToken.next.get$keyword() === C.Keyword_xkS) {
              this._reportErrorForToken$2(C.ParserErrorCode_6j6, this._currentToken.next);
              this.parseClassDeclaration$2(commentAndMetadata, this.getAndAdvance$0());
              return;
            } else if (this._currentToken.get$keyword() === C.Keyword_6x5) {
              this._reportErrorForToken$2(C.ParserErrorCode_ssa, this._currentToken.next);
              this.parseEnumDeclaration$1(commentAndMetadata);
              return;
            } else if (this._isOperator$1(this._currentToken)) {
              this._validateModifiersForOperator$1(modifiers);
              return this.parseOperator$3(commentAndMetadata, modifiers.get$externalKeyword(), null);
            }
            t1 = modifiers.get$varKeyword();
            keyword = t1 == null ? modifiers.get$finalKeyword() : t1;
            if (keyword == null)
              keyword = modifiers.get$constKeyword();
            if (keyword != null) {
              this._reportErrorForToken$3(C.ParserErrorCode_U06, this._currentToken, null);
              t1 = $.$get$astFactory();
              t2 = this.createSyntheticIdentifier$0();
              t1.toString;
              t3 = [Y.VariableDeclaration];
              variables = H.setRuntimeTypeInfo([U.VariableDeclarationImpl$(t2, null, null)], t3);
              t2 = commentAndMetadata.get$comment();
              t4 = commentAndMetadata.get$metadata();
              return t1.fieldDeclaration2$5$comment$covariantKeyword$fieldList$metadata$semicolon(t2, modifiers.get$covariantKeyword(), U.VariableDeclarationListImpl$(null, null, keyword, null, H.assertSubtype(variables, "$isList", t3, "$asList")), t4, this._expect$1(C.TokenType_FmR));
            }
            this._reportErrorForToken$2(C.ParserErrorCode_ibp, this._currentToken);
            if (commentAndMetadata.get$comment() == null) {
              t1 = commentAndMetadata;
              t1 = t1.get$metadata() != null && t1.get$metadata().length !== 0;
            } else
              t1 = true;
            if (t1) {
              t1 = $.$get$astFactory();
              t2 = commentAndMetadata.get$comment();
              t3 = commentAndMetadata.get$metadata();
              t4 = this.createSyntheticIdentifier$1$isDeclaration(true);
              t5 = new L.StringToken(C.TokenType_5uk, this._currentToken.offset, null);
              t5._setCommentParent$1(null);
              $.$get$StringUtilities_INTERNER().toString;
              t5._value = "";
              t5 = this._injectToken$1(t5);
              t6 = [Y.FormalParameter];
              t7 = H.setRuntimeTypeInfo([], t6);
              t8 = new L.StringToken(C.TokenType_coy, this._currentToken.offset, null);
              t8._setCommentParent$1(null);
              $.$get$StringUtilities_INTERNER().toString;
              t8._value = "";
              t8 = this._injectToken$1(t8);
              t1.toString;
              t8 = U.FormalParameterListImpl$(t5, H.assertSubtype(t7, "$isList", t6, "$asList"), null, null, t8);
              t6 = new L.StringToken(C.TokenType_FmR, this._currentToken.offset, null);
              t6._setCommentParent$1(null);
              $.$get$StringUtilities_INTERNER().toString;
              t6._value = "";
              return t1.methodDeclaration$11(t2, t3, null, null, null, null, null, t4, null, t8, new U.EmptyFunctionBodyImpl(this._injectToken$1(t6)));
            }
            return;
          } else {
            if (t1 === C.TokenType_wCI) {
              t2 = this._peekAt$1(2).type;
              t2 = (t2 === C.TokenType_GbN || t2.kind === 107) && this._peekAt$1(3).type === C.TokenType_5uk;
            } else
              t2 = false;
            if (t2) {
              t1 = this._peekAt$1(2);
              if (!(t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1)))
                this._reportErrorForToken$3(C.ParserErrorCode_vIB, this._peekAt$1(2), H.setRuntimeTypeInfo([this._peekAt$1(2).get$lexeme()], [P.Object]));
              return this._parseConstructor$8(commentAndMetadata, modifiers.get$externalKeyword(), this._validateModifiersForConstructor$1(modifiers), modifiers.get$factoryKeyword(), this.parseSimpleIdentifier$0(), this.getAndAdvance$0(), this.parseSimpleIdentifier$2$allowKeyword$isDeclaration(true, true), this.parseFormalParameterList$0());
            } else if (t1 === C.TokenType_5uk) {
              returnType = this._parseOptionalTypeNameComment$0();
              methodName = this.parseSimpleIdentifier$1$isDeclaration(true);
              typeParameters = this._parseGenericCommentTypeParameters$0();
              parameters = this.parseFormalParameterList$0();
              if (this._currentToken.type !== C.TokenType_gg4)
                if (modifiers.get$factoryKeyword() == null) {
                  t1 = methodName.token.get$lexeme();
                  t1 = t1 == null ? className == null : t1 === className;
                } else
                  t1 = true;
              else
                t1 = true;
              if (t1)
                return this._parseConstructor$8(commentAndMetadata, modifiers.get$externalKeyword(), this._validateModifiersForConstructor$1(modifiers), modifiers.get$factoryKeyword(), $.$get$astFactory().simpleIdentifier$2$isDeclaration(methodName.token, false), null, null, parameters);
              this._validateModifiersForGetterOrSetterOrMethod$1(modifiers);
              this._validateFormalParameterList$1(parameters);
              return this._parseMethodDeclarationAfterParameters$7(commentAndMetadata, modifiers.get$externalKeyword(), modifiers.get$staticKeyword(), returnType, methodName, typeParameters, parameters);
            } else if (next.matchesAny$1(C.List_KHg)) {
              if (modifiers.get$constKeyword() == null && modifiers.get$finalKeyword() == null && modifiers.get$varKeyword() == null)
                this._reportErrorForToken$3(C.ParserErrorCode_ccN, this._currentToken, null);
              return this.parseInitializedIdentifierList$5(commentAndMetadata, modifiers.get$staticKeyword(), modifiers.get$covariantKeyword(), this._validateModifiersForField$1(modifiers), null);
            } else {
              t1 = this._currentToken;
              if (keyword === C.Keyword_jpl) {
                this._reportErrorForToken$3(C.ParserErrorCode_MUw, t1, null);
                this._parseFunctionTypeAlias$2(commentAndMetadata, this.getAndAdvance$0());
                return;
              } else {
                token = this._skipTypeParameterList$1(t1.next);
                if (token != null && token.type === C.TokenType_5uk)
                  return this._parseMethodDeclarationAfterReturnType$4(commentAndMetadata, modifiers.get$externalKeyword(), modifiers.get$staticKeyword(), null);
              }
            }
          }
        }
        type0 = this.parseTypeAnnotation$1(false);
        typeFromComment = this._parseOptionalTypeNameComment$0();
        type = typeFromComment == null ? type0 : typeFromComment;
        keyword = this._currentToken.get$keyword();
        next = this._currentToken.next;
        t1 = next.type;
        isFollowedByIdentifier = t1 === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(next);
        if (keyword === C.Keyword_cXJ && isFollowedByIdentifier) {
          this._validateModifiersForGetterOrSetterOrMethod$1(modifiers);
          return this.parseGetter$4(commentAndMetadata, modifiers.get$externalKeyword(), modifiers.get$staticKeyword(), type);
        } else if (keyword === C.Keyword_rb5 && isFollowedByIdentifier) {
          this._validateModifiersForGetterOrSetterOrMethod$1(modifiers);
          return this.parseSetter$4(commentAndMetadata, modifiers.get$externalKeyword(), modifiers.get$staticKeyword(), type);
        } else if (keyword === C.Keyword_IEU && this._isOperator$1(next)) {
          this._validateModifiersForOperator$1(modifiers);
          return this._parseOperatorAfterKeyword$4(commentAndMetadata, modifiers.get$externalKeyword(), type, this.getAndAdvance$0());
        } else {
          t2 = this._currentToken;
          if (!(t2.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t2))) {
            t1 = this._currentToken;
            if (t1.type === C.TokenType_2ty)
              return this.parseInitializedIdentifierList$5(commentAndMetadata, modifiers.get$staticKeyword(), modifiers.get$covariantKeyword(), this._validateModifiersForField$1(modifiers), type);
            if (this._isOperator$1(t1)) {
              this._validateModifiersForOperator$1(modifiers);
              return this.parseOperator$3(commentAndMetadata, modifiers.get$externalKeyword(), H.interceptedTypeCheck(type, "$isTypeName"));
            }
            this._reportErrorForToken$2(C.ParserErrorCode_ibp, this._currentToken);
            try {
              ++this._errorListenerLock;
              t1 = this.parseInitializedIdentifierList$5(commentAndMetadata, modifiers.get$staticKeyword(), modifiers.get$covariantKeyword(), this._validateModifiersForField$1(modifiers), type);
              return t1;
            } finally {
              t1 = this._errorListenerLock;
              if (t1 === 0)
                H.throwExpression(P.StateError$("Attempt to unlock not locked error listener."));
              this._errorListenerLock = t1 - 1;
            }
          } else if (t1 === C.TokenType_5uk) {
            methodName = this._parseSimpleIdentifierUnchecked$1$isDeclaration(true);
            typeParameters = this._parseGenericCommentTypeParameters$0();
            parameters = this.parseFormalParameterList$0();
            t1 = methodName.token;
            t2 = t1.get$lexeme();
            if (t2 == null ? className == null : t2 === className) {
              this._reportErrorForNode$2(C.ParserErrorCode_WLk, type);
              return this._parseConstructor$8(commentAndMetadata, modifiers.get$externalKeyword(), this._validateModifiersForConstructor$1(modifiers), modifiers.get$factoryKeyword(), $.$get$astFactory().simpleIdentifier$2$isDeclaration(t1, true), null, null, parameters);
            }
            this._validateModifiersForGetterOrSetterOrMethod$1(modifiers);
            this._validateFormalParameterList$1(parameters);
            return this._parseMethodDeclarationAfterParameters$7(commentAndMetadata, modifiers.get$externalKeyword(), modifiers.get$staticKeyword(), type, methodName, typeParameters, parameters);
          } else if (t1 === C.TokenType_Drw)
            return this._parseMethodDeclarationAfterReturnType$4(commentAndMetadata, modifiers.get$externalKeyword(), modifiers.get$staticKeyword(), type);
          else if (t1 === C.TokenType_cOk) {
            this._validateModifiersForGetterOrSetterOrMethod$1(modifiers);
            this._reportErrorForToken$3(C.ParserErrorCode_gkc0, this._currentToken, null);
            t1 = new L.SyntheticKeywordToken(C.Keyword_cXJ, C.Keyword_cXJ, this._currentToken.offset, null);
            t1._setCommentParent$1(null);
            this._currentToken = this._injectToken$1(t1);
            return this.parseGetter$4(commentAndMetadata, modifiers.get$externalKeyword(), modifiers.get$staticKeyword(), type);
          }
        }
        return this.parseInitializedIdentifierList$5(commentAndMetadata, modifiers.get$staticKeyword(), modifiers.get$covariantKeyword(), this._validateModifiersForField$1(modifiers), type);
      },
      parseCombinator$0: function() {
        var t1, t2, t3, t4;
        if (this._currentToken.get$keyword() === C.Keyword_mTW) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t3 = this.parseIdentifierList$0();
          t1.toString;
          t1 = Y.SimpleIdentifier;
          t4 = [t1];
          H.assertSubtype(t3, "$isList", t4, "$asList");
          t2 = new U.ShowCombinatorImpl(t2);
          t1 = new U.NodeListImpl(t2, H.setRuntimeTypeInfo([], t4), [t1]);
          t1.addAll$1(0, t3);
          t2._shownNames = t1;
          return t2;
        } else if (this._currentToken.get$keyword() === C.Keyword_6pl) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t3 = this.parseIdentifierList$0();
          t1.toString;
          t1 = Y.SimpleIdentifier;
          t4 = [t1];
          H.assertSubtype(t3, "$isList", t4, "$asList");
          t2 = new U.HideCombinatorImpl(t2);
          t1 = new U.NodeListImpl(t2, H.setRuntimeTypeInfo([], t4), [t1]);
          t1.addAll$1(0, t3);
          t2._hiddenNames = t1;
          return t2;
        }
        return;
      },
      parseCombinators$0: function() {
        var t1, combinators, combinator;
        for (t1 = [Y.Combinator], combinators = null; true;) {
          combinator = this.parseCombinator$0();
          if (combinator == null)
            break;
          if (combinators == null)
            combinators = H.setRuntimeTypeInfo([], t1);
          C.JSArray_methods.add$1(combinators, combinator);
        }
        return combinators;
      },
      parseCommentAndMetadata$0: function() {
        var tokens, t1, t2, t3, t4, t5, metadata, token, $name, period, constructorName, $arguments, t6, optionalTokens;
        tokens = this.parseDocumentationCommentTokens$0();
        for (t1 = U.ArgumentListImpl, t2 = U.AstNodeImpl, t3 = U.SimpleIdentifierImpl, t4 = U.IdentifierImpl, t5 = [Y.Annotation], metadata = null; this._currentToken.type === C.TokenType_yzz;) {
          if (metadata == null)
            metadata = H.setRuntimeTypeInfo([], t5);
          token = this._currentToken;
          this._currentToken = token.next;
          $name = this._parsePrefixedIdentifierAfterIdentifier$1(this.parseSimpleIdentifier$0());
          period = this._currentToken;
          if (period.type === C.TokenType_wCI) {
            this._currentToken = period.next;
            constructorName = this.parseSimpleIdentifier$0();
          } else {
            period = null;
            constructorName = null;
          }
          $arguments = this._currentToken.type === C.TokenType_5uk ? this.parseArgumentList$0() : null;
          $.$get$astFactory().toString;
          t6 = new U.AnnotationImpl(token, period);
          H.assertIsSubtype(t4, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          $name._ast$_parent = t6;
          t6._ast$_name = $name;
          H.assertIsSubtype(t3, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (constructorName != null)
            constructorName._ast$_parent = t6;
          t6._constructorName = constructorName;
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if ($arguments != null)
            $arguments._ast$_parent = t6;
          t6._ast$_arguments = $arguments;
          C.JSArray_methods.add$1(metadata, t6);
          optionalTokens = this.parseDocumentationCommentTokens$0();
          if (optionalTokens != null)
            tokens = optionalTokens;
        }
        return new X.CommentAndMetadata(this.parseDocumentationComment$1(tokens), metadata);
      },
      parseCommentReference$2: function(referenceSource, sourceOffset) {
        var listener, scanner, firstToken, syntheticToken, newKeyword, identifier, secondToken, identifier0, secondToken0, thirdToken, nextToken, identifier1, fourthToken, keyword, t1, syntheticToken0, t2, t3, exception;
        try {
          listener = new Z.BooleanErrorListener(false);
          t1 = new D.SubSequenceReader(sourceOffset, referenceSource);
          t1._stringLength = referenceSource.length;
          t1._charOffset = 0;
          scanner = Z.Scanner_Scanner$fasta(null, listener, t1.getContents$0(), t1.get$offset(t1));
          scanner.setSourceStart$2(1, 1);
          firstToken = scanner.tokenize$0();
          if (listener.get$_errorReported())
            return;
          if (J.get$type$x(firstToken) === C.TokenType_Emx) {
            syntheticToken0 = new L.SyntheticStringToken(null, C.TokenType_GbN, sourceOffset, null);
            syntheticToken0._setCommentParent$1(null);
            $.$get$StringUtilities_INTERNER().toString;
            syntheticToken0._value = "";
            syntheticToken = syntheticToken0;
            syntheticToken.setNext$1(firstToken);
            t1 = new U.CommentReferenceImpl(null);
            t1._identifier = t1._becomeParentOf$1$1($.$get$astFactory().simpleIdentifier$1(syntheticToken), U.IdentifierImpl);
            return t1;
          }
          newKeyword = null;
          if (H.interceptedTypeCheck(firstToken, "$isToken").get$keyword() === C.Keyword_cw1) {
            newKeyword = firstToken;
            firstToken = firstToken.get$next();
          }
          if (J.get$type$x(firstToken).isUserDefinableOperator) {
            if (firstToken.get$next().type !== C.TokenType_Emx)
              return;
            identifier = $.$get$astFactory().simpleIdentifier$1(firstToken);
            t1 = new U.CommentReferenceImpl(null);
            t1._identifier = t1._becomeParentOf$1$1(H.interceptedTypeCheck(identifier, "$isIdentifier"), U.IdentifierImpl);
            return t1;
          } else if (H.interceptedTypeCheck(firstToken, "$isToken").get$keyword() === C.Keyword_IEU) {
            secondToken = firstToken.get$next();
            if (J.get$type$x(secondToken).isUserDefinableOperator) {
              if (secondToken.get$next().type !== C.TokenType_Emx)
                return;
              identifier0 = $.$get$astFactory().simpleIdentifier$1(secondToken);
              t1 = new U.CommentReferenceImpl(null);
              t1._identifier = t1._becomeParentOf$1$1(H.interceptedTypeCheck(identifier0, "$isIdentifier"), U.IdentifierImpl);
              return t1;
            }
            return;
          } else {
            t1 = H.interceptedTypeCheck(firstToken, "$isToken");
            if (t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1)) {
              secondToken0 = firstToken.get$next();
              thirdToken = secondToken0.get$next();
              nextToken = null;
              identifier1 = null;
              if (H.interceptedTypeCheck(secondToken0, "$isToken").type === C.TokenType_wCI)
                if (J.get$type$x(thirdToken).isUserDefinableOperator) {
                  t1 = $.$get$astFactory();
                  t2 = t1.simpleIdentifier$1(firstToken);
                  t1 = t1.simpleIdentifier$1(thirdToken);
                  identifier1 = U.PrefixedIdentifierImpl$(t2, H.interceptedTypeCheck(secondToken0, "$isToken"), t1);
                  nextToken = thirdToken.get$next();
                } else if (H.interceptedTypeCheck(thirdToken, "$isToken").get$keyword() === C.Keyword_IEU) {
                  fourthToken = thirdToken.get$next();
                  if (J.get$type$x(fourthToken).isUserDefinableOperator) {
                    t1 = $.$get$astFactory();
                    t2 = t1.simpleIdentifier$1(firstToken);
                    t1 = t1.simpleIdentifier$1(fourthToken);
                    identifier1 = U.PrefixedIdentifierImpl$(t2, H.interceptedTypeCheck(secondToken0, "$isToken"), t1);
                    nextToken = fourthToken.get$next();
                  } else
                    return;
                } else {
                  t1 = H.interceptedTypeCheck(thirdToken, "$isToken");
                  if (t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1)) {
                    t1 = $.$get$astFactory();
                    t2 = t1.simpleIdentifier$1(firstToken);
                    t1 = t1.simpleIdentifier$1(thirdToken);
                    identifier1 = U.PrefixedIdentifierImpl$(t2, H.interceptedTypeCheck(secondToken0, "$isToken"), t1);
                    nextToken = thirdToken.get$next();
                  }
                }
              else {
                identifier1 = $.$get$astFactory().simpleIdentifier$1(firstToken);
                nextToken = firstToken.get$next();
              }
              if (J.get$type$x(nextToken) !== C.TokenType_Emx)
                return;
              t1 = $.$get$astFactory();
              t2 = newKeyword;
              t3 = identifier1;
              t1.toString;
              t2 = new U.CommentReferenceImpl(H.interceptedTypeCheck(t2, "$isToken"));
              t2._identifier = t2._becomeParentOf$1$1(H.interceptedTypeCheck(t3, "$isIdentifier"), U.IdentifierImpl);
              return t2;
            } else {
              keyword = firstToken.get$keyword();
              if (J.$eq$(keyword, C.Keyword_ssT) || J.$eq$(keyword, C.Keyword_Apa) || J.$eq$(keyword, C.Keyword_aJC) || J.$eq$(keyword, C.Keyword_MTU))
                return;
            }
          }
        } catch (exception) {
          H.unwrapException(exception);
        }
        return;
      },
      parseCommentReferences$1: function(tokens) {
        var references, t1, t2, t3, isInGitHubCodeBlock, _i, token, comment, $length, codeBlockRanges, leftIndex, range, nameOffset, rightIndex, rightIndex0, firstChar, reference, charAfterLeft, t4, $name, nameToken, eof, t5;
        H.assertSubtype(tokens, "$isList", [L.DocumentationCommentToken], "$asList");
        references = H.setRuntimeTypeInfo([], [Y.CommentReference]);
        for (t1 = tokens.length, t2 = U.IdentifierImpl, t3 = U.AstNodeImpl, isInGitHubCodeBlock = false, _i = 0; _i < tokens.length; tokens.length === t1 || (0, H.throwConcurrentModificationError)(tokens), ++_i) {
          token = tokens[_i];
          comment = token.get$lexeme();
          if (tokens.length !== 1) {
            if (J.indexOf$1$asx(comment, "```") !== -1)
              isInGitHubCodeBlock = !isInGitHubCodeBlock;
            if (isInGitHubCodeBlock)
              continue;
          }
          comment = this._removeGitHubInlineCode$1(comment);
          $length = comment.length;
          codeBlockRanges = this._getCodeBlockRanges$1(comment);
          leftIndex = J.indexOf$1$asx(comment, "[");
          while (true) {
            if (!(leftIndex >= 0 && leftIndex + 1 < $length))
              break;
            range = this._findRange$2(codeBlockRanges, leftIndex);
            if (range == null) {
              nameOffset = token.offset + leftIndex + 1;
              rightIndex = C.JSString_methods.indexOf$2(comment, "]", leftIndex);
              rightIndex0 = leftIndex + 1;
              if (rightIndex >= 0) {
                firstChar = C.JSString_methods.codeUnitAt$1(comment, rightIndex0);
                if (firstChar !== 39 && firstChar !== 34)
                  if (!this._isLinkText$2(comment, rightIndex)) {
                    reference = this.parseCommentReference$2(C.JSString_methods.substring$2(comment, rightIndex0, rightIndex), nameOffset);
                    if (reference != null) {
                      C.JSArray_methods.add$1(references, reference);
                      C.JSArray_methods.add$1(token.get$references(), reference._identifier.get$beginToken());
                    }
                  }
              } else {
                charAfterLeft = C.JSString_methods.codeUnitAt$1(comment, rightIndex0);
                if (!(charAfterLeft >= 65 && charAfterLeft <= 90))
                  t4 = charAfterLeft >= 97 && charAfterLeft <= 122;
                else
                  t4 = true;
                if (!t4)
                  t4 = charAfterLeft >= 48 && charAfterLeft <= 57;
                else
                  t4 = true;
                if (t4) {
                  $name = C.JSString_methods.substring$2(comment, rightIndex0, O.StringUtilities_indexOfFirstNotLetterDigit(comment, rightIndex0));
                  nameToken = new L.StringToken(C.TokenType_GbN, nameOffset, null);
                  nameToken._setCommentParent$1(null);
                  $.$get$StringUtilities_INTERNER().toString;
                  nameToken._value = $name;
                } else {
                  nameToken = new L.SyntheticStringToken(null, C.TokenType_GbN, nameOffset, null);
                  nameToken._setCommentParent$1(null);
                  $.$get$StringUtilities_INTERNER().toString;
                  nameToken._value = "";
                }
                eof = new L.SimpleToken(C.TokenType_Emx, nameToken.offset + nameToken.get$length(nameToken), null);
                eof._setCommentParent$1(null);
                eof.previous = eof;
                eof.next = eof;
                nameToken.next = eof;
                eof.previous = nameToken;
                eof.set$beforeSynthetic(nameToken);
                t4 = $.$get$astFactory().simpleIdentifier$1(nameToken);
                t5 = new U.CommentReferenceImpl(null);
                H.assertIsSubtype(t2, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
                t4._ast$_parent = t5;
                t5._identifier = t4;
                C.JSArray_methods.add$1(references, t5);
                C.JSArray_methods.add$1(token.get$references(), nameToken);
                rightIndex = rightIndex0;
              }
              leftIndex = C.JSString_methods.indexOf$2(comment, "[", rightIndex);
            } else
              leftIndex = C.JSString_methods.indexOf$2(comment, "[", range[1]);
          }
        }
        return references;
      },
      parseCompilationUnit$1: function(token) {
        this._currentToken = token;
        return this.parseCompilationUnit2$0();
      },
      parseCompilationUnit2$0: function() {
        var _box_0, commentAndMetadata, member, eof, firstToken, t1, t2, scriptTag, directives, t3, t4, declarations, memberStart, type, t5, t6, directiveFoundAfterDeclaration, keyword, token, nextType, directive, t7, exception, eof0, directiveCount, firstPartOf, i;
        _box_0 = {};
        firstToken = this._currentToken;
        if (firstToken.type === C.TokenType_oZ3) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          scriptTag = new U.ScriptTagImpl(t2);
        } else
          scriptTag = null;
        _box_0.libraryDirectiveFound = false;
        _box_0.partOfDirectiveFound = false;
        _box_0.partDirectiveFound = false;
        t1 = Y.Directive;
        t2 = [t1];
        directives = H.setRuntimeTypeInfo([], t2);
        t3 = Y.CompilationUnitMember;
        t4 = [t3];
        declarations = H.setRuntimeTypeInfo([], t4);
        memberStart = this._currentToken;
        type = memberStart.type;
        for (t5 = this._parser$_source, t6 = [P.Object], directiveFoundAfterDeclaration = false; type !== C.TokenType_Emx;) {
          commentAndMetadata = this.parseCommentAndMetadata$0();
          keyword = this._currentToken.get$keyword();
          token = this._currentToken;
          nextType = token.next.type;
          if ((keyword === C.Keyword_wwi || keyword === C.Keyword_y1M || keyword === C.Keyword_kfn || keyword === C.Keyword_AUT) && nextType !== C.TokenType_wCI && nextType !== C.TokenType_Drw && nextType !== C.TokenType_5uk) {
            directive = new X.Parser_parseCompilationUnit2_parseDirective(_box_0, this, keyword, commentAndMetadata, directives).call$0();
            if (declarations.length > 0 && !directiveFoundAfterDeclaration) {
              token = directive.get$beginToken();
              if (token.type === C.TokenType_Emx)
                token = token.previous;
              this._reportError$1(V.AnalysisError$(t5, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_NIe, null));
              directiveFoundAfterDeclaration = true;
            }
            C.JSArray_methods.add$1(directives, directive);
          } else if (type === C.TokenType_FmR) {
            t7 = H.assertSubtype(H.setRuntimeTypeInfo([token.get$lexeme()], t6), "$isList", t6, "$asList");
            if (token.type === C.TokenType_Emx)
              token = token.previous;
            this._reportError$1(V.AnalysisError$(t5, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_yjH, t7));
            this._currentToken = this._currentToken.next;
          } else {
            member = null;
            try {
              member = this.parseCompilationUnitMember$1(commentAndMetadata);
            } catch (exception) {
              if (H.unwrapException(exception) instanceof X._TooDeepTreeError) {
                token = this._currentToken;
                if (token.type === C.TokenType_Emx)
                  token = token.previous;
                this._reportError$1(V.AnalysisError$(t5, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_AKW, null));
                eof0 = new L.SimpleToken(C.TokenType_Emx, 0, null);
                eof0._setCommentParent$1(null);
                eof0.previous = eof0;
                eof0.next = eof0;
                eof = eof0;
                $.$get$astFactory().toString;
                t6 = new U.CompilationUnitImpl(H.interceptedTypeCheck(eof, "$isToken"), H.interceptedTypeCheck(eof, "$isToken"));
                H.assertIsSubtype(U.ScriptTagImpl, U.AstNodeImpl, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
                t5 = new U.NodeListImpl(t6, H.setRuntimeTypeInfo([], t2), [t1]);
                t5.addAll$1(0, null);
                t6._directives = t5;
                t5 = new U.NodeListImpl(t6, H.setRuntimeTypeInfo([], t4), [t3]);
                t5.addAll$1(0, null);
                t6._declarations = t5;
                return t6;
              } else
                throw exception;
            }
            if (member != null)
              C.JSArray_methods.add$1(declarations, member);
          }
          token = this._currentToken;
          if (token == null ? memberStart == null : token === memberStart) {
            t7 = H.assertSubtype(H.setRuntimeTypeInfo([token.get$lexeme()], t6), "$isList", t6, "$asList");
            if (token.type === C.TokenType_Emx)
              token = token.previous;
            this._reportError$1(V.AnalysisError$(t5, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_yjH, t7));
            t7 = this._currentToken.next;
            this._currentToken = t7;
            while (true) {
              if (!(t7.type !== C.TokenType_Emx && !this._couldBeStartOfCompilationUnitMember$0()))
                break;
              t7 = this._currentToken.next;
              this._currentToken = t7;
            }
          }
          memberStart = this._currentToken;
          type = memberStart.type;
        }
        if (_box_0.partOfDirectiveFound && directives.length > 1) {
          directiveCount = directives.length;
          for (firstPartOf = true, i = 0; i < directiveCount; ++i) {
            if (i >= directives.length)
              return H.ioore(directives, i);
            directive = directives[i];
            if (!!directive.$isPartOfDirective)
              if (firstPartOf)
                firstPartOf = false;
              else {
                token = directive.partKeyword;
                if (token.type === C.TokenType_Emx)
                  token = token.previous;
                this._reportError$1(V.AnalysisError$(t5, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_Qw3, null));
              }
            else {
              token = directive.get$keyword();
              if (token.type === C.TokenType_Emx)
                token = token.previous;
              this._reportError$1(V.AnalysisError$(t5, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_e4R, null));
            }
          }
        }
        t1 = $.$get$astFactory();
        t3 = this._currentToken;
        t1.toString;
        return U.CompilationUnitImpl$(firstToken, scriptTag, H.assertSubtype(directives, "$isList", t2, "$asList"), H.assertSubtype(declarations, "$isList", t4, "$asList"), t3);
      },
      parseCompilationUnitMember$1: function(commentAndMetadata) {
        var modifiers, keyword, t1, next, nextType, t2, returnType, t3, token, semicolon;
        modifiers = this.parseModifiers$0();
        keyword = this._currentToken.get$keyword();
        if (keyword === C.Keyword_xkS) {
          this._validateModifiersForTopLevelDeclaration$1(modifiers);
          t1 = modifiers.constKeyword;
          if (t1 != null)
            this._reportErrorForToken$2(C.ParserErrorCode_HLN, t1);
          t1 = modifiers.externalKeyword;
          if (t1 != null)
            this._reportErrorForToken$2(C.ParserErrorCode_uwd, t1);
          t1 = modifiers.finalKeyword;
          if (t1 != null)
            this._reportErrorForToken$2(C.ParserErrorCode_aZS, t1);
          t1 = modifiers.varKeyword;
          if (t1 != null)
            this._reportErrorForToken$2(C.ParserErrorCode_T7k, t1);
          return this.parseClassDeclaration$2(commentAndMetadata, modifiers.abstractKeyword);
        }
        t1 = this._currentToken;
        next = t1.next;
        nextType = next.type;
        if (keyword === C.Keyword_jpl && nextType !== C.TokenType_wCI && nextType !== C.TokenType_Drw && nextType !== C.TokenType_5uk) {
          this._validateModifiersForTopLevelDeclaration$1(modifiers);
          t1 = modifiers.abstractKeyword;
          if (t1 != null)
            this._reportErrorForToken$2(C.ParserErrorCode_I0D, t1);
          t1 = modifiers.constKeyword;
          if (t1 != null)
            this._reportErrorForToken$2(C.ParserErrorCode_oWp, t1);
          t1 = modifiers.externalKeyword;
          if (t1 != null)
            this._reportErrorForToken$2(C.ParserErrorCode_4qq, t1);
          t1 = modifiers.finalKeyword;
          if (t1 != null)
            this._reportErrorForToken$2(C.ParserErrorCode_M2I, t1);
          t1 = modifiers.varKeyword;
          if (t1 != null)
            this._reportErrorForToken$2(C.ParserErrorCode_mFT, t1);
          return this.parseTypeAlias$1(commentAndMetadata);
        } else if (keyword === C.Keyword_6x5) {
          this._validateModifiersForTopLevelDeclaration$1(modifiers);
          t1 = modifiers.abstractKeyword;
          if (t1 != null)
            this._reportErrorForToken$2(C.ParserErrorCode_uwZ, t1);
          t1 = modifiers.constKeyword;
          if (t1 != null)
            this._reportErrorForToken$2(C.ParserErrorCode_8Gl0, t1);
          t1 = modifiers.externalKeyword;
          if (t1 != null)
            this._reportErrorForToken$2(C.ParserErrorCode_QsD, t1);
          t1 = modifiers.finalKeyword;
          if (t1 != null)
            this._reportErrorForToken$2(C.ParserErrorCode_K1W, t1);
          t1 = modifiers.varKeyword;
          if (t1 != null)
            this._reportErrorForToken$2(C.ParserErrorCode_KJn, t1);
          return this.parseEnumDeclaration$1(commentAndMetadata);
        } else {
          t2 = keyword === C.Keyword_FmR;
          if (t2 || this._atGenericFunctionTypeAfterReturnType$1(t1)) {
            if (t2)
              returnType = this._atGenericFunctionTypeAfterReturnType$1(next) ? this.parseTypeAnnotation$1(false) : U.TypeNameImpl$($.$get$astFactory().simpleIdentifier$1(this.getAndAdvance$0()), null, null);
            else
              returnType = this.parseTypeAnnotation$1(false);
            keyword = this._currentToken.get$keyword();
            next = this._currentToken.next;
            if (keyword === C.Keyword_cXJ || keyword === C.Keyword_rb5)
              t1 = next.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(next);
            else
              t1 = false;
            if (t1) {
              this._validateModifiersForTopLevelFunction$1(modifiers);
              return this.parseFunctionDeclaration$3(commentAndMetadata, modifiers.externalKeyword, returnType);
            } else if (keyword === C.Keyword_IEU && this._isOperator$1(next)) {
              this._reportErrorForToken$2(C.ParserErrorCode_enb, this._currentToken);
              return this._convertToFunctionDeclaration$1(this._parseOperatorAfterKeyword$4(commentAndMetadata, modifiers.externalKeyword, returnType, this.getAndAdvance$0()));
            } else {
              t1 = this._currentToken;
              if ((t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1)) && next.matchesAny$1(C.List_2nU)) {
                this._validateModifiersForTopLevelFunction$1(modifiers);
                return this.parseFunctionDeclaration$3(commentAndMetadata, modifiers.externalKeyword, returnType);
              } else {
                t1 = this._currentToken;
                if ((t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1)) && next.matchesAny$1(C.List_KHg)) {
                  t1 = $.$get$astFactory();
                  t2 = this.parseVariableDeclarationListAfterType$3(null, this._validateModifiersForTopLevelVariable$1(modifiers), returnType);
                  t3 = this._expect$1(C.TokenType_FmR);
                  t1.toString;
                  t3 = new U.TopLevelVariableDeclarationImpl(t3);
                  t3.AnnotatedNodeImpl$2(commentAndMetadata.comment, H.assertSubtype(commentAndMetadata.metadata, "$isList", [Y.Annotation], "$asList"));
                  t3._variableList = t3._becomeParentOf$1$1(t2, U.VariableDeclarationListImpl);
                  return t3;
                } else {
                  this._reportErrorForToken$2(C.ParserErrorCode_wDo, this._currentToken);
                  return;
                }
              }
            }
          } else {
            if (keyword === C.Keyword_cXJ || keyword === C.Keyword_rb5)
              t1 = nextType === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(next);
            else
              t1 = false;
            if (t1) {
              this._validateModifiersForTopLevelFunction$1(modifiers);
              return this.parseFunctionDeclaration$3(commentAndMetadata, modifiers.externalKeyword, null);
            } else if (keyword === C.Keyword_IEU && this._isOperator$1(next)) {
              this._reportErrorForToken$2(C.ParserErrorCode_enb, this._currentToken);
              return this._convertToFunctionDeclaration$1(this._parseOperatorAfterKeyword$4(commentAndMetadata, modifiers.externalKeyword, null, this.getAndAdvance$0()));
            } else {
              t1 = this._currentToken;
              if (!(t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1))) {
                keyword = modifiers.varKeyword;
                if (keyword == null)
                  keyword = modifiers.finalKeyword;
                if (keyword == null)
                  keyword = modifiers.constKeyword;
                if (keyword != null) {
                  this._reportErrorForToken$3(C.ParserErrorCode_U06, this._currentToken, null);
                  t1 = $.$get$astFactory();
                  t2 = this.createSyntheticIdentifier$0();
                  t1.toString;
                  t1 = [Y.VariableDeclaration];
                  t1 = U.VariableDeclarationListImpl$(null, null, keyword, null, H.assertSubtype(H.setRuntimeTypeInfo([U.VariableDeclarationImpl$(t2, null, null)], t1), "$isList", t1, "$asList"));
                  t2 = new U.TopLevelVariableDeclarationImpl(this._expect$1(C.TokenType_FmR));
                  t2.AnnotatedNodeImpl$2(commentAndMetadata.comment, H.assertSubtype(commentAndMetadata.metadata, "$isList", [Y.Annotation], "$asList"));
                  t2._variableList = t2._becomeParentOf$1$1(t1, U.VariableDeclarationListImpl);
                  return t2;
                }
                this._reportErrorForToken$2(C.ParserErrorCode_wDo, this._currentToken);
                return;
              } else {
                token = this._skipTypeParameterList$1(this._currentToken.next);
                if (token != null && token.type === C.TokenType_5uk)
                  return this.parseFunctionDeclaration$3(commentAndMetadata, modifiers.externalKeyword, null);
                else if (nextType === C.TokenType_5uk) {
                  returnType = this._parseOptionalTypeNameComment$0();
                  this._validateModifiersForTopLevelFunction$1(modifiers);
                  return this.parseFunctionDeclaration$3(commentAndMetadata, modifiers.externalKeyword, returnType);
                } else if (next.matchesAny$1(C.List_KHg)) {
                  if (modifiers.constKeyword == null && modifiers.finalKeyword == null && modifiers.varKeyword == null)
                    this._reportErrorForToken$3(C.ParserErrorCode_ccN, this._currentToken, null);
                  t1 = $.$get$astFactory();
                  t2 = this.parseVariableDeclarationListAfterType$3(null, this._validateModifiersForTopLevelVariable$1(modifiers), null);
                  t3 = this._expect$1(C.TokenType_FmR);
                  t1.toString;
                  t3 = new U.TopLevelVariableDeclarationImpl(t3);
                  t3.AnnotatedNodeImpl$2(commentAndMetadata.comment, H.assertSubtype(commentAndMetadata.metadata, "$isList", [Y.Annotation], "$asList"));
                  t3._variableList = t3._becomeParentOf$1$1(t2, U.VariableDeclarationListImpl);
                  return t3;
                }
              }
            }
          }
        }
        returnType = this.parseTypeAnnotation$1(false);
        keyword = this._currentToken.get$keyword();
        next = this._currentToken.next;
        if (keyword === C.Keyword_cXJ || keyword === C.Keyword_rb5)
          t1 = next.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(next);
        else
          t1 = false;
        if (t1) {
          this._validateModifiersForTopLevelFunction$1(modifiers);
          return this.parseFunctionDeclaration$3(commentAndMetadata, modifiers.externalKeyword, returnType);
        } else if (keyword === C.Keyword_IEU && this._isOperator$1(next)) {
          this._reportErrorForToken$2(C.ParserErrorCode_enb, this._currentToken);
          return this._convertToFunctionDeclaration$1(this._parseOperatorAfterKeyword$4(commentAndMetadata, modifiers.externalKeyword, returnType, this.getAndAdvance$0()));
        } else {
          t1 = this._currentToken;
          t2 = t1.type;
          if (t2 === C.TokenType_yzz) {
            t1 = $.$get$astFactory();
            t2 = this.parseVariableDeclarationListAfterType$3(null, this._validateModifiersForTopLevelVariable$1(modifiers), returnType);
            t3 = this._expect$1(C.TokenType_FmR);
            t1.toString;
            t3 = new U.TopLevelVariableDeclarationImpl(t3);
            t3.AnnotatedNodeImpl$2(commentAndMetadata.comment, H.assertSubtype(commentAndMetadata.metadata, "$isList", [Y.Annotation], "$asList"));
            t3._variableList = t3._becomeParentOf$1$1(t2, U.VariableDeclarationListImpl);
            return t3;
          } else if (!(t2 === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1))) {
            this._reportErrorForToken$2(C.ParserErrorCode_wDo, this._currentToken);
            t1 = this._currentToken;
            if (t1.type === C.TokenType_FmR)
              semicolon = this.getAndAdvance$0();
            else {
              t1 = new L.StringToken(C.TokenType_FmR, t1.offset, null);
              t1._setCommentParent$1(null);
              $.$get$StringUtilities_INTERNER().toString;
              t1._value = "";
              semicolon = this._injectToken$1(t1);
            }
            t1 = $.$get$astFactory();
            t2 = this.createSyntheticIdentifier$0();
            t1.toString;
            t1 = [Y.VariableDeclaration];
            t1 = U.VariableDeclarationListImpl$(null, null, null, returnType, H.assertSubtype(H.setRuntimeTypeInfo([U.VariableDeclarationImpl$(t2, null, null)], t1), "$isList", t1, "$asList"));
            t2 = new U.TopLevelVariableDeclarationImpl(semicolon);
            t2.AnnotatedNodeImpl$2(commentAndMetadata.comment, H.assertSubtype(commentAndMetadata.metadata, "$isList", [Y.Annotation], "$asList"));
            t2._variableList = t2._becomeParentOf$1$1(t1, U.VariableDeclarationListImpl);
            return t2;
          } else if (next.matchesAny$1(C.List_9oi)) {
            this._validateModifiersForTopLevelFunction$1(modifiers);
            return this.parseFunctionDeclaration$3(commentAndMetadata, modifiers.externalKeyword, returnType);
          }
        }
        t1 = $.$get$astFactory();
        t2 = this.parseVariableDeclarationListAfterType$3(null, this._validateModifiersForTopLevelVariable$1(modifiers), returnType);
        t3 = this._expect$1(C.TokenType_FmR);
        t1.toString;
        t3 = new U.TopLevelVariableDeclarationImpl(t3);
        t3.AnnotatedNodeImpl$2(commentAndMetadata.comment, H.assertSubtype(commentAndMetadata.metadata, "$isList", [Y.Annotation], "$asList"));
        t3._variableList = t3._becomeParentOf$1$1(t2, U.VariableDeclarationListImpl);
        return t3;
      },
      parseConditionalExpression$0: function() {
        var condition, question, thenExpression, colon, elseExpression;
        condition = this.parseIfNullExpression$0();
        if (this._currentToken.type !== C.TokenType_V43)
          return condition;
        question = this.getAndAdvance$0();
        thenExpression = this.parseExpressionWithoutCascade$0();
        colon = this._expect$1(C.TokenType_gg4);
        elseExpression = this.parseExpressionWithoutCascade$0();
        $.$get$astFactory().toString;
        return U.ConditionalExpressionImpl$(condition, question, thenExpression, colon, elseExpression);
      },
      parseConstExpression$0: function() {
        var keyword, type;
        keyword = this.getAndAdvance$0();
        type = this._currentToken.type;
        if (type === C.TokenType_Drw || this._injectGenericComment$2(C.TokenType_Y2Y, 2))
          return this.parseListOrMapLiteral$1(keyword);
        else if (type === C.TokenType_AGi || type === C.TokenType_Qq8)
          return this.parseListLiteral$2(keyword, null);
        else if (type === C.TokenType_cOk)
          return this.parseMapLiteral$2(keyword, null);
        return this.parseInstanceCreationExpression$1(keyword);
      },
      parseConstructorFieldInitializer$1: function(hasThis) {
        var keywordToken, period, fieldName, equals, wasInInitializer, expression, cascadeSections, section, t1, type, keyword, t2, t3, t4, t5;
        keywordToken = null;
        period = null;
        if (hasThis) {
          keywordToken = this.getAndAdvance$0();
          period = this._expect$1(C.TokenType_wCI);
        }
        fieldName = this.parseSimpleIdentifier$0();
        equals = null;
        t1 = this._currentToken;
        type = t1.type;
        if (type === C.TokenType_tca)
          equals = this.getAndAdvance$0();
        else {
          this._reportErrorForToken$3(C.ParserErrorCode_M6L, t1, null);
          keyword = this._currentToken.get$keyword();
          if (keyword !== C.Keyword_ssT && keyword !== C.Keyword_WnT && type !== C.TokenType_cOk && type !== C.TokenType_ECn) {
            t1 = new L.StringToken(C.TokenType_tca, this._currentToken.offset, null);
            t1._setCommentParent$1(null);
            $.$get$StringUtilities_INTERNER().toString;
            t1._value = "";
            equals = this._injectToken$1(t1);
          } else {
            t1 = $.$get$astFactory();
            t2 = keywordToken;
            t3 = period;
            t4 = new L.StringToken(C.TokenType_tca, this._currentToken.offset, null);
            t4._setCommentParent$1(null);
            $.$get$StringUtilities_INTERNER().toString;
            t4._value = "";
            t4 = this._injectToken$1(t4);
            t5 = this.createSyntheticIdentifier$0();
            t1.toString;
            return U.ConstructorFieldInitializerImpl$(H.interceptedTypeCheck(t2, "$isToken"), H.interceptedTypeCheck(t3, "$isToken"), H.interceptedTypeCheck(fieldName, "$isSimpleIdentifier"), t4, t5);
          }
        }
        wasInInitializer = this._inInitializer;
        this._inInitializer = true;
        try {
          expression = this.parseConditionalExpression$0();
          if (this._currentToken.type === C.TokenType_cv8) {
            t1 = [Y.Expression];
            cascadeSections = H.setRuntimeTypeInfo([], t1);
            do {
              section = this.parseCascadeSection$0();
              if (section != null)
                J.add$1$ax(cascadeSections, section);
            } while (this._currentToken.type === C.TokenType_cv8);
            t2 = $.$get$astFactory();
            t3 = expression;
            t2.toString;
            expression = U.CascadeExpressionImpl$(H.interceptedTypeCheck(t3, "$isExpression"), H.assertSubtype(cascadeSections, "$isList", t1, "$asList"));
          }
          t1 = $.$get$astFactory();
          t2 = keywordToken;
          t3 = period;
          t4 = equals;
          t5 = expression;
          t1.toString;
          t5 = U.ConstructorFieldInitializerImpl$(H.interceptedTypeCheck(t2, "$isToken"), H.interceptedTypeCheck(t3, "$isToken"), H.interceptedTypeCheck(fieldName, "$isSimpleIdentifier"), H.interceptedTypeCheck(t4, "$isToken"), H.interceptedTypeCheck(t5, "$isExpression"));
          return t5;
        } finally {
          this._inInitializer = wasInInitializer;
        }
      },
      parseConstructorName$0: function() {
        var type, period, $name;
        type = this.parseTypeName$1(false);
        if (this._currentToken.type === C.TokenType_wCI) {
          period = this.getAndAdvance$0();
          $name = this.parseSimpleIdentifier$0();
        } else {
          period = null;
          $name = null;
        }
        $.$get$astFactory().toString;
        return U.ConstructorNameImpl$(type, period, $name);
      },
      parseDocumentationComment$1: function(tokens) {
        var references;
        H.assertSubtype(tokens, "$isList", [L.DocumentationCommentToken], "$asList");
        if (tokens == null)
          return;
        references = this.parseCommentReferences$1(tokens);
        return $.$get$astFactory().documentationComment$2(tokens, references);
      },
      parseDocumentationCommentTokens$0: function() {
        var tokens, commentToken, t1;
        tokens = H.setRuntimeTypeInfo([], [L.DocumentationCommentToken]);
        commentToken = this._currentToken._precedingComment;
        for (; commentToken != null;) {
          if (!!commentToken.$isDocumentationCommentToken) {
            t1 = tokens.length;
            if (t1 !== 0)
              if (commentToken.type === C.TokenType_WjT) {
                if (0 >= t1)
                  return H.ioore(tokens, 0);
                if (tokens[0].type !== C.TokenType_WjT)
                  C.JSArray_methods.set$length(tokens, 0);
              } else
                C.JSArray_methods.set$length(tokens, 0);
            C.JSArray_methods.add$1(tokens, commentToken);
          }
          commentToken = H.interceptedTypeCheck(commentToken.next, "$isCommentToken");
        }
        return tokens.length === 0 ? null : tokens;
      },
      parseDoStatement$0: function() {
        var wasInLoop, doKeyword, body, whileKeyword, leftParenthesis, condition, rightParenthesis, semicolon, t1;
        wasInLoop = this._inLoop;
        this._inLoop = true;
        try {
          doKeyword = this.getAndAdvance$0();
          body = this.parseStatement2$0();
          whileKeyword = this._expectKeyword$1(C.Keyword_0);
          leftParenthesis = this._expect$1(C.TokenType_5uk);
          condition = this.parseExpression2$0();
          rightParenthesis = this._expect$1(C.TokenType_coy);
          semicolon = this._expect$1(C.TokenType_FmR);
          $.$get$astFactory().toString;
          t1 = U.DoStatementImpl$(H.interceptedTypeCheck(doKeyword, "$isToken"), H.interceptedTypeCheck(body, "$isStatement"), H.interceptedTypeCheck(whileKeyword, "$isToken"), H.interceptedTypeCheck(leftParenthesis, "$isToken"), H.interceptedTypeCheck(condition, "$isExpression"), H.interceptedTypeCheck(rightParenthesis, "$isToken"), H.interceptedTypeCheck(semicolon, "$isToken"));
          return t1;
        } finally {
          this._inLoop = wasInLoop;
        }
      },
      parseDottedName$0: function() {
        var t1, t2, components, t3;
        t1 = Y.SimpleIdentifier;
        t2 = [t1];
        components = H.setRuntimeTypeInfo([this.parseSimpleIdentifier$0()], t2);
        for (; this._optional$1(C.TokenType_wCI);)
          C.JSArray_methods.add$1(components, this.parseSimpleIdentifier$0());
        $.$get$astFactory().toString;
        H.assertSubtype(components, "$isList", t2, "$asList");
        t3 = new U.DottedNameImpl();
        t1 = new U.NodeListImpl(t3, H.setRuntimeTypeInfo([], t2), [t1]);
        t1.addAll$1(0, components);
        t3._components = t1;
        return t3;
      },
      parseEnumDeclaration$1: function(commentAndMetadata) {
        var keyword, $name, t1, constants, t2, leftBracket, rightBracket;
        keyword = this.getAndAdvance$0();
        $name = this.parseSimpleIdentifier$1$isDeclaration(true);
        t1 = [Y.EnumConstantDeclaration];
        constants = H.setRuntimeTypeInfo([], t1);
        t2 = this._currentToken;
        if (t2.type === C.TokenType_cOk) {
          leftBracket = this.getAndAdvance$0();
          t2 = this._currentToken;
          if (t2.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t2) || this._currentToken.type === C.TokenType_yzz)
            C.JSArray_methods.add$1(constants, this._parseEnumConstantDeclaration$0());
          else {
            t2 = this._currentToken;
            if (t2.type === C.TokenType_O55) {
              t2 = t2.next;
              t2 = t2.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t2);
            } else
              t2 = false;
            if (t2) {
              C.JSArray_methods.add$1(constants, this._parseEnumConstantDeclaration$0());
              this._reportErrorForToken$3(C.ParserErrorCode_U06, this._currentToken, null);
            } else {
              C.JSArray_methods.add$1(constants, this._parseEnumConstantDeclaration$0());
              this._reportErrorForToken$3(C.ParserErrorCode_eKc, this._currentToken, null);
            }
          }
          for (; this._optional$1(C.TokenType_O55);) {
            if (this._currentToken.type === C.TokenType_2ty)
              break;
            C.JSArray_methods.add$1(constants, this._parseEnumConstantDeclaration$0());
          }
          rightBracket = this._expect$1(C.TokenType_2ty);
        } else {
          t2 = new L.StringToken(C.TokenType_cOk, t2.offset, null);
          t2._setCommentParent$1(null);
          $.$get$StringUtilities_INTERNER().toString;
          t2._value = "";
          leftBracket = this._injectToken$1(t2);
          t2 = new L.StringToken(C.TokenType_2ty, this._currentToken.offset, null);
          t2._setCommentParent$1(null);
          $.$get$StringUtilities_INTERNER().toString;
          t2._value = "";
          rightBracket = this._injectToken$1(t2);
          this._reportErrorForToken$3(C.ParserErrorCode_hRl, this._currentToken, null);
        }
        $.$get$astFactory().toString;
        return U.EnumDeclarationImpl$(commentAndMetadata.comment, H.assertSubtype(commentAndMetadata.metadata, "$isList", [Y.Annotation], "$asList"), keyword, $name, leftBracket, H.assertSubtype(constants, "$isList", t1, "$asList"), rightBracket);
      },
      parseEqualityExpression$0: function() {
        var t1, t2, expression, t3, leftEqualityExpression, t4, token, t5, expression0;
        if (this._currentToken.get$keyword() === C.Keyword_WnT) {
          t1 = this._currentToken.next.type;
          t1.toString;
          t1 = t1 === C.TokenType_Yb0 || t1 === C.TokenType_gg40;
        } else
          t1 = false;
        if (t1) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          expression = new U.SuperExpressionImpl(t2);
        } else
          expression = this.parseRelationalExpression$0();
        t1 = U.ExpressionImpl;
        t2 = U.AstNodeImpl;
        t3 = this._parser$_source;
        leftEqualityExpression = false;
        while (true) {
          t4 = this._currentToken.type;
          t4.toString;
          if (!(t4 === C.TokenType_Yb0 || t4 === C.TokenType_gg40))
            break;
          if (leftEqualityExpression)
            this._reportError$1(V.AnalysisError$(t3, expression.get$offset(expression), expression.get$length(expression), C.ParserErrorCode_yg4, null));
          t4 = $.$get$astFactory();
          token = this._currentToken;
          this._currentToken = token.next;
          t5 = this.parseRelationalExpression$0();
          t4.toString;
          expression0 = new U.BinaryExpressionImpl(token);
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (expression != null)
            expression._ast$_parent = expression0;
          expression0._leftOperand = expression;
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (t5 != null)
            t5._ast$_parent = expression0;
          expression0._rightOperand = t5;
          expression = expression0;
          leftEqualityExpression = true;
        }
        return expression;
      },
      parseExpression2$0: function() {
        var keyword, expression, type, cascadeSections, section, operator, t1, t2;
        t1 = this._treeDepth;
        if (t1 > 300)
          throw H.wrapException(X._TooDeepTreeError$());
        this._treeDepth = t1 + 1;
        try {
          keyword = this._currentToken.get$keyword();
          if (J.$eq$(keyword, C.Keyword_YEV)) {
            t1 = this.parseThrowExpression$0();
            return t1;
          } else if (J.$eq$(keyword, C.Keyword_QKO)) {
            t1 = $.$get$astFactory();
            t2 = this.getAndAdvance$0();
            t1.toString;
            return new U.RethrowExpressionImpl(t2);
          }
          expression = this.parseConditionalExpression$0();
          type = this._currentToken.type;
          if (J.$eq$(type, C.TokenType_cv8)) {
            t1 = [Y.Expression];
            cascadeSections = H.setRuntimeTypeInfo([], t1);
            do {
              section = this.parseCascadeSection$0();
              if (section != null)
                J.add$1$ax(cascadeSections, section);
            } while (this._currentToken.type === C.TokenType_cv8);
            $.$get$astFactory().toString;
            t1 = U.CascadeExpressionImpl$(H.interceptedTypeCheck(expression, "$isExpression"), H.assertSubtype(cascadeSections, "$isList", t1, "$asList"));
            return t1;
          } else if (type.get$precedence() === 1) {
            operator = this.getAndAdvance$0();
            this._ensureAssignable$1(expression);
            t1 = $.$get$astFactory();
            t2 = this.parseExpression2$0();
            t1.toString;
            t2 = U.AssignmentExpressionImpl$(H.interceptedTypeCheck(expression, "$isExpression"), H.interceptedTypeCheck(operator, "$isToken"), t2);
            return t2;
          }
          return expression;
        } finally {
          --this._treeDepth;
        }
      },
      parseExpressionList$0: function() {
        var expressions = H.setRuntimeTypeInfo([this.parseExpression2$0()], [Y.Expression]);
        for (; this._optional$1(C.TokenType_O55);)
          C.JSArray_methods.add$1(expressions, this.parseExpression2$0());
        return expressions;
      },
      parseExpressionWithoutCascade$0: function() {
        var t1, t2, expression, operator;
        if (this._currentToken.get$keyword() === C.Keyword_YEV)
          return this.parseThrowExpressionWithoutCascade$0();
        else if (this._currentToken.get$keyword() === C.Keyword_QKO) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          return new U.RethrowExpressionImpl(t2);
        }
        expression = this.parseConditionalExpression$0();
        if (this._currentToken.type.precedence === 1) {
          operator = this.getAndAdvance$0();
          this._ensureAssignable$1(expression);
          t1 = $.$get$astFactory();
          t2 = this.parseExpressionWithoutCascade$0();
          t1.toString;
          expression = U.AssignmentExpressionImpl$(expression, operator, t2);
        }
        return expression;
      },
      parseFinalConstVarOrType$2$inFunctionType: function(optional, inFunctionType) {
        var keyword, keywordToken, type, t1, next, nextKeyword;
        keyword = this._currentToken.get$keyword();
        if (keyword === C.Keyword_IU6 || keyword === C.Keyword_M8y) {
          keywordToken = this.getAndAdvance$0();
          type = this._isTypedIdentifier$1(this._currentToken) ? this.parseTypeAnnotation$1(false) : this._parseOptionalTypeNameComment$0();
        } else if (keyword === C.Keyword_Owc) {
          keywordToken = this.getAndAdvance$0();
          type = this._parseOptionalTypeNameComment$0();
          if (type != null)
            keywordToken = null;
        } else {
          if (this._isTypedIdentifier$1(this._currentToken))
            type = this.parseTypeAnnotation$1(false);
          else {
            if (inFunctionType) {
              t1 = this._currentToken;
              t1 = t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1);
            } else
              t1 = false;
            if (t1)
              type = this.parseTypeAnnotation$1(false);
            else if (!optional) {
              next = this._currentToken.next;
              nextKeyword = next.get$keyword();
              if (nextKeyword !== C.Keyword_IU6)
                if (nextKeyword !== C.Keyword_M8y)
                  if (nextKeyword !== C.Keyword_Owc)
                    if (!this._isTypedIdentifier$1(next))
                      if (inFunctionType)
                        t1 = next.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(next);
                      else
                        t1 = false;
                    else
                      t1 = true;
                  else
                    t1 = true;
                else
                  t1 = true;
              else
                t1 = true;
              if (t1) {
                t1 = [P.Object];
                t1 = H.assertSubtype(H.setRuntimeTypeInfo([this._currentToken.get$lexeme()], t1), "$isList", t1, "$asList");
                this._reportErrorForToken$3(C.ParserErrorCode_yjH, this._currentToken, t1);
                this._currentToken = this._currentToken.next;
                return this.parseFinalConstVarOrType$2$inFunctionType(false, inFunctionType);
              }
              this._reportErrorForToken$3(C.ParserErrorCode_ccN, this._currentToken, null);
              type = null;
            } else
              type = this._parseOptionalTypeNameComment$0();
          }
          keywordToken = null;
        }
        return new X.FinalConstVarOrType(keywordToken, type);
      },
      parseFinalConstVarOrType$1: function(optional) {
        return this.parseFinalConstVarOrType$2$inFunctionType(optional, false);
      },
      parseFormalParameter$2$inFunctionType: function(kind, inFunctionType) {
        var parameter, t1, type, separator, defaultValue;
        parameter = this.parseNormalFormalParameter$1$inFunctionType(inFunctionType);
        t1 = this._currentToken;
        type = t1.type;
        if (type === C.TokenType_tca) {
          if (inFunctionType)
            this._reportErrorForToken$3(C.ParserErrorCode_wz6, t1, null);
          separator = this.getAndAdvance$0();
          defaultValue = this.parseExpression2$0();
          if (kind === C.ParameterKind_REQUIRED_0_false) {
            this._reportErrorForNode$2(C.ParserErrorCode_s4B, parameter);
            kind = C.ParameterKind_POSITIONAL_1_true;
          } else if (kind === C.ParameterKind_NAMED_2_true && inFunctionType && parameter._identifier == null) {
            this._reportErrorForToken$3(C.ParserErrorCode_THA, this._currentToken, null);
            parameter._identifier = parameter._becomeParentOf$1$1(this.createSyntheticIdentifier$1$isDeclaration(true), U.SimpleIdentifierImpl);
          }
          $.$get$astFactory().toString;
          return U.DefaultFormalParameterImpl$(parameter, kind, separator, defaultValue);
        } else if (type === C.TokenType_gg4) {
          if (inFunctionType)
            this._reportErrorForToken$3(C.ParserErrorCode_wz6, t1, null);
          separator = this.getAndAdvance$0();
          defaultValue = this.parseExpression2$0();
          if (kind === C.ParameterKind_REQUIRED_0_false) {
            this._reportErrorForNode$2(C.ParserErrorCode_cI8, parameter);
            kind = C.ParameterKind_NAMED_2_true;
          } else if (kind === C.ParameterKind_POSITIONAL_1_true)
            this._reportErrorForToken$2(C.ParserErrorCode_ckK, separator);
          else if (kind === C.ParameterKind_NAMED_2_true && inFunctionType && parameter._identifier == null) {
            this._reportErrorForToken$3(C.ParserErrorCode_THA, this._currentToken, null);
            parameter._identifier = parameter._becomeParentOf$1$1(this.createSyntheticIdentifier$1$isDeclaration(true), U.SimpleIdentifierImpl);
          }
          $.$get$astFactory().toString;
          return U.DefaultFormalParameterImpl$(parameter, kind, separator, defaultValue);
        } else if (kind !== C.ParameterKind_REQUIRED_0_false) {
          if (kind === C.ParameterKind_NAMED_2_true && inFunctionType && parameter._identifier == null) {
            this._reportErrorForToken$3(C.ParserErrorCode_THA, t1, null);
            parameter._identifier = parameter._becomeParentOf$1$1(this.createSyntheticIdentifier$1$isDeclaration(true), U.SimpleIdentifierImpl);
          }
          $.$get$astFactory().toString;
          return U.DefaultFormalParameterImpl$(parameter, kind, null, null);
        }
        return parameter;
      },
      parseFormalParameterList$1$inFunctionType: function(inFunctionType) {
        var t1;
        if (this._currentToken.type === C.TokenType_5uk)
          return this._parseFormalParameterListAfterParen$2$inFunctionType(this.getAndAdvance$0(), inFunctionType);
        t1 = [P.Object];
        t1 = H.assertSubtype(H.setRuntimeTypeInfo(["("], t1), "$isList", t1, "$asList");
        this._reportErrorForToken$3(C.ParserErrorCode_HuN, this._currentToken, t1);
        t1 = new L.StringToken(C.TokenType_5uk, this._currentToken.offset, null);
        t1._setCommentParent$1(null);
        $.$get$StringUtilities_INTERNER().toString;
        t1._value = "";
        return this._parseFormalParameterListAfterParen$1(this._injectToken$1(t1));
      },
      parseFormalParameterList$0: function() {
        return this.parseFormalParameterList$1$inFunctionType(false);
      },
      parseForStatement$0: function() {
        var wasInLoop, awaitKeyword, forKeyword, leftParenthesis, variableList, initialization, commentAndMetadata, variableName, type, loopVariable, identifier, variables, variable, keyword, type0, inKeyword, iterator, rightParenthesis, body, leftSeparator, condition, rightSeparator, updaters, rightParenthesis0, body0, t1, t2, t3, t4, t5;
        wasInLoop = this._inLoop;
        this._inLoop = true;
        try {
          awaitKeyword = null;
          if (this._currentToken.get$keyword() === C.Keyword_7N7)
            awaitKeyword = this.getAndAdvance$0();
          forKeyword = this._expectKeyword$1(C.Keyword_KYb);
          leftParenthesis = this._expect$1(C.TokenType_5uk);
          variableList = null;
          initialization = null;
          if (this._currentToken.type !== C.TokenType_FmR) {
            commentAndMetadata = this.parseCommentAndMetadata$0();
            t1 = this._currentToken;
            if (t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1))
              t1 = this._currentToken.next.get$keyword() === C.Keyword_a54 || this._currentToken.next.type === C.TokenType_gg4;
            else
              t1 = false;
            if (t1) {
              variableName = this._parseSimpleIdentifierUnchecked$0();
              t1 = $.$get$astFactory();
              t2 = commentAndMetadata.get$comment();
              t3 = commentAndMetadata.get$metadata();
              t1.toString;
              t1 = [Y.VariableDeclaration];
              t4 = H.setRuntimeTypeInfo([U.VariableDeclarationImpl$(H.interceptedTypeCheck(variableName, "$isSimpleIdentifier"), null, null)], t1);
              variableList = U.VariableDeclarationListImpl$(t2, H.assertSubtype(t3, "$isList", [Y.Annotation], "$asList"), null, null, H.assertSubtype(t4, "$isList", t1, "$asList"));
            } else if (this.isInitializedVariableDeclaration$0())
              variableList = this.parseVariableDeclarationListAfterMetadata$1(commentAndMetadata);
            else
              initialization = this.parseExpression2$0();
            t1 = this._currentToken;
            type = t1.type;
            if (t1.get$keyword() === C.Keyword_a54 || J.$eq$(type, C.TokenType_gg4)) {
              if (J.$eq$(type, C.TokenType_gg4))
                this._reportErrorForToken$3(C.ParserErrorCode_cAX, this._currentToken, null);
              loopVariable = null;
              identifier = null;
              if (variableList == null)
                this._reportErrorForToken$3(C.ParserErrorCode_aR1, this._currentToken, null);
              else {
                variables = variableList.get$_variables();
                if (variables.get$_elements().length > 1) {
                  t1 = [P.Object];
                  t1 = H.assertSubtype(H.setRuntimeTypeInfo([C.JSInt_methods.toString$0(variables.get$_elements().length)], t1), "$isList", t1, "$asList");
                  this._reportErrorForToken$3(C.ParserErrorCode_cKo, this._currentToken, t1);
                }
                variable = J.$index$asx(variables, 0);
                if (variable.get$_initializer() != null)
                  this._reportErrorForToken$3(C.ParserErrorCode_23h0, this._currentToken, null);
                keyword = variableList.get$keyword();
                type0 = variableList.get$_type();
                if (keyword != null || type0 != null) {
                  t1 = $.$get$astFactory();
                  t2 = commentAndMetadata.get$comment();
                  t3 = commentAndMetadata.get$metadata();
                  t1 = t1.simpleIdentifier$2$isDeclaration(variable.get$_ast$_name().token, true);
                  loopVariable = U.DeclaredIdentifierImpl$(t2, H.assertSubtype(t3, "$isList", [Y.Annotation], "$asList"), H.interceptedTypeCheck(keyword, "$isToken"), H.interceptedTypeCheck(type0, "$isTypeAnnotation"), t1);
                } else {
                  t1 = commentAndMetadata;
                  if (t1.get$metadata() != null)
                    t1.get$metadata().length;
                  identifier = variable.get$_ast$_name();
                }
              }
              inKeyword = this.getAndAdvance$0();
              iterator = this.parseExpression2$0();
              rightParenthesis = this._expect$1(C.TokenType_coy);
              body = this.parseStatement2$0();
              if (loopVariable == null) {
                t1 = $.$get$astFactory();
                t2 = awaitKeyword;
                t3 = identifier;
                t1.toString;
                t3 = U.ForEachStatementImpl$withReference(H.interceptedTypeCheck(t2, "$isToken"), H.interceptedTypeCheck(forKeyword, "$isToken"), H.interceptedTypeCheck(leftParenthesis, "$isToken"), H.interceptedTypeCheck(t3, "$isSimpleIdentifier"), H.interceptedTypeCheck(inKeyword, "$isToken"), H.interceptedTypeCheck(iterator, "$isExpression"), H.interceptedTypeCheck(rightParenthesis, "$isToken"), H.interceptedTypeCheck(body, "$isStatement"));
                return t3;
              }
              t1 = $.$get$astFactory();
              t2 = awaitKeyword;
              t3 = loopVariable;
              t1.toString;
              t3 = U.ForEachStatementImpl$withDeclaration(H.interceptedTypeCheck(t2, "$isToken"), H.interceptedTypeCheck(forKeyword, "$isToken"), H.interceptedTypeCheck(leftParenthesis, "$isToken"), H.interceptedTypeCheck(t3, "$isDeclaredIdentifier"), H.interceptedTypeCheck(inKeyword, "$isToken"), H.interceptedTypeCheck(iterator, "$isExpression"), H.interceptedTypeCheck(rightParenthesis, "$isToken"), H.interceptedTypeCheck(body, "$isStatement"));
              return t3;
            }
          }
          if (awaitKeyword != null)
            this._reportErrorForToken$2(C.ParserErrorCode_pHE, awaitKeyword);
          leftSeparator = this._expect$1(C.TokenType_FmR);
          condition = null;
          if (this._currentToken.type !== C.TokenType_FmR)
            condition = this.parseExpression2$0();
          rightSeparator = this._expect$1(C.TokenType_FmR);
          updaters = null;
          if (this._currentToken.type !== C.TokenType_coy)
            updaters = this.parseExpressionList$0();
          rightParenthesis0 = this._expect$1(C.TokenType_coy);
          body0 = this.parseStatement2$0();
          t1 = $.$get$astFactory();
          t2 = variableList;
          t3 = initialization;
          t4 = condition;
          t5 = updaters;
          t1.toString;
          t5 = U.ForStatementImpl$(H.interceptedTypeCheck(forKeyword, "$isToken"), H.interceptedTypeCheck(leftParenthesis, "$isToken"), H.interceptedTypeCheck(t2, "$isVariableDeclarationList"), H.interceptedTypeCheck(t3, "$isExpression"), H.interceptedTypeCheck(leftSeparator, "$isToken"), H.interceptedTypeCheck(t4, "$isExpression"), H.interceptedTypeCheck(rightSeparator, "$isToken"), H.assertSubtype(t5, "$isList", [Y.Expression], "$asList"), H.interceptedTypeCheck(rightParenthesis0, "$isToken"), H.interceptedTypeCheck(body0, "$isStatement"));
          return t5;
        } finally {
          this._inLoop = wasInLoop;
        }
      },
      parseFunctionBody$3: function(mayBeEmpty, emptyErrorCode, inExpression) {
        var wasInAsync, wasInGenerator, wasInLoop, wasInSwitch, type, keyword, star, foundAsync, foundSync, lexeme, functionDefinition, expression, semicolon, nativeToken, stringLiteral, t1, t2, t3, t4;
        wasInAsync = this._inAsync;
        wasInGenerator = this._inGenerator;
        wasInLoop = this._inLoop;
        wasInSwitch = this._inSwitch;
        this._inAsync = false;
        this._inGenerator = false;
        this._inLoop = false;
        this._inSwitch = false;
        try {
          type = this._currentToken.type;
          if (J.$eq$(type, C.TokenType_FmR)) {
            if (!mayBeEmpty)
              this._reportErrorForToken$3(emptyErrorCode, this._currentToken, null);
            t1 = $.$get$astFactory();
            t2 = this.getAndAdvance$0();
            t1.toString;
            return new U.EmptyFunctionBodyImpl(t2);
          }
          keyword = null;
          star = null;
          foundAsync = false;
          foundSync = false;
          if (J.get$kind$x(type) === 107) {
            lexeme = this._currentToken.get$lexeme();
            if (J.$eq$(lexeme, $.$get$Parser_ASYNC())) {
              foundAsync = true;
              keyword = this.getAndAdvance$0();
              if (this._currentToken.type === C.TokenType_CNR) {
                star = this.getAndAdvance$0();
                this._inGenerator = true;
              }
              type = this._currentToken.type;
              this._inAsync = true;
            } else if (J.$eq$(lexeme, $.$get$Parser_SYNC())) {
              foundSync = true;
              keyword = this.getAndAdvance$0();
              if (this._currentToken.type === C.TokenType_CNR) {
                star = this.getAndAdvance$0();
                this._inGenerator = true;
              }
              type = this._currentToken.type;
            }
          }
          if (J.$eq$(type, C.TokenType_ECn)) {
            if (keyword != null)
              if (!foundAsync) {
                this._reportErrorForToken$2(C.ParserErrorCode_aTW, keyword);
                keyword = null;
              } else if (star != null)
                this._reportErrorForToken$2(C.ParserErrorCode_EF7, star);
            functionDefinition = this.getAndAdvance$0();
            if (this._currentToken.get$keyword() === C.Keyword_66S) {
              t1 = this._currentToken;
              this._reportErrorForToken$3(C.ParserErrorCode_yjH, t1, H.setRuntimeTypeInfo([t1.get$lexeme()], [P.Object]));
              this._currentToken = this._currentToken.next;
            }
            expression = this.parseExpression2$0();
            semicolon = null;
            if (!inExpression)
              semicolon = this._expect$1(C.TokenType_FmR);
            t1 = $.$get$astFactory();
            t2 = keyword;
            t3 = semicolon;
            t1.toString;
            H.interceptedTypeCheck(t2, "$isToken");
            t1 = H.interceptedTypeCheck(functionDefinition, "$isToken");
            t4 = H.interceptedTypeCheck(expression, "$isExpression");
            t3 = new U.ExpressionFunctionBodyImpl(t2, t1, H.interceptedTypeCheck(t3, "$isToken"));
            t3._expression = t3._becomeParentOf$1$1(t4, U.ExpressionImpl);
            return t3;
          } else if (J.$eq$(type, C.TokenType_cOk)) {
            if (keyword != null)
              if (foundSync && star == null)
                this._reportErrorForToken$2(C.ParserErrorCode_Gla, keyword);
            t1 = $.$get$astFactory();
            t2 = keyword;
            t3 = star;
            t4 = this.parseBlock$0();
            t1.toString;
            t3 = new U.BlockFunctionBodyImpl(H.interceptedTypeCheck(t2, "$isToken"), H.interceptedTypeCheck(t3, "$isToken"));
            t3._ast$_block = t3._becomeParentOf$1$1(t4, U.BlockImpl);
            return t3;
          } else if (this._currentToken.get$keyword() === C.Keyword_2No) {
            nativeToken = this.getAndAdvance$0();
            stringLiteral = null;
            if (this._currentToken.type === C.TokenType_86y)
              stringLiteral = this._parseStringLiteralUnchecked$0();
            t1 = $.$get$astFactory();
            t2 = stringLiteral;
            t3 = this._expect$1(C.TokenType_FmR);
            t1.toString;
            t3 = new U.NativeFunctionBodyImpl(H.interceptedTypeCheck(nativeToken, "$isToken"), t3);
            t3._stringLiteral = t3._becomeParentOf$1$1(H.interceptedTypeCheck(t2, "$isStringLiteral"), U.StringLiteralImpl);
            return t3;
          } else {
            this._reportErrorForToken$3(emptyErrorCode, this._currentToken, null);
            t1 = $.$get$astFactory();
            t2 = new L.StringToken(C.TokenType_FmR, this._currentToken.offset, null);
            t2._setCommentParent$1(null);
            $.$get$StringUtilities_INTERNER().toString;
            t2._value = "";
            t2 = this._injectToken$1(t2);
            t1.toString;
            return new U.EmptyFunctionBodyImpl(t2);
          }
        } finally {
          this._inAsync = wasInAsync;
          this._inGenerator = wasInGenerator;
          this._inLoop = wasInLoop;
          this._inSwitch = wasInSwitch;
        }
      },
      parseFunctionDeclaration$3: function(commentAndMetadata, externalKeyword, returnType) {
        var keyword, keywordToken, isGetter, $name, typeParameters, t1, parameters, t2, t3, body;
        keyword = this._currentToken.get$keyword();
        if (keyword === C.Keyword_cXJ) {
          keywordToken = this.getAndAdvance$0();
          isGetter = true;
        } else {
          keywordToken = keyword === C.Keyword_rb5 ? this.getAndAdvance$0() : null;
          isGetter = false;
        }
        if (keywordToken != null && this._currentToken.type === C.TokenType_5uk) {
          $name = $.$get$astFactory().simpleIdentifier$2$isDeclaration(keywordToken, true);
          keywordToken = null;
          isGetter = false;
        } else
          $name = this.parseSimpleIdentifier$1$isDeclaration(true);
        typeParameters = this._parseGenericMethodTypeParameters$0();
        if (!isGetter) {
          t1 = this._currentToken;
          if (t1.type === C.TokenType_5uk) {
            parameters = this._parseFormalParameterListAfterParen$2$inFunctionType(this.getAndAdvance$0(), false);
            this._validateFormalParameterList$1(parameters);
          } else {
            this._reportErrorForToken$3(C.ParserErrorCode_qRH, t1, null);
            t1 = $.$get$astFactory();
            t2 = new L.StringToken(C.TokenType_5uk, this._currentToken.offset, null);
            t2._setCommentParent$1(null);
            $.$get$StringUtilities_INTERNER().toString;
            t2._value = "";
            t2 = this._injectToken$1(t2);
            t3 = new L.StringToken(C.TokenType_coy, this._currentToken.offset, null);
            t3._setCommentParent$1(null);
            $.$get$StringUtilities_INTERNER().toString;
            t3._value = "";
            t3 = this._injectToken$1(t3);
            t1.toString;
            parameters = U.FormalParameterListImpl$(t2, null, null, null, t3);
          }
        } else {
          t1 = this._currentToken;
          if (t1.type === C.TokenType_5uk) {
            this._reportErrorForToken$3(C.ParserErrorCode_ahC, t1, null);
            this._parseFormalParameterListAfterParen$2$inFunctionType(this.getAndAdvance$0(), false);
          }
          parameters = null;
        }
        if (externalKeyword == null)
          body = this.parseFunctionBody$3(false, C.ParserErrorCode_mlp, false);
        else {
          t1 = $.$get$astFactory();
          t2 = this._expect$1(C.TokenType_FmR);
          t1.toString;
          body = new U.EmptyFunctionBodyImpl(t2);
        }
        $.$get$astFactory().toString;
        t1 = U.FunctionExpressionImpl$(typeParameters, parameters, body);
        return U.FunctionDeclarationImpl$(commentAndMetadata.comment, H.assertSubtype(commentAndMetadata.metadata, "$isList", [Y.Annotation], "$asList"), externalKeyword, returnType, keywordToken, $name, t1);
      },
      parseFunctionExpression$0: function() {
        var typeParameters, parameters, body;
        typeParameters = this._parseGenericMethodTypeParameters$0();
        parameters = this.parseFormalParameterList$0();
        this._validateFormalParameterList$1(parameters);
        body = this.parseFunctionBody$3(false, C.ParserErrorCode_mlp, true);
        $.$get$astFactory().toString;
        return U.FunctionExpressionImpl$(typeParameters, parameters, body);
      },
      parseGenericFunctionTypeAfterReturnType$1: function(returnType) {
        var functionKeyword, t1, t2, typeParameters, parameters;
        if (this._currentToken.get$keyword() === C.Keyword_Lwp)
          functionKeyword = this.getAndAdvance$0();
        else {
          t1 = this._currentToken;
          t1 = t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1);
          t2 = this._currentToken;
          if (t1)
            this._reportErrorForToken$3(C.ParserErrorCode_Uqr, t2, null);
          else
            this._reportErrorForToken$3(C.ParserErrorCode_wMy, t2, null);
          functionKeyword = null;
        }
        typeParameters = this._currentToken.type === C.TokenType_Drw ? this.parseTypeParameterList$0() : null;
        parameters = this.parseFormalParameterList$1$inFunctionType(true);
        $.$get$astFactory().toString;
        return U.GenericFunctionTypeImpl$(returnType, functionKeyword, typeParameters, parameters);
      },
      parseGenericTypeAlias$2: function(commentAndMetadata, keyword) {
        var $name, typeParameters, equals, functionType, semicolon;
        $name = this._parseSimpleIdentifierUnchecked$1$isDeclaration(true);
        typeParameters = this._currentToken.type === C.TokenType_Drw ? this.parseTypeParameterList$0() : null;
        equals = this._expect$1(C.TokenType_tca);
        functionType = this.parseTypeAnnotation$1(false);
        semicolon = this._expect$1(C.TokenType_FmR);
        if (!functionType.$isGenericFunctionType) {
          this._reportErrorForToken$2(C.ParserErrorCode_4YB, semicolon);
          $.$get$astFactory().toString;
          return U.GenericTypeAliasImpl$(commentAndMetadata.comment, H.assertSubtype(commentAndMetadata.metadata, "$isList", [Y.Annotation], "$asList"), keyword, $name, typeParameters, equals, null, semicolon);
        }
        $.$get$astFactory().toString;
        return U.GenericTypeAliasImpl$(commentAndMetadata.comment, H.assertSubtype(commentAndMetadata.metadata, "$isList", [Y.Annotation], "$asList"), keyword, $name, typeParameters, equals, functionType, semicolon);
      },
      parseGetter$4: function(commentAndMetadata, externalKeyword, staticKeyword, returnType) {
        var propertyKeyword, $name, t1, body;
        propertyKeyword = this.getAndAdvance$0();
        $name = this.parseSimpleIdentifier$1$isDeclaration(true);
        t1 = this._currentToken;
        if (t1.type === C.TokenType_5uk && t1.next.type === C.TokenType_coy) {
          this._reportErrorForToken$3(C.ParserErrorCode_ahC, t1, null);
          t1 = this._currentToken.next;
          this._currentToken = t1;
          this._currentToken = t1.next;
        }
        t1 = externalKeyword == null;
        body = this.parseFunctionBody$3(!t1 || staticKeyword == null, C.ParserErrorCode_sJO, false);
        if (!t1 && !J.getInterceptor(body).$isEmptyFunctionBody)
          this._reportErrorForToken$3(C.ParserErrorCode_stQ, this._currentToken, null);
        return $.$get$astFactory().methodDeclaration$11(commentAndMetadata.comment, commentAndMetadata.metadata, externalKeyword, staticKeyword, returnType, propertyKeyword, null, $name, null, null, body);
      },
      parseIdentifierList$0: function() {
        var identifiers = H.setRuntimeTypeInfo([this.parseSimpleIdentifier$0()], [Y.SimpleIdentifier]);
        for (; this._optional$1(C.TokenType_O55);)
          C.JSArray_methods.add$1(identifiers, this.parseSimpleIdentifier$0());
        return identifiers;
      },
      parseIfNullExpression$0: function() {
        var expression, t1, t2, t3, t4, t5, expression0;
        expression = this.parseLogicalOrExpression$0();
        for (t1 = U.ExpressionImpl, t2 = U.AstNodeImpl; t3 = this._currentToken, t3.type === C.TokenType_lOW; expression = expression0) {
          t4 = $.$get$astFactory();
          this._currentToken = t3.next;
          t5 = this.parseLogicalOrExpression$0();
          t4.toString;
          expression0 = new U.BinaryExpressionImpl(t3);
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (expression != null)
            expression._ast$_parent = expression0;
          expression0._leftOperand = expression;
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (t5 != null)
            t5._ast$_parent = expression0;
          expression0._rightOperand = t5;
        }
        return expression;
      },
      parseImplementsClause$0: function() {
        var keyword, t1, t2, interfaces, typeName, t3;
        keyword = this.getAndAdvance$0();
        t1 = Y.TypeName;
        t2 = [t1];
        interfaces = H.setRuntimeTypeInfo([], t2);
        do {
          typeName = this.parseTypeName$1(false);
          this._mustNotBeNullable$2(typeName, C.ParserErrorCode_b7P);
          C.JSArray_methods.add$1(interfaces, typeName);
        } while (this._optional$1(C.TokenType_O55));
        $.$get$astFactory().toString;
        H.assertSubtype(interfaces, "$isList", t2, "$asList");
        t3 = new U.ImplementsClauseImpl(keyword);
        t1 = new U.NodeListImpl(t3, H.setRuntimeTypeInfo([], t2), [t1]);
        t1.addAll$1(0, interfaces);
        t3._interfaces = t1;
        return t3;
      },
      parseInitializedIdentifierList$5: function(commentAndMetadata, staticKeyword, covariantKeyword, keyword, type) {
        var fieldList = this.parseVariableDeclarationListAfterType$3(null, keyword, type);
        return $.$get$astFactory().fieldDeclaration2$6$comment$covariantKeyword$fieldList$metadata$semicolon$staticKeyword(commentAndMetadata.comment, covariantKeyword, fieldList, commentAndMetadata.metadata, this._expect$1(C.TokenType_FmR), staticKeyword);
      },
      parseInstanceCreationExpression$1: function(keyword) {
        var constructorName, argumentList;
        constructorName = this.parseConstructorName$0();
        argumentList = this._parseArgumentListChecked$0();
        $.$get$astFactory().toString;
        return U.InstanceCreationExpressionImpl$(keyword, constructorName, argumentList);
      },
      parseLabel$1$isDeclaration: function(isDeclaration) {
        var label, colon, t1;
        label = this._parseSimpleIdentifierUnchecked$1$isDeclaration(isDeclaration);
        colon = this.getAndAdvance$0();
        $.$get$astFactory().toString;
        t1 = new U.LabelImpl(colon);
        t1._label = t1._becomeParentOf$1$1(label, U.SimpleIdentifierImpl);
        return t1;
      },
      parseLabel$0: function() {
        return this.parseLabel$1$isDeclaration(false);
      },
      parseLibraryIdentifier$0: function() {
        var t1, t2, components, t3;
        t1 = Y.SimpleIdentifier;
        t2 = [t1];
        components = H.setRuntimeTypeInfo([], t2);
        C.JSArray_methods.add$1(components, this.parseSimpleIdentifier$0());
        for (; this._optional$1(C.TokenType_wCI);)
          C.JSArray_methods.add$1(components, this.parseSimpleIdentifier$0());
        $.$get$astFactory().toString;
        H.assertSubtype(components, "$isList", t2, "$asList");
        t3 = new U.LibraryIdentifierImpl();
        t1 = new U.NodeListImpl(t3, H.setRuntimeTypeInfo([], t2), [t1]);
        t1.addAll$1(0, components);
        t3._components = t1;
        return t3;
      },
      parseListLiteral$2: function(modifier, typeArguments) {
        var leftBracket, wasInInitializer, elements, rightBracket, t1, t2, t3, t4, t5;
        if (this._currentToken.type === C.TokenType_Qq8) {
          this._splitIndex$0();
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t3 = this.getAndAdvance$0();
          t1.toString;
          t3 = new U.ListLiteralImpl(t2, t3, modifier);
          t3._typeArguments = t3._becomeParentOf$1$1(typeArguments, U.TypeArgumentListImpl);
          t2 = Y.Expression;
          t2 = new U.NodeListImpl(t3, H.setRuntimeTypeInfo([], [t2]), [t2]);
          t2.addAll$1(0, null);
          t3._elements = t2;
          return t3;
        }
        leftBracket = this.getAndAdvance$0();
        if (this._currentToken.type === C.TokenType_zra) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          t2 = new U.ListLiteralImpl(H.interceptedTypeCheck(leftBracket, "$isToken"), t2, modifier);
          t2._typeArguments = t2._becomeParentOf$1$1(typeArguments, U.TypeArgumentListImpl);
          t1 = Y.Expression;
          t1 = new U.NodeListImpl(t2, H.setRuntimeTypeInfo([], [t1]), [t1]);
          t1.addAll$1(0, null);
          t2._elements = t1;
          return t2;
        }
        wasInInitializer = this._inInitializer;
        this._inInitializer = false;
        try {
          t1 = Y.Expression;
          t2 = [t1];
          elements = H.setRuntimeTypeInfo([this.parseExpression2$0()], t2);
          for (; this._optional$1(C.TokenType_O55);) {
            t3 = this._currentToken;
            if (t3.type === C.TokenType_zra) {
              t4 = $.$get$astFactory();
              this._currentToken = t3.next;
              t4.toString;
              t4 = H.interceptedTypeCheck(leftBracket, "$isToken");
              t5 = H.assertSubtype(elements, "$isList", t2, "$asList");
              t3 = new U.ListLiteralImpl(t4, t3, modifier);
              H.assertIsSubtype(U.TypeArgumentListImpl, U.AstNodeImpl, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (typeArguments != null)
                typeArguments._ast$_parent = t3;
              t3._typeArguments = typeArguments;
              t4 = new U.NodeListImpl(t3, H.setRuntimeTypeInfo([], t2), [t1]);
              t4.addAll$1(0, t5);
              t3._elements = t4;
              return t3;
            }
            J.add$1$ax(elements, this.parseExpression2$0());
          }
          rightBracket = this._expect$1(C.TokenType_zra);
          $.$get$astFactory().toString;
          t3 = H.interceptedTypeCheck(leftBracket, "$isToken");
          t4 = H.assertSubtype(elements, "$isList", t2, "$asList");
          t3 = new U.ListLiteralImpl(t3, H.interceptedTypeCheck(rightBracket, "$isToken"), modifier);
          t3._typeArguments = t3._becomeParentOf$1$1(typeArguments, U.TypeArgumentListImpl);
          t1 = new U.NodeListImpl(t3, H.setRuntimeTypeInfo([], t2), [t1]);
          t1.addAll$1(0, t4);
          t3._elements = t1;
          return t3;
        } finally {
          this._inInitializer = wasInInitializer;
        }
      },
      parseListOrMapLiteral$1: function(modifier) {
        var typeArguments, t1, t2, t3;
        typeArguments = this._parseOptionalTypeArguments$0();
        t1 = this._currentToken;
        t2 = t1.type;
        if (t2 === C.TokenType_cOk)
          return this.parseMapLiteral$2(modifier, typeArguments);
        else if (t2 === C.TokenType_AGi || t2 === C.TokenType_Qq8)
          return this.parseListLiteral$2(modifier, typeArguments);
        this._reportErrorForToken$3(C.ParserErrorCode_i94, t1, null);
        t1 = $.$get$astFactory();
        t2 = new L.StringToken(C.TokenType_AGi, this._currentToken.offset, null);
        t2._setCommentParent$1(null);
        $.$get$StringUtilities_INTERNER().toString;
        t2._value = "";
        t2 = this._injectToken$1(t2);
        t3 = new L.StringToken(C.TokenType_zra, this._currentToken.offset, null);
        t3._setCommentParent$1(null);
        $.$get$StringUtilities_INTERNER().toString;
        t3._value = "";
        t3 = this._injectToken$1(t3);
        t1.toString;
        t3 = new U.ListLiteralImpl(t2, t3, modifier);
        t3._typeArguments = t3._becomeParentOf$1$1(typeArguments, U.TypeArgumentListImpl);
        t2 = Y.Expression;
        t2 = new U.NodeListImpl(t3, H.setRuntimeTypeInfo([], [t2]), [t2]);
        t2.addAll$1(0, null);
        t3._elements = t2;
        return t3;
      },
      parseLogicalAndExpression$0: function() {
        var expression, t1, t2, t3, t4, t5, expression0;
        expression = this.parseEqualityExpression$0();
        for (t1 = U.ExpressionImpl, t2 = U.AstNodeImpl; t3 = this._currentToken, t3.type === C.TokenType_eOk; expression = expression0) {
          t4 = $.$get$astFactory();
          this._currentToken = t3.next;
          t5 = this.parseEqualityExpression$0();
          t4.toString;
          expression0 = new U.BinaryExpressionImpl(t3);
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (expression != null)
            expression._ast$_parent = expression0;
          expression0._leftOperand = expression;
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (t5 != null)
            t5._ast$_parent = expression0;
          expression0._rightOperand = t5;
        }
        return expression;
      },
      parseLogicalOrExpression$0: function() {
        var expression, t1, t2, t3, t4, t5, expression0;
        expression = this.parseLogicalAndExpression$0();
        for (t1 = U.ExpressionImpl, t2 = U.AstNodeImpl; t3 = this._currentToken, t3.type === C.TokenType_wDN; expression = expression0) {
          t4 = $.$get$astFactory();
          this._currentToken = t3.next;
          t5 = this.parseLogicalAndExpression$0();
          t4.toString;
          expression0 = new U.BinaryExpressionImpl(t3);
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (expression != null)
            expression._ast$_parent = expression0;
          expression0._leftOperand = expression;
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (t5 != null)
            t5._ast$_parent = expression0;
          expression0._rightOperand = t5;
        }
        return expression;
      },
      parseMapLiteral$2: function(modifier, typeArguments) {
        var leftBracket, wasInInitializer, entries, rightBracket, t1, t2, t3, t4, t5, t6, key, separator, value;
        leftBracket = this.getAndAdvance$0();
        if (this._currentToken.type === C.TokenType_2ty) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          t2 = new U.MapLiteralImpl(H.interceptedTypeCheck(leftBracket, "$isToken"), t2, modifier);
          t2._typeArguments = t2._becomeParentOf$1$1(typeArguments, U.TypeArgumentListImpl);
          t1 = Y.MapLiteralEntry;
          t1 = new U.NodeListImpl(t2, H.setRuntimeTypeInfo([], [t1]), [t1]);
          t1.addAll$1(0, null);
          t2._entries = t1;
          return t2;
        }
        wasInInitializer = this._inInitializer;
        this._inInitializer = false;
        try {
          t1 = Y.MapLiteralEntry;
          t2 = [t1];
          entries = H.setRuntimeTypeInfo([this.parseMapLiteralEntry$0()], t2);
          for (t3 = U.ExpressionImpl, t4 = U.AstNodeImpl; this._optional$1(C.TokenType_O55);) {
            t5 = this._currentToken;
            if (t5.type === C.TokenType_2ty) {
              t3 = $.$get$astFactory();
              this._currentToken = t5.next;
              t3.toString;
              t3 = H.interceptedTypeCheck(leftBracket, "$isToken");
              t6 = H.assertSubtype(entries, "$isList", t2, "$asList");
              t5 = new U.MapLiteralImpl(t3, t5, modifier);
              H.assertIsSubtype(U.TypeArgumentListImpl, t4, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (typeArguments != null)
                typeArguments._ast$_parent = t5;
              t5._typeArguments = typeArguments;
              t3 = new U.NodeListImpl(t5, H.setRuntimeTypeInfo([], t2), [t1]);
              t3.addAll$1(0, t6);
              t5._entries = t3;
              return t5;
            }
            key = this.parseExpression2$0();
            separator = this._expect$1(C.TokenType_gg4);
            value = this.parseExpression2$0();
            $.$get$astFactory().toString;
            t5 = new U.MapLiteralEntryImpl(separator);
            H.assertIsSubtype(t3, t4, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
            if (key != null)
              key._ast$_parent = t5;
            t5._key = key;
            H.assertIsSubtype(t3, t4, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
            if (value != null)
              value._ast$_parent = t5;
            t5._ast$_value = value;
            J.add$1$ax(entries, t5);
          }
          rightBracket = this._expect$1(C.TokenType_2ty);
          $.$get$astFactory().toString;
          t3 = H.interceptedTypeCheck(leftBracket, "$isToken");
          t4 = H.assertSubtype(entries, "$isList", t2, "$asList");
          t3 = new U.MapLiteralImpl(t3, H.interceptedTypeCheck(rightBracket, "$isToken"), modifier);
          t3._typeArguments = t3._becomeParentOf$1$1(typeArguments, U.TypeArgumentListImpl);
          t1 = new U.NodeListImpl(t3, H.setRuntimeTypeInfo([], t2), [t1]);
          t1.addAll$1(0, t4);
          t3._entries = t1;
          return t3;
        } finally {
          this._inInitializer = wasInInitializer;
        }
      },
      parseMapLiteralEntry$0: function() {
        var key, separator, value;
        key = this.parseExpression2$0();
        separator = this._expect$1(C.TokenType_gg4);
        value = this.parseExpression2$0();
        $.$get$astFactory().toString;
        return U.MapLiteralEntryImpl$(key, separator, value);
      },
      parseModifiers$0: function() {
        var modifiers, t1, t2, progress, t3, nextType, keyword, t4, token;
        modifiers = new X.Modifiers();
        for (t1 = this._parser$_source, t2 = [P.Object], progress = true; progress;) {
          t3 = this._currentToken;
          nextType = t3.next.type;
          if (nextType === C.TokenType_wCI || nextType === C.TokenType_Drw || nextType === C.TokenType_5uk)
            return modifiers;
          keyword = t3.get$keyword();
          if (keyword === C.Keyword_alK) {
            t3 = modifiers.abstractKeyword;
            t4 = this._currentToken;
            if (t3 != null) {
              t3 = H.assertSubtype(H.setRuntimeTypeInfo([t4.get$lexeme()], t2), "$isList", t2, "$asList");
              token = this._currentToken;
              if (token.type === C.TokenType_Emx)
                token = token.previous;
              this._reportError$1(V.AnalysisError$(t1, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_yXb, t3));
              this._currentToken = this._currentToken.next;
            } else {
              this._currentToken = t4.next;
              modifiers.abstractKeyword = t4;
            }
          } else if (keyword === C.Keyword_M8y) {
            t3 = modifiers.constKeyword;
            t4 = this._currentToken;
            if (t3 != null) {
              t3 = H.assertSubtype(H.setRuntimeTypeInfo([t4.get$lexeme()], t2), "$isList", t2, "$asList");
              token = this._currentToken;
              if (token.type === C.TokenType_Emx)
                token = token.previous;
              this._reportError$1(V.AnalysisError$(t1, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_yXb, t3));
              this._currentToken = this._currentToken.next;
            } else {
              this._currentToken = t4.next;
              modifiers.constKeyword = t4;
            }
          } else if (keyword === C.Keyword_8aB) {
            t3 = modifiers.covariantKeyword;
            t4 = this._currentToken;
            if (t3 != null) {
              t3 = H.assertSubtype(H.setRuntimeTypeInfo([t4.get$lexeme()], t2), "$isList", t2, "$asList");
              token = this._currentToken;
              if (token.type === C.TokenType_Emx)
                token = token.previous;
              this._reportError$1(V.AnalysisError$(t1, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_yXb, t3));
              this._currentToken = this._currentToken.next;
            } else {
              this._currentToken = t4.next;
              modifiers.covariantKeyword = t4;
            }
          } else if (keyword === C.Keyword_6h0) {
            t3 = modifiers.externalKeyword;
            t4 = this._currentToken;
            if (t3 != null) {
              t3 = H.assertSubtype(H.setRuntimeTypeInfo([t4.get$lexeme()], t2), "$isList", t2, "$asList");
              token = this._currentToken;
              if (token.type === C.TokenType_Emx)
                token = token.previous;
              this._reportError$1(V.AnalysisError$(t1, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_yXb, t3));
              this._currentToken = this._currentToken.next;
            } else {
              this._currentToken = t4.next;
              modifiers.externalKeyword = t4;
            }
          } else if (keyword === C.Keyword_C1B) {
            t3 = modifiers.factoryKeyword;
            t4 = this._currentToken;
            if (t3 != null) {
              t3 = H.assertSubtype(H.setRuntimeTypeInfo([t4.get$lexeme()], t2), "$isList", t2, "$asList");
              token = this._currentToken;
              if (token.type === C.TokenType_Emx)
                token = token.previous;
              this._reportError$1(V.AnalysisError$(t1, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_yXb, t3));
              this._currentToken = this._currentToken.next;
            } else {
              this._currentToken = t4.next;
              modifiers.factoryKeyword = t4;
            }
          } else if (keyword === C.Keyword_IU6) {
            t3 = modifiers.finalKeyword;
            t4 = this._currentToken;
            if (t3 != null) {
              t3 = H.assertSubtype(H.setRuntimeTypeInfo([t4.get$lexeme()], t2), "$isList", t2, "$asList");
              token = this._currentToken;
              if (token.type === C.TokenType_Emx)
                token = token.previous;
              this._reportError$1(V.AnalysisError$(t1, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_yXb, t3));
              this._currentToken = this._currentToken.next;
            } else {
              this._currentToken = t4.next;
              modifiers.finalKeyword = t4;
            }
          } else if (keyword === C.Keyword_jvJ) {
            t3 = modifiers.staticKeyword;
            t4 = this._currentToken;
            if (t3 != null) {
              t3 = H.assertSubtype(H.setRuntimeTypeInfo([t4.get$lexeme()], t2), "$isList", t2, "$asList");
              token = this._currentToken;
              if (token.type === C.TokenType_Emx)
                token = token.previous;
              this._reportError$1(V.AnalysisError$(t1, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_yXb, t3));
              this._currentToken = this._currentToken.next;
            } else {
              this._currentToken = t4.next;
              modifiers.staticKeyword = t4;
            }
          } else if (keyword === C.Keyword_Owc) {
            t3 = modifiers.varKeyword;
            t4 = this._currentToken;
            if (t3 != null) {
              t3 = H.assertSubtype(H.setRuntimeTypeInfo([t4.get$lexeme()], t2), "$isList", t2, "$asList");
              token = this._currentToken;
              if (token.type === C.TokenType_Emx)
                token = token.previous;
              this._reportError$1(V.AnalysisError$(t1, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_yXb, t3));
              this._currentToken = this._currentToken.next;
            } else {
              this._currentToken = t4.next;
              modifiers.varKeyword = t4;
            }
          } else
            progress = false;
        }
        return modifiers;
      },
      parseMultiplicativeExpression$0: function() {
        var t1, t2, expression, t3, t4, t5, expression0;
        if (this._currentToken.get$keyword() === C.Keyword_WnT && this._currentToken.next.type.precedence === 14) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          expression = new U.SuperExpressionImpl(t2);
        } else
          expression = this.parseUnaryExpression$0();
        for (t1 = U.ExpressionImpl, t2 = U.AstNodeImpl; t3 = this._currentToken, t3.type.precedence === 14; expression = expression0) {
          t4 = $.$get$astFactory();
          this._currentToken = t3.next;
          t5 = this.parseUnaryExpression$0();
          t4.toString;
          expression0 = new U.BinaryExpressionImpl(t3);
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (expression != null)
            expression._ast$_parent = expression0;
          expression0._leftOperand = expression;
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (t5 != null)
            t5._ast$_parent = expression0;
          expression0._rightOperand = t5;
        }
        return expression;
      },
      parseNonLabeledStatement$0: function() {
        var commentAndMetadata, t1, type, afterString, t2, t3, keyword, leftParen, expression, comma, message, rightParen, semicolon, breakKeyword, label, continueKeyword, ifKeyword, leftParenthesis, condition, rightParenthesis, thenStatement, elseKeyword, elseStatement, returnType, next, afterType, yieldToken, star, awaitToken, statement, modifiers;
        commentAndMetadata = this.parseCommentAndMetadata$0();
        t1 = this._currentToken;
        type = t1.type;
        if (type === C.TokenType_cOk) {
          t1 = t1.next;
          if (t1.type === C.TokenType_86y) {
            afterString = this.skipStringLiteral$1(t1);
            if (afterString != null && afterString.type === C.TokenType_gg4) {
              t1 = $.$get$astFactory();
              t2 = this.parseExpression2$0();
              t3 = this._expect$1(C.TokenType_FmR);
              t1.toString;
              t3 = new U.ExpressionStatementImpl(t3);
              t3._expression = t3._becomeParentOf$1$1(t2, U.ExpressionImpl);
              return t3;
            }
          }
          return this.parseBlock$0();
        } else {
          if (type.kind === 107) {
            t1 = t1.get$keyword();
            t1 = !(t1.isBuiltIn || t1.isPseudo);
          } else
            t1 = false;
          if (t1) {
            keyword = this._currentToken.get$keyword();
            if (keyword === C.Keyword_a5y) {
              keyword = this.getAndAdvance$0();
              leftParen = this._expect$1(C.TokenType_5uk);
              expression = this.parseExpression2$0();
              if (this._currentToken.type === C.TokenType_O55) {
                comma = this.getAndAdvance$0();
                if (this._currentToken.type === C.TokenType_coy) {
                  comma = null;
                  message = null;
                } else {
                  message = this.parseExpression2$0();
                  if (this._currentToken.type === C.TokenType_O55)
                    this.getAndAdvance$0();
                }
              } else {
                comma = null;
                message = null;
              }
              rightParen = this._expect$1(C.TokenType_coy);
              semicolon = this._expect$1(C.TokenType_FmR);
              $.$get$astFactory().toString;
              return U.AssertStatementImpl$(keyword, leftParen, expression, comma, message, rightParen, semicolon);
            } else if (keyword === C.Keyword_g0v) {
              breakKeyword = this.getAndAdvance$0();
              t1 = this._currentToken;
              label = t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1) ? this._parseSimpleIdentifierUnchecked$0() : null;
              if (!this._inLoop && !this._inSwitch && label == null)
                this._reportErrorForToken$2(C.ParserErrorCode_6dA, breakKeyword);
              semicolon = this._expect$1(C.TokenType_FmR);
              $.$get$astFactory().toString;
              t1 = new U.BreakStatementImpl(breakKeyword, semicolon);
              t1._label = t1._becomeParentOf$1$1(label, U.SimpleIdentifierImpl);
              return t1;
            } else if (keyword === C.Keyword_yLX) {
              continueKeyword = this.getAndAdvance$0();
              if (!this._inLoop && !this._inSwitch)
                this._reportErrorForToken$2(C.ParserErrorCode_adS, continueKeyword);
              t1 = this._currentToken;
              label = t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1) ? this._parseSimpleIdentifierUnchecked$0() : null;
              if (this._inSwitch && !this._inLoop && label == null)
                this._reportErrorForToken$2(C.ParserErrorCode_27I, continueKeyword);
              semicolon = this._expect$1(C.TokenType_FmR);
              $.$get$astFactory().toString;
              t1 = new U.ContinueStatementImpl(continueKeyword, semicolon);
              t1._label = t1._becomeParentOf$1$1(label, U.SimpleIdentifierImpl);
              return t1;
            } else if (keyword === C.Keyword_8Gl)
              return this.parseDoStatement$0();
            else if (keyword === C.Keyword_KYb)
              return this.parseForStatement$0();
            else if (keyword === C.Keyword_IYE) {
              ifKeyword = this.getAndAdvance$0();
              leftParenthesis = this._expect$1(C.TokenType_5uk);
              condition = this.parseExpression2$0();
              rightParenthesis = this._expect$1(C.TokenType_coy);
              thenStatement = this.parseStatement2$0();
              if (this._currentToken.get$keyword() === C.Keyword_soA) {
                elseKeyword = this.getAndAdvance$0();
                elseStatement = this.parseStatement2$0();
              } else {
                elseKeyword = null;
                elseStatement = null;
              }
              $.$get$astFactory().toString;
              return U.IfStatementImpl$(ifKeyword, leftParenthesis, condition, rightParenthesis, thenStatement, elseKeyword, elseStatement);
            } else if (keyword === C.Keyword_QKO) {
              t1 = $.$get$astFactory();
              t2 = this.getAndAdvance$0();
              t1.toString;
              t1 = new U.ExpressionStatementImpl(this._expect$1(C.TokenType_FmR));
              t1._expression = t1._becomeParentOf$1$1(new U.RethrowExpressionImpl(t2), U.ExpressionImpl);
              return t1;
            } else if (keyword === C.Keyword_66S)
              return this.parseReturnStatement$0();
            else if (keyword === C.Keyword_S8Y)
              return this.parseSwitchStatement$0();
            else if (keyword === C.Keyword_YEV) {
              t1 = $.$get$astFactory();
              t2 = this.parseThrowExpression$0();
              t3 = this._expect$1(C.TokenType_FmR);
              t1.toString;
              t3 = new U.ExpressionStatementImpl(t3);
              t3._expression = t3._becomeParentOf$1$1(t2, U.ExpressionImpl);
              return t3;
            } else if (keyword === C.Keyword_g3a)
              return this.parseTryStatement$0();
            else if (keyword === C.Keyword_0)
              return this.parseWhileStatement$0();
            else if (keyword === C.Keyword_Owc || keyword === C.Keyword_IU6)
              return this.parseVariableDeclarationStatementAfterMetadata$1(commentAndMetadata);
            else if (keyword === C.Keyword_FmR) {
              returnType = this._atGenericFunctionTypeAfterReturnType$1(this._currentToken.next) ? this.parseTypeAnnotation$1(false) : U.TypeNameImpl$($.$get$astFactory().simpleIdentifier$1(this.getAndAdvance$0()), null, null);
              t1 = this._currentToken;
              next = t1.next;
              if ((t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1)) && next.matchesAny$1(C.List_2nU))
                return this._parseFunctionDeclarationStatementAfterReturnType$2(commentAndMetadata, returnType);
              else {
                t1 = this._currentToken;
                if ((t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1)) && next.matchesAny$1(C.List_KHg))
                  return this._parseVariableDeclarationStatementAfterType$3(commentAndMetadata, null, returnType);
                else {
                  t1 = this._currentToken;
                  if (t1.type === C.TokenType_2ty)
                    return this._parseVariableDeclarationStatementAfterType$3(commentAndMetadata, null, returnType);
                  this._reportErrorForToken$3(C.ParserErrorCode_dU7, t1, null);
                  t1 = $.$get$astFactory();
                  t2 = new L.StringToken(C.TokenType_FmR, this._currentToken.offset, null);
                  t2._setCommentParent$1(null);
                  $.$get$StringUtilities_INTERNER().toString;
                  t2._value = "";
                  t2 = this._injectToken$1(t2);
                  t1.toString;
                  return new U.EmptyStatementImpl(t2);
                }
              }
            } else if (keyword === C.Keyword_M8y) {
              next = this._currentToken.next;
              if (next.matchesAny$1(C.List_vMb)) {
                t1 = $.$get$astFactory();
                t2 = this.parseExpression2$0();
                t3 = this._expect$1(C.TokenType_FmR);
                t1.toString;
                t3 = new U.ExpressionStatementImpl(t3);
                t3._expression = t3._becomeParentOf$1$1(t2, U.ExpressionImpl);
                return t3;
              } else if (next.type === C.TokenType_GbN) {
                afterType = this.skipTypeName$1(next);
                if (afterType != null) {
                  t1 = afterType.type;
                  if (t1 !== C.TokenType_5uk)
                    if (t1 === C.TokenType_wCI) {
                      t1 = afterType.next;
                      t1 = t1.type === C.TokenType_GbN && t1.next.type === C.TokenType_5uk;
                    } else
                      t1 = false;
                  else
                    t1 = true;
                  if (t1) {
                    t1 = $.$get$astFactory();
                    t2 = this.parseExpression2$0();
                    t3 = this._expect$1(C.TokenType_FmR);
                    t1.toString;
                    t3 = new U.ExpressionStatementImpl(t3);
                    t3._expression = t3._becomeParentOf$1$1(t2, U.ExpressionImpl);
                    return t3;
                  }
                }
              }
              return this.parseVariableDeclarationStatementAfterMetadata$1(commentAndMetadata);
            } else if (keyword === C.Keyword_cw1 || keyword === C.Keyword_aJC || keyword === C.Keyword_MTU || keyword === C.Keyword_Apa || keyword === C.Keyword_WnT || keyword === C.Keyword_ssT) {
              t1 = $.$get$astFactory();
              t2 = this.parseExpression2$0();
              t3 = this._expect$1(C.TokenType_FmR);
              t1.toString;
              t3 = new U.ExpressionStatementImpl(t3);
              t3._expression = t3._becomeParentOf$1$1(t2, U.ExpressionImpl);
              return t3;
            } else {
              this._reportErrorForToken$3(C.ParserErrorCode_dU7, this._currentToken, null);
              t1 = $.$get$astFactory();
              t2 = new L.StringToken(C.TokenType_FmR, this._currentToken.offset, null);
              t2._setCommentParent$1(null);
              $.$get$StringUtilities_INTERNER().toString;
              t2._value = "";
              t2 = this._injectToken$1(t2);
              t1.toString;
              return new U.EmptyStatementImpl(t2);
            }
          } else if (this._atGenericFunctionTypeAfterReturnType$1(this._currentToken)) {
            returnType = this.parseTypeAnnotation$1(false);
            t1 = this._currentToken;
            next = t1.next;
            if ((t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1)) && next.matchesAny$1(C.List_2nU))
              return this._parseFunctionDeclarationStatementAfterReturnType$2(commentAndMetadata, returnType);
            else {
              t1 = this._currentToken;
              if ((t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1)) && next.matchesAny$1(C.List_KHg))
                return this._parseVariableDeclarationStatementAfterType$3(commentAndMetadata, null, returnType);
              else {
                t1 = this._currentToken;
                if (t1.type === C.TokenType_2ty)
                  return this._parseVariableDeclarationStatementAfterType$3(commentAndMetadata, null, returnType);
                this._reportErrorForToken$3(C.ParserErrorCode_dU7, t1, null);
                t1 = $.$get$astFactory();
                t2 = new L.StringToken(C.TokenType_FmR, this._currentToken.offset, null);
                t2._setCommentParent$1(null);
                $.$get$StringUtilities_INTERNER().toString;
                t2._value = "";
                t2 = this._injectToken$1(t2);
                t1.toString;
                return new U.EmptyStatementImpl(t2);
              }
            }
          } else if (this._inGenerator && this._currentToken.get$keyword() === C.Keyword_USZ) {
            yieldToken = this.getAndAdvance$0();
            star = this._currentToken.type === C.TokenType_CNR ? this.getAndAdvance$0() : null;
            expression = this.parseExpression2$0();
            semicolon = this._expect$1(C.TokenType_FmR);
            $.$get$astFactory().toString;
            t1 = new U.YieldStatementImpl(yieldToken, star, semicolon);
            t1._expression = t1._becomeParentOf$1$1(expression, U.ExpressionImpl);
            return t1;
          } else if (this._inAsync && this._currentToken.get$keyword() === C.Keyword_7N7) {
            if (this._currentToken.next.get$keyword() === C.Keyword_KYb)
              return this.parseForStatement$0();
            t1 = $.$get$astFactory();
            t2 = this.parseExpression2$0();
            t3 = this._expect$1(C.TokenType_FmR);
            t1.toString;
            t3 = new U.ExpressionStatementImpl(t3);
            t3._expression = t3._becomeParentOf$1$1(t2, U.ExpressionImpl);
            return t3;
          } else if (this._currentToken.get$keyword() === C.Keyword_7N7 && this._currentToken.next.get$keyword() === C.Keyword_KYb) {
            awaitToken = this._currentToken;
            statement = this.parseForStatement$0();
            if (!J.getInterceptor(statement).$isForStatement)
              this._reportErrorForToken$2(C.CompileTimeErrorCode_LlQ, awaitToken);
            return statement;
          } else if (type === C.TokenType_FmR) {
            t1 = $.$get$astFactory();
            t2 = this.getAndAdvance$0();
            t1.toString;
            return new U.EmptyStatementImpl(t2);
          } else if (this.isInitializedVariableDeclaration$0())
            return this.parseVariableDeclarationStatementAfterMetadata$1(commentAndMetadata);
          else if (this.isFunctionDeclaration$0()) {
            modifiers = this.parseModifiers$0();
            if (modifiers.abstractKeyword != null || modifiers.constKeyword != null || modifiers.externalKeyword != null || modifiers.factoryKeyword != null || modifiers.finalKeyword != null || modifiers.staticKeyword != null || modifiers.varKeyword != null)
              this._reportErrorForToken$3(C.ParserErrorCode_6ez, this._currentToken, null);
            return this._parseFunctionDeclarationStatementAfterReturnType$2(this.parseCommentAndMetadata$0(), this._parseOptionalReturnType$0());
          } else if (type === C.TokenType_2ty) {
            this._reportErrorForToken$3(C.ParserErrorCode_dU7, this._currentToken, null);
            t1 = $.$get$astFactory();
            t2 = new L.StringToken(C.TokenType_FmR, this._currentToken.offset, null);
            t2._setCommentParent$1(null);
            $.$get$StringUtilities_INTERNER().toString;
            t2._value = "";
            t2 = this._injectToken$1(t2);
            t1.toString;
            return new U.EmptyStatementImpl(t2);
          } else {
            t1 = $.$get$astFactory();
            t2 = this.parseExpression2$0();
            t3 = this._expect$1(C.TokenType_FmR);
            t1.toString;
            t3 = new U.ExpressionStatementImpl(t3);
            t3._expression = t3._becomeParentOf$1$1(t2, U.ExpressionImpl);
            return t3;
          }
        }
      },
      parseNormalFormalParameter$1$inFunctionType: function(inFunctionType) {
        var commentAndMetadata, next, covariantKeyword, holder, thisKeyword, period, t1, identifier, typeParameters, parameters, type;
        commentAndMetadata = this.parseCommentAndMetadata$0();
        if (this._currentToken.get$keyword() === C.Keyword_8aB) {
          next = this._currentToken.next;
          covariantKeyword = next.get$keyword() === C.Keyword_IU6 || next.get$keyword() === C.Keyword_M8y || next.get$keyword() === C.Keyword_Owc || next.get$keyword() === C.Keyword_ssT || next.get$keyword() === C.Keyword_FmR || next.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(next) ? this.getAndAdvance$0() : null;
        } else
          covariantKeyword = null;
        holder = this.parseFinalConstVarOrType$2$inFunctionType(!inFunctionType, inFunctionType);
        if (this._currentToken.get$keyword() === C.Keyword_ssT) {
          thisKeyword = this.getAndAdvance$0();
          period = this._expect$1(C.TokenType_wCI);
        } else {
          thisKeyword = null;
          period = null;
        }
        t1 = this._currentToken;
        if (!(t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1)) && inFunctionType)
          return $.$get$astFactory().simpleFormalParameter2$6$comment$covariantKeyword$identifier$keyword$metadata$type(commentAndMetadata.comment, covariantKeyword, null, holder.keyword, commentAndMetadata.metadata, holder.type);
        identifier = this.parseSimpleIdentifier$0();
        typeParameters = this._parseGenericMethodTypeParameters$0();
        if (this._currentToken.type === C.TokenType_5uk) {
          parameters = this._parseFormalParameterListAfterParen$2$inFunctionType(this.getAndAdvance$0(), false);
          if (thisKeyword == null) {
            t1 = holder.keyword;
            if (t1 != null)
              this._reportErrorForToken$2(C.ParserErrorCode_Upr, t1);
            t1 = $.$get$astFactory();
            return t1.functionTypedFormalParameter2$8$comment$covariantKeyword$identifier$metadata$parameters$question$returnType$typeParameters(commentAndMetadata.comment, covariantKeyword, t1.simpleIdentifier$2$isDeclaration(identifier.token, true), commentAndMetadata.metadata, parameters, null, holder.type, typeParameters);
          } else
            return $.$get$astFactory().fieldFormalParameter2$10$comment$covariantKeyword$identifier$keyword$metadata$parameters$period$thisKeyword$type$typeParameters(commentAndMetadata.comment, covariantKeyword, identifier, holder.keyword, commentAndMetadata.metadata, parameters, period, thisKeyword, holder.type, typeParameters);
        }
        type = holder.type;
        if (type != null) {
          t1 = holder.keyword;
          t1 = t1 != null && t1.get$keyword() === C.Keyword_Owc;
        } else
          t1 = false;
        if (t1)
          this._reportErrorForToken$2(C.ParserErrorCode_i9o, holder.keyword);
        if (thisKeyword != null)
          return $.$get$astFactory().fieldFormalParameter2$8$comment$covariantKeyword$identifier$keyword$metadata$period$thisKeyword$type(commentAndMetadata.comment, covariantKeyword, identifier, holder.keyword, commentAndMetadata.metadata, period, thisKeyword, type);
        t1 = $.$get$astFactory();
        return t1.simpleFormalParameter2$6$comment$covariantKeyword$identifier$keyword$metadata$type(commentAndMetadata.comment, covariantKeyword, t1.simpleIdentifier$2$isDeclaration(identifier.token, true), holder.keyword, commentAndMetadata.metadata, type);
      },
      parseOperator$3: function(commentAndMetadata, externalKeyword, returnType) {
        var operatorKeyword, t1;
        if (this._currentToken.get$keyword() === C.Keyword_IEU)
          operatorKeyword = this.getAndAdvance$0();
        else {
          this._reportErrorForToken$2(C.ParserErrorCode_7xV, this._currentToken);
          t1 = new L.SyntheticKeywordToken(C.Keyword_IEU, C.Keyword_IEU, this._currentToken.offset, null);
          t1._setCommentParent$1(null);
          operatorKeyword = this._injectToken$1(t1);
        }
        return this._parseOperatorAfterKeyword$4(commentAndMetadata, externalKeyword, returnType, operatorKeyword);
      },
      parsePostfixExpression$0: function() {
        var operand, type, t1, typeArguments, argumentList, t2, t3, t4, t5, operand0, period, $name, operator;
        operand = this.parseAssignableExpression$1(true);
        type = this._currentToken.type;
        if (type === C.TokenType_AGi || type === C.TokenType_wCI || type === C.TokenType_ifb || type === C.TokenType_5uk || type === C.TokenType_Drw || type === C.TokenType_Qq8) {
          t1 = U.ExpressionImpl;
          do {
            if (this._isLikelyArgumentList$0()) {
              typeArguments = this._parseOptionalTypeArguments$0();
              argumentList = this.parseArgumentList$0();
              if (!!J.getInterceptor(operand).$isPropertyAccess) {
                t2 = $.$get$astFactory();
                t3 = operand._ast$_target;
                t4 = operand.operator;
                t5 = operand._propertyName;
                t2.toString;
                operand = U.MethodInvocationImpl$(t3, t4, t5, typeArguments, argumentList);
              } else {
                $.$get$astFactory().toString;
                operand0 = new U.FunctionExpressionInvocationImpl();
                operand0.InvocationExpressionImpl$2(typeArguments, argumentList);
                operand0._function = operand0._becomeParentOf$1$1(operand, t1);
                operand = operand0;
              }
            } else {
              t2 = !!J.getInterceptor(operand).$isIdentifier && this._isLikelyNamedInstanceCreation$0();
              if (t2) {
                typeArguments = this._parseOptionalTypeArguments$0();
                period = this._expect$1(C.TokenType_wCI);
                $name = this.parseSimpleIdentifier$0();
                argumentList = this.parseArgumentList$0();
                t2 = $.$get$astFactory();
                H.interceptedTypeCheck(operand, "$isIdentifier");
                t2.toString;
                operand = U.InstanceCreationExpressionImpl$(null, U.ConstructorNameImpl$(U.TypeNameImpl$(operand, typeArguments, null), period, $name), argumentList);
              } else
                operand = this.parseAssignableSelector$2(operand, true);
            }
            type = this._currentToken.type;
          } while (type === C.TokenType_AGi || type === C.TokenType_wCI || type === C.TokenType_ifb || type === C.TokenType_5uk || type === C.TokenType_Qq8);
          return operand;
        }
        type.toString;
        if (!(type === C.TokenType_GNi || type === C.TokenType_jTn))
          return operand;
        this._ensureAssignable$1(operand);
        operator = this.getAndAdvance$0();
        $.$get$astFactory().toString;
        t1 = new U.PostfixExpressionImpl(operator);
        t1._operand = t1._becomeParentOf$1$1(operand, U.ExpressionImpl);
        return t1;
      },
      parsePrimaryExpression$0: function() {
        var token, value, token0, value0, token1, value1, leftParenthesis, wasInInitializer, expression, rightParenthesis, t1, type, exception, t2, keyword;
        t1 = this._currentToken;
        if (t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1))
          return this._parsePrefixedIdentifierAfterIdentifier$1(this._parseSimpleIdentifierUnchecked$0());
        t1 = this._currentToken;
        type = t1.type;
        if (type === C.TokenType_86y)
          return this.parseStringLiteral$0();
        else if (type === C.TokenType_Vyt) {
          token = this.getAndAdvance$0();
          value = null;
          try {
            value = P.int_parse(token.get$lexeme(), null, null);
          } catch (exception) {
            if (!(H.unwrapException(exception) instanceof P.FormatException))
              throw exception;
          }
          t1 = $.$get$astFactory();
          t2 = value;
          t1.toString;
          return new U.IntegerLiteralImpl(H.interceptedTypeCheck(token, "$isToken"), H.intTypeCheck(t2));
        }
        keyword = t1.get$keyword();
        if (keyword === C.Keyword_Apa) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          return new U.NullLiteralImpl(t2);
        } else if (keyword === C.Keyword_cw1)
          return this.parseInstanceCreationExpression$1(this.getAndAdvance$0());
        else if (keyword === C.Keyword_ssT) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          return new U.ThisExpressionImpl(t2);
        } else if (keyword === C.Keyword_WnT) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          return this.parseAssignableSelector$3$allowConditional(new U.SuperExpressionImpl(t2), false, false);
        } else if (keyword === C.Keyword_MTU) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          return new U.BooleanLiteralImpl(t2, false);
        } else if (keyword === C.Keyword_aJC) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          return new U.BooleanLiteralImpl(t2, true);
        }
        if (type === C.TokenType_q1z) {
          token0 = this.getAndAdvance$0();
          value0 = 0;
          try {
            value0 = P.double_parse(token0.get$lexeme(), null);
          } catch (exception) {
            if (!(H.unwrapException(exception) instanceof P.FormatException))
              throw exception;
          }
          t1 = $.$get$astFactory();
          t2 = value0;
          t1.toString;
          return new U.DoubleLiteralImpl(H.interceptedTypeCheck(token0, "$isToken"), H.doubleTypeCheck(t2));
        } else if (type === C.TokenType_pCd) {
          token1 = this.getAndAdvance$0();
          value1 = null;
          try {
            value1 = P.int_parse(token1.get$lexeme(), null, null);
          } catch (exception) {
            if (!(H.unwrapException(exception) instanceof P.FormatException))
              throw exception;
          }
          t1 = $.$get$astFactory();
          t2 = value1;
          t1.toString;
          return new U.IntegerLiteralImpl(H.interceptedTypeCheck(token1, "$isToken"), H.intTypeCheck(t2));
        } else if (keyword === C.Keyword_M8y)
          return this.parseConstExpression$0();
        else if (type === C.TokenType_5uk) {
          if (this.isFunctionExpression$1(this._currentToken))
            return this.parseFunctionExpression$0();
          leftParenthesis = this.getAndAdvance$0();
          wasInInitializer = this._inInitializer;
          this._inInitializer = false;
          try {
            expression = this.parseExpression2$0();
            rightParenthesis = this._expect$1(C.TokenType_coy);
            $.$get$astFactory().toString;
            t1 = H.interceptedTypeCheck(leftParenthesis, "$isToken");
            t2 = H.interceptedTypeCheck(expression, "$isExpression");
            t1 = new U.ParenthesizedExpressionImpl(t1, H.interceptedTypeCheck(rightParenthesis, "$isToken"));
            t1._expression = t1._becomeParentOf$1$1(t2, U.ExpressionImpl);
            return t1;
          } finally {
            this._inInitializer = wasInInitializer;
          }
        } else if (type === C.TokenType_Drw || this._injectGenericComment$2(C.TokenType_Y2Y, 2)) {
          if (this.isFunctionExpression$1(this._currentToken))
            return this.parseFunctionExpression$0();
          return this.parseListOrMapLiteral$1(null);
        } else if (type === C.TokenType_cOk)
          return this.parseMapLiteral$2(null, null);
        else if (type === C.TokenType_AGi || type === C.TokenType_Qq8)
          return this.parseListLiteral$2(null, null);
        else if (type === C.TokenType_V43 && this._currentToken.next.type === C.TokenType_GbN) {
          t1 = [P.Object];
          t1 = H.assertSubtype(H.setRuntimeTypeInfo([this._currentToken.get$lexeme()], t1), "$isList", t1, "$asList");
          this._reportErrorForToken$3(C.ParserErrorCode_yjH, this._currentToken, t1);
          this._currentToken = this._currentToken.next;
          return this.parsePrimaryExpression$0();
        } else if (keyword === C.Keyword_FmR) {
          t1 = [P.Object];
          t1 = H.assertSubtype(H.setRuntimeTypeInfo([this._currentToken.get$lexeme()], t1), "$isList", t1, "$asList");
          this._reportErrorForToken$3(C.ParserErrorCode_yjH, this._currentToken, t1);
          this._currentToken = this._currentToken.next;
          return this.parsePrimaryExpression$0();
        } else if (type === C.TokenType_P5Z)
          return this.parseSymbolLiteral$0();
        else {
          this._reportErrorForToken$3(C.ParserErrorCode_U06, this._currentToken, null);
          return this.createSyntheticIdentifier$0();
        }
      },
      parseRedirectingConstructorInvocation$1: function(hasPeriod) {
        var keyword, period, t1, constructorName, argumentList;
        keyword = this.getAndAdvance$0();
        if (hasPeriod) {
          period = this.getAndAdvance$0();
          t1 = this._currentToken;
          if (t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1))
            constructorName = this._parseSimpleIdentifierUnchecked$1$isDeclaration(false);
          else {
            this._reportErrorForToken$3(C.ParserErrorCode_U06, this._currentToken, null);
            constructorName = this.createSyntheticIdentifier$1$isDeclaration(false);
            this._currentToken = this._currentToken.next;
          }
        } else {
          period = null;
          constructorName = null;
        }
        argumentList = this._parseArgumentListChecked$0();
        $.$get$astFactory().toString;
        return U.RedirectingConstructorInvocationImpl$(keyword, period, constructorName, argumentList);
      },
      parseRelationalExpression$0: function() {
        var t1, t2, expression, keyword, asOperator, isOperator, notOperator, type, operator;
        if (this._currentToken.get$keyword() === C.Keyword_WnT && this._currentToken.next.type.get$isRelationalOperator()) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          return U.BinaryExpressionImpl$(new U.SuperExpressionImpl(t2), this.getAndAdvance$0(), this.parseBitwiseOrExpression$0());
        }
        expression = this.parseBitwiseOrExpression$0();
        keyword = this._currentToken.get$keyword();
        if (keyword === C.Keyword_gRf) {
          asOperator = this.getAndAdvance$0();
          t1 = $.$get$astFactory();
          t2 = this.parseTypeNotVoid$1(true);
          t1.toString;
          return U.AsExpressionImpl$(expression, asOperator, t2);
        } else if (keyword === C.Keyword_EeX) {
          isOperator = this.getAndAdvance$0();
          notOperator = this._currentToken.type === C.TokenType_cYV ? this.getAndAdvance$0() : null;
          type = this.parseTypeNotVoid$1(true);
          $.$get$astFactory().toString;
          return U.IsExpressionImpl$(expression, isOperator, notOperator, type);
        } else if (this._currentToken.type.get$isRelationalOperator()) {
          operator = this.getAndAdvance$0();
          t1 = $.$get$astFactory();
          t2 = this.parseBitwiseOrExpression$0();
          t1.toString;
          return U.BinaryExpressionImpl$(expression, operator, t2);
        }
        return expression;
      },
      parseReturnStatement$0: function() {
        var returnKeyword, t1, t2, expression, semicolon;
        returnKeyword = this.getAndAdvance$0();
        if (this._currentToken.type === C.TokenType_FmR) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          t2 = new U.ReturnStatementImpl(returnKeyword, t2);
          t2._expression = t2._becomeParentOf$1$1(null, U.ExpressionImpl);
          return t2;
        }
        expression = this.parseExpression2$0();
        semicolon = this._expect$1(C.TokenType_FmR);
        $.$get$astFactory().toString;
        t1 = new U.ReturnStatementImpl(returnKeyword, semicolon);
        t1._expression = t1._becomeParentOf$1$1(expression, U.ExpressionImpl);
        return t1;
      },
      parseSetter$4: function(commentAndMetadata, externalKeyword, staticKeyword, returnType) {
        var propertyKeyword, $name, parameters, t1, body;
        propertyKeyword = this.getAndAdvance$0();
        $name = this.parseSimpleIdentifier$1$isDeclaration(true);
        parameters = this.parseFormalParameterList$0();
        this._validateFormalParameterList$1(parameters);
        t1 = externalKeyword == null;
        body = this.parseFunctionBody$3(!t1 || staticKeyword == null, C.ParserErrorCode_8D4, false);
        if (!t1 && !J.getInterceptor(body).$isEmptyFunctionBody)
          this._reportErrorForToken$3(C.ParserErrorCode_5JB, this._currentToken, null);
        return $.$get$astFactory().methodDeclaration$11(commentAndMetadata.comment, commentAndMetadata.metadata, externalKeyword, staticKeyword, returnType, propertyKeyword, null, $name, null, parameters, body);
      },
      parseShiftExpression$0: function() {
        var t1, t2, expression, t3, t4, t5, expression0;
        if (this._currentToken.get$keyword() === C.Keyword_WnT && this._currentToken.next.type.precedence === 12) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          expression = new U.SuperExpressionImpl(t2);
        } else
          expression = this.parseAdditiveExpression$0();
        for (t1 = U.ExpressionImpl, t2 = U.AstNodeImpl; t3 = this._currentToken, t3.type.precedence === 12; expression = expression0) {
          t4 = $.$get$astFactory();
          this._currentToken = t3.next;
          t5 = this.parseAdditiveExpression$0();
          t4.toString;
          expression0 = new U.BinaryExpressionImpl(t3);
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (expression != null)
            expression._ast$_parent = expression0;
          expression0._leftOperand = expression;
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (t5 != null)
            t5._ast$_parent = expression0;
          expression0._rightOperand = t5;
        }
        return expression;
      },
      parseSimpleIdentifier$2$allowKeyword$isDeclaration: function(allowKeyword, isDeclaration) {
        var t1 = this._currentToken;
        if (!(t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1)))
          if (allowKeyword) {
            t1 = this._currentToken.type;
            t1 = t1 === C.TokenType_GbN || t1.kind === 107;
          } else
            t1 = false;
        else
          t1 = true;
        if (t1)
          return this._parseSimpleIdentifierUnchecked$1$isDeclaration(isDeclaration);
        this._reportErrorForToken$3(C.ParserErrorCode_U06, this._currentToken, null);
        return this.createSyntheticIdentifier$1$isDeclaration(isDeclaration);
      },
      parseSimpleIdentifier$1$isDeclaration: function(isDeclaration) {
        return this.parseSimpleIdentifier$2$allowKeyword$isDeclaration(false, isDeclaration);
      },
      parseSimpleIdentifier$0: function() {
        return this.parseSimpleIdentifier$2$allowKeyword$isDeclaration(false, false);
      },
      parseStatement2$0: function() {
        var labels, label, statement, t1, t2, t3, t4, label0, token, label1;
        t1 = this._treeDepth;
        if (t1 > 300)
          throw H.wrapException(X._TooDeepTreeError$());
        this._treeDepth = t1 + 1;
        try {
          labels = null;
          t1 = U.SimpleIdentifierImpl;
          t2 = U.AstNodeImpl;
          t3 = [Y.Label];
          while (true) {
            t4 = this._currentToken;
            if (t4.type !== C.TokenType_GbN) {
              t4 = t4.get$keyword();
              if (t4 == null)
                t4 = null;
              else
                t4 = t4.isBuiltIn || t4.isPseudo;
              if (t4 == null)
                t4 = false;
            } else
              t4 = true;
            if (!(t4 && this._currentToken.next.type === C.TokenType_gg4))
              break;
            label0 = this._parseSimpleIdentifierUnchecked$1$isDeclaration(true);
            token = this._currentToken;
            this._currentToken = token.next;
            $.$get$astFactory().toString;
            label1 = new U.LabelImpl(token);
            H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
            label0._ast$_parent = label1;
            label1._label = label0;
            label = label1;
            if (labels == null)
              labels = H.setRuntimeTypeInfo([label], t3);
            else
              J.add$1$ax(labels, label);
          }
          statement = this.parseNonLabeledStatement$0();
          if (labels == null)
            return statement;
          t1 = $.$get$astFactory();
          t2 = labels;
          t1.toString;
          t3 = U.LabeledStatementImpl$(H.assertSubtype(t2, "$isList", t3, "$asList"), H.interceptedTypeCheck(statement, "$isStatement"));
          return t3;
        } finally {
          --this._treeDepth;
        }
      },
      parseStringLiteral$0: function() {
        var t1, t2;
        t1 = this._currentToken;
        if (t1.type === C.TokenType_86y)
          return this._parseStringLiteralUnchecked$0();
        this._reportErrorForToken$3(C.ParserErrorCode_QW2, t1, null);
        t1 = $.$get$astFactory();
        t2 = new L.StringToken(C.TokenType_86y, this._currentToken.offset, null);
        t2._setCommentParent$1(null);
        $.$get$StringUtilities_INTERNER().toString;
        t2._value = "";
        t2 = this._injectToken$1(t2);
        t1.toString;
        t2 = new U.SimpleStringLiteralImpl(t2);
        $.$get$StringUtilities_INTERNER0().toString;
        t2._ast$_value = "";
        return t2;
      },
      parseSwitchStatement$0: function() {
        var wasInSwitch, definedLabels, keyword, leftParenthesis, expression, rightParenthesis, leftBracket, defaultKeyword, members, type, labels, identifier, label, colon, keyword0, caseKeyword, caseExpression, colon0, colon1, atEndOrNextMember, rightBracket, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, token, t12, t13, t14, t15;
        wasInSwitch = this._inSwitch;
        this._inSwitch = true;
        try {
          definedLabels = P.HashSet_HashSet(null, null, null, P.String);
          keyword = this._expectKeyword$1(C.Keyword_S8Y);
          leftParenthesis = this._expect$1(C.TokenType_5uk);
          expression = this.parseExpression2$0();
          rightParenthesis = this._expect$1(C.TokenType_coy);
          leftBracket = this._expect$1(C.TokenType_cOk);
          defaultKeyword = null;
          t1 = [Y.SwitchMember];
          members = H.setRuntimeTypeInfo([], t1);
          type = this._currentToken.type;
          t2 = this._parser$_source;
          t3 = U.SimpleIdentifierImpl;
          t4 = U.AstNodeImpl;
          t5 = [P.Object];
          t6 = Y.Label;
          t7 = [t6];
          t8 = Y.Statement;
          t9 = [t8];
          t6 = [t6];
          t8 = [t8];
          t10 = U.ExpressionImpl;
          while (true) {
            if (!(!J.$eq$(type, C.TokenType_Emx) && !J.$eq$(type, C.TokenType_2ty)))
              break;
            labels = H.setRuntimeTypeInfo([], t7);
            while (true) {
              t11 = this._currentToken;
              if (t11.type !== C.TokenType_GbN) {
                t11 = t11.get$keyword();
                if (t11 == null)
                  t11 = null;
                else
                  t11 = t11.isBuiltIn || t11.isPseudo;
                if (t11 == null)
                  t11 = false;
              } else
                t11 = true;
              if (!(t11 && this._currentToken.next.type === C.TokenType_gg4))
                break;
              identifier = this._parseSimpleIdentifierUnchecked$1$isDeclaration(true);
              label = identifier.get$token().get$lexeme();
              if (J.contains$1$asx(definedLabels, label)) {
                token = identifier.get$token();
                t11 = H.assertSubtype(H.setRuntimeTypeInfo([label], t5), "$isList", t5, "$asList");
                if (token.type === C.TokenType_Emx)
                  token = token.previous;
                t12 = J.getInterceptor$x(token);
                this._reportError$1(V.AnalysisError$(t2, t12.get$offset(token), Math.max(t12.get$length(token), 1), C.ParserErrorCode_AKW0, t11));
              } else
                J.add$1$ax(definedLabels, label);
              token = this._currentToken;
              this._currentToken = token.next;
              colon = token;
              $.$get$astFactory().toString;
              t11 = H.interceptedTypeCheck(identifier, "$isSimpleIdentifier");
              t12 = new U.LabelImpl(H.interceptedTypeCheck(colon, "$isToken"));
              H.assertIsSubtype(t3, t4, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (t11 != null)
                t11._ast$_parent = t12;
              t12._label = t11;
              J.add$1$ax(labels, t12);
            }
            keyword0 = this._currentToken.get$keyword();
            if (J.$eq$(keyword0, C.Keyword_Am8)) {
              token = this._currentToken;
              this._currentToken = token.next;
              caseKeyword = token;
              caseExpression = this.parseExpression2$0();
              colon0 = this._expect$1(C.TokenType_gg4);
              t11 = $.$get$astFactory();
              t12 = this._parseStatementList$0();
              t11.toString;
              t11 = H.assertSubtype(labels, "$isList", t7, "$asList");
              t13 = H.interceptedTypeCheck(caseKeyword, "$isToken");
              t14 = H.interceptedTypeCheck(caseExpression, "$isExpression");
              t15 = H.interceptedTypeCheck(colon0, "$isToken");
              H.assertSubtype(t12, "$isList", t9, "$asList");
              t15 = new U.SwitchCaseImpl(t13, t15);
              t13 = new U.NodeListImpl(t15, H.setRuntimeTypeInfo([], t7), t6);
              t13.addAll$1(0, t11);
              t15._labels = t13;
              t13 = new U.NodeListImpl(t15, H.setRuntimeTypeInfo([], t9), t8);
              t13.addAll$1(0, t12);
              t15._statements = t13;
              H.assertIsSubtype(t10, t4, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (t14 != null)
                t14._ast$_parent = t15;
              t15._expression = t14;
              J.add$1$ax(members, t15);
              if (defaultKeyword != null) {
                token = H.interceptedTypeCheck(caseKeyword, "$isToken");
                if (token.type === C.TokenType_Emx)
                  token = token.previous;
                this._reportError$1(V.AnalysisError$(t2, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_7nZ, null));
              }
            } else if (J.$eq$(keyword0, C.Keyword_ea7)) {
              if (defaultKeyword != null) {
                token = this._currentToken.next;
                if (token.type === C.TokenType_Emx)
                  token = token.previous;
                this._reportError$1(V.AnalysisError$(t2, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_23h, null));
              }
              token = this._currentToken;
              this._currentToken = token.next;
              defaultKeyword = token;
              colon1 = this._expect$1(C.TokenType_gg4);
              t11 = $.$get$astFactory();
              t12 = defaultKeyword;
              t13 = this._parseStatementList$0();
              t11.toString;
              t11 = H.assertSubtype(labels, "$isList", t7, "$asList");
              H.interceptedTypeCheck(t12, "$isToken");
              t14 = H.interceptedTypeCheck(colon1, "$isToken");
              H.assertSubtype(t13, "$isList", t9, "$asList");
              t14 = new U.SwitchDefaultImpl(t12, t14);
              t12 = new U.NodeListImpl(t14, H.setRuntimeTypeInfo([], t7), t6);
              t12.addAll$1(0, t11);
              t14._labels = t12;
              t12 = new U.NodeListImpl(t14, H.setRuntimeTypeInfo([], t9), t8);
              t12.addAll$1(0, t13);
              t14._statements = t12;
              J.add$1$ax(members, t14);
            } else {
              token = this._currentToken;
              if (token.type === C.TokenType_Emx)
                token = token.previous;
              this._reportError$1(V.AnalysisError$(t2, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_gkJ, null));
              atEndOrNextMember = new X.Parser_parseSwitchStatement_atEndOrNextMember(this);
              for (; !atEndOrNextMember.call$0();)
                this._currentToken = this._currentToken.next;
            }
            type = this._currentToken.type;
          }
          rightBracket = this._expect$1(C.TokenType_2ty);
          $.$get$astFactory().toString;
          t1 = U.SwitchStatementImpl$(H.interceptedTypeCheck(keyword, "$isToken"), H.interceptedTypeCheck(leftParenthesis, "$isToken"), H.interceptedTypeCheck(expression, "$isExpression"), H.interceptedTypeCheck(rightParenthesis, "$isToken"), H.interceptedTypeCheck(leftBracket, "$isToken"), H.assertSubtype(members, "$isList", t1, "$asList"), H.interceptedTypeCheck(rightBracket, "$isToken"));
          return t1;
        } finally {
          this._inSwitch = wasInSwitch;
        }
      },
      parseSymbolLiteral$0: function() {
        var poundSign, t1, components, t2, token, t3, previous;
        poundSign = this.getAndAdvance$0();
        t1 = [L.Token];
        components = H.setRuntimeTypeInfo([], t1);
        t2 = this._currentToken;
        if (t2.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t2)) {
          C.JSArray_methods.add$1(components, this.getAndAdvance$0());
          for (; this._optional$1(C.TokenType_wCI);) {
            t2 = this._currentToken;
            if (t2.type !== C.TokenType_GbN) {
              t2 = t2.get$keyword();
              if (t2 == null)
                t2 = null;
              else
                t2 = t2.isBuiltIn || t2.isPseudo;
              if (t2 == null)
                t2 = false;
            } else
              t2 = true;
            token = this._currentToken;
            if (t2) {
              this._currentToken = token.next;
              C.JSArray_methods.add$1(components, token);
            } else {
              if (token.type === C.TokenType_Emx)
                token = token.previous;
              this._reportError$1(V.AnalysisError$(this._parser$_source, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_U06, null));
              t2 = new L.StringToken(C.TokenType_GbN, this._currentToken.offset, null);
              t2._setCommentParent$1(null);
              $.$get$StringUtilities_INTERNER().toString;
              t2._value = "";
              t3 = this._currentToken;
              previous = t3.previous;
              t2.next = t3;
              t3.previous = t2;
              t3.set$beforeSynthetic(t2);
              previous.next = t2;
              t2.previous = previous;
              t2.set$beforeSynthetic(previous);
              C.JSArray_methods.add$1(components, t2);
              break;
            }
          }
        } else {
          t2 = this._currentToken;
          if (t2.type.isOperator)
            C.JSArray_methods.add$1(components, this.getAndAdvance$0());
          else if (t2.get$keyword() === C.Keyword_FmR)
            C.JSArray_methods.add$1(components, this.getAndAdvance$0());
          else {
            this._reportErrorForToken$3(C.ParserErrorCode_U06, this._currentToken, null);
            t2 = new L.StringToken(C.TokenType_GbN, this._currentToken.offset, null);
            t2._setCommentParent$1(null);
            $.$get$StringUtilities_INTERNER().toString;
            t2._value = "";
            C.JSArray_methods.add$1(components, this._injectToken$1(t2));
          }
        }
        $.$get$astFactory().toString;
        return new U.SymbolLiteralImpl(poundSign, H.assertSubtype(components, "$isList", t1, "$asList"));
      },
      parseThrowExpression$0: function() {
        var keyword, t1, type, t2, expression;
        keyword = this.getAndAdvance$0();
        t1 = this._currentToken;
        type = t1.type;
        if (type === C.TokenType_FmR || type === C.TokenType_coy) {
          this._reportErrorForToken$2(C.ParserErrorCode_A9U, t1);
          t1 = $.$get$astFactory();
          t2 = this.createSyntheticIdentifier$0();
          t1.toString;
          t1 = new U.ThrowExpressionImpl(keyword);
          t1._expression = t1._becomeParentOf$1$1(t2, U.ExpressionImpl);
          return t1;
        }
        expression = this.parseExpression2$0();
        $.$get$astFactory().toString;
        t1 = new U.ThrowExpressionImpl(keyword);
        t1._expression = t1._becomeParentOf$1$1(expression, U.ExpressionImpl);
        return t1;
      },
      parseThrowExpressionWithoutCascade$0: function() {
        var keyword, t1, type, t2, expression;
        keyword = this.getAndAdvance$0();
        t1 = this._currentToken;
        type = t1.type;
        if (type === C.TokenType_FmR || type === C.TokenType_coy) {
          this._reportErrorForToken$2(C.ParserErrorCode_A9U, t1);
          t1 = $.$get$astFactory();
          t2 = this.createSyntheticIdentifier$0();
          t1.toString;
          t1 = new U.ThrowExpressionImpl(keyword);
          t1._expression = t1._becomeParentOf$1$1(t2, U.ExpressionImpl);
          return t1;
        }
        expression = this.parseExpressionWithoutCascade$0();
        $.$get$astFactory().toString;
        t1 = new U.ThrowExpressionImpl(keyword);
        t1._expression = t1._becomeParentOf$1$1(expression, U.ExpressionImpl);
        return t1;
      },
      parseTryStatement$0: function() {
        var tryKeyword, body, t1, catchClauses, token, exceptionType, onKeyword, leftParenthesis, exceptionParameter, comma, stackTraceParameter, rightParenthesis, catchKeyword, catchBody, finallyKeyword, finallyClause;
        tryKeyword = this.getAndAdvance$0();
        body = this._parseBlockChecked$0();
        t1 = [Y.CatchClause];
        catchClauses = H.setRuntimeTypeInfo([], t1);
        while (true) {
          if (!(this._currentToken.get$keyword() === C.Keyword_4GC || this._currentToken.get$keyword() === C.Keyword_7N70))
            break;
          if (this._currentToken.get$keyword() === C.Keyword_4GC) {
            token = this._currentToken;
            this._currentToken = token.next;
            exceptionType = H.interceptedTypeCheck(this.parseTypeNotVoid$1(false), "$isTypeName");
            onKeyword = token;
          } else {
            onKeyword = null;
            exceptionType = null;
          }
          if (this._currentToken.get$keyword() === C.Keyword_7N70) {
            token = this._currentToken;
            this._currentToken = token.next;
            leftParenthesis = this._expect$1(C.TokenType_5uk);
            exceptionParameter = this.parseSimpleIdentifier$1$isDeclaration(true);
            comma = this._currentToken;
            if (comma.type === C.TokenType_O55) {
              this._currentToken = comma.next;
              stackTraceParameter = this.parseSimpleIdentifier$1$isDeclaration(true);
            } else {
              comma = null;
              stackTraceParameter = null;
            }
            rightParenthesis = this._expect$1(C.TokenType_coy);
            catchKeyword = token;
          } else {
            catchKeyword = null;
            leftParenthesis = null;
            exceptionParameter = null;
            comma = null;
            stackTraceParameter = null;
            rightParenthesis = null;
          }
          catchBody = this._parseBlockChecked$0();
          $.$get$astFactory().toString;
          C.JSArray_methods.add$1(catchClauses, U.CatchClauseImpl$(onKeyword, exceptionType, catchKeyword, leftParenthesis, exceptionParameter, comma, stackTraceParameter, rightParenthesis, catchBody));
        }
        if (this._currentToken.get$keyword() === C.Keyword_q96) {
          finallyKeyword = this.getAndAdvance$0();
          finallyClause = this._parseBlockChecked$0();
        } else {
          if (catchClauses.length === 0)
            this._reportErrorForToken$3(C.ParserErrorCode_yjx, this._currentToken, null);
          finallyClause = null;
          finallyKeyword = null;
        }
        $.$get$astFactory().toString;
        return U.TryStatementImpl$(tryKeyword, body, H.assertSubtype(catchClauses, "$isList", t1, "$asList"), finallyKeyword, finallyClause);
      },
      parseTypeAlias$1: function(commentAndMetadata) {
        var keyword, t1, next;
        keyword = this.getAndAdvance$0();
        t1 = this._currentToken;
        if (t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1)) {
          next = this._currentToken.next;
          t1 = next.type;
          if (t1 === C.TokenType_Drw) {
            next = this._skipTypeParameterList$1(next);
            if (next != null && next.type === C.TokenType_tca)
              return this.parseGenericTypeAlias$2(commentAndMetadata, keyword);
          } else if (t1 === C.TokenType_tca)
            return this.parseGenericTypeAlias$2(commentAndMetadata, keyword);
        }
        return this._parseFunctionTypeAlias$2(commentAndMetadata, keyword);
      },
      parseTypeAnnotation$1: function(inExpression) {
        var type = this._atGenericFunctionTypeAfterReturnType$1(this._currentToken) ? this.parseGenericFunctionTypeAfterReturnType$1(null) : this.parseTypeWithoutFunction$1(false);
        for (; this._atGenericFunctionTypeAfterReturnType$1(this._currentToken);)
          type = this.parseGenericFunctionTypeAfterReturnType$1(type);
        return type;
      },
      parseTypeArgumentList$0: function() {
        var leftBracket, t1, t2, $arguments, rightBracket, t3;
        leftBracket = this.getAndAdvance$0();
        t1 = Y.TypeAnnotation;
        t2 = [t1];
        $arguments = H.setRuntimeTypeInfo([this.parseTypeAnnotation$1(false)], t2);
        for (; this._optional$1(C.TokenType_O55);)
          C.JSArray_methods.add$1($arguments, this.parseTypeAnnotation$1(false));
        rightBracket = this._expectGt$0();
        $.$get$astFactory().toString;
        H.assertSubtype($arguments, "$isList", t2, "$asList");
        t3 = new U.TypeArgumentListImpl(leftBracket, rightBracket);
        t1 = new U.NodeListImpl(t3, H.setRuntimeTypeInfo([], t2), [t1]);
        t1.addAll$1(0, $arguments);
        t3._ast$_arguments = t1;
        return t3;
      },
      parseTypeName$1: function(inExpression) {
        var realType, typeFromComment;
        realType = this._parseTypeName$1(inExpression);
        typeFromComment = this._parseOptionalTypeNameComment$0();
        return typeFromComment == null ? realType : typeFromComment;
      },
      parseTypeNotVoid$1: function(inExpression) {
        var type;
        if (this._atGenericFunctionTypeAfterReturnType$1(this._currentToken))
          type = this.parseGenericFunctionTypeAfterReturnType$1(null);
        else
          type = this._currentToken.get$keyword() === C.Keyword_FmR && this._atGenericFunctionTypeAfterReturnType$1(this._currentToken.next) ? U.TypeNameImpl$($.$get$astFactory().simpleIdentifier$1(this.getAndAdvance$0()), null, null) : this.parseTypeName$1(inExpression);
        for (; this._atGenericFunctionTypeAfterReturnType$1(this._currentToken);)
          type = this.parseGenericFunctionTypeAfterReturnType$1(type);
        return type;
      },
      parseTypeParameter$0: function() {
        var commentAndMetadata, $name, t1, keyword, bound;
        commentAndMetadata = this.parseCommentAndMetadata$0();
        $name = this.parseSimpleIdentifier$1$isDeclaration(true);
        t1 = this._currentToken;
        if (t1.type === C.TokenType_V43) {
          this._reportErrorForToken$3(C.ParserErrorCode_ClA, t1, null);
          t1 = this._currentToken.next;
          this._currentToken = t1;
        }
        if (t1.get$keyword() === C.Keyword_scn) {
          keyword = this.getAndAdvance$0();
          bound = this.parseTypeNotVoid$1(false);
          $.$get$astFactory().toString;
          return U.TypeParameterImpl$(commentAndMetadata.comment, H.assertSubtype(commentAndMetadata.metadata, "$isList", [Y.Annotation], "$asList"), $name, keyword, bound);
        }
        $.$get$astFactory().toString;
        return U.TypeParameterImpl$(commentAndMetadata.comment, H.assertSubtype(commentAndMetadata.metadata, "$isList", [Y.Annotation], "$asList"), $name, null, null);
      },
      parseTypeParameterList$0: function() {
        var leftBracket, t1, t2, typeParameters, rightBracket, t3;
        leftBracket = this.getAndAdvance$0();
        t1 = Y.TypeParameter;
        t2 = [t1];
        typeParameters = H.setRuntimeTypeInfo([this.parseTypeParameter$0()], t2);
        for (; this._optional$1(C.TokenType_O55);)
          C.JSArray_methods.add$1(typeParameters, this.parseTypeParameter$0());
        rightBracket = this._expectGt$0();
        $.$get$astFactory().toString;
        H.assertSubtype(typeParameters, "$isList", t2, "$asList");
        t3 = new U.TypeParameterListImpl(leftBracket, rightBracket);
        t1 = new U.NodeListImpl(t3, H.setRuntimeTypeInfo([], t2), [t1]);
        t1.addAll$1(0, typeParameters);
        t3._typeParameters = t1;
        return t3;
      },
      parseTypeWithoutFunction$1: function(inExpression) {
        if (this._currentToken.get$keyword() === C.Keyword_FmR)
          return U.TypeNameImpl$($.$get$astFactory().simpleIdentifier$1(this.getAndAdvance$0()), null, null);
        else
          return this.parseTypeName$1(false);
      },
      parseUnaryExpression$0: function() {
        var t1, type, operator, nextType, t2, firstOperator, secondOperator, t3, awaitToken, expression;
        t1 = this._currentToken;
        type = t1.type;
        if (type === C.TokenType_M5Z || type === C.TokenType_cYV || type === C.TokenType_ufh) {
          operator = this.getAndAdvance$0();
          if (this._currentToken.get$keyword() === C.Keyword_WnT) {
            nextType = this._currentToken.next.type;
            if (nextType === C.TokenType_AGi || nextType === C.TokenType_wCI) {
              t1 = $.$get$astFactory();
              t2 = this.parseUnaryExpression$0();
              t1.toString;
              t1 = new U.PrefixExpressionImpl(operator);
              t1._operand = t1._becomeParentOf$1$1(t2, U.ExpressionImpl);
              return t1;
            }
            t1 = $.$get$astFactory();
            t2 = this.getAndAdvance$0();
            t1.toString;
            t1 = new U.PrefixExpressionImpl(operator);
            t1._operand = t1._becomeParentOf$1$1(new U.SuperExpressionImpl(t2), U.ExpressionImpl);
            return t1;
          }
          t1 = $.$get$astFactory();
          t2 = this.parseUnaryExpression$0();
          t1.toString;
          t1 = new U.PrefixExpressionImpl(operator);
          t1._operand = t1._becomeParentOf$1$1(t2, U.ExpressionImpl);
          return t1;
        } else {
          type.toString;
          if (type === C.TokenType_GNi || type === C.TokenType_jTn) {
            operator = this.getAndAdvance$0();
            if (this._currentToken.get$keyword() === C.Keyword_WnT) {
              nextType = this._currentToken.next.type;
              if (nextType === C.TokenType_AGi || nextType === C.TokenType_wCI) {
                t1 = $.$get$astFactory();
                t2 = this.parseUnaryExpression$0();
                t1.toString;
                t1 = new U.PrefixExpressionImpl(operator);
                t1._operand = t1._becomeParentOf$1$1(t2, U.ExpressionImpl);
                return t1;
              }
              if (type === C.TokenType_jTn) {
                firstOperator = this._createToken$2(operator, C.TokenType_M5Z);
                secondOperator = new L.SimpleToken(C.TokenType_M5Z, operator.offset + 1, null);
                secondOperator._setCommentParent$1(null);
                secondOperator.setNext$1(this._currentToken);
                firstOperator.setNext$1(secondOperator);
                operator.previous.setNext$1(firstOperator);
                t1 = $.$get$astFactory();
                t2 = this.getAndAdvance$0();
                t1.toString;
                t1 = new U.PrefixExpressionImpl(secondOperator);
                t3 = U.ExpressionImpl;
                t1._operand = t1._becomeParentOf$1$1(new U.SuperExpressionImpl(t2), t3);
                t2 = new U.PrefixExpressionImpl(firstOperator);
                t2._operand = t2._becomeParentOf$1$1(t1, t3);
                return t2;
              }
              t1 = [P.Object];
              t1 = H.assertSubtype(H.setRuntimeTypeInfo([operator.get$lexeme()], t1), "$isList", t1, "$asList");
              this._reportErrorForToken$3(C.ParserErrorCode_Art, this._currentToken, t1);
              t1 = $.$get$astFactory();
              t2 = this.getAndAdvance$0();
              t1.toString;
              t1 = new U.PrefixExpressionImpl(operator);
              t1._operand = t1._becomeParentOf$1$1(new U.SuperExpressionImpl(t2), U.ExpressionImpl);
              return t1;
            }
            t1 = $.$get$astFactory();
            t2 = this.parseAssignableExpression$1(false);
            t1.toString;
            t1 = new U.PrefixExpressionImpl(operator);
            t1._operand = t1._becomeParentOf$1$1(t2, U.ExpressionImpl);
            return t1;
          } else if (type === C.TokenType_RzD) {
            this._reportErrorForToken$3(C.ParserErrorCode_U06, t1, null);
            return this.createSyntheticIdentifier$0();
          } else if (this._inAsync && t1.get$keyword() === C.Keyword_7N7) {
            awaitToken = this.getAndAdvance$0();
            expression = this.parseUnaryExpression$0();
            $.$get$astFactory().toString;
            t1 = new U.AwaitExpressionImpl(awaitToken);
            t1._expression = t1._becomeParentOf$1$1(expression, U.ExpressionImpl);
            return t1;
          }
        }
        return this.parsePostfixExpression$0();
      },
      parseVariableDeclaration$0: function() {
        var $name, equals, initializer;
        $name = this.parseSimpleIdentifier$1$isDeclaration(true);
        if (this._currentToken.type === C.TokenType_tca) {
          equals = this.getAndAdvance$0();
          initializer = this.parseExpression2$0();
        } else {
          equals = null;
          initializer = null;
        }
        $.$get$astFactory().toString;
        return U.VariableDeclarationImpl$($name, equals, initializer);
      },
      parseVariableDeclarationListAfterMetadata$1: function(commentAndMetadata) {
        var holder = this.parseFinalConstVarOrType$1(false);
        return this.parseVariableDeclarationListAfterType$3(commentAndMetadata, holder.keyword, holder.type);
      },
      parseVariableDeclarationListAfterType$3: function(commentAndMetadata, keyword, type) {
        var t1, variables, t2, t3, t4;
        if (type != null && keyword != null && keyword.get$keyword() === C.Keyword_Owc)
          this._reportErrorForToken$2(C.ParserErrorCode_i9o, keyword);
        t1 = [Y.VariableDeclaration];
        variables = H.setRuntimeTypeInfo([this.parseVariableDeclaration$0()], t1);
        for (; this._optional$1(C.TokenType_O55);)
          C.JSArray_methods.add$1(variables, this.parseVariableDeclaration$0());
        t2 = $.$get$astFactory();
        t3 = commentAndMetadata == null;
        t4 = t3 ? null : commentAndMetadata.comment;
        t3 = t3 ? null : commentAndMetadata.metadata;
        t2.toString;
        return U.VariableDeclarationListImpl$(t4, H.assertSubtype(t3, "$isList", [Y.Annotation], "$asList"), keyword, type, H.assertSubtype(variables, "$isList", t1, "$asList"));
      },
      parseVariableDeclarationStatementAfterMetadata$1: function(commentAndMetadata) {
        var variableList, semicolon, t1;
        variableList = this.parseVariableDeclarationListAfterMetadata$1(commentAndMetadata);
        semicolon = this._expect$1(C.TokenType_FmR);
        $.$get$astFactory().toString;
        t1 = new U.VariableDeclarationStatementImpl(semicolon);
        t1._variableList = t1._becomeParentOf$1$1(variableList, U.VariableDeclarationListImpl);
        return t1;
      },
      parseWhileStatement$0: function() {
        var wasInLoop, keyword, leftParenthesis, condition, rightParenthesis, body, t1;
        wasInLoop = this._inLoop;
        this._inLoop = true;
        try {
          keyword = this.getAndAdvance$0();
          leftParenthesis = this._expect$1(C.TokenType_5uk);
          condition = this.parseExpression2$0();
          rightParenthesis = this._expect$1(C.TokenType_coy);
          body = this.parseStatement2$0();
          $.$get$astFactory().toString;
          t1 = U.WhileStatementImpl$(H.interceptedTypeCheck(keyword, "$isToken"), H.interceptedTypeCheck(leftParenthesis, "$isToken"), H.interceptedTypeCheck(condition, "$isExpression"), H.interceptedTypeCheck(rightParenthesis, "$isToken"), H.interceptedTypeCheck(body, "$isStatement"));
          return t1;
        } finally {
          this._inLoop = wasInLoop;
        }
      },
      parseWithClause$0: function() {
        var withKeyword, t1, t2, types, typeName, t3;
        withKeyword = this.getAndAdvance$0();
        t1 = Y.TypeName;
        t2 = [t1];
        types = H.setRuntimeTypeInfo([], t2);
        do {
          typeName = this.parseTypeName$1(false);
          this._mustNotBeNullable$2(typeName, C.ParserErrorCode_UrL);
          C.JSArray_methods.add$1(types, typeName);
        } while (this._optional$1(C.TokenType_O55));
        $.$get$astFactory().toString;
        H.assertSubtype(types, "$isList", t2, "$asList");
        t3 = new U.WithClauseImpl(withKeyword);
        t1 = new U.NodeListImpl(t3, H.setRuntimeTypeInfo([], t2), [t1]);
        t1.addAll$1(0, types);
        t3._mixinTypes = t1;
        return t3;
      },
      skipFormalParameterList$1: function(startToken) {
        var t1;
        if (startToken.type !== C.TokenType_5uk)
          return;
        t1 = H.interceptedTypeCast(startToken, "$isBeginToken").endToken;
        return t1 == null ? null : t1.next;
      },
      skipGenericFunctionTypeAfterReturnType$1: function(startToken) {
        var next = startToken.next;
        if (next.type === C.TokenType_Drw) {
          next = this.skipTypeParameterList$1(next);
          if (next == null)
            return;
        }
        return this.skipFormalParameterList$1(next);
      },
      skipPrefixedIdentifier$1: function(startToken) {
        var token, nextToken, t1;
        token = this.skipSimpleIdentifier$1(startToken);
        if (token == null)
          return;
        else if (token.type !== C.TokenType_wCI)
          return token;
        token = token.next;
        nextToken = this.skipSimpleIdentifier$1(token);
        if (nextToken != null)
          return nextToken;
        else {
          t1 = token.type;
          if (t1 === C.TokenType_coy || t1 === C.TokenType_O55)
            return token;
        }
        return;
      },
      skipSimpleIdentifier$1: function(startToken) {
        if (startToken.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(startToken))
          return startToken.next;
        return;
      },
      skipStringLiteral$1: function(startToken) {
        var token, type;
        token = startToken;
        while (true) {
          if (!(token != null && token.type === C.TokenType_86y))
            break;
          token = token.next;
          type = token.type;
          if (type === C.TokenType_skV || type === C.TokenType_MvE)
            token = this._skipStringInterpolation$1(token);
        }
        if (token == null ? startToken == null : token === startToken)
          return;
        return token;
      },
      skipTypeAnnotation$1: function(startToken) {
        var next = this._atGenericFunctionTypeAfterReturnType$1(startToken) ? this.skipGenericFunctionTypeAfterReturnType$1(startToken) : this.skipTypeWithoutFunction$1(startToken);
        while (true) {
          if (!(next != null && this._atGenericFunctionTypeAfterReturnType$1(next)))
            break;
          next = this.skipGenericFunctionTypeAfterReturnType$1(next);
        }
        return next;
      },
      skipTypeArgumentList$1: function(startToken) {
        var token, t1, second;
        if (startToken.type !== C.TokenType_Drw && !this._injectGenericComment$2(C.TokenType_Y2Y, 2))
          return;
        token = this.skipTypeAnnotation$1(startToken.next);
        if (token == null) {
          token = startToken.next;
          if (token.type === C.TokenType_wOL)
            return token.next;
          return;
        }
        for (; t1 = token.type, t1 === C.TokenType_O55;) {
          token = this.skipTypeAnnotation$1(token.next);
          if (token == null)
            return;
        }
        if (t1 === C.TokenType_wOL)
          return token.next;
        else if (t1 === C.TokenType_4XV) {
          second = new L.SimpleToken(C.TokenType_wOL, token.offset + 1, null);
          second._setCommentParent$1(null);
          second.next = token.next;
          return second;
        }
        return;
      },
      skipTypeName$1: function(startToken) {
        var token = this.skipPrefixedIdentifier$1(startToken);
        if (token == null)
          return;
        return token.type === C.TokenType_Drw ? this.skipTypeArgumentList$1(token) : token;
      },
      skipTypeParameterList$1: function(startToken) {
        var next, previous, depth, t1, next0;
        if (startToken.type !== C.TokenType_Drw)
          return;
        next = startToken.next;
        for (previous = startToken, depth = 1; next == null ? previous != null : next !== previous; previous = next, next = next0) {
          t1 = next.type;
          if (t1 === C.TokenType_Drw)
            ++depth;
          else if (t1 === C.TokenType_wOL) {
            --depth;
            if (depth === 0)
              return next.next;
          }
          next0 = next.next;
        }
        return;
      },
      skipTypeWithoutFunction$1: function(startToken) {
        if (startToken.get$keyword() === C.Keyword_FmR)
          return startToken.next;
        else
          return this.skipTypeName$1(startToken);
      },
      _appendCodePoint$5: function(buffer, source, codePoint, startIndex, endIndex) {
        var t1;
        if (codePoint < 0 || codePoint > 1114111) {
          t1 = [P.Object];
          t1 = H.assertSubtype(H.setRuntimeTypeInfo([J.substring$2$s(source, startIndex, endIndex + 1)], t1), "$isList", t1, "$asList");
          this._reportErrorForToken$3(C.ParserErrorCode_SFt, this._currentToken, t1);
          return;
        }
        if (codePoint < 65535)
          buffer._contents += H.Primitives_stringFromCharCode(codePoint);
        else
          buffer._contents += G.Character_toChars(codePoint);
      },
      _atGenericFunctionTypeAfterReturnType$1: function(startToken) {
        var next, t1;
        if (startToken.get$keyword() === C.Keyword_Lwp) {
          next = startToken.next;
          if (next != null) {
            t1 = next.type;
            t1 = t1 === C.TokenType_5uk || t1 === C.TokenType_Drw;
          } else
            t1 = false;
          if (t1)
            return true;
        }
        return false;
      },
      _convertToFunctionDeclaration$1: function(method) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9;
        t1 = $.$get$astFactory();
        t2 = method._comment;
        t3 = method._metadata;
        t4 = method.externalKeyword;
        t5 = method._returnType;
        t6 = method._ast$_name;
        t7 = method._typeParameters;
        t8 = method._parameters;
        t9 = method._body;
        t1.toString;
        t9 = U.FunctionExpressionImpl$(t7, t8, t9);
        return U.FunctionDeclarationImpl$(t2, H.assertSubtype(t3, "$isList", [Y.Annotation], "$asList"), t4, t5, method.propertyKeyword, t6, t9);
      },
      _couldBeStartOfCompilationUnitMember$0: function() {
        var keyword, next, nextType, t1;
        keyword = this._currentToken.get$keyword();
        next = this._currentToken.next;
        nextType = next.type;
        if ((keyword === C.Keyword_wwi || keyword === C.Keyword_y1M || keyword === C.Keyword_kfn || keyword === C.Keyword_AUT) && nextType !== C.TokenType_wCI && nextType !== C.TokenType_Drw)
          return true;
        else if (keyword === C.Keyword_xkS)
          return true;
        else if (keyword === C.Keyword_jpl && nextType !== C.TokenType_wCI && nextType !== C.TokenType_Drw)
          return true;
        else {
          if (keyword !== C.Keyword_FmR) {
            if (keyword === C.Keyword_cXJ || keyword === C.Keyword_rb5)
              t1 = nextType === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(next);
            else
              t1 = false;
            if (!t1)
              t1 = keyword === C.Keyword_IEU && this._isOperator$1(next);
            else
              t1 = true;
          } else
            t1 = true;
          if (t1)
            return true;
          else {
            t1 = this._currentToken;
            if (t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1)) {
              if (nextType === C.TokenType_5uk)
                return true;
              if (this.skipTypeAnnotation$1(this._currentToken) == null)
                return false;
              if (keyword !== C.Keyword_cXJ)
                if (keyword !== C.Keyword_rb5)
                  if (!(keyword === C.Keyword_IEU && this._isOperator$1(next))) {
                    t1 = this._currentToken;
                    t1 = t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1);
                  } else
                    t1 = true;
                else
                  t1 = true;
              else
                t1 = true;
              if (t1)
                return true;
            }
          }
        }
        return false;
      },
      _createToken$3$isBegin: function(token, type, isBegin) {
        var comments, t1;
        comments = token._precedingComment;
        if (comments == null) {
          if (isBegin) {
            t1 = new L.BeginToken(type, token.offset, null);
            t1._setCommentParent$1(null);
            return t1;
          }
          t1 = new L.SimpleToken(type, token.offset, null);
          t1._setCommentParent$1(null);
          return t1;
        } else if (isBegin) {
          t1 = new L.BeginToken(type, token.offset, comments);
          t1._setCommentParent$1(comments);
          return t1;
        }
        t1 = new L.SimpleToken(type, token.offset, comments);
        t1._setCommentParent$1(comments);
        return t1;
      },
      _createToken$2: function(token, type) {
        return this._createToken$3$isBegin(token, type, false);
      },
      _ensureAssignable$1: function(expression) {
        if (expression != null && !expression.get$isAssignable())
          this._reportErrorForToken$3(C.ParserErrorCode_p40, this._currentToken, null);
      },
      _expect$1: function(type) {
        var t1, t2;
        t1 = this._currentToken;
        if (t1.type === type)
          return this.getAndAdvance$0();
        if (type === C.TokenType_FmR) {
          if (t1.next.type === C.TokenType_FmR) {
            t2 = [P.Object];
            t2 = H.assertSubtype(H.setRuntimeTypeInfo([t1.get$lexeme()], t2), "$isList", t2, "$asList");
            this._reportErrorForToken$3(C.ParserErrorCode_yjH, this._currentToken, t2);
            this._currentToken = this._currentToken.next;
            return this.getAndAdvance$0();
          }
          this._reportErrorForToken$3(C.ParserErrorCode_HuN, t1.previous, H.setRuntimeTypeInfo([type.lexeme], [P.Object]));
          t1 = new L.StringToken(C.TokenType_FmR, this._currentToken.offset, null);
          t1._setCommentParent$1(null);
          $.$get$StringUtilities_INTERNER().toString;
          t1._value = "";
          return this._injectToken$1(t1);
        }
        t1 = [P.Object];
        t1 = H.assertSubtype(H.setRuntimeTypeInfo([type.lexeme], t1), "$isList", t1, "$asList");
        this._reportErrorForToken$3(C.ParserErrorCode_HuN, this._currentToken, t1);
        t1 = new L.StringToken(type, this._currentToken.offset, null);
        t1._setCommentParent$1(null);
        $.$get$StringUtilities_INTERNER().toString;
        t1._value = "";
        return this._injectToken$1(t1);
      },
      _expectGt$0: function() {
        if (this._matchesGt$0())
          return this.getAndAdvance$0();
        var t1 = [P.Object];
        t1 = H.assertSubtype(H.setRuntimeTypeInfo([">"], t1), "$isList", t1, "$asList");
        this._reportErrorForToken$3(C.ParserErrorCode_HuN, this._currentToken, t1);
        t1 = new L.StringToken(C.TokenType_wOL, this._currentToken.offset, null);
        t1._setCommentParent$1(null);
        $.$get$StringUtilities_INTERNER().toString;
        t1._value = "";
        return this._injectToken$1(t1);
      },
      _expectKeyword$1: function(keyword) {
        var t1;
        if (this._currentToken.get$keyword() === keyword)
          return this.getAndAdvance$0();
        t1 = [P.Object];
        t1 = H.assertSubtype(H.setRuntimeTypeInfo([keyword.lexeme], t1), "$isList", t1, "$asList");
        this._reportErrorForToken$3(C.ParserErrorCode_HuN, this._currentToken, t1);
        return this._currentToken;
      },
      _findRange$2: function(ranges, index) {
        var rangeCount, i, range, t1;
        H.assertSubtype(ranges, "$isList", [[P.List, P.int]], "$asList");
        rangeCount = ranges.length;
        for (i = 0; i < rangeCount; ++i) {
          range = ranges[i];
          t1 = range[0];
          if (t1 <= index && index <= range[1])
            return range;
          else if (index < t1)
            return;
        }
        return;
      },
      _getCodeBlockRanges$1: function(comment) {
        var ranges, $length, secondChar, thirdChar, t1, index, end, currentChar, t2, index0;
        ranges = H.setRuntimeTypeInfo([], [[P.List, P.int]]);
        $length = comment.length;
        if ($length < 3)
          return ranges;
        if (J.getInterceptor$s(comment)._codeUnitAt$1(comment, 0) === 47) {
          secondChar = C.JSString_methods._codeUnitAt$1(comment, 1);
          thirdChar = C.JSString_methods._codeUnitAt$1(comment, 2);
          if (!(secondChar === 42 && thirdChar === 42))
            t1 = secondChar === 47 && thirdChar === 47;
          else
            t1 = true;
          index = t1 ? 3 : 0;
        } else
          index = 0;
        if ($length - index >= 4 && C.JSString_methods._codeUnitAt$1(comment, index) === 32 && C.JSString_methods._codeUnitAt$1(comment, index + 1) === 32 && C.JSString_methods._codeUnitAt$1(comment, index + 2) === 32 && C.JSString_methods._codeUnitAt$1(comment, index + 3) === 32) {
          end = index + 4;
          while (true) {
            if (end < $length) {
              t1 = C.JSString_methods._codeUnitAt$1(comment, end);
              t1 = t1 !== 13 && t1 !== 10;
            } else
              t1 = false;
            if (!t1)
              break;
            ++end;
          }
          C.JSArray_methods.add$1(ranges, H.setRuntimeTypeInfo([index, end], [P.int]));
          index = end;
        }
        for (t1 = [P.int]; index < $length;) {
          currentChar = C.JSString_methods.codeUnitAt$1(comment, index);
          if (currentChar === 13 || currentChar === 10) {
            ++index;
            while (true) {
              if (index < $length) {
                t2 = C.JSString_methods.codeUnitAt$1(comment, index);
                t2 = t2 === 9 || t2 === 32 || t2 === 10 || t2 === 13;
              } else
                t2 = false;
              if (!t2)
                break;
              ++index;
            }
            if ($length - index >= 6 && C.JSString_methods.codeUnitAt$1(comment, index) === 42 && C.JSString_methods.codeUnitAt$1(comment, index + 1) === 32 && C.JSString_methods.codeUnitAt$1(comment, index + 2) === 32 && C.JSString_methods.codeUnitAt$1(comment, index + 3) === 32 && C.JSString_methods.codeUnitAt$1(comment, index + 4) === 32 && C.JSString_methods.codeUnitAt$1(comment, index + 5) === 32) {
              end = index + 6;
              while (true) {
                if (end < $length) {
                  t2 = C.JSString_methods.codeUnitAt$1(comment, end);
                  t2 = t2 !== 13 && t2 !== 10;
                } else
                  t2 = false;
                if (!t2)
                  break;
                ++end;
              }
              C.JSArray_methods.add$1(ranges, H.setRuntimeTypeInfo([index, end], t1));
              index = end;
            }
          } else {
            index0 = index + 1;
            if (index0 < $length && currentChar === 91 && C.JSString_methods.codeUnitAt$1(comment, index0) === 58) {
              end = O.StringUtilities_indexOf2(comment, index + 2, 58, 93);
              if (end < 0)
                end = $length;
              C.JSArray_methods.add$1(ranges, H.setRuntimeTypeInfo([index, end], t1));
              index = end + 1;
            } else
              index = index0;
          }
        }
        return ranges;
      },
      _getEndToken$1: function(beginToken) {
        if (beginToken instanceof L.BeginToken)
          return beginToken.endToken;
        return;
      },
      _injectGenericComment$2: function(type, prefixLen) {
        return false;
      },
      _injectToken$1: function(token) {
        var t1, previous;
        t1 = this._currentToken;
        previous = t1.previous;
        token.setNext$1(t1);
        previous.setNext$1(token);
        return token;
      },
      _isHexDigit$1: function(character) {
        var t1;
        if (!(48 <= character && character <= 57))
          if (!(65 <= character && character <= 70))
            t1 = 97 <= character && character <= 102;
          else
            t1 = true;
        else
          t1 = true;
        return t1;
      },
      _isLikelyArgumentList$0: function() {
        var t1, token;
        t1 = this._currentToken;
        if (t1.type === C.TokenType_5uk)
          return true;
        token = this.skipTypeArgumentList$1(t1);
        return token != null && token.type === C.TokenType_5uk;
      },
      _isLikelyNamedInstanceCreation$0: function() {
        var token = this.skipTypeArgumentList$1(this._currentToken);
        if (token != null && token.type === C.TokenType_wCI) {
          token = this.skipSimpleIdentifier$1(token.next);
          if (token != null && token.type === C.TokenType_5uk)
            return true;
        }
        return false;
      },
      _isLinkText$2: function(comment, rightIndex) {
        var $length, index, nextChar;
        $length = comment.length;
        index = rightIndex + 1;
        if (index >= $length)
          return false;
        nextChar = J.getInterceptor$s(comment).codeUnitAt$1(comment, index);
        if (nextChar === 40 || nextChar === 58)
          return true;
        while (true) {
          if (!(nextChar === 9 || nextChar === 32 || nextChar === 10 || nextChar === 13))
            break;
          ++index;
          if (index >= $length)
            return false;
          nextChar = C.JSString_methods.codeUnitAt$1(comment, index);
        }
        return nextChar === 91;
      },
      _isOperator$1: function(startToken) {
        var t1, token;
        t1 = startToken.type;
        if (!t1.isOperator)
          return false;
        if (t1 === C.TokenType_tca)
          return false;
        token = startToken.next;
        for (; t1 = token.type, t1.isOperator;)
          token = token.next;
        return t1 === C.TokenType_5uk;
      },
      _isTypedIdentifier$1: function(startToken) {
        var token, t1, t2;
        token = this.skipTypeAnnotation$1(startToken);
        if (token == null)
          return false;
        else {
          t1 = token.type;
          if (t1 === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(token))
            return true;
          else {
            if (token.get$keyword() === C.Keyword_ssT) {
              t2 = token.next;
              if (t2.type === C.TokenType_wCI) {
                t2 = t2.next;
                t2 = t2.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t2);
              } else
                t2 = false;
            } else
              t2 = false;
            if (t2)
              return true;
            else if (startToken.next !== token && t1 !== C.TokenType_5uk)
              return true;
          }
        }
        return false;
      },
      _isValidAssignableExpression$1: function(expression) {
        var t1 = J.getInterceptor(expression);
        if (!!t1.$isSimpleIdentifier)
          return true;
        else if (!!t1.$isPropertyAccess)
          return !!J.getInterceptor(expression._ast$_target).$isSuperExpression;
        else if (!!t1.$isIndexExpression)
          return !!J.getInterceptor(expression._ast$_target).$isSuperExpression;
        return false;
      },
      _matchesGt$0: function() {
        var t1, currentType, first, second, offset, third;
        t1 = this._currentToken;
        currentType = t1.type;
        if (currentType === C.TokenType_wOL)
          return true;
        else if (currentType === C.TokenType_4XV) {
          first = this._createToken$2(t1, C.TokenType_wOL);
          second = new L.SimpleToken(C.TokenType_wOL, this._currentToken.offset + 1, null);
          second._setCommentParent$1(null);
          second.setNext$1(this._currentToken.next);
          first.setNext$1(second);
          this._currentToken.previous.setNext$1(first);
          this._currentToken = first;
          return true;
        } else if (currentType === C.TokenType_0Ef) {
          first = this._createToken$2(t1, C.TokenType_wOL);
          second = new L.SimpleToken(C.TokenType_tca, this._currentToken.offset + 1, null);
          second._setCommentParent$1(null);
          second.setNext$1(this._currentToken.next);
          first.setNext$1(second);
          this._currentToken.previous.setNext$1(first);
          this._currentToken = first;
          return true;
        } else if (currentType === C.TokenType_DCV) {
          offset = t1.offset;
          first = this._createToken$2(t1, C.TokenType_wOL);
          second = new L.SimpleToken(C.TokenType_wOL, offset + 1, null);
          second._setCommentParent$1(null);
          third = new L.SimpleToken(C.TokenType_tca, offset + 2, null);
          third._setCommentParent$1(null);
          third.setNext$1(this._currentToken.next);
          second.setNext$1(third);
          first.setNext$1(second);
          this._currentToken.previous.setNext$1(first);
          this._currentToken = first;
          return true;
        }
        return false;
      },
      _mustNotBeNullable$2: function(typeName, errorCode) {
        var t1 = typeName.question;
        if (t1 != null)
          this._reportErrorForToken$2(errorCode, t1);
      },
      _optional$1: function(type) {
        var t1 = this._currentToken;
        if (t1.type === type) {
          this._currentToken = t1.next;
          return true;
        }
        return false;
      },
      _parseArgumentListChecked$0: function() {
        var t1, t2, t3;
        if (this._currentToken.type === C.TokenType_5uk)
          return this.parseArgumentList$0();
        t1 = [P.Object];
        t1 = H.assertSubtype(H.setRuntimeTypeInfo(["("], t1), "$isList", t1, "$asList");
        this._reportErrorForToken$3(C.ParserErrorCode_HuN, this._currentToken, t1);
        t1 = $.$get$astFactory();
        t2 = new L.StringToken(C.TokenType_5uk, this._currentToken.offset, null);
        t2._setCommentParent$1(null);
        $.$get$StringUtilities_INTERNER().toString;
        t2._value = "";
        t2 = this._injectToken$1(t2);
        t3 = new L.StringToken(C.TokenType_coy, this._currentToken.offset, null);
        t3._setCommentParent$1(null);
        $.$get$StringUtilities_INTERNER().toString;
        t3._value = "";
        t3 = this._injectToken$1(t3);
        t1.toString;
        t3 = new U.ArgumentListImpl(t2, t3);
        t2 = Y.Expression;
        t2 = new U.NodeListImpl(t3, H.setRuntimeTypeInfo([], [t2]), [t2]);
        t2.addAll$1(0, null);
        t3._ast$_arguments = t2;
        return t3;
      },
      _parseBlockChecked$0: function() {
        var t1, t2, t3;
        if (this._currentToken.type === C.TokenType_cOk)
          return this.parseBlock$0();
        t1 = [P.Object];
        t1 = H.assertSubtype(H.setRuntimeTypeInfo(["{"], t1), "$isList", t1, "$asList");
        this._reportErrorForToken$3(C.ParserErrorCode_HuN, this._currentToken, t1);
        t1 = $.$get$astFactory();
        t2 = new L.StringToken(C.TokenType_cOk, this._currentToken.offset, null);
        t2._setCommentParent$1(null);
        $.$get$StringUtilities_INTERNER().toString;
        t2._value = "";
        t2 = this._injectToken$1(t2);
        t3 = new L.StringToken(C.TokenType_2ty, this._currentToken.offset, null);
        t3._setCommentParent$1(null);
        $.$get$StringUtilities_INTERNER().toString;
        t3._value = "";
        t3 = this._injectToken$1(t3);
        t1.toString;
        t3 = new U.BlockImpl(t2, t3);
        t2 = Y.Statement;
        t2 = new U.NodeListImpl(t3, H.setRuntimeTypeInfo([], [t2]), [t2]);
        t2.addAll$1(0, null);
        t3._statements = t2;
        return t3;
      },
      _parseClassMembers$2: function(className, closingBracket) {
        var members, memberStart, type, keyword, t1, t2, t3, t4, token, member;
        members = H.setRuntimeTypeInfo([], [Y.ClassMember]);
        memberStart = this._currentToken;
        type = memberStart.type;
        keyword = memberStart.get$keyword();
        t1 = closingBracket == null;
        t2 = this._parser$_source;
        t3 = [P.Object];
        while (true) {
          if (type !== C.TokenType_Emx)
            if (type !== C.TokenType_2ty)
              if (t1)
                t4 = keyword !== C.Keyword_xkS && keyword !== C.Keyword_jpl;
              else
                t4 = true;
            else
              t4 = false;
          else
            t4 = false;
          if (!t4)
            break;
          if (type === C.TokenType_FmR) {
            token = this._currentToken;
            t4 = H.assertSubtype(H.setRuntimeTypeInfo([token.get$lexeme()], t3), "$isList", t3, "$asList");
            if (token.type === C.TokenType_Emx)
              token = token.previous;
            this._reportError$1(V.AnalysisError$(t2, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_yjH, t4));
            this._currentToken = this._currentToken.next;
          } else {
            member = this.parseClassMember$1(className);
            if (member != null)
              C.JSArray_methods.add$1(members, member);
          }
          token = this._currentToken;
          if (token === memberStart) {
            t4 = H.assertSubtype(H.setRuntimeTypeInfo([token.get$lexeme()], t3), "$isList", t3, "$asList");
            if (token.type === C.TokenType_Emx)
              token = token.previous;
            this._reportError$1(V.AnalysisError$(t2, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_yjH, t4));
            t4 = this._currentToken.next;
            this._currentToken = t4;
            memberStart = t4;
          } else
            memberStart = token;
          type = memberStart.type;
          keyword = memberStart.get$keyword();
        }
        return members;
      },
      _parseConfigurations$0: function() {
        var t1, t2, t3, t4, t5, configurations, token, leftParenthesis, $name, equalToken, value, rightParenthesis, libraryUri, t6;
        for (t1 = U.StringLiteralImpl, t2 = U.AstNodeImpl, t3 = U.DottedNameImpl, t4 = [Y.Configuration], t5 = this._parser$_source, configurations = null; this._currentToken.get$keyword() === C.Keyword_IYE;) {
          if (configurations == null)
            configurations = H.setRuntimeTypeInfo([], t4);
          token = this._currentToken;
          this._currentToken = token.next;
          leftParenthesis = this._expect$1(C.TokenType_5uk);
          $name = this.parseDottedName$0();
          equalToken = this._currentToken;
          if (equalToken.type === C.TokenType_gg40) {
            this._currentToken = equalToken.next;
            value = this.parseStringLiteral$0();
            if (!!value.$isStringInterpolation)
              this._reportError$1(V.AnalysisError$(t5, value.get$offset(value), value.get$length(value), C.ParserErrorCode_Y3F, null));
          } else {
            equalToken = null;
            value = null;
          }
          rightParenthesis = this._expect$1(C.TokenType_coy);
          libraryUri = this._parseUri$0();
          $.$get$astFactory().toString;
          t6 = new U.ConfigurationImpl(token, leftParenthesis, equalToken, rightParenthesis);
          H.assertIsSubtype(t3, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          $name._ast$_parent = t6;
          t6._ast$_name = $name;
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          if (value != null)
            value._ast$_parent = t6;
          t6._ast$_value = value;
          H.assertIsSubtype(t1, t2, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
          libraryUri._ast$_parent = t6;
          t6._uri = libraryUri;
          C.JSArray_methods.add$1(configurations, t6);
        }
        return configurations;
      },
      _parseConstructor$8: function(commentAndMetadata, externalKeyword, constKeyword, factoryKeyword, returnType, period, $name, parameters) {
        var bodyAllowed, separator, initializers, bodyAllowed0, keyword, nextType, period0, constructorName, argumentList, t1, t2, leftParen, expression, comma, message, rightParen, redirectedConstructor, body;
        bodyAllowed = externalKeyword == null;
        if (this._currentToken.type === C.TokenType_gg4) {
          separator = this.getAndAdvance$0();
          initializers = H.setRuntimeTypeInfo([], [Y.ConstructorInitializer]);
          bodyAllowed0 = bodyAllowed;
          do {
            keyword = this._currentToken.get$keyword();
            if (keyword === C.Keyword_ssT) {
              nextType = this._currentToken.next.type;
              if (nextType === C.TokenType_5uk) {
                C.JSArray_methods.add$1(initializers, this.parseRedirectingConstructorInvocation$1(false));
                bodyAllowed0 = false;
              } else if (nextType === C.TokenType_wCI && this._peekAt$1(3).type === C.TokenType_5uk) {
                C.JSArray_methods.add$1(initializers, this.parseRedirectingConstructorInvocation$1(true));
                bodyAllowed0 = false;
              } else
                C.JSArray_methods.add$1(initializers, this.parseConstructorFieldInitializer$1(true));
            } else if (keyword === C.Keyword_WnT) {
              keyword = this.getAndAdvance$0();
              if (this._currentToken.type === C.TokenType_wCI) {
                period0 = this.getAndAdvance$0();
                constructorName = this.parseSimpleIdentifier$0();
              } else {
                period0 = null;
                constructorName = null;
              }
              argumentList = this._parseArgumentListChecked$0();
              $.$get$astFactory().toString;
              C.JSArray_methods.add$1(initializers, U.SuperConstructorInvocationImpl$(keyword, period0, constructorName, argumentList));
            } else {
              t1 = this._currentToken;
              t2 = t1.type;
              if (t2 === C.TokenType_cOk || t2 === C.TokenType_ECn)
                this._reportErrorForToken$3(C.ParserErrorCode_YJ0, t1, null);
              else if (t1.get$keyword() === C.Keyword_a5y) {
                keyword = this.getAndAdvance$0();
                leftParen = this._expect$1(C.TokenType_5uk);
                expression = this.parseExpression2$0();
                if (this._currentToken.type === C.TokenType_O55) {
                  comma = this.getAndAdvance$0();
                  if (this._currentToken.type === C.TokenType_coy) {
                    comma = null;
                    message = null;
                  } else {
                    message = this.parseExpression2$0();
                    if (this._currentToken.type === C.TokenType_O55)
                      this.getAndAdvance$0();
                  }
                } else {
                  comma = null;
                  message = null;
                }
                rightParen = this._expect$1(C.TokenType_coy);
                $.$get$astFactory().toString;
                C.JSArray_methods.add$1(initializers, U.AssertInitializerImpl$(keyword, leftParen, expression, comma, message, rightParen));
              } else
                C.JSArray_methods.add$1(initializers, this.parseConstructorFieldInitializer$1(false));
            }
          } while (this._optional$1(C.TokenType_O55));
          if (factoryKeyword != null)
            this._reportErrorForToken$2(C.ParserErrorCode_qVK, factoryKeyword);
        } else {
          bodyAllowed0 = bodyAllowed;
          separator = null;
          initializers = null;
        }
        if (this._currentToken.type === C.TokenType_tca) {
          separator = this.getAndAdvance$0();
          redirectedConstructor = this.parseConstructorName$0();
          t1 = $.$get$astFactory();
          t2 = this._expect$1(C.TokenType_FmR);
          t1.toString;
          body = new U.EmptyFunctionBodyImpl(t2);
          if (factoryKeyword == null)
            this._reportErrorForNode$2(C.ParserErrorCode_PDC, redirectedConstructor);
        } else {
          body = this.parseFunctionBody$3(true, C.ParserErrorCode_mlp, false);
          t1 = constKeyword != null;
          if (t1 && factoryKeyword != null && bodyAllowed && !J.getInterceptor(body).$isNativeFunctionBody)
            this._reportErrorForToken$2(C.ParserErrorCode_wAg, factoryKeyword);
          else {
            t2 = J.getInterceptor(body);
            if (!!t2.$isEmptyFunctionBody) {
              if (factoryKeyword != null && bodyAllowed && true)
                this._reportErrorForToken$2(C.ParserErrorCode_qBm, factoryKeyword);
            } else if (t1 && !t2.$isNativeFunctionBody)
              this._reportErrorForNode$2(C.ParserErrorCode_sTj, body);
            else if (!bodyAllowed)
              this._reportErrorForNode$2(C.ParserErrorCode_sty, body);
            else if (!bodyAllowed0)
              this._reportErrorForNode$2(C.ParserErrorCode_iDl, body);
          }
          redirectedConstructor = null;
        }
        return $.$get$astFactory().constructorDeclaration$13(commentAndMetadata.comment, commentAndMetadata.metadata, externalKeyword, constKeyword, factoryKeyword, returnType, period, $name, parameters, separator, initializers, redirectedConstructor, body);
      },
      _parseEnumConstantDeclaration$0: function() {
        var commentAndMetadata, t1, $name;
        commentAndMetadata = this.parseCommentAndMetadata$0();
        t1 = this._currentToken;
        $name = t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1) ? this._parseSimpleIdentifierUnchecked$1$isDeclaration(true) : this.createSyntheticIdentifier$0();
        $.$get$astFactory().toString;
        t1 = new U.EnumConstantDeclarationImpl();
        t1.AnnotatedNodeImpl$2(commentAndMetadata.comment, H.assertSubtype(commentAndMetadata.metadata, "$isList", [Y.Annotation], "$asList"));
        t1._ast$_name = t1._becomeParentOf$1$1($name, U.SimpleIdentifierImpl);
        return t1;
      },
      _parseFormalParameterListAfterParen$2$inFunctionType: function(leftParenthesis, inFunctionType) {
        var t1, t2, parameters, leftSquareBracket, rightSquareBracket, leftCurlyBracket, rightCurlyBracket, kind, firstParameter, reportedMultiplePositionalGroups, reportedMultipleNamedGroups, reportedMixedGroups, wasOptionalParameter, t3, initialToken, type, parameter, next, type0, rightParenthesis, t4;
        if (this._currentToken.type === C.TokenType_coy) {
          t1 = $.$get$astFactory();
          t2 = this.getAndAdvance$0();
          t1.toString;
          return U.FormalParameterListImpl$(leftParenthesis, null, null, null, t2);
        }
        t1 = [Y.FormalParameter];
        parameters = H.setRuntimeTypeInfo([], t1);
        t2 = [P.Object];
        leftSquareBracket = null;
        rightSquareBracket = null;
        leftCurlyBracket = null;
        rightCurlyBracket = null;
        kind = C.ParameterKind_REQUIRED_0_false;
        firstParameter = true;
        reportedMultiplePositionalGroups = false;
        reportedMultipleNamedGroups = false;
        reportedMixedGroups = false;
        wasOptionalParameter = false;
        do {
          if (firstParameter)
            firstParameter = false;
          else if (!this._optional$1(C.TokenType_O55))
            if (this._getEndToken$1(leftParenthesis) != null) {
              t3 = H.assertSubtype(H.setRuntimeTypeInfo([","], t2), "$isList", t2, "$asList");
              this._reportErrorForToken$3(C.ParserErrorCode_HuN, this._currentToken, t3);
            } else {
              this._reportErrorForToken$2(C.ParserErrorCode_iB6, this._currentToken.previous);
              break;
            }
          initialToken = this._currentToken;
          type = initialToken.type;
          if (type === C.TokenType_AGi) {
            if (leftSquareBracket != null && !reportedMultiplePositionalGroups) {
              this._reportErrorForToken$3(C.ParserErrorCode_swd, initialToken, null);
              reportedMultiplePositionalGroups = true;
            }
            if (leftCurlyBracket != null && !reportedMixedGroups) {
              this._reportErrorForToken$3(C.ParserErrorCode_Y8r, this._currentToken, null);
              reportedMixedGroups = true;
            }
            leftSquareBracket = this.getAndAdvance$0();
            kind = C.ParameterKind_POSITIONAL_1_true;
            wasOptionalParameter = true;
          } else if (type === C.TokenType_cOk) {
            if (leftCurlyBracket != null && !reportedMultipleNamedGroups) {
              this._reportErrorForToken$3(C.ParserErrorCode_EOY0, initialToken, null);
              reportedMultipleNamedGroups = true;
            }
            if (leftSquareBracket != null && !reportedMixedGroups) {
              this._reportErrorForToken$3(C.ParserErrorCode_Y8r, this._currentToken, null);
              reportedMixedGroups = true;
            }
            leftCurlyBracket = this.getAndAdvance$0();
            kind = C.ParameterKind_NAMED_2_true;
            wasOptionalParameter = true;
          }
          parameter = this.parseFormalParameter$2$inFunctionType(kind, inFunctionType);
          C.JSArray_methods.add$1(parameters, parameter);
          if (kind === C.ParameterKind_REQUIRED_0_false && wasOptionalParameter)
            this._reportErrorForNode$2(C.ParserErrorCode_GDx, parameter);
          t3 = this._currentToken;
          type = t3.type;
          if (type === C.TokenType_O55)
            if (rightSquareBracket == null && rightCurlyBracket == null) {
              next = t3.next;
              type0 = next.type;
              if (type0 === C.TokenType_coy || type0 === C.TokenType_2ty || type0 === C.TokenType_zra) {
                this._currentToken = next;
                type = type0;
              }
            }
          if (type === C.TokenType_zra) {
            rightSquareBracket = this.getAndAdvance$0();
            if (leftSquareBracket == null)
              if (leftCurlyBracket != null) {
                t3 = H.assertSubtype(H.setRuntimeTypeInfo(["}", "]"], t2), "$isList", t2, "$asList");
                this._reportErrorForToken$3(C.ParserErrorCode_q56, this._currentToken, t3);
                t3 = this._currentToken;
                if (t3.type === C.TokenType_2ty && t3.get$isSynthetic())
                  this._currentToken = this._currentToken.next;
                rightCurlyBracket = rightSquareBracket;
                rightSquareBracket = null;
              } else {
                t3 = H.assertSubtype(H.setRuntimeTypeInfo(["["], t2), "$isList", t2, "$asList");
                this._reportErrorForToken$3(C.ParserErrorCode_8gt, this._currentToken, t3);
              }
            kind = C.ParameterKind_REQUIRED_0_false;
          } else if (type === C.TokenType_2ty) {
            rightCurlyBracket = this.getAndAdvance$0();
            if (leftCurlyBracket == null)
              if (leftSquareBracket != null) {
                t3 = H.assertSubtype(H.setRuntimeTypeInfo(["]", "}"], t2), "$isList", t2, "$asList");
                this._reportErrorForToken$3(C.ParserErrorCode_q56, this._currentToken, t3);
                t3 = this._currentToken;
                if (t3.type === C.TokenType_zra && t3.get$isSynthetic())
                  this._currentToken = this._currentToken.next;
                rightSquareBracket = rightCurlyBracket;
                rightCurlyBracket = null;
              } else {
                t3 = H.assertSubtype(H.setRuntimeTypeInfo(["{"], t2), "$isList", t2, "$asList");
                this._reportErrorForToken$3(C.ParserErrorCode_8gt, this._currentToken, t3);
              }
            kind = C.ParameterKind_REQUIRED_0_false;
          }
          t3 = this._currentToken;
        } while (t3.type !== C.TokenType_coy && (initialToken == null ? t3 != null : initialToken !== t3));
        rightParenthesis = this._expect$1(C.TokenType_coy);
        t3 = leftSquareBracket == null;
        if (!t3 && rightSquareBracket == null) {
          t4 = H.assertSubtype(H.setRuntimeTypeInfo(["]"], t2), "$isList", t2, "$asList");
          this._reportErrorForToken$3(C.ParserErrorCode_ivI, this._currentToken, t4);
        }
        if (leftCurlyBracket != null && rightCurlyBracket == null) {
          t2 = H.assertSubtype(H.setRuntimeTypeInfo(["}"], t2), "$isList", t2, "$asList");
          this._reportErrorForToken$3(C.ParserErrorCode_ivI, this._currentToken, t2);
        }
        if (t3)
          leftSquareBracket = leftCurlyBracket;
        if (rightSquareBracket == null)
          rightSquareBracket = rightCurlyBracket;
        $.$get$astFactory().toString;
        return U.FormalParameterListImpl$(leftParenthesis, H.assertSubtype(parameters, "$isList", t1, "$asList"), leftSquareBracket, rightSquareBracket, rightParenthesis);
      },
      _parseFormalParameterListAfterParen$1: function(leftParenthesis) {
        return this._parseFormalParameterListAfterParen$2$inFunctionType(leftParenthesis, false);
      },
      _parseFunctionDeclarationStatementAfterReturnType$2: function(commentAndMetadata, returnType) {
        var declaration, propertyKeyword, t1;
        declaration = this.parseFunctionDeclaration$3(commentAndMetadata, null, returnType);
        propertyKeyword = declaration.propertyKeyword;
        if (propertyKeyword != null)
          if (propertyKeyword.get$keyword() === C.Keyword_cXJ)
            this._reportErrorForToken$2(C.ParserErrorCode_P3F, propertyKeyword);
          else
            this._reportErrorForToken$2(C.ParserErrorCode_7qy, propertyKeyword);
        $.$get$astFactory().toString;
        t1 = new U.FunctionDeclarationStatementImpl();
        t1._functionDeclaration = t1._becomeParentOf$1$1(declaration, U.FunctionDeclarationImpl);
        return t1;
      },
      _parseFunctionTypeAlias$2: function(commentAndMetadata, keyword) {
        var returnType, $name, typeParameters, t1, type, t2, t3, parameters, semicolon, t4, t5, t6;
        returnType = this.get$hasReturnTypeInTypeAlias() ? this.parseTypeAnnotation$1(false) : null;
        $name = this.parseSimpleIdentifier$1$isDeclaration(true);
        typeParameters = this._currentToken.type === C.TokenType_Drw ? this.parseTypeParameterList$0() : null;
        t1 = this._currentToken;
        type = t1.type;
        if (type === C.TokenType_FmR || type === C.TokenType_Emx) {
          this._reportErrorForToken$3(C.ParserErrorCode_unQ, t1, null);
          t1 = $.$get$astFactory();
          t2 = new L.StringToken(C.TokenType_5uk, this._currentToken.offset, null);
          t2._setCommentParent$1(null);
          $.$get$StringUtilities_INTERNER().toString;
          t2._value = "";
          t2 = this._injectToken$1(t2);
          t3 = new L.StringToken(C.TokenType_coy, this._currentToken.offset, null);
          t3._setCommentParent$1(null);
          $.$get$StringUtilities_INTERNER().toString;
          t3._value = "";
          t3 = this._injectToken$1(t3);
          t1.toString;
          parameters = U.FormalParameterListImpl$(t2, null, null, null, t3);
          semicolon = this._expect$1(C.TokenType_FmR);
          return U.FunctionTypeAliasImpl$(commentAndMetadata.comment, H.assertSubtype(commentAndMetadata.metadata, "$isList", [Y.Annotation], "$asList"), keyword, returnType, $name, typeParameters, parameters, semicolon);
        } else {
          t2 = commentAndMetadata.comment;
          t3 = commentAndMetadata.metadata;
          t4 = [Y.Annotation];
          if (type === C.TokenType_5uk) {
            parameters = this._parseFormalParameterListAfterParen$2$inFunctionType(this.getAndAdvance$0(), false);
            this._validateFormalParameterList$1(parameters);
            semicolon = this._expect$1(C.TokenType_FmR);
            $.$get$astFactory().toString;
            return U.FunctionTypeAliasImpl$(t2, H.assertSubtype(t3, "$isList", t4, "$asList"), keyword, returnType, $name, typeParameters, parameters, semicolon);
          } else {
            this._reportErrorForToken$3(C.ParserErrorCode_unQ, t1, null);
            t1 = $.$get$astFactory();
            t5 = new L.StringToken(C.TokenType_5uk, this._currentToken.offset, null);
            t5._setCommentParent$1(null);
            $.$get$StringUtilities_INTERNER().toString;
            t5._value = "";
            t5 = this._injectToken$1(t5);
            t6 = new L.StringToken(C.TokenType_coy, this._currentToken.offset, null);
            t6._setCommentParent$1(null);
            $.$get$StringUtilities_INTERNER().toString;
            t6._value = "";
            t6 = this._injectToken$1(t6);
            t1.toString;
            t6 = U.FormalParameterListImpl$(t5, null, null, null, t6);
            t5 = new L.StringToken(C.TokenType_FmR, this._currentToken.offset, null);
            t5._setCommentParent$1(null);
            $.$get$StringUtilities_INTERNER().toString;
            t5._value = "";
            t5 = this._injectToken$1(t5);
            return U.FunctionTypeAliasImpl$(t2, H.assertSubtype(t3, "$isList", t4, "$asList"), keyword, returnType, $name, typeParameters, t6, t5);
          }
        }
      },
      _parseGenericCommentTypeParameters$0: function() {
        if (this._injectGenericComment$2(C.TokenType_Y2Y, 2))
          return this.parseTypeParameterList$0();
        return;
      },
      _parseGenericMethodTypeParameters$0: function() {
        if (this._currentToken.type === C.TokenType_Drw || this._injectGenericComment$2(C.TokenType_Y2Y, 2))
          return this.parseTypeParameterList$0();
        return;
      },
      _parseLibraryName$2: function(missingNameError, missingNameToken) {
        var t1, t2, t3, t4;
        t1 = this._currentToken;
        if (t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1))
          return this.parseLibraryIdentifier$0();
        else if (this._currentToken.type === C.TokenType_86y)
          this._reportErrorForNode$2(C.ParserErrorCode_23B, this.parseStringLiteral$0());
        else
          this._reportErrorForToken$2(missingNameError, missingNameToken);
        t1 = $.$get$astFactory();
        t2 = Y.SimpleIdentifier;
        t3 = [t2];
        t4 = H.setRuntimeTypeInfo([this.createSyntheticIdentifier$0()], t3);
        t1.toString;
        H.assertSubtype(t4, "$isList", t3, "$asList");
        t1 = new U.LibraryIdentifierImpl();
        t2 = new U.NodeListImpl(t1, H.setRuntimeTypeInfo([], t3), [t2]);
        t2.addAll$1(0, t4);
        t1._components = t2;
        return t1;
      },
      _parseMethodDeclarationAfterParameters$7: function(commentAndMetadata, externalKeyword, staticKeyword, returnType, $name, typeParameters, parameters) {
        var t1, body;
        t1 = externalKeyword == null;
        body = this.parseFunctionBody$3(!t1 || staticKeyword == null, C.ParserErrorCode_mlp, false);
        if (!t1) {
          if (!J.getInterceptor(body).$isEmptyFunctionBody)
            this._reportErrorForNode$2(C.ParserErrorCode_mXu, body);
        } else if (staticKeyword != null)
          if (!!J.getInterceptor(body).$isEmptyFunctionBody && true)
            this._reportErrorForNode$2(C.ParserErrorCode_JNA, body);
        return $.$get$astFactory().methodDeclaration$11(commentAndMetadata.comment, commentAndMetadata.metadata, externalKeyword, staticKeyword, returnType, null, null, $name, typeParameters, parameters, body);
      },
      _parseMethodDeclarationAfterReturnType$4: function(commentAndMetadata, externalKeyword, staticKeyword, returnType) {
        var methodName, typeParameters, t1, type, t2, t3, parameters;
        methodName = this.parseSimpleIdentifier$1$isDeclaration(true);
        typeParameters = this._parseGenericMethodTypeParameters$0();
        t1 = this._currentToken;
        type = t1.type;
        if (type !== C.TokenType_5uk)
          t2 = type === C.TokenType_cOk || type === C.TokenType_ECn;
        else
          t2 = false;
        if (t2) {
          this._reportErrorForToken$2(C.ParserErrorCode_5Nb, t1.previous);
          t1 = $.$get$astFactory();
          t2 = new L.StringToken(C.TokenType_5uk, this._currentToken.offset, null);
          t2._setCommentParent$1(null);
          $.$get$StringUtilities_INTERNER().toString;
          t2._value = "";
          t2 = this._injectToken$1(t2);
          t3 = new L.StringToken(C.TokenType_coy, this._currentToken.offset, null);
          t3._setCommentParent$1(null);
          $.$get$StringUtilities_INTERNER().toString;
          t3._value = "";
          t3 = this._injectToken$1(t3);
          t1.toString;
          parameters = U.FormalParameterListImpl$(t2, null, null, null, t3);
        } else
          parameters = this.parseFormalParameterList$0();
        this._validateFormalParameterList$1(parameters);
        return this._parseMethodDeclarationAfterParameters$7(commentAndMetadata, externalKeyword, staticKeyword, returnType, methodName, typeParameters, parameters);
      },
      _parseOperatorAfterKeyword$4: function(commentAndMetadata, externalKeyword, returnType, operatorKeyword) {
        var t1, t2, t3, $name, previous, parameters, body;
        t1 = this._currentToken;
        t2 = t1.type;
        if (!t2.isUserDefinableOperator) {
          t2 = t2 === C.TokenType_sxw ? C.ParserErrorCode_kCr : C.ParserErrorCode_NIe0;
          t3 = [P.Object];
          t3 = H.assertSubtype(H.setRuntimeTypeInfo([t1.get$lexeme()], t3), "$isList", t3, "$asList");
          this._reportErrorForToken$3(t2, this._currentToken, t3);
        }
        t1 = $.$get$astFactory();
        $name = t1.simpleIdentifier$2$isDeclaration(this.getAndAdvance$0(), true);
        t2 = this._currentToken;
        if (t2.type === C.TokenType_tca) {
          previous = t2.previous;
          t3 = previous.type;
          if ((t3 === C.TokenType_gg40 || t3 === C.TokenType_Yb0) && t2.offset === previous.offset + 2) {
            t2 = [P.Object];
            t2 = H.assertSubtype(H.setRuntimeTypeInfo([H.S(previous.get$lexeme()) + H.S(this._currentToken.get$lexeme())], t2), "$isList", t2, "$asList");
            this._reportErrorForToken$3(C.ParserErrorCode_kCr, this._currentToken, t2);
            this._currentToken = this._currentToken.next;
          }
        }
        parameters = this.parseFormalParameterList$0();
        this._validateFormalParameterList$1(parameters);
        body = this.parseFunctionBody$3(true, C.ParserErrorCode_mlp, false);
        if (externalKeyword != null && !J.getInterceptor(body).$isEmptyFunctionBody)
          this._reportErrorForToken$3(C.ParserErrorCode_oUe, this._currentToken, null);
        return t1.methodDeclaration$11(commentAndMetadata.comment, commentAndMetadata.metadata, externalKeyword, null, returnType, null, operatorKeyword, $name, null, parameters, body);
      },
      _parseOptionalReturnType$0: function() {
        var typeComment, keyword, t1, next, afterTypeParameters, next2, next3;
        typeComment = this._parseOptionalTypeNameComment$0();
        if (typeComment != null)
          return typeComment;
        keyword = this._currentToken.get$keyword();
        if (keyword === C.Keyword_FmR) {
          if (this._atGenericFunctionTypeAfterReturnType$1(this._currentToken.next))
            return this.parseTypeAnnotation$1(false);
          return U.TypeNameImpl$($.$get$astFactory().simpleIdentifier$1(this.getAndAdvance$0()), null, null);
        } else {
          t1 = this._currentToken;
          if (t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1)) {
            next = this._currentToken.next;
            if (keyword !== C.Keyword_cXJ)
              if (keyword !== C.Keyword_rb5)
                if (keyword !== C.Keyword_IEU) {
                  t1 = next.type;
                  t1 = t1 === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(next) || t1 === C.TokenType_Drw;
                } else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
            if (t1) {
              afterTypeParameters = this._skipTypeParameterList$1(next);
              if (afterTypeParameters != null && afterTypeParameters.type === C.TokenType_5uk)
                return;
              return this.parseTypeAnnotation$1(false);
            }
            next2 = next.next;
            next3 = next2.next;
            if (next.type === C.TokenType_wCI)
              if (next2.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(next2)) {
                t1 = next3.type;
                t1 = t1 === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(next3) || t1 === C.TokenType_Drw;
              } else
                t1 = false;
            else
              t1 = false;
            if (t1)
              return this.parseTypeAnnotation$1(false);
          }
        }
        return;
      },
      _parseOptionalTypeArguments$0: function() {
        if (this._currentToken.type === C.TokenType_Drw || this._injectGenericComment$2(C.TokenType_Y2Y, 2))
          return this.parseTypeArgumentList$0();
        return;
      },
      _parseOptionalTypeNameComment$0: function() {
        if (this._injectGenericComment$2(C.TokenType_y1e, 3))
          return this._parseTypeName$1(false);
        return;
      },
      _parsePartOfDirective$1: function(commentAndMetadata) {
        var partKeyword, ofKeyword, libraryUri, semicolon, libraryName;
        partKeyword = this.getAndAdvance$0();
        ofKeyword = this.getAndAdvance$0();
        if (this._currentToken.type === C.TokenType_86y) {
          libraryUri = this._parseUri$0();
          semicolon = this._expect$1(C.TokenType_FmR);
          $.$get$astFactory().toString;
          return U.PartOfDirectiveImpl$(commentAndMetadata.comment, H.assertSubtype(commentAndMetadata.metadata, "$isList", [Y.Annotation], "$asList"), partKeyword, ofKeyword, libraryUri, null, semicolon);
        }
        libraryName = this._parseLibraryName$2(C.ParserErrorCode_yLH, ofKeyword);
        semicolon = this._expect$1(C.TokenType_FmR);
        $.$get$astFactory().toString;
        return U.PartOfDirectiveImpl$(commentAndMetadata.comment, H.assertSubtype(commentAndMetadata.metadata, "$isList", [Y.Annotation], "$asList"), partKeyword, ofKeyword, null, libraryName, semicolon);
      },
      _parsePrefixedIdentifierAfterIdentifier$1: function(qualifier) {
        var period, qualified;
        if (this._currentToken.type !== C.TokenType_wCI || this._injectGenericComment$2(C.TokenType_Y2Y, 2))
          return qualifier;
        period = this.getAndAdvance$0();
        qualified = this.parseSimpleIdentifier$0();
        $.$get$astFactory().toString;
        return U.PrefixedIdentifierImpl$(qualifier, period, qualified);
      },
      _parseSimpleIdentifierUnchecked$1$isDeclaration: function(isDeclaration) {
        var lexeme, t1;
        lexeme = this._currentToken.get$lexeme();
        if (this._inAsync || this._inGenerator) {
          t1 = $.$get$Parser_ASYNC();
          if (lexeme == null ? t1 != null : lexeme !== t1) {
            t1 = $.$get$Parser__AWAIT();
            if (lexeme == null ? t1 != null : lexeme !== t1) {
              t1 = $.$get$Parser__YIELD();
              t1 = lexeme == null ? t1 == null : lexeme === t1;
            } else
              t1 = true;
          } else
            t1 = true;
        } else
          t1 = false;
        if (t1)
          this._reportErrorForToken$3(C.ParserErrorCode_gkc, this._currentToken, null);
        return $.$get$astFactory().simpleIdentifier$2$isDeclaration(this.getAndAdvance$0(), isDeclaration);
      },
      _parseSimpleIdentifierUnchecked$0: function() {
        return this._parseSimpleIdentifierUnchecked$1$isDeclaration(false);
      },
      _parseStatementList$0: function() {
        var statements, statementStart, type, t1, t2, token, t3;
        statements = H.setRuntimeTypeInfo([], [Y.Statement]);
        statementStart = this._currentToken;
        type = statementStart.type;
        t1 = this._parser$_source;
        t2 = [P.Object];
        while (true) {
          if (!(type !== C.TokenType_Emx && type !== C.TokenType_2ty && !this.isSwitchMember$0()))
            break;
          C.JSArray_methods.add$1(statements, this.parseStatement2$0());
          token = this._currentToken;
          if (token == null ? statementStart == null : token === statementStart) {
            t3 = H.assertSubtype(H.setRuntimeTypeInfo([token.get$lexeme()], t2), "$isList", t2, "$asList");
            if (token.type === C.TokenType_Emx)
              token = token.previous;
            this._reportError$1(V.AnalysisError$(t1, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_yjH, t3));
            t3 = this._currentToken.next;
            this._currentToken = t3;
            statementStart = t3;
          } else
            statementStart = token;
          type = statementStart.type;
        }
        return statements;
      },
      _parseStringInterpolation$1: function(string) {
        var elements, openToken, wasInInitializer, expression, rightBracket, t1, t2, t3, isExpression, t4, hasMore, token, t5, t6, token0, expression0, string0;
        t1 = $.$get$astFactory();
        t2 = this.computeStringValue$3(string.get$lexeme(), true, false);
        t1.toString;
        t1 = Y.InterpolationElement;
        t3 = [t1];
        elements = H.setRuntimeTypeInfo([new U.InterpolationStringImpl(string, t2)], t3);
        isExpression = this._currentToken.type === C.TokenType_skV;
        for (t2 = U.ExpressionImpl, t4 = U.AstNodeImpl, hasMore = true; hasMore;) {
          token = this._currentToken;
          if (isExpression) {
            this._currentToken = token.next;
            openToken = token;
            wasInInitializer = this._inInitializer;
            this._inInitializer = false;
            try {
              expression = this.parseExpression2$0();
              rightBracket = this._expect$1(C.TokenType_2ty);
              $.$get$astFactory().toString;
              t5 = H.interceptedTypeCheck(openToken, "$isToken");
              t6 = H.interceptedTypeCheck(expression, "$isExpression");
              t5 = new U.InterpolationExpressionImpl(t5, H.interceptedTypeCheck(rightBracket, "$isToken"));
              H.assertIsSubtype(t2, t4, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
              if (t6 != null)
                t6._ast$_parent = t5;
              t5._expression = t6;
              J.add$1$ax(elements, t5);
            } finally {
              this._inInitializer = wasInInitializer;
            }
          } else {
            t5 = token.next;
            this._currentToken = t5;
            if (t5.get$keyword() === C.Keyword_ssT) {
              t5 = $.$get$astFactory();
              token0 = this._currentToken;
              this._currentToken = token0.next;
              t5.toString;
              expression0 = new U.ThisExpressionImpl(token0);
            } else
              expression0 = this.parseSimpleIdentifier$0();
            $.$get$astFactory().toString;
            t5 = new U.InterpolationExpressionImpl(token, null);
            H.assertIsSubtype(t2, t4, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in '_becomeParentOf'.");
            expression0._ast$_parent = t5;
            t5._expression = expression0;
            J.add$1$ax(elements, t5);
          }
          string0 = this._currentToken;
          if (string0.type === C.TokenType_86y) {
            t5 = string0.next;
            this._currentToken = t5;
            t5 = t5.type;
            isExpression = t5 === C.TokenType_skV;
            hasMore = isExpression || t5 === C.TokenType_MvE;
            t5 = $.$get$astFactory();
            t6 = this.computeStringValue$3(string0.get$lexeme(), false, !hasMore);
            t5.toString;
            J.add$1$ax(elements, new U.InterpolationStringImpl(string0, t6));
            string = string0;
          } else
            hasMore = false;
        }
        $.$get$astFactory().toString;
        t2 = H.assertSubtype(elements, "$isList", t3, "$asList");
        t4 = new U.StringInterpolationImpl();
        t1 = new U.NodeListImpl(t4, H.setRuntimeTypeInfo([], t3), [t1]);
        t1.addAll$1(0, t2);
        t4._elements = t1;
        return t4;
      },
      _parseStringLiteralUnchecked$0: function() {
        var t1, t2, strings, string, t3, t4;
        t1 = Y.StringLiteral;
        t2 = [t1];
        strings = H.setRuntimeTypeInfo([], t2);
        do {
          string = this.getAndAdvance$0();
          t3 = this._currentToken.type;
          if (t3 === C.TokenType_skV || t3 === C.TokenType_MvE)
            C.JSArray_methods.add$1(strings, this._parseStringInterpolation$1(string));
          else {
            t3 = $.$get$astFactory();
            t4 = this.computeStringValue$3(string.get$lexeme(), true, true);
            t3.toString;
            t3 = new U.SimpleStringLiteralImpl(string);
            $.$get$StringUtilities_INTERNER0().toString;
            t3._ast$_value = t4;
            C.JSArray_methods.add$1(strings, t3);
          }
        } while (this._currentToken.type === C.TokenType_86y);
        t3 = strings.length;
        if (t3 === 1) {
          if (0 >= t3)
            return H.ioore(strings, 0);
          t1 = strings[0];
        } else {
          $.$get$astFactory().toString;
          H.assertSubtype(strings, "$isList", t2, "$asList");
          t3 = new U.AdjacentStringsImpl();
          t1 = new U.NodeListImpl(t3, H.setRuntimeTypeInfo([], t2), [t1]);
          t1.addAll$1(0, strings);
          t3._ast$_strings = t1;
          t1 = t3;
        }
        return t1;
      },
      _parseTypeName$1: function(inExpression) {
        var t1, typeName, typeArguments;
        t1 = this._currentToken;
        if (t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1))
          typeName = this._parsePrefixedIdentifierAfterIdentifier$1(this._parseSimpleIdentifierUnchecked$0());
        else if (this._currentToken.get$keyword() === C.Keyword_Owc) {
          this._reportErrorForToken$3(C.ParserErrorCode_AKA, this._currentToken, null);
          typeName = $.$get$astFactory().simpleIdentifier$1(this.getAndAdvance$0());
        } else {
          typeName = this.createSyntheticIdentifier$0();
          this._reportErrorForToken$3(C.ParserErrorCode_ww8, this._currentToken, null);
        }
        typeArguments = this._parseOptionalTypeArguments$0();
        $.$get$astFactory().toString;
        return U.TypeNameImpl$(typeName, typeArguments, null);
      },
      _parseUri$0: function() {
        var isKeywordAfterUri, t1, type, token, isValidInUri, t2, endToken, endOffset, value, newToken;
        isKeywordAfterUri = new X.Parser__parseUri_isKeywordAfterUri();
        t1 = this._currentToken;
        type = t1.type;
        if (type !== C.TokenType_86y && type !== C.TokenType_FmR && !isKeywordAfterUri.call$1(t1)) {
          token = this._currentToken;
          isValidInUri = new X.Parser__parseUri_isValidInUri();
          while (true) {
            t1 = token.type;
            if (t1 !== C.TokenType_GbN) {
              t2 = token.get$keyword();
              if (t2 == null)
                t2 = null;
              else
                t2 = t2.isBuiltIn || t2.isPseudo;
              if (t2 == null)
                t2 = false;
            } else
              t2 = true;
            if (!(t2 && !isKeywordAfterUri.call$1(token) || isValidInUri.call$1(token)))
              break;
            token = token.next;
          }
          if (t1 === C.TokenType_FmR || isKeywordAfterUri.call$1(token)) {
            endToken = token.previous;
            token = this._currentToken;
            endOffset = token.offset + token.get$length(token);
            t1 = H.S(token.get$lexeme());
            for (; token !== endToken;) {
              token = token.next;
              if (token.offset !== endOffset || token._precedingComment != null)
                return this.parseStringLiteral$0();
              t1 += H.S(token.get$lexeme());
              endOffset = token.offset + token.get$length(token);
            }
            value = t1.charCodeAt(0) == 0 ? t1 : t1;
            t1 = "'" + value + "'";
            newToken = new L.StringToken(C.TokenType_86y, this._currentToken.offset, null);
            newToken._setCommentParent$1(null);
            $.$get$StringUtilities_INTERNER().toString;
            newToken._value = t1;
            this._reportErrorForToken$2(C.ParserErrorCode_CDT, newToken);
            this._currentToken = endToken.next;
            $.$get$astFactory().toString;
            t1 = new U.SimpleStringLiteralImpl(newToken);
            $.$get$StringUtilities_INTERNER0().toString;
            t1._ast$_value = value;
            return t1;
          }
        }
        return this.parseStringLiteral$0();
      },
      _parseVariableDeclarationStatementAfterType$3: function(commentAndMetadata, keyword, type) {
        var variableList, semicolon, t1;
        variableList = this.parseVariableDeclarationListAfterType$3(commentAndMetadata, keyword, type);
        semicolon = this._expect$1(C.TokenType_FmR);
        $.$get$astFactory().toString;
        t1 = new U.VariableDeclarationStatementImpl(semicolon);
        t1._variableList = t1._becomeParentOf$1$1(variableList, U.VariableDeclarationListImpl);
        return t1;
      },
      _peekAt$1: function(distance) {
        var token, i;
        token = this._currentToken;
        for (i = 0; i < distance; ++i)
          token = token.next;
        return token;
      },
      _removeGitHubInlineCode$1: function(comment) {
        var index, beginIndex, t1, endIndex;
        for (index = 0; true;) {
          beginIndex = J.getInterceptor$asx(comment).indexOf$2(comment, "`", index);
          if (beginIndex === -1)
            break;
          t1 = beginIndex + 1;
          endIndex = C.JSString_methods.indexOf$2(comment, "`", t1);
          if (endIndex === -1)
            break;
          comment = C.JSString_methods.substring$2(comment, 0, t1) + C.JSString_methods.$mul(" ", endIndex - beginIndex - 1) + C.JSString_methods.substring$1(comment, endIndex);
          index = endIndex + 1;
        }
        return comment;
      },
      _reportError$1: function(error) {
        if (this._errorListenerLock !== 0)
          return;
        this._errorListener.onError$1(0, error);
      },
      _reportErrorForNode$3: function(errorCode, node, $arguments) {
        this._reportError$1(V.AnalysisError$(this._parser$_source, node.get$offset(node), node.get$length(node), errorCode, $arguments));
      },
      _reportErrorForNode$2: function(errorCode, node) {
        return this._reportErrorForNode$3(errorCode, node, null);
      },
      _reportErrorForToken$3: function(errorCode, token, $arguments) {
        H.assertSubtype($arguments, "$isList", [P.Object], "$asList");
        if (token.type === C.TokenType_Emx)
          token = token.previous;
        this._reportError$1(V.AnalysisError$(this._parser$_source, token.offset, Math.max(token.get$length(token), 1), errorCode, $arguments));
      },
      _reportErrorForToken$2: function(errorCode, token) {
        return this._reportErrorForToken$3(errorCode, token, null);
      },
      _skipFinalConstVarOrType$1: function(startToken) {
        var keyword, next, next2, t1;
        keyword = startToken.get$keyword();
        if (keyword === C.Keyword_IU6 || keyword === C.Keyword_M8y) {
          next = startToken.next;
          if (next.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(next)) {
            next2 = next.next;
            t1 = next2.type;
            if (t1 === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(next2) || t1 === C.TokenType_Drw || t1 === C.TokenType_wCI)
              return this.skipTypeName$1(next);
            return next;
          }
        } else if (keyword === C.Keyword_Owc)
          return startToken.next;
        else if (startToken.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(startToken)) {
          next = startToken.next;
          t1 = next.type;
          if (!(t1 === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(next)))
            if (t1 !== C.TokenType_Drw)
              if (next.get$keyword() !== C.Keyword_ssT)
                if (t1 === C.TokenType_wCI) {
                  t1 = next.next;
                  if (t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1)) {
                    t1 = next.next.next;
                    if (!(t1.type === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(t1))) {
                      t1 = next.next.next;
                      t1 = t1.type === C.TokenType_Drw || t1.get$keyword() === C.Keyword_ssT;
                    } else
                      t1 = true;
                  } else
                    t1 = false;
                } else
                  t1 = false;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
          if (t1)
            return this.skipTypeAnnotation$1(startToken);
        }
        return;
      },
      _skipFormalParameterList$1: function(startToken) {
        var next, t1, t2, afterParameters, afterType;
        if (startToken.type !== C.TokenType_5uk)
          return;
        next = startToken.next;
        t1 = next.type;
        if (t1 === C.TokenType_coy)
          return next.next;
        if (!next.matchesAny$1(C.List_e60))
          if (next.get$keyword() !== C.Keyword_FmR)
            t2 = (t1 === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(next)) && next.next.matchesAny$1(C.List_wOl);
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return this._skipPastMatchingToken$1(startToken);
        if ((t1 === C.TokenType_GbN || this._tokenMatchesPseudoKeyword$1(next)) && next.next.type === C.TokenType_5uk) {
          afterParameters = this._skipFormalParameterList$1(next.next);
          if (afterParameters != null && afterParameters.matchesAny$1(C.List_wOl))
            return this._skipPastMatchingToken$1(startToken);
        }
        afterType = this._skipFinalConstVarOrType$1(next);
        if (afterType == null)
          return;
        if (this.skipSimpleIdentifier$1(afterType) == null)
          return;
        return this._skipPastMatchingToken$1(startToken);
      },
      _skipPastMatchingToken$1: function(startToken) {
        var closeParen;
        if (!(startToken instanceof L.BeginToken))
          return;
        closeParen = startToken.endToken;
        if (closeParen == null)
          return;
        return closeParen.next;
      },
      _skipStringInterpolation$1: function(startToken) {
        var type, token, t1, bracketNestingLevel;
        type = startToken.type;
        token = startToken;
        while (true) {
          t1 = type === C.TokenType_skV;
          if (!(t1 || type === C.TokenType_MvE))
            break;
          if (t1) {
            token = token.next;
            type = token.type;
            for (bracketNestingLevel = 1; bracketNestingLevel > 0;) {
              if (type === C.TokenType_Emx)
                return;
              else if (type === C.TokenType_cOk) {
                ++bracketNestingLevel;
                token = token.next;
              } else if (type === C.TokenType_2ty) {
                --bracketNestingLevel;
                token = token.next;
              } else if (type === C.TokenType_86y) {
                token = this.skipStringLiteral$1(token);
                if (token == null)
                  return;
              } else
                token = token.next;
              type = token.type;
            }
            token = token.next;
            token.type;
          } else {
            token = token.next;
            if (token.type !== C.TokenType_GbN)
              return;
            token = token.next;
          }
          type = token.type;
          if (type === C.TokenType_86y) {
            token = token.next;
            type = token.type;
          }
        }
        return token;
      },
      _skipTypeParameterList$1: function(startToken) {
        var next, depth, t1, fakeEquals;
        if (startToken.type !== C.TokenType_Drw)
          return;
        next = startToken.next;
        for (depth = 1; depth > 0;) {
          t1 = next.type;
          if (t1 === C.TokenType_Emx)
            return;
          else if (t1 === C.TokenType_Drw)
            ++depth;
          else if (t1 === C.TokenType_wOL)
            --depth;
          else if (t1 === C.TokenType_0Ef) {
            if (depth === 1) {
              fakeEquals = new L.SimpleToken(C.TokenType_tca, next.offset + 2, null);
              fakeEquals._setCommentParent$1(null);
              fakeEquals.next = next.next;
              return fakeEquals;
            }
            --depth;
          } else if (t1 === C.TokenType_4XV)
            depth -= 2;
          else if (t1 === C.TokenType_DCV) {
            if (depth < 2)
              return;
            else if (depth === 2) {
              fakeEquals = new L.SimpleToken(C.TokenType_tca, next.offset + 2, null);
              fakeEquals._setCommentParent$1(null);
              fakeEquals.next = next.next;
              return fakeEquals;
            }
            depth -= 2;
          }
          next = next.next;
        }
        return next;
      },
      _splitIndex$0: function() {
        var leftBracket, rightBracket;
        leftBracket = H.interceptedTypeCheck(this._createToken$3$isBegin(this._currentToken, C.TokenType_AGi, true), "$isBeginToken");
        rightBracket = new L.SimpleToken(C.TokenType_zra, this._currentToken.offset + 1, null);
        rightBracket._setCommentParent$1(null);
        leftBracket.endToken = rightBracket;
        rightBracket.setNext$1(this._currentToken.next);
        leftBracket.setNext$1(rightBracket);
        this._currentToken.previous.setNext$1(leftBracket);
        this._currentToken = leftBracket;
      },
      _tokenMatchesPseudoKeyword$1: function(token) {
        var t1 = token.get$keyword();
        if (t1 == null)
          t1 = null;
        else
          t1 = t1.isBuiltIn || t1.isPseudo;
        return t1 == null ? false : t1;
      },
      _translateCharacter$3: function(buffer, lexeme, index) {
        var currentChar, $length, currentIndex, t1, firstDigit, secondDigit, digitCount, value, token, thirdDigit, fourthDigit;
        currentChar = J.getInterceptor$s(lexeme).codeUnitAt$1(lexeme, index);
        if (currentChar !== 92) {
          buffer._contents += H.Primitives_stringFromCharCode(currentChar);
          return index + 1;
        }
        $length = lexeme.length;
        currentIndex = index + 1;
        if (currentIndex >= $length)
          return $length;
        currentChar = C.JSString_methods.codeUnitAt$1(lexeme, currentIndex);
        if (currentChar === 110)
          buffer._contents += H.Primitives_stringFromCharCode(10);
        else if (currentChar === 114)
          buffer._contents += H.Primitives_stringFromCharCode(13);
        else if (currentChar === 102)
          buffer._contents += H.Primitives_stringFromCharCode(12);
        else if (currentChar === 98)
          buffer._contents += H.Primitives_stringFromCharCode(8);
        else if (currentChar === 116)
          buffer._contents += H.Primitives_stringFromCharCode(9);
        else if (currentChar === 118)
          buffer._contents += H.Primitives_stringFromCharCode(11);
        else if (currentChar === 120) {
          t1 = currentIndex + 2;
          if (t1 >= $length) {
            this._reportErrorForToken$3(C.ParserErrorCode_8Gl, this._currentToken, null);
            return $length;
          }
          firstDigit = C.JSString_methods.codeUnitAt$1(lexeme, currentIndex + 1);
          secondDigit = C.JSString_methods.codeUnitAt$1(lexeme, t1);
          if (!this._isHexDigit$1(firstDigit) || !this._isHexDigit$1(secondDigit))
            this._reportErrorForToken$3(C.ParserErrorCode_8Gl, this._currentToken, null);
          else
            buffer._contents += H.Primitives_stringFromCharCode((G.Character_digit(firstDigit, 16) << 4 >>> 0) + G.Character_digit(secondDigit, 16));
          return currentIndex + 3;
        } else if (currentChar === 117) {
          ++currentIndex;
          if (currentIndex >= $length) {
            this._reportErrorForToken$3(C.ParserErrorCode_TLI, this._currentToken, null);
            return $length;
          }
          currentChar = C.JSString_methods.codeUnitAt$1(lexeme, currentIndex);
          if (currentChar === 123) {
            ++currentIndex;
            if (currentIndex >= $length) {
              this._reportErrorForToken$3(C.ParserErrorCode_TLI, this._currentToken, null);
              return $length;
            }
            currentChar = C.JSString_methods.codeUnitAt$1(lexeme, currentIndex);
            for (digitCount = 0, value = 0; currentChar !== 125;) {
              if (!(48 <= currentChar && currentChar <= 57))
                if (!(65 <= currentChar && currentChar <= 70))
                  t1 = 97 <= currentChar && currentChar <= 102;
                else
                  t1 = true;
              else
                t1 = true;
              if (!t1) {
                token = this._currentToken;
                if (token.type === C.TokenType_Emx)
                  token = token.previous;
                this._reportError$1(V.AnalysisError$(this._parser$_source, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_TLI, null));
                ++currentIndex;
                while (true) {
                  if (!(currentIndex < $length && C.JSString_methods.codeUnitAt$1(lexeme, currentIndex) !== 125))
                    break;
                  ++currentIndex;
                }
                return currentIndex + 1;
              }
              ++digitCount;
              value = (value << 4 >>> 0) + G.Character_digit(currentChar, 16);
              ++currentIndex;
              if (currentIndex >= $length) {
                token = this._currentToken;
                if (token.type === C.TokenType_Emx)
                  token = token.previous;
                this._reportError$1(V.AnalysisError$(this._parser$_source, token.offset, Math.max(token.get$length(token), 1), C.ParserErrorCode_TLI, null));
                return $length;
              }
              currentChar = C.JSString_methods.codeUnitAt$1(lexeme, currentIndex);
            }
            if (digitCount < 1 || digitCount > 6)
              this._reportErrorForToken$3(C.ParserErrorCode_TLI, this._currentToken, null);
            this._appendCodePoint$5(buffer, lexeme, value, index, currentIndex);
            return currentIndex + 1;
          } else {
            t1 = currentIndex + 3;
            if (t1 >= $length) {
              this._reportErrorForToken$3(C.ParserErrorCode_TLI, this._currentToken, null);
              return $length;
            }
            secondDigit = C.JSString_methods.codeUnitAt$1(lexeme, currentIndex + 1);
            thirdDigit = C.JSString_methods.codeUnitAt$1(lexeme, currentIndex + 2);
            fourthDigit = C.JSString_methods.codeUnitAt$1(lexeme, t1);
            if (!this._isHexDigit$1(currentChar) || !this._isHexDigit$1(secondDigit) || !this._isHexDigit$1(thirdDigit) || !this._isHexDigit$1(fourthDigit))
              this._reportErrorForToken$3(C.ParserErrorCode_TLI, this._currentToken, null);
            else
              this._appendCodePoint$5(buffer, lexeme, (((G.Character_digit(currentChar, 16) << 4 >>> 0) + G.Character_digit(secondDigit, 16) << 4 >>> 0) + G.Character_digit(thirdDigit, 16) << 4 >>> 0) + G.Character_digit(fourthDigit, 16), index, t1);
            return currentIndex + 4;
          }
        } else
          buffer._contents += H.Primitives_stringFromCharCode(currentChar);
        return currentIndex + 1;
      },
      _validateFormalParameterList$1: function(parameterList) {
        var t1, t2, t3;
        for (t1 = parameterList._parameters, t1 = new H.ListIterator(t1, t1.get$length(t1), 0, [H.getRuntimeTypeArgument(t1, "ListMixin", 0)]), t2 = this._parser$_source; t1.moveNext$0();) {
          t3 = t1.__internal$_current;
          if (!!J.getInterceptor(t3).$isFieldFormalParameter) {
            t3 = t3._identifier;
            this._reportError$1(V.AnalysisError$(t2, t3.get$offset(t3), t3.get$length(t3), C.ParserErrorCode_FIw, null));
          }
        }
      },
      _validateModifiersForConstructor$1: function(modifiers) {
        var t1, externalKeyword, constKeyword, factoryKeyword;
        t1 = modifiers.abstractKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_Djg, t1);
        t1 = modifiers.covariantKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_MUs, t1);
        t1 = modifiers.finalKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_MUs0, t1);
        t1 = modifiers.staticKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_r7L, t1);
        t1 = modifiers.varKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_WLk, t1);
        externalKeyword = modifiers.externalKeyword;
        constKeyword = modifiers.constKeyword;
        factoryKeyword = modifiers.factoryKeyword;
        t1 = externalKeyword != null;
        if (t1 && constKeyword != null && constKeyword.offset < externalKeyword.offset)
          this._reportErrorForToken$2(C.ParserErrorCode_UgT, externalKeyword);
        if (t1 && factoryKeyword != null && factoryKeyword.offset < externalKeyword.offset)
          this._reportErrorForToken$2(C.ParserErrorCode_wEo0, externalKeyword);
        return constKeyword;
      },
      _validateModifiersForField$1: function(modifiers) {
        var t1, staticKeyword, covariantKeyword, constKeyword, finalKeyword, varKeyword;
        if (modifiers.abstractKeyword != null)
          this._reportErrorForToken$3(C.ParserErrorCode_Djg, this._currentToken, null);
        t1 = modifiers.externalKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_kaS, t1);
        t1 = modifiers.factoryKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_I6l, t1);
        staticKeyword = modifiers.staticKeyword;
        covariantKeyword = modifiers.covariantKeyword;
        constKeyword = modifiers.constKeyword;
        finalKeyword = modifiers.finalKeyword;
        varKeyword = modifiers.varKeyword;
        if (constKeyword != null) {
          if (covariantKeyword != null)
            this._reportErrorForToken$2(C.ParserErrorCode_BWD, covariantKeyword);
          if (finalKeyword != null)
            this._reportErrorForToken$2(C.ParserErrorCode_Gtd, finalKeyword);
          if (varKeyword != null)
            this._reportErrorForToken$2(C.ParserErrorCode_wQ8, varKeyword);
          if (staticKeyword != null && constKeyword.offset < staticKeyword.offset)
            this._reportErrorForToken$2(C.ParserErrorCode_aFE, staticKeyword);
        } else if (finalKeyword != null) {
          if (covariantKeyword != null)
            this._reportErrorForToken$2(C.ParserErrorCode_Zgx, covariantKeyword);
          if (varKeyword != null)
            this._reportErrorForToken$2(C.ParserErrorCode_sY7, varKeyword);
          if (staticKeyword != null && finalKeyword.offset < staticKeyword.offset)
            this._reportErrorForToken$2(C.ParserErrorCode_1WL, staticKeyword);
        } else if (varKeyword != null) {
          if (staticKeyword != null && varKeyword.offset < staticKeyword.offset)
            this._reportErrorForToken$2(C.ParserErrorCode_qbZ, staticKeyword);
          if (covariantKeyword != null && varKeyword.offset < covariantKeyword.offset)
            this._reportErrorForToken$2(C.ParserErrorCode_AFQ, covariantKeyword);
        }
        if (covariantKeyword != null && staticKeyword != null)
          this._reportErrorForToken$2(C.ParserErrorCode_EOZ, staticKeyword);
        return L.Token_lexicallyFirst(H.setRuntimeTypeInfo([constKeyword, finalKeyword, varKeyword], [L.Token]));
      },
      _validateModifiersForGetterOrSetterOrMethod$1: function(modifiers) {
        var t1, externalKeyword, staticKeyword;
        if (modifiers.abstractKeyword != null)
          this._reportErrorForToken$3(C.ParserErrorCode_Djg, this._currentToken, null);
        t1 = modifiers.constKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_Ecu, t1);
        t1 = modifiers.covariantKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_wz60, t1);
        t1 = modifiers.factoryKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_I6l, t1);
        t1 = modifiers.finalKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_SxL, t1);
        t1 = modifiers.varKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_EkK, t1);
        externalKeyword = modifiers.externalKeyword;
        staticKeyword = modifiers.staticKeyword;
        if (externalKeyword != null && staticKeyword != null && staticKeyword.offset < externalKeyword.offset)
          this._reportErrorForToken$2(C.ParserErrorCode_i7B, externalKeyword);
      },
      _validateModifiersForOperator$1: function(modifiers) {
        var t1;
        if (modifiers.abstractKeyword != null)
          this._reportErrorForToken$3(C.ParserErrorCode_Djg, this._currentToken, null);
        t1 = modifiers.constKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_Ecu, t1);
        t1 = modifiers.factoryKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_I6l, t1);
        t1 = modifiers.finalKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_SxL, t1);
        t1 = modifiers.staticKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_IIe0, t1);
        t1 = modifiers.varKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_EkK, t1);
      },
      _validateModifiersForTopLevelDeclaration$1: function(modifiers) {
        var t1 = modifiers.covariantKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_5MH, t1);
        t1 = modifiers.factoryKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_Bh0, t1);
        t1 = modifiers.staticKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_YMD, t1);
      },
      _validateModifiersForTopLevelFunction$1: function(modifiers) {
        var t1;
        this._validateModifiersForTopLevelDeclaration$1(modifiers);
        if (modifiers.abstractKeyword != null)
          this._reportErrorForToken$3(C.ParserErrorCode_E8w, this._currentToken, null);
        t1 = modifiers.constKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_HLN, t1);
        t1 = modifiers.finalKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_aZS, t1);
        t1 = modifiers.varKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_EkK, t1);
      },
      _validateModifiersForTopLevelVariable$1: function(modifiers) {
        var t1, constKeyword, finalKeyword, varKeyword;
        this._validateModifiersForTopLevelDeclaration$1(modifiers);
        if (modifiers.abstractKeyword != null)
          this._reportErrorForToken$3(C.ParserErrorCode_IIe, this._currentToken, null);
        t1 = modifiers.externalKeyword;
        if (t1 != null)
          this._reportErrorForToken$2(C.ParserErrorCode_kaS, t1);
        constKeyword = modifiers.constKeyword;
        finalKeyword = modifiers.finalKeyword;
        varKeyword = modifiers.varKeyword;
        if (constKeyword != null) {
          if (finalKeyword != null)
            this._reportErrorForToken$2(C.ParserErrorCode_Gtd, finalKeyword);
          if (varKeyword != null)
            this._reportErrorForToken$2(C.ParserErrorCode_wQ8, varKeyword);
        } else if (finalKeyword != null)
          if (varKeyword != null)
            this._reportErrorForToken$2(C.ParserErrorCode_sY7, varKeyword);
        return L.Token_lexicallyFirst(H.setRuntimeTypeInfo([constKeyword, finalKeyword, varKeyword], [L.Token]));
      },
      static: {
        Parser_Parser: function(source, errorListener, useFasta) {
          return new X.Parser(source, errorListener, 0, false, true, true, 0, false, false, false, false, false, false, false);
        }
      }
    },
    Parser_parseArgumentList_isLikelyMissingComma: {
      "^": "Closure:8;$this,leftParenthesis",
      call$0: function() {
        var t1, t2;
        t1 = this.$this;
        t2 = t1._currentToken;
        if (t2.type === C.TokenType_GbN || t1._tokenMatchesPseudoKeyword$1(t2))
          if (t1._currentToken.next.type === C.TokenType_gg4) {
            t2 = this.leftParenthesis;
            t2 = t2 instanceof L.BeginToken && t2.endToken != null;
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t1._reportErrorForToken$3(C.ParserErrorCode_HuN, t1._currentToken.previous, H.setRuntimeTypeInfo([","], [P.Object]));
          return true;
        }
        return false;
      }
    },
    Parser_parseBlock_isEndOfBlock: {
      "^": "Closure:8;$this",
      call$0: function() {
        var type = this.$this._currentToken.type;
        return type === C.TokenType_Emx || type === C.TokenType_2ty;
      }
    },
    Parser_parseCompilationUnit2_parseDirective: {
      "^": "Closure:68;_box_0,$this,keyword,commentAndMetadata,directives",
      call$0: function() {
        var t1, t2, importKeyword, libraryUri, configurations, deferredToken, asToken, prefix, t3, nextToken, combinators, semicolon, exportKeyword, t4, t5, t6, t7, keyword, libraryName, partKeyword, partUri;
        t1 = this.keyword;
        if (t1 === C.Keyword_wwi) {
          if (this._box_0.partDirectiveFound) {
            t1 = this.$this;
            t1._reportErrorForToken$3(C.ParserErrorCode_EOY, t1._currentToken, null);
          }
          t1 = this.$this;
          t2 = this.commentAndMetadata;
          importKeyword = t1.getAndAdvance$0();
          libraryUri = t1._parseUri$0();
          configurations = t1._parseConfigurations$0();
          deferredToken = t1._currentToken.get$keyword() === C.Keyword_qTT ? t1.getAndAdvance$0() : null;
          if (t1._currentToken.get$keyword() === C.Keyword_gRf) {
            asToken = t1.getAndAdvance$0();
            prefix = t1.parseSimpleIdentifier$1$isDeclaration(true);
          } else if (deferredToken != null) {
            t1._reportErrorForToken$3(C.ParserErrorCode_yT3, t1._currentToken, null);
            asToken = null;
            prefix = null;
          } else {
            t3 = t1._currentToken;
            if (t3.type !== C.TokenType_FmR && t3.get$keyword() !== C.Keyword_mTW && t1._currentToken.get$keyword() !== C.Keyword_6pl) {
              nextToken = t1._currentToken.next;
              if (nextToken.get$keyword() === C.Keyword_gRf || nextToken.get$keyword() === C.Keyword_mTW || nextToken.get$keyword() === C.Keyword_6pl) {
                t3 = [P.Object];
                t3 = H.assertSubtype(H.setRuntimeTypeInfo([t1._currentToken], t3), "$isList", t3, "$asList");
                t1._reportErrorForToken$3(C.ParserErrorCode_yjH, t1._currentToken, t3);
                t3 = t1._currentToken.next;
                t1._currentToken = t3;
                if (t3.get$keyword() === C.Keyword_gRf) {
                  asToken = t1.getAndAdvance$0();
                  prefix = t1.parseSimpleIdentifier$1$isDeclaration(true);
                } else {
                  asToken = null;
                  prefix = null;
                }
              } else {
                asToken = null;
                prefix = null;
              }
            } else {
              asToken = null;
              prefix = null;
            }
          }
          combinators = t1.parseCombinators$0();
          semicolon = t1._expect$1(C.TokenType_FmR);
          $.$get$astFactory().toString;
          return U.ImportDirectiveImpl$(t2.comment, H.assertSubtype(t2.metadata, "$isList", [Y.Annotation], "$asList"), importKeyword, libraryUri, H.assertSubtype(configurations, "$isList", [Y.Configuration], "$asList"), deferredToken, asToken, prefix, H.assertSubtype(combinators, "$isList", [Y.Combinator], "$asList"), semicolon);
        } else if (t1 === C.Keyword_y1M) {
          if (this._box_0.partDirectiveFound) {
            t1 = this.$this;
            t1._reportErrorForToken$3(C.ParserErrorCode_oiE, t1._currentToken, null);
          }
          t1 = this.$this;
          t2 = this.commentAndMetadata;
          exportKeyword = t1.getAndAdvance$0();
          libraryUri = t1._parseUri$0();
          configurations = t1._parseConfigurations$0();
          combinators = t1.parseCombinators$0();
          semicolon = t1._expect$1(C.TokenType_FmR);
          $.$get$astFactory().toString;
          t1 = H.assertSubtype(t2.metadata, "$isList", [Y.Annotation], "$asList");
          t3 = Y.Configuration;
          t4 = [t3];
          H.assertSubtype(configurations, "$isList", t4, "$asList");
          t5 = Y.Combinator;
          t6 = [t5];
          H.assertSubtype(combinators, "$isList", t6, "$asList");
          t7 = new U.ExportDirectiveImpl(exportKeyword, semicolon);
          t7.AnnotatedNodeImpl$2(t2.comment, t1);
          t7._uri = t7._becomeParentOf$1$1(libraryUri, U.StringLiteralImpl);
          t3 = new U.NodeListImpl(t7, H.setRuntimeTypeInfo([], t4), [t3]);
          t3.addAll$1(0, configurations);
          t7._configurations = t3;
          t5 = new U.NodeListImpl(t7, H.setRuntimeTypeInfo([], t6), [t5]);
          t5.addAll$1(0, combinators);
          t7._combinators = t5;
          return t7;
        } else if (t1 === C.Keyword_kfn) {
          t1 = this._box_0;
          if (t1.libraryDirectiveFound) {
            t1 = this.$this;
            t1._reportErrorForToken$3(C.ParserErrorCode_VaD, t1._currentToken, null);
          } else {
            if (this.directives.length > 0) {
              t2 = this.$this;
              t2._reportErrorForToken$3(C.ParserErrorCode_Nno, t2._currentToken, null);
            }
            t1.libraryDirectiveFound = true;
          }
          t1 = this.$this;
          t2 = this.commentAndMetadata;
          keyword = t1.getAndAdvance$0();
          libraryName = t1._parseLibraryName$2(C.ParserErrorCode_IIf, keyword);
          semicolon = t1._expect$1(C.TokenType_FmR);
          $.$get$astFactory().toString;
          t1 = new U.LibraryDirectiveImpl(keyword, semicolon);
          t1.AnnotatedNodeImpl$2(t2.comment, H.assertSubtype(t2.metadata, "$isList", [Y.Annotation], "$asList"));
          t1._ast$_name = t1._becomeParentOf$1$1(libraryName, U.LibraryIdentifierImpl);
          return t1;
        } else if (t1 === C.Keyword_AUT) {
          t1 = this.$this;
          t2 = this._box_0;
          t3 = this.commentAndMetadata;
          if (t1._currentToken.next.get$keyword() === C.Keyword_BYg) {
            t2.partOfDirectiveFound = true;
            return t1._parsePartOfDirective$1(t3);
          } else {
            t2.partDirectiveFound = true;
            partKeyword = t1.getAndAdvance$0();
            partUri = t1._parseUri$0();
            semicolon = t1._expect$1(C.TokenType_FmR);
            $.$get$astFactory().toString;
            t1 = new U.PartDirectiveImpl(partKeyword, semicolon);
            t1.AnnotatedNodeImpl$2(t3.comment, H.assertSubtype(t3.metadata, "$isList", [Y.Annotation], "$asList"));
            t1._uri = t1._becomeParentOf$1$1(partUri, U.StringLiteralImpl);
            return t1;
          }
        } else
          throw H.wrapException(P.StateError$("parseDirective invoked in an invalid state (currentToken = " + H.S(this.$this._currentToken) + ")"));
      }
    },
    Parser_parseSwitchStatement_atEndOrNextMember: {
      "^": "Closure:8;$this",
      call$0: function() {
        var type, keyword, t1;
        t1 = this.$this;
        type = t1._currentToken.type;
        if (J.$eq$(type, C.TokenType_Emx) || J.$eq$(type, C.TokenType_2ty))
          return true;
        keyword = t1._currentToken.get$keyword();
        return J.$eq$(keyword, C.Keyword_Am8) || J.$eq$(keyword, C.Keyword_ea7);
      }
    },
    Parser__parseUri_isKeywordAfterUri: {
      "^": "Closure:16;",
      call$1: function(token) {
        var t1, t2;
        if (token.get$lexeme() !== "as") {
          t1 = token.get$lexeme();
          t2 = $.$get$Parser__HIDE();
          if (t1 == null ? t2 != null : t1 !== t2) {
            t1 = token.get$lexeme();
            t2 = $.$get$Parser__SHOW();
            t2 = t1 == null ? t2 == null : t1 === t2;
            t1 = t2;
          } else
            t1 = true;
        } else
          t1 = true;
        return t1;
      }
    },
    Parser__parseUri_isValidInUri: {
      "^": "Closure:16;",
      call$1: function(token) {
        var type = token.type;
        return type === C.TokenType_gg4 || type === C.TokenType_sBE || type === C.TokenType_wCI || type === C.TokenType_cv8 || type === C.TokenType_j7J || type === C.TokenType_Vyt || type === C.TokenType_q1z;
      }
    },
    _TooDeepTreeError: {
      "^": "Object;",
      static: {
        _TooDeepTreeError$: function() {
          return new X._TooDeepTreeError();
        }
      }
    },
    ParserAdapter: {
      "^": "Object;",
      set$enableOptionalNewAndConst: function(enable) {
      },
      parseCompilationUnit$1: function(token) {
        var t1, compilationUnit;
        this.currentToken = token;
        this.currentToken = this.fastaParser.parseUnit$1(token);
        t1 = this.astBuilder;
        compilationUnit = H.interceptedTypeCheck(t1.stack.pop$1(null), "$isCompilationUnitImpl");
        compilationUnit.localDeclarations = t1.localDeclarations;
        return compilationUnit;
      }
    },
    _Parser2: {
      "^": "ParserAdapter;_parser$_source,enableUriInPartOf,enableNnbd,currentToken,fastaParser,astBuilder"
    }
  }], ["analyzer.src.generated.sdk", "package:analyzer/src/generated/sdk.dart",, V, {
    "^": "",
    DartSdk: {
      "^": "Object;"
    }
  }], ["", "package:analyzer/src/generated/source.dart",, Z, {
    "^": "",
    LineInfo_Location: {
      "^": "Object;",
      toString$0: function(_) {
        return "" + this.lineNumber + ":" + this.columnNumber;
      }
    }
  }], ["analyzer.src.generated.utilities_dart", "package:analyzer/src/generated/utilities_dart.dart",, R, {
    "^": "",
    ParameterKind: {
      "^": "Object;name,ordinal,isOptional",
      get$hashCode: function(_) {
        return this.ordinal;
      },
      compareTo$1: function(_, other) {
        return this.ordinal - H.interceptedTypeCheck(other, "$isParameterKind").ordinal;
      },
      toString$0: function(_) {
        return this.name;
      },
      $isComparable: 1,
      $asComparable: function() {
        return [R.ParameterKind];
      }
    }
  }], ["", "package:analyzer/src/plugin/engine_plugin.dart",, U, {
    "^": "",
    EnginePlugin: {
      "^": "Object;0dartErrorsForSourceExtensionPoint,0dartErrorsForUnitExtensionPoint,0htmlErrorsExtensionPoint,0workManagerFactoryExtensionPoint"
    }
  }], ["analyzer.src.string_source", "package:analyzer/src/string_source.dart",, O, {
    "^": "",
    StringSource: {
      "^": "Source;_string_source$_contents,fullName,uri,modificationStamp",
      get$hashCode: function(_) {
        return C.JSString_methods.get$hashCode(this._string_source$_contents) ^ C.JSNull_methods.get$hashCode(this.fullName);
      },
      $eq: function(_, object) {
        if (object == null)
          return false;
        return object instanceof O.StringSource && object._string_source$_contents === this._string_source$_contents && true;
      },
      toString$0: function(_) {
        return "StringSource (" + H.S(this.fullName) + ")";
      }
    }
  }], ["dart_style.src.argument_list_visitor", "package:dart_style/src/argument_list_visitor.dart",, B, {
    "^": "",
    ArgumentListVisitor: {
      "^": "Object;_argument_list_visitor$_visitor,_leftParenthesis,_rightParenthesis,_allArguments,_argument_list_visitor$_arguments,_functions,_argumentsAfterFunctions",
      get$_isSingle: function() {
        var t1, t2;
        t1 = this._allArguments;
        t2 = J.getInterceptor$asx(t1);
        return t2.get$length(t1) === 1 && !J.getInterceptor(t2.get$single(t1)).$isNamedExpression;
      },
      visit$0: function() {
        var t1, t2, t3, _i, argument;
        if (this.get$_isSingle()) {
          t1 = this._argument_list_visitor$_visitor.builder;
          C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 1));
        }
        t1 = this._argument_list_visitor$_visitor;
        t2 = t1.builder;
        C.JSArray_methods.add$1(t2._openSpans, new E.OpenSpan(t2.get$_currentChunkIndex(), 1));
        t1.token$1(this._leftParenthesis);
        this._argument_list_visitor$_arguments.visit$1(t1);
        t1.builder.endSpan$0();
        t2 = this._functions;
        if (t2 != null) {
          if (J.$eq$(C.JSArray_methods.get$first(t2), J.get$first$ax(this._allArguments)))
            t1.soloZeroSplit$0();
          else
            t1.soloSplit$0();
          for (t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
            argument = t2[_i];
            if (!J.$eq$(argument, C.JSArray_methods.get$first(t2)))
              t1.builder._pendingWhitespace = C.Whitespace_space;
            t1.visit$1(argument);
            if (argument.get$endToken().next.type === C.TokenType_O55)
              t1.token$1(argument.get$endToken().next);
          }
          t2 = t1.builder;
          C.JSArray_methods.add$1(t2._openSpans, new E.OpenSpan(t2.get$_currentChunkIndex(), 1));
          this._argumentsAfterFunctions.visit$1(t1);
          t1.builder.endSpan$0();
        }
        t1.token$1(this._rightParenthesis);
        if (this.get$_isSingle())
          t1.builder.endSpan$0();
      },
      static: {
        ArgumentListVisitor_ArgumentListVisitor$forArguments: function(visitor, leftParenthesis, rightParenthesis, $arguments) {
          var t1, functionsStart, functionsEnd, i, t2, isArrow, argumentsBefore, functions, argumentsAfter;
          H.assertSubtype($arguments, "$isList", [Y.Expression], "$asList");
          for (t1 = J.getInterceptor$asx($arguments), functionsStart = null, functionsEnd = null, i = 0; i < t1.get$length($arguments); ++i)
            if (B.ArgumentListVisitor__isBlockFunction(t1.$index($arguments, i))) {
              if (functionsStart == null)
                functionsStart = i;
              if (functionsEnd != null && functionsEnd !== i) {
                functionsStart = null;
                functionsEnd = null;
                break;
              }
              functionsEnd = i + 1;
            }
          if (functionsStart != null)
            if (!!J.getInterceptor(t1.$index($arguments, 0)).$isNamedExpression)
              if (!(functionsStart > 0)) {
                t2 = t1.get$length($arguments);
                if (typeof functionsEnd !== "number")
                  return functionsEnd.$lt();
                t2 = functionsEnd < t2;
              } else
                t2 = true;
            else
              t2 = false;
          else
            t2 = false;
          if (t2)
            functionsStart = null;
          if (functionsStart != null && !!J.getInterceptor(t1.$index($arguments, functionsStart)).$isNamedExpression) {
            isArrow = new B.ArgumentListVisitor_ArgumentListVisitor$forArguments_isArrow();
            if (typeof functionsStart !== "number")
              return H.iae(functionsStart);
            i = 0;
            for (; i < functionsStart; ++i) {
              if (!J.getInterceptor(t1.$index($arguments, i)).$isNamedExpression)
                continue;
              if (isArrow.call$1(H.interceptedTypeCheck(t1.$index($arguments, i), "$isNamedExpression"))) {
                functionsStart = null;
                break;
              }
            }
            i = functionsEnd;
            while (true) {
              t2 = t1.get$length($arguments);
              if (typeof i !== "number")
                return i.$lt();
              if (!(i < t2))
                break;
              if (isArrow.call$1(H.interceptedTypeCheck(t1.$index($arguments, i), "$isNamedExpression"))) {
                functionsStart = null;
                break;
              }
              ++i;
            }
          }
          if (functionsStart == null)
            return new B.ArgumentListVisitor(visitor, leftParenthesis, rightParenthesis, $arguments, B.ArgumentSublist_ArgumentSublist($arguments, $arguments), null, null);
          argumentsBefore = t1.take$1($arguments, functionsStart).toList$0(0);
          functions = t1.sublist$2($arguments, functionsStart, functionsEnd);
          argumentsAfter = t1.skip$1($arguments, functionsEnd).toList$0(0);
          return new B.ArgumentListVisitor(visitor, leftParenthesis, rightParenthesis, $arguments, B.ArgumentSublist_ArgumentSublist($arguments, argumentsBefore), functions, B.ArgumentSublist_ArgumentSublist($arguments, argumentsAfter));
        },
        ArgumentListVisitor__isBlockFunction: function(expression) {
          var t1, t2;
          H.interceptedTypeCheck(expression, "$isExpression");
          if (!!J.getInterceptor(expression).$isNamedExpression)
            expression = expression._expression;
          t1 = J.getInterceptor(expression);
          if (!!t1.$isMethodInvocation) {
            if (!B.ArgumentListVisitor__isValidWrappingTarget(expression._ast$_target))
              return false;
            t1 = expression._argumentList._ast$_arguments;
            if (t1._elements.length !== 1)
              return false;
            return B.ArgumentListVisitor__isBlockFunction(t1.get$single(t1));
          }
          if (!!t1.$isInstanceCreationExpression) {
            t1 = expression._argumentList._ast$_arguments;
            if (t1._elements.length !== 1)
              return false;
            return B.ArgumentListVisitor__isBlockFunction(t1.get$single(t1));
          }
          if (!!t1.$isFunctionExpressionInvocation) {
            t1 = expression._argumentList._ast$_arguments;
            if (t1.get$length(t1) !== 0)
              return false;
            expression = expression._function;
          }
          for (; t1 = J.getInterceptor(expression), !!t1.$isParenthesizedExpression;)
            expression = expression._expression;
          if (!t1.$isFunctionExpression)
            return false;
          t1 = expression._body;
          if (!J.getInterceptor(t1).$isBlockFunctionBody)
            return false;
          t2 = t1._ast$_block._statements;
          return t2.get$length(t2) !== 0 || t1._ast$_block.rightBracket._precedingComment != null;
        },
        ArgumentListVisitor__isValidWrappingTarget: function(expression) {
          var t1;
          if (expression == null)
            return true;
          for (; t1 = J.getInterceptor(expression), !!t1.$isPropertyAccess;)
            expression = expression._ast$_target;
          if (!!t1.$isPrefixedIdentifier)
            return true;
          if (!!t1.$isSimpleIdentifier)
            return true;
          return false;
        }
      }
    },
    ArgumentListVisitor_ArgumentListVisitor$forArguments_isArrow: {
      "^": "Closure:27;",
      call$1: function(named) {
        var expression = named._expression;
        if (!!J.getInterceptor(expression).$isFunctionExpression)
          return !!J.getInterceptor(expression._body).$isExpressionFunctionBody;
        return false;
      }
    },
    ArgumentSublist: {
      "^": "Object;_allArguments,_positional,_named,_blocks,_leadingBlocks,_trailingBlocks,0_blockRule,0_previousSplit",
      visit$1: function(visitor) {
        var t1 = this._blocks;
        if (t1.get$isNotEmpty(t1))
          this._blockRule = O.Rule$(2);
        this._visitNamed$2(visitor, this._visitPositional$1(visitor));
      },
      _visitPositional$1: function(visitor) {
        var t1, t2, leadingBlocks, trailingBlocks, t3, t4, t5, rule;
        t1 = this._positional;
        t2 = t1.length;
        if (t2 === 0)
          return;
        leadingBlocks = Math.min(this._leadingBlocks, t2);
        trailingBlocks = Math.max(this._trailingBlocks - this._named.length, 0);
        t2 = this._blockRule;
        t3 = H.setRuntimeTypeInfo([], [E.Chunk]);
        t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, O.Rule);
        t5 = $.FastHash__nextId + 1 & 268435455;
        $.FastHash__nextId = t5;
        rule = new G.PositionalRule(t3, t2, leadingBlocks, trailingBlocks, true, 1, false, t4, t5);
        this._visitArguments$3(visitor, t1, rule);
        return rule;
      },
      _visitNamed$2: function(visitor, positionalRule) {
        var t1, t2, leadingBlocks, trailingBlocks, t3, t4, t5, namedRule;
        t1 = this._named;
        t2 = t1.length;
        if (t2 === 0)
          return;
        leadingBlocks = Math.max(this._leadingBlocks - this._positional.length, 0);
        trailingBlocks = Math.min(this._trailingBlocks, t2);
        t2 = this._blockRule;
        t3 = H.setRuntimeTypeInfo([], [E.Chunk]);
        t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, O.Rule);
        t5 = $.FastHash__nextId + 1 & 268435455;
        $.FastHash__nextId = t5;
        namedRule = new G.NamedRule(t3, t2, leadingBlocks, trailingBlocks, true, 1, false, t4, t5);
        if (positionalRule != null)
          positionalRule._namedArgsRule = namedRule;
        this._visitArguments$3(visitor, t1, namedRule);
      },
      _visitArguments$3: function(visitor, $arguments, rule) {
        var t1, t2, t3, t4, t5, t6, t7, _i, argument, t8, t9, t10;
        H.assertSubtype($arguments, "$isList", [Y.Expression], "$asList");
        visitor.builder.startRule$1(rule);
        t1 = this._allArguments;
        t2 = J.getInterceptor$ax(t1);
        t3 = visitor.builder.split$1$space(0, !J.$eq$(C.JSArray_methods.get$first($arguments), t2.get$first(t1)));
        this._previousSplit = t3;
        t4 = rule._arguments;
        C.JSArray_methods.add$1(t4, t3);
        t3 = $arguments === this._positional;
        if (t3) {
          t5 = visitor.builder;
          C.JSArray_methods.add$1(t5._openSpans, new E.OpenSpan(t5.get$_currentChunkIndex(), 2));
        }
        for (t5 = $arguments.length, t6 = this._blocks, t7 = visitor._blockArgumentLists, _i = 0; _i < $arguments.length; $arguments.length === t5 || (0, H.throwConcurrentModificationError)($arguments), ++_i) {
          argument = H.interceptedTypeCheck($arguments[_i], "$isExpression");
          if (t6.containsKey$1(argument)) {
            rule._trackInnerRules = false;
            t7.$indexSet(0, t6.$index(0, argument), this);
          } else if (t2.get$length(t1) > 1) {
            t8 = visitor.builder;
            t9 = t8._blockArgumentNesting;
            t8 = t8._chunk_builder$_nesting;
            t10 = t8._pendingNesting;
            C.JSArray_methods.add$1(t9, t10 != null ? t10 : t8._nesting_builder$_nesting);
          } else if (!J.getInterceptor(argument).$isNamedExpression)
            rule._trackInnerRules = false;
          t8 = !!J.getInterceptor(argument).$isNamedExpression;
          if (t8)
            visitor.visitNamedArgument$2(argument, H.interceptedTypeCast(rule, "$isNamedRule"));
          else
            visitor.visit$1(argument);
          if (t6.containsKey$1(argument))
            rule._trackInnerRules = true;
          else if (t2.get$length(t1) > 1) {
            t8 = visitor.builder._blockArgumentNesting;
            if (0 >= t8.length)
              return H.ioore(t8, -1);
            t8.pop();
          } else if (!t8)
            rule._trackInnerRules = true;
          if (argument.get$endToken().next.type === C.TokenType_O55)
            visitor.token$1(argument.get$endToken().next);
          if (argument !== C.JSArray_methods.get$last($arguments)) {
            t8 = visitor.builder.split$1$space(0, true);
            this._previousSplit = t8;
            C.JSArray_methods.add$1(t4, t8);
          }
        }
        if (t3)
          visitor.builder.endSpan$0();
        visitor.builder.endRule$0();
      },
      static: {
        ArgumentSublist_ArgumentSublist: function(allArguments, $arguments) {
          var t1, t2, t3, positional, named, blocks, bracket, leadingBlocks, trailingBlocks;
          t1 = Y.Expression;
          t2 = [t1];
          H.assertSubtype(allArguments, "$isList", t2, "$asList");
          H.assertSubtype($arguments, "$isList", t2, "$asList");
          t2 = J.getInterceptor$ax($arguments);
          t3 = t2.takeWhile$1($arguments, new B.ArgumentSublist_ArgumentSublist_closure());
          positional = P.List_List$from(t3, true, H.getTypeArgumentByIndex(t3, 0));
          named = t2.skip$1($arguments, positional.length).toList$0(0);
          blocks = P.LinkedHashMap_LinkedHashMap$_empty(t1, L.Token);
          for (t1 = t2.get$iterator($arguments); t1.moveNext$0();) {
            t3 = t1.get$current();
            bracket = B.ArgumentSublist__blockToken(t3);
            if (bracket != null)
              blocks.$indexSet(0, t3, bracket);
          }
          for (t1 = t2.get$iterator($arguments), leadingBlocks = 0; t1.moveNext$0();) {
            if (!blocks.containsKey$1(t1.get$current()))
              break;
            ++leadingBlocks;
          }
          if (leadingBlocks !== t2.get$length($arguments))
            for (t1 = t2.get$reversed($arguments), t1 = new H.ListIterator(t1, t1.get$length(t1), 0, [H.getTypeArgumentByIndex(t1, 0)]), trailingBlocks = 0; t1.moveNext$0();) {
              if (!blocks.containsKey$1(t1.__internal$_current))
                break;
              ++trailingBlocks;
            }
          else
            trailingBlocks = 0;
          if (leadingBlocks !== blocks.get$length(blocks))
            leadingBlocks = 0;
          if (trailingBlocks !== blocks.get$length(blocks))
            trailingBlocks = 0;
          if (leadingBlocks === 0 && trailingBlocks === 0)
            blocks.clear$0(0);
          return new B.ArgumentSublist(allArguments, positional, named, blocks, leadingBlocks, trailingBlocks);
        },
        ArgumentSublist__blockToken: function(expression) {
          var t1;
          if (!!J.getInterceptor(expression).$isNamedExpression)
            expression = expression._expression;
          t1 = J.getInterceptor(expression);
          if (!!t1.$isListLiteral)
            return expression.leftBracket;
          if (!!t1.$isMapLiteral)
            return expression.leftBracket;
          if (!!t1.$isSingleStringLiteral && expression.get$isMultiline())
            return expression.get$beginToken();
          return;
        }
      }
    },
    ArgumentSublist_ArgumentSublist_closure: {
      "^": "Closure:17;",
      call$1: function(arg) {
        return !J.getInterceptor(H.interceptedTypeCheck(arg, "$isExpression")).$isNamedExpression;
      }
    }
  }], ["dart_style.src.call_chain_visitor", "package:dart_style/src/call_chain_visitor.dart",, N, {
    "^": "",
    CallChainVisitor: {
      "^": "Object;_visitor,_call_chain_visitor$_target,_properties,_calls,_blockCalls,_hangingCall,_ruleEnabled,_spanEnded,0_propertyRule",
      visit$1$unnest: function(unnest) {
        var t1, t2, splitOnTarget, t3, t4, t5, _i, property, $call, blockCall;
        if (unnest == null)
          unnest = true;
        t1 = this._visitor;
        t1.builder.nestExpression$0();
        t2 = t1.builder;
        C.JSArray_methods.add$1(t2._openSpans, new E.OpenSpan(t2.get$_currentChunkIndex(), 1));
        t2 = this._call_chain_visitor$_target;
        splitOnTarget = this._forcesSplit$1(t2);
        if (splitOnTarget)
          if (this._properties.length > 1) {
            t3 = H.setRuntimeTypeInfo([], [E.Chunk]);
            t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, O.Rule);
            t5 = $.FastHash__nextId + 1 & 268435455;
            $.FastHash__nextId = t5;
            t5 = new G.PositionalRule(t3, null, 0, 0, true, 1, false, t4, t5);
            this._propertyRule = t5;
            t1.builder.startLazyRule$1(t5);
          } else
            this._enableRule$1$lazy(true);
        t1.visit$1(t2);
        t2 = this._properties;
        t3 = t2.length;
        if (t3 === 1) {
          t1.soloZeroSplit$0();
          this._writeCall$1(C.JSArray_methods.get$single(t2));
        } else if (t3 > 1) {
          if (!splitOnTarget) {
            t3 = H.setRuntimeTypeInfo([], [E.Chunk]);
            t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, O.Rule);
            t5 = $.FastHash__nextId + 1 & 268435455;
            $.FastHash__nextId = t5;
            t5 = new G.PositionalRule(t3, null, 0, 0, true, 1, false, t4, t5);
            this._propertyRule = t5;
            t1.builder.startRule$1(t5);
          }
          for (t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
            property = t2[_i];
            t4 = this._propertyRule;
            t5 = t1.builder.split$0(0);
            C.JSArray_methods.add$1(t4._arguments, t5);
            this._writeCall$1(property);
          }
          t1.builder.endRule$0();
        }
        t2 = this._calls;
        if (t2.length > 1) {
          t3 = t1.builder;
          C.JSArray_methods.add$1(t3._blockArgumentNesting, t3._chunk_builder$_nesting.get$currentNesting());
        }
        for (t3 = t2.length, _i = 0; t4 = t2.length, _i < t4; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          $call = t2[_i];
          this._enableRule$0();
          t1.builder.split$0(0);
          this._writeCall$1($call);
        }
        if (t4 > 1) {
          t2 = t1.builder._blockArgumentNesting;
          if (0 >= t2.length)
            return H.ioore(t2, -1);
          t2.pop();
        }
        t2 = this._blockCalls;
        if (t2 != null) {
          this._enableRule$0();
          t1.builder.split$0(0);
          this._disableRule$0();
          for (t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
            blockCall = H.interceptedTypeCheck(t2[_i], "$isMethodInvocation");
            t1.token$1(blockCall.operator);
            t1.token$1(blockCall._methodName.token);
            t1.visit$1(blockCall._typeArguments);
            t1.visit$1(blockCall._argumentList);
          }
          t2 = this._hangingCall;
          if (t2 != null)
            this._writeCall$1(t2);
        }
        this._disableRule$0();
        this._endSpan$0();
        if (unnest)
          t1.builder.unnest$0();
      },
      visit$0: function() {
        return this.visit$1$unnest(null);
      },
      _forcesSplit$1: function(expression) {
        var t1, argumentList, argument;
        t1 = J.getInterceptor(expression);
        if (!!t1.$isListLiteral)
          return false;
        if (!!t1.$isMapLiteral)
          return false;
        if (!!t1.$isFunctionExpression) {
          t1 = expression._body;
          if (!J.getInterceptor(t1).$isBlockFunctionBody)
            return false;
          t1 = t1._ast$_block._statements;
          return t1.get$length(t1) === 0;
        }
        if (!!t1.$isMethodInvocation)
          argumentList = expression._argumentList;
        else if (!!t1.$isInstanceCreationExpression)
          argumentList = expression._argumentList;
        else
          argumentList = !!t1.$isFunctionExpressionInvocation ? expression._argumentList : null;
        if (argumentList == null)
          return true;
        t1 = argumentList._ast$_arguments;
        if (t1.get$length(t1) === 0)
          return true;
        t1 = argumentList._ast$_arguments;
        argument = t1.get$last(t1);
        if (argument.get$endToken().next.type === C.TokenType_O55)
          return false;
        return this._forcesSplit$1(!!argument.$isNamedExpression ? argument._expression : argument);
      },
      _writeCall$1: function($call) {
        var t1, t2, t3;
        H.interceptedTypeCheck($call, "$isExpression");
        t1 = J.getInterceptor($call);
        if (!!t1.$isIndexExpression) {
          t1 = this._visitor;
          t1.builder.nestExpression$0();
          this._writeCall$1($call._ast$_target);
          t1.finishIndexExpression$1($call);
          t1.builder.unnest$0();
        } else if (!!t1.$isMethodInvocation) {
          t1 = this._visitor;
          t1.token$1($call.operator);
          t1.token$1($call._methodName.token);
          t2 = this._blockCalls == null;
          if (t2) {
            t3 = this._calls;
            t3 = t3.length !== 0 && $call === C.JSArray_methods.get$last(t3);
          } else
            t3 = false;
          if (t3)
            this._disableRule$0();
          if (this._properties.length === 0 && this._calls.length === 1 && t2 && !!J.getInterceptor(this._call_chain_visitor$_target).$isSimpleIdentifier)
            this._endSpan$0();
          t1.builder.nestExpression$0();
          t1.visit$1($call._typeArguments);
          t1.visitArgumentList$2$nestExpression($call._argumentList, false);
          t1.builder.unnest$0();
        } else if (!!t1.$isPropertyAccess) {
          t1 = this._visitor;
          t1.token$1($call.operator);
          t1.visit$1($call._propertyName);
        } else if (!!t1.$isPrefixedIdentifier) {
          t1 = this._visitor;
          t1.token$1($call.period);
          t1.visit$1($call._identifier);
        }
      },
      _disableRule$0: function() {
        if (!this._ruleEnabled)
          return;
        this._visitor.builder.endRule$0();
        this._ruleEnabled = false;
      },
      _enableRule$1$lazy: function(lazy) {
        var rule, t1;
        if (this._ruleEnabled)
          return;
        rule = O.Rule$(null);
        t1 = this._propertyRule;
        if (t1 != null)
          t1._namedArgsRule = rule;
        t1 = this._visitor.builder;
        if (lazy)
          t1.startLazyRule$1(rule);
        else
          t1.startRule$1(rule);
        this._ruleEnabled = true;
      },
      _enableRule$0: function() {
        return this._enableRule$1$lazy(false);
      },
      _endSpan$0: function() {
        if (this._spanEnded)
          return;
        this._visitor.builder.endSpan$0();
        this._spanEnded = true;
      },
      static: {
        CallChainVisitor_CallChainVisitor: function(visitor, node) {
          var _box_0, t1, calls, properties, t2, hangingCall, blockCalls, inBlockCalls, _i, $call, t3, args, isBlockCall;
          _box_0 = {};
          H.interceptedTypeCheck(node, "$isExpression");
          _box_0.target = null;
          t1 = [Y.Expression];
          calls = H.setRuntimeTypeInfo([], t1);
          new N.CallChainVisitor_CallChainVisitor_flatten(_box_0, calls).call$1(node);
          properties = H.setRuntimeTypeInfo([], t1);
          if (!!J.getInterceptor(_box_0.target).$isSimpleIdentifier) {
            t2 = H.getTypeArgumentByIndex(calls, 0);
            properties = P.List_List$from(new H.TakeWhileIterable(calls, H.functionTypeCheck(new N.CallChainVisitor_CallChainVisitor_closure(), {func: 1, ret: P.bool, args: [t2]}), [t2]), true, t2);
          }
          t2 = properties.length;
          P.RangeError_checkValidRange(0, t2, calls.length, null, null, null);
          calls.splice(0, t2 - 0);
          t2 = calls.length;
          blockCalls = null;
          inBlockCalls = false;
          _i = 0;
          while (true) {
            if (!(_i < calls.length)) {
              hangingCall = null;
              break;
            }
            $call = calls[_i];
            if (!!J.getInterceptor($call).$isMethodInvocation) {
              t3 = $call._argumentList;
              args = B.ArgumentListVisitor_ArgumentListVisitor$forArguments(visitor, t3.leftParenthesis, t3.rightParenthesis, t3._ast$_arguments);
              t3 = args._argument_list_visitor$_arguments._blocks;
              isBlockCall = t3.get$isNotEmpty(t3) || args._functions != null;
            } else
              isBlockCall = false;
            if (isBlockCall) {
              if (blockCalls == null)
                blockCalls = H.setRuntimeTypeInfo([], t1);
              C.JSArray_methods.add$1(blockCalls, $call);
              inBlockCalls = true;
            } else if (inBlockCalls) {
              t1 = C.JSArray_methods.get$last(calls);
              if ($call == null ? t1 == null : $call === t1) {
                hangingCall = $call;
                break;
              }
              blockCalls = null;
              hangingCall = null;
              break;
            }
            calls.length === t2 || (0, H.throwConcurrentModificationError)(calls);
            ++_i;
          }
          if (blockCalls != null)
            for (t1 = blockCalls.length, _i = 0; _i < blockCalls.length; blockCalls.length === t1 || (0, H.throwConcurrentModificationError)(blockCalls), ++_i)
              C.JSArray_methods.remove$1(calls, blockCalls[_i]);
          if (hangingCall != null)
            C.JSArray_methods.remove$1(calls, hangingCall);
          return new N.CallChainVisitor(visitor, _box_0.target, properties, calls, blockCalls, hangingCall, false, false);
        }
      }
    },
    CallChainVisitor_CallChainVisitor_flatten: {
      "^": "Closure:18;_box_0,calls",
      call$1: function(expression) {
        var $call, t1;
        H.interceptedTypeCheck(expression, "$isExpression");
        this._box_0.target = expression;
        for ($call = expression; t1 = J.getInterceptor($call), !!t1.$isIndexExpression;)
          $call = $call._ast$_target;
        if (!F.SourceVisitor_looksLikeStaticCall($call))
          if (!!t1.$isMethodInvocation && $call._ast$_target != null) {
            this.call$1(t1.get$target($call));
            C.JSArray_methods.add$1(this.calls, expression);
          } else if (!!t1.$isPropertyAccess && $call._ast$_target != null) {
            this.call$1(t1.get$target($call));
            C.JSArray_methods.add$1(this.calls, expression);
          } else if (!!t1.$isPrefixedIdentifier) {
            this.call$1($call._prefix);
            C.JSArray_methods.add$1(this.calls, expression);
          }
      }
    },
    CallChainVisitor_CallChainVisitor_closure: {
      "^": "Closure:17;",
      call$1: function($call) {
        var t1;
        H.interceptedTypeCheck($call, "$isExpression");
        for (; t1 = J.getInterceptor($call), !!t1.$isIndexExpression;)
          $call = $call._ast$_target;
        return !t1.$isMethodInvocation;
      }
    }
  }], ["dart_style.src.chunk", "package:dart_style/src/chunk.dart",, E, {
    "^": "",
    Selection: {
      "^": "Object;",
      startSelectionFromEnd$1: function(fromEnd) {
        this._chunk$_selectionStart = this.get$text(this).length - fromEnd;
      },
      endSelectionFromEnd$1: function(fromEnd) {
        this._chunk$_selectionEnd = this.get$text(this).length - fromEnd;
      }
    },
    Chunk: {
      "^": "Selection;_text<,0_indent,0_nesting,0_block<,0_rule<,0_isDouble,_flushLeft,_spaceWhenUnsplit<,0_canDivide,spans<,0_chunk$_selectionStart,0_chunk$_selectionEnd",
      get$text: function(_) {
        return this._text;
      },
      get$canAddText: function() {
        return this._rule == null;
      },
      get$rule: function() {
        return this._rule;
      },
      get$flushLeftAfter: function() {
        var t1 = this._block;
        if (t1 == null)
          return this._flushLeft;
        return C.JSArray_methods.get$last(t1.chunks).get$flushLeftAfter();
      },
      get$length: function(_) {
        var t1 = this._text.length;
        return t1 + (this._spaceWhenUnsplit ? 1 : 0);
      },
      get$unsplitBlockLength: function() {
        var t1, t2, $length, _i, chunk, t3, t4;
        t1 = this._block;
        if (t1 == null)
          return 0;
        for (t1 = t1.chunks, t2 = t1.length, $length = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          chunk = t1[_i];
          t3 = chunk.get$_text().length;
          t4 = chunk.get$_spaceWhenUnsplit() ? 1 : 0;
          $length += t3 + t4 + chunk.get$unsplitBlockLength();
        }
        return $length;
      },
      allowText$0: function() {
        this._rule = null;
      },
      appendText$1: function(_, text) {
        this._text = J.$add$ansx(this._text, text);
      },
      applySplit$6$flushLeft$isDouble$space: function(rule, indent, nesting, flushLeft, isDouble, space) {
        if (flushLeft == null)
          flushLeft = false;
        if (space == null)
          space = false;
        if (rule._isHardened)
          this._rule = rule;
        else if (this._rule == null)
          this._rule = rule;
        this._flushLeft = flushLeft;
        this._nesting = nesting;
        this._indent = indent;
        this._spaceWhenUnsplit = space;
        if (this._isDouble == null)
          this._isDouble = isDouble;
      },
      applySplit$4$flushLeft: function(rule, indent, nesting, flushLeft) {
        return this.applySplit$6$flushLeft$isDouble$space(rule, indent, nesting, flushLeft, null, null);
      },
      indentBlock$1: function(getValue) {
        var t1;
        H.functionTypeCheck(getValue, {func: 1, ret: P.int, args: [O.Rule]});
        t1 = this._block;
        if (t1 == null)
          return false;
        t1 = t1.argument;
        if (t1 == null)
          return false;
        t1 = t1._rule;
        return t1.isSplit$2(getValue.call$1(t1), this._block.argument);
      },
      markDivide$1: function(canDivide) {
        this._canDivide = canDivide;
      },
      toString$0: function(_) {
        var parts, t1;
        parts = [];
        t1 = this._text;
        if (t1.length !== 0)
          parts.push(t1);
        t1 = this._indent;
        if (t1 != null)
          parts.push("indent:" + H.S(t1));
        if (this._spaceWhenUnsplit)
          parts.push("space");
        if (this._isDouble === true)
          parts.push("double");
        if (this._flushLeft)
          parts.push("flush");
        t1 = this._rule;
        if (t1 == null)
          parts.push("(no split)");
        else {
          parts.push(t1.toString$0(0));
          if (this._rule._isHardened)
            parts.push("(hard)");
          t1 = this._rule.get$constrainedRules();
          if (t1.get$isNotEmpty(t1))
            parts.push("-> " + this._rule.get$constrainedRules().join$1(0, " "));
        }
        return C.JSArray_methods.join$1(parts, " ");
      }
    },
    ChunkBlock: {
      "^": "Object;argument,chunks"
    },
    OpenSpan: {
      "^": "Object;_chunk$_start,cost<",
      toString$0: function(_) {
        return "OpenSpan(" + this._chunk$_start + ", $" + this.cost + ")";
      }
    },
    Span: {
      "^": "FastHash;cost<,id",
      toString$0: function(_) {
        return "" + this.id + "$" + this.cost;
      }
    },
    SourceComment: {
      "^": "Selection;text>,linesBefore,isLineComment,flushLeft,0_chunk$_selectionStart,0_chunk$_selectionEnd"
    }
  }], ["dart_style.src.chunk_builder", "package:dart_style/src/chunk_builder.dart",, S, {
    "^": "",
    ChunkBuilder: {
      "^": "Object;_formatter,_chunk_builder$_parent,_source,_chunks,_pendingWhitespace,_rules,_hardSplitRules,_lazyRules,_openSpans,_chunk_builder$_nesting,_blockArgumentNesting,_firstFlushLeft,_preventSplitNesting",
      get$_currentChunkIndex: function() {
        var t1 = this._chunks;
        if (t1.length === 0)
          return 0;
        if (C.JSArray_methods.get$last(t1).get$canAddText())
          return t1.length - 1;
        return t1.length;
      },
      get$rule: function() {
        return C.JSArray_methods.get$last(this._rules);
      },
      split$4$flushLeft$isDouble$nest$space: function(_, flushLeft, isDouble, nest, space) {
        if (space == null)
          space = false;
        if (this._preventSplitNesting > 0) {
          if (space)
            this._pendingWhitespace = C.Whitespace_space;
          return;
        }
        return this._writeSplit$5$flushLeft$isDouble$nest$space(C.JSArray_methods.get$last(this._rules), flushLeft, isDouble, nest, space);
      },
      split$1$space: function($receiver, space) {
        return this.split$4$flushLeft$isDouble$nest$space($receiver, null, null, null, space);
      },
      split$0: function($receiver) {
        return this.split$4$flushLeft$isDouble$nest$space($receiver, null, null, null, null);
      },
      split$2$nest$space: function($receiver, nest, space) {
        return this.split$4$flushLeft$isDouble$nest$space($receiver, null, null, nest, space);
      },
      split$3$isDouble$nest$space: function($receiver, isDouble, nest, space) {
        return this.split$4$flushLeft$isDouble$nest$space($receiver, null, isDouble, nest, space);
      },
      writeComments$3: function(comments, linesBeforeToken, token) {
        var t1, i, t2, t3, comment, t4, t5, t6, linesAfter;
        H.assertSubtype(comments, "$isList", [E.SourceComment], "$asList");
        if (this._pendingWhitespace === C.Whitespace_twoNewlines && C.JSArray_methods.get$first(comments).linesBefore < 2)
          if (linesBeforeToken > 1)
            this._pendingWhitespace = C.Whitespace_newline;
          else
            for (t1 = comments.length, i = 1; i < t1; ++i)
              if (comments[i].linesBefore > 1) {
                this._pendingWhitespace = C.Whitespace_newline;
                break;
              }
        if (this._pendingWhitespace == null) {
          C.JSArray_methods.get$first(comments).linesBefore = 1;
          this._pendingWhitespace = C.Whitespace_none;
        }
        if (linesBeforeToken === 0 && C.JSArray_methods.every$1(comments, new S.ChunkBuilder_writeComments_closure()) && this._pendingWhitespace.get$minimumLines() > 0) {
          C.JSArray_methods.get$first(comments).linesBefore = this._pendingWhitespace.get$minimumLines();
          linesBeforeToken = 1;
        }
        for (t1 = linesBeforeToken === 0, t2 = O.Rule, t3 = this._chunks, i = 0; i < comments.length; ++i) {
          comment = comments[i];
          this.preserveNewlines$1(comment.linesBefore);
          if (this._pendingWhitespace === C.Whitespace_space)
            this._pendingWhitespace = C.Whitespace_none;
          this._emitPendingWhitespace$0();
          t4 = comment.linesBefore;
          if (t4 === 0) {
            if (this._shouldMoveCommentBeforeSplit$1(comment.text))
              C.JSArray_methods.get$last(t3).allowText$0();
            if (this._needsSpaceBeforeComment$1(comment))
              this._chunk_builder$_writeText$1(" ");
          } else {
            this._pendingWhitespace = null;
            t5 = P.LinkedHashSet_LinkedHashSet(null, null, null, t2);
            t6 = $.FastHash__nextId + 1 & 268435455;
            $.FastHash__nextId = t6;
            t6 = new O.Rule(0, false, t5, t6);
            t6._isHardened = true;
            this._writeSplit$4$flushLeft$isDouble$nest(t6, comment.flushLeft, t4 > 1, true);
          }
          t4 = comment.text;
          this._chunk_builder$_writeText$1(t4);
          t5 = comment._chunk$_selectionStart;
          if (t5 != null)
            C.JSArray_methods.get$last(t3).startSelectionFromEnd$1(t4.length - t5);
          t5 = comment._chunk$_selectionEnd;
          if (t5 != null)
            C.JSArray_methods.get$last(t3).endSelectionFromEnd$1(t4.length - t5);
          if (i < comments.length - 1)
            linesAfter = comments[i + 1].linesBefore;
          else {
            if (t1) {
              t4 = C.JSArray_methods.get$last(comments);
              t4 = H.stringContainsUnchecked(t4.text, "\n", 0);
            } else
              t4 = false;
            linesAfter = t4 ? 1 : linesBeforeToken;
          }
          if (linesAfter > 0) {
            this._pendingWhitespace = null;
            t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, t2);
            t5 = $.FastHash__nextId + 1 & 268435455;
            $.FastHash__nextId = t5;
            t5 = new O.Rule(0, false, t4, t5);
            t5._isHardened = true;
            this._writeSplit$4$flushLeft$isDouble$nest(t5, null, linesAfter > 1, true);
          }
        }
        if (this._needsSpaceAfterLastComment$2(comments, token))
          this._pendingWhitespace = C.Whitespace_space;
        this.preserveNewlines$1(linesBeforeToken);
      },
      preserveNewlines$1: function(numLines) {
        switch (this._pendingWhitespace) {
          case C.Whitespace_splitOrNewline:
            if (numLines > 0)
              this._pendingWhitespace = C.Whitespace_nestedNewline;
            else {
              this._pendingWhitespace = C.Whitespace_none;
              this.split$1$space(0, true);
            }
            break;
          case C.Whitespace_splitOrTwoNewlines:
            if (numLines > 1)
              this._pendingWhitespace = C.Whitespace_twoNewlines;
            else {
              this._pendingWhitespace = C.Whitespace_none;
              this.split$1$space(0, true);
            }
            break;
          case C.Whitespace_oneOrTwoNewlines:
            if (numLines > 1)
              this._pendingWhitespace = C.Whitespace_twoNewlines;
            else
              this._pendingWhitespace = C.Whitespace_newline;
            break;
        }
      },
      endSpan$0: function() {
        var t1, openSpan, end, i, span, chunk;
        t1 = this._openSpans;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        openSpan = t1.pop();
        end = this.get$_currentChunkIndex();
        i = openSpan._chunk$_start;
        if (i === end)
          return;
        t1 = $.FastHash__nextId + 1 & 268435455;
        $.FastHash__nextId = t1;
        span = new E.Span(openSpan.cost, t1);
        for (t1 = this._chunks; i < end; ++i) {
          if (i < 0 || i >= t1.length)
            return H.ioore(t1, i);
          chunk = t1[i];
          if (!chunk._rule._isHardened)
            C.JSArray_methods.add$1(chunk.spans, span);
        }
      },
      startRule$1: function(rule) {
        var t1;
        if (rule == null)
          rule = O.Rule$(null);
        t1 = this._lazyRules;
        C.JSArray_methods.forEach$1(t1, this.get$_activateRule());
        C.JSArray_methods.set$length(t1, 0);
        this._activateRule$1(rule);
      },
      startRule$0: function() {
        return this.startRule$1(null);
      },
      _activateRule$1: [function(rule) {
        var t1;
        H.interceptedTypeCheck(rule, "$isRule");
        t1 = this._rules;
        C.JSArray_methods.forEach$1(t1, new S.ChunkBuilder__activateRule_closure(rule));
        C.JSArray_methods.add$1(t1, rule);
      }, "call$1", "get$_activateRule", 4, 0, 30],
      startLazyRule$1: function(rule) {
        if (rule == null)
          rule = O.Rule$(null);
        C.JSArray_methods.add$1(this._lazyRules, rule);
      },
      startLazyRule$0: function() {
        return this.startLazyRule$1(null);
      },
      endRule$0: function() {
        var t1, t2;
        t1 = this._lazyRules;
        t2 = t1.length;
        if (t2 !== 0) {
          if (0 >= t2)
            return H.ioore(t1, -1);
          t1.pop();
        } else {
          t1 = this._rules;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
        }
      },
      nestExpression$2$indent$now: function(indent, now) {
        var t1, t2, t3;
        if (now == null)
          now = false;
        t1 = this._chunk_builder$_nesting;
        if (indent == null)
          indent = 4;
        t2 = t1._pendingNesting;
        t3 = $.FastHash__nextId + 1;
        if (t2 != null) {
          t3 &= 268435455;
          $.FastHash__nextId = t3;
          t1._pendingNesting = new M.NestingLevel(t2, indent, t3);
        } else {
          t2 = t1._nesting_builder$_nesting;
          t2.toString;
          t3 &= 268435455;
          $.FastHash__nextId = t3;
          t1._pendingNesting = new M.NestingLevel(t2, indent, t3);
        }
        if (now)
          t1.commitNesting$0();
      },
      nestExpression$0: function() {
        return this.nestExpression$2$indent$now(null, null);
      },
      nestExpression$1$now: function(now) {
        return this.nestExpression$2$indent$now(null, now);
      },
      unnest$1$now: function(now) {
        var t1, t2;
        if (now == null)
          now = true;
        t1 = this._chunk_builder$_nesting;
        t2 = t1._pendingNesting;
        if (t2 != null)
          t1._pendingNesting = t2._nesting_level$_parent;
        else
          t1._pendingNesting = t1._nesting_builder$_nesting._nesting_level$_parent;
        if (now)
          t1.commitNesting$0();
      },
      unnest$0: function() {
        return this.unnest$1$now(null);
      },
      startSelectionFromEnd$1: function(fromEnd) {
        C.JSArray_methods.get$last(this._chunks).startSelectionFromEnd$1(fromEnd);
      },
      endSelectionFromEnd$1: function(fromEnd) {
        C.JSArray_methods.get$last(this._chunks).endSelectionFromEnd$1(fromEnd);
      },
      startBlock$1: function(argumentChunk) {
        var chunk, t1, t2, t3, t4, t5, t6, t7;
        chunk = C.JSArray_methods.get$last(this._chunks);
        chunk.toString;
        t1 = H.setRuntimeTypeInfo([], [E.Chunk]);
        chunk._block = new E.ChunkBlock(argumentChunk, t1);
        t2 = O.Rule;
        t3 = [t2];
        t4 = H.setRuntimeTypeInfo([], t3);
        t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, t2);
        t3 = H.setRuntimeTypeInfo([], t3);
        t5 = H.setRuntimeTypeInfo([], [E.OpenSpan]);
        t6 = H.setRuntimeTypeInfo([0], [P.int]);
        t7 = $.FastHash__nextId + 1 & 268435455;
        $.FastHash__nextId = t7;
        t7 = new F.NestingBuilder(t6, new M.NestingLevel(null, 0, t7));
        t6 = H.setRuntimeTypeInfo([], [M.NestingLevel]);
        C.JSArray_methods.add$1(t6, t7.get$currentNesting());
        t7.indent$1(null);
        return new S.ChunkBuilder(this._formatter, this, this._source, t1, C.Whitespace_none, t4, t2, t3, t5, t7, t6, false, 0);
      },
      endBlock$2$forceSplit: function(ignoredSplit, forceSplit) {
        var t1, t2, t3, $length, _i, chunk, t4, t5;
        this._divideChunks$0();
        if (!forceSplit) {
          t1 = this._chunks;
          t2 = t1.length;
          t3 = this._formatter.pageWidth;
          $length = 0;
          _i = 0;
          while (true) {
            if (!(_i < t1.length)) {
              forceSplit = false;
              break;
            }
            chunk = t1[_i];
            t4 = chunk.get$_text().length;
            t5 = chunk.get$_spaceWhenUnsplit() ? 1 : 0;
            $length += t4 + t5 + chunk.get$unsplitBlockLength();
            if ($length > t3) {
              forceSplit = true;
              break;
            }
            if (chunk.get$_rule() != null)
              if (chunk.get$_rule()._isHardened) {
                t4 = chunk.get$_rule();
                t4 = t4 == null ? ignoredSplit != null : t4 !== ignoredSplit;
              } else
                t4 = false;
            else
              t4 = false;
            if (t4) {
              forceSplit = true;
              break;
            }
            t1.length === t2 || (0, H.throwConcurrentModificationError)(t1);
            ++_i;
          }
        }
        t1 = this._chunk_builder$_parent;
        t2 = this._firstFlushLeft;
        t1.toString;
        if (forceSplit)
          t1._handleHardSplit$0();
        chunk = C.JSArray_methods.get$last(t1._chunks);
        chunk.applySplit$4$flushLeft(C.JSArray_methods.get$last(t1._rules), C.JSArray_methods.get$last(t1._chunk_builder$_nesting._stack), C.JSArray_methods.get$last(t1._blockArgumentNesting), t2);
        if (chunk._rule._isHardened)
          t1._handleHardSplit$0();
        return t1;
      },
      _emitPendingWhitespace$0: function() {
        switch (this._pendingWhitespace) {
          case C.Whitespace_space:
            this._chunk_builder$_writeText$1(" ");
            break;
          case C.Whitespace_newline:
            this._writeHardSplit$0();
            break;
          case C.Whitespace_nestedNewline:
            this._writeHardSplit$1$nest(true);
            break;
          case C.Whitespace_newlineFlushLeft:
            this._writeHardSplit$2$flushLeft$nest(true, true);
            break;
          case C.Whitespace_twoNewlines:
            this._writeHardSplit$1$isDouble(true);
            break;
          case C.Whitespace_splitOrNewline:
          case C.Whitespace_splitOrTwoNewlines:
          case C.Whitespace_oneOrTwoNewlines:
            break;
        }
        this._pendingWhitespace = C.Whitespace_none;
      },
      _shouldMoveCommentBeforeSplit$1: function(comment) {
        var t1, text;
        t1 = this._chunks;
        if (t1.length === 0)
          return false;
        if (C.JSString_methods.contains$1(comment, "\n"))
          return false;
        text = J.get$text$x(C.JSArray_methods.get$last(t1));
        if (J.getInterceptor$s(text).endsWith$1(text, ",") && C.JSString_methods.startsWith$1(comment, "/*"))
          return false;
        return !C.JSString_methods.endsWith$1(text, "(") && !C.JSString_methods.endsWith$1(text, "[") && !C.JSString_methods.endsWith$1(text, "{");
      },
      _isGenericMethodComment$1: function(comment) {
        var t1 = comment.text;
        return C.JSString_methods.startsWith$1(t1, "/*<") || C.JSString_methods.startsWith$1(t1, "/*=");
      },
      _needsSpaceBeforeComment$1: function(comment) {
        var t1, text;
        t1 = this._chunks;
        if (t1.length === 0)
          return false;
        if (!C.JSArray_methods.get$last(t1).get$canAddText())
          return false;
        text = J.get$text$x(C.JSArray_methods.get$last(t1));
        if (J.getInterceptor$s(text).endsWith$1(text, "\n"))
          return false;
        if (comment.isLineComment)
          return true;
        if (this._isGenericMethodComment$1(comment)) {
          t1 = $.$get$_trailingIdentifierChar()._nativeRegExp;
          t1 = t1.test(text);
        } else
          t1 = false;
        if (t1)
          return false;
        return !C.JSString_methods.endsWith$1(text, "(") && !C.JSString_methods.endsWith$1(text, "[") && !C.JSString_methods.endsWith$1(text, "{");
      },
      _needsSpaceAfterLastComment$2: function(comments, token) {
        H.assertSubtype(comments, "$isList", [E.SourceComment], "$asList");
        if (comments.length === 0)
          return false;
        if (!C.JSArray_methods.get$last(this._chunks).get$canAddText())
          return false;
        if (this._isGenericMethodComment$1(C.JSArray_methods.get$last(comments)) && token === "(")
          return false;
        return token !== ")" && token !== "]" && token !== "}" && token !== "," && token !== ";" && token !== "";
      },
      _writeHardSplit$3$flushLeft$isDouble$nest: function(flushLeft, isDouble, nest) {
        var t1, t2;
        this._pendingWhitespace = null;
        t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, O.Rule);
        t2 = $.FastHash__nextId + 1 & 268435455;
        $.FastHash__nextId = t2;
        t2 = new O.Rule(0, false, t1, t2);
        t2._isHardened = true;
        this._writeSplit$4$flushLeft$isDouble$nest(t2, flushLeft, isDouble, nest);
      },
      _writeHardSplit$0: function() {
        return this._writeHardSplit$3$flushLeft$isDouble$nest(null, null, false);
      },
      _writeHardSplit$1$nest: function(nest) {
        return this._writeHardSplit$3$flushLeft$isDouble$nest(null, null, nest);
      },
      _writeHardSplit$2$flushLeft$nest: function(flushLeft, nest) {
        return this._writeHardSplit$3$flushLeft$isDouble$nest(flushLeft, null, nest);
      },
      _writeHardSplit$1$isDouble: function(isDouble) {
        return this._writeHardSplit$3$flushLeft$isDouble$nest(null, isDouble, false);
      },
      _writeSplit$5$flushLeft$isDouble$nest$space: function(rule, flushLeft, isDouble, nest, space) {
        var t1, t2, t3, t4;
        if (nest == null)
          nest = true;
        if (space == null)
          space = false;
        t1 = this._chunks;
        if (t1.length === 0) {
          if (flushLeft != null)
            this._firstFlushLeft = flushLeft;
          return;
        }
        t2 = C.JSArray_methods.get$last(t1);
        t3 = this._chunk_builder$_nesting;
        t4 = C.JSArray_methods.get$last(t3._stack);
        if (nest)
          t3 = t3._nesting_builder$_nesting;
        else {
          t3 = $.FastHash__nextId + 1 & 268435455;
          $.FastHash__nextId = t3;
          t3 = new M.NestingLevel(null, 0, t3);
        }
        t2.applySplit$6$flushLeft$isDouble$space(rule, t4, t3, flushLeft, isDouble, space);
        if (C.JSArray_methods.get$last(t1).get$rule()._isHardened)
          this._handleHardSplit$0();
        return C.JSArray_methods.get$last(t1);
      },
      _writeSplit$4$flushLeft$isDouble$nest: function(rule, flushLeft, isDouble, nest) {
        return this._writeSplit$5$flushLeft$isDouble$nest$space(rule, flushLeft, isDouble, nest, null);
      },
      _chunk_builder$_writeText$1: function(text) {
        var t1 = this._chunks;
        if (t1.length !== 0 && C.JSArray_methods.get$last(t1).get$canAddText())
          J.appendText$1$x(C.JSArray_methods.get$last(t1), text);
        else
          C.JSArray_methods.add$1(t1, new E.Chunk(text, false, false, H.setRuntimeTypeInfo([], [E.Span])));
      },
      _canDivideAt$1: function(i) {
        var t1, t2, chunk;
        t1 = this._chunks;
        t2 = t1.length;
        if (i === t2 - 1)
          return false;
        if (i >= t2)
          return H.ioore(t1, i);
        chunk = t1[i];
        if (!chunk._rule._isHardened)
          return false;
        if (chunk._nesting._nesting_level$_parent != null)
          return false;
        if (chunk._block != null)
          return false;
        return true;
      },
      _divideChunks$0: function() {
        var t1, i;
        this._hardenRules$0();
        for (t1 = this._chunks, i = 0; i < t1.length; ++i)
          t1[i].markDivide$1(this._canDivideAt$1(i));
      },
      _handleHardSplit$0: function() {
        var t1 = this._rules;
        if (t1.length === 0)
          return;
        if (!C.JSArray_methods.get$last(t1).get$splitsOnInnerRules())
          return;
        this._hardSplitRules.add$1(0, C.JSArray_methods.get$last(t1));
      },
      _hardenRules$0: function() {
        var t1, walkConstraints, t2, _i, chunk;
        t1 = this._hardSplitRules;
        if (t1._length === 0)
          return;
        walkConstraints = new S.ChunkBuilder__hardenRules_walkConstraints();
        for (t1 = P._LinkedHashSetIterator$(t1, t1._modifications, H.getTypeArgumentByIndex(t1, 0)); t1.moveNext$0();)
          walkConstraints.call$1(t1._collection$_current);
        for (t1 = this._chunks, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          chunk = t1[_i];
          if (chunk.get$_rule() != null && chunk.get$_rule()._isHardened)
            C.JSArray_methods.set$length(chunk.get$spans(), 0);
        }
      }
    },
    ChunkBuilder_writeComments_closure: {
      "^": "Closure:31;",
      call$1: function(comment) {
        H.interceptedTypeCheck(comment, "$isSourceComment");
        return comment.linesBefore === 0 && !comment.isLineComment;
      }
    },
    ChunkBuilder__activateRule_closure: {
      "^": "Closure:9;rule",
      call$1: function(outer) {
        H.interceptedTypeCheck(outer, "$isRule");
        if (!outer.get$splitsOnInnerRules())
          return;
        this.rule._implied.add$1(0, outer);
      }
    },
    ChunkBuilder__hardenRules_walkConstraints: {
      "^": "Closure:11;",
      call$1: function(rule) {
        var t1, other;
        rule.harden$0();
        for (t1 = rule.get$constrainedRules(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          other = t1.get$current();
          if (J.$eq$(other, rule))
            continue;
          if (!other.get$isHardened() && rule.constrain$2(rule.get$fullySplitValue(), other) === other.get$fullySplitValue())
            this.call$1(other);
        }
      }
    }
  }], ["dart_style.src.dart_formatter", "package:dart_style/src/dart_formatter.dart",, U, {
    "^": "",
    DartFormatter: {
      "^": "Object;lineEnding,pageWidth,indent,fixes"
    }
  }], ["dart_style.src.debug", "package:dart_style/src/debug.dart",, A, {
    "^": "",
    log: function(message) {
      var t1, t2, t3;
      if (message == null) {
        P.print("");
        return;
      }
      t1 = $._indent;
      t2 = J.toString$0$(message);
      t3 = "\n" + $._indent;
      P.print(t1 + H.stringReplaceAllUnchecked(t2, "\n", t3));
    },
    dumpChunks: function(start, chunks) {
      var t1, t2, spanSet, spans, rules, rows, addChunk, i, rowWidths, _i, row, t3, cell;
      H.assertSubtype(chunks, "$isList", [E.Chunk], "$asList");
      t1 = H.getTypeArgumentByIndex(chunks, 0);
      t2 = H.SubListIterable$(chunks, start, null, t1);
      if (t2.get$length(t2) === 0)
        return;
      spanSet = P.LinkedHashSet_LinkedHashSet(null, null, null, E.Span);
      new A.dumpChunks_addSpans(spanSet).call$1(chunks);
      spans = spanSet.toList$0(0);
      t2 = O.Rule;
      t2 = new H.MappedListIterable(chunks, H.functionTypeCheck(new A.dumpChunks_closure(), {func: 1, ret: t2, args: [t1]}), [t1, t2]).super$Iterable$where(0, H.functionTypeCheck(new A.dumpChunks_closure0(), {func: 1, ret: P.bool, args: [t2]}));
      rules = P.LinkedHashSet_LinkedHashSet$from(t2, H.getTypeArgumentByIndex(t2, 0));
      rows = H.setRuntimeTypeInfo([], [[P.List, P.String]]);
      addChunk = new A.dumpChunks_addChunk(spans, rules, rows);
      for (i = start; i < chunks.length; ++i)
        addChunk.call$3(chunks, "", i);
      rowWidths = P.List_List$filled(C.JSArray_methods.get$first(rows).length, 0, false, P.int);
      for (t1 = rows.length, _i = 0; t2 = rows.length, _i < t2; rows.length === t1 || (0, H.throwConcurrentModificationError)(rows), ++_i) {
        row = rows[_i];
        for (i = 0; i < row.length; ++i) {
          if (i >= rowWidths.length)
            return H.ioore(rowWidths, i);
          C.JSArray_methods.$indexSet(rowWidths, i, Math.max(rowWidths[i], H.checkNum(J.get$length$asx(row[i]))));
        }
      }
      for (_i = 0, t1 = ""; _i < rows.length; rows.length === t2 || (0, H.throwConcurrentModificationError)(rows), ++_i) {
        row = rows[_i];
        for (i = 0; i < row.length; ++i) {
          t3 = row[i];
          if (i >= rowWidths.length)
            return H.ioore(rowWidths, i);
          cell = J.padRight$1$s(t3, rowWidths[i]);
          t1 = t1 + (i !== 1 ? H.S($.$get$_gray()) + cell + H.S($.$get$_none()) : cell) + "  ";
        }
        t1 += "\n";
      }
      P.print(t1.charCodeAt(0) == 0 ? t1 : t1);
    },
    dumpLines: function(chunks, firstLineIndent, splits) {
      var buffer, writeIndent, writeChunksUnsplit, i, chunk, t1, t2, j, t3;
      H.assertSubtype(chunks, "$isList", [E.Chunk], "$asList");
      buffer = new P.StringBuffer("");
      writeIndent = new A.dumpLines_writeIndent(buffer);
      writeChunksUnsplit = new A.dumpLines_writeChunksUnsplit(buffer);
      writeIndent.call$1(firstLineIndent);
      for (i = 0; i < chunks.length - 1; ++i) {
        chunk = chunks[i];
        buffer._contents += H.S(chunk._text);
        t1 = splits._columns;
        t2 = t1.length;
        if (i < t2 && t1[i] != null) {
          j = 0;
          while (true) {
            t3 = chunk._isDouble;
            if (!(j < (t3 != null && t3 ? 2 : 1)))
              break;
            buffer._contents += "\n";
            if (i >= t2)
              return H.ioore(t1, i);
            writeIndent.call$1(t1[i]);
            ++j;
          }
        } else {
          t1 = chunk._block;
          if (t1 != null)
            writeChunksUnsplit.call$1(t1.chunks);
          if (chunk._spaceWhenUnsplit)
            buffer._contents += " ";
        }
      }
      buffer._contents += H.S(J.get$text$x(C.JSArray_methods.get$last(chunks)));
      A.log(buffer);
    },
    _color: function(ansiEscape) {
      return $.useAnsiColors ? ansiEscape : "";
    },
    dumpChunks_addSpans: {
      "^": "Closure:19;spanSet",
      call$1: function(chunks) {
        var t1, t2, _i, chunk;
        H.assertSubtype(chunks, "$isList", [E.Chunk], "$asList");
        for (t1 = chunks.length, t2 = this.spanSet, _i = 0; _i < chunks.length; chunks.length === t1 || (0, H.throwConcurrentModificationError)(chunks), ++_i) {
          chunk = chunks[_i];
          t2.addAll$1(0, chunk.get$spans());
          if (chunk.get$_block() != null)
            this.call$1(chunk.get$_block().chunks);
        }
      }
    },
    dumpChunks_closure: {
      "^": "Closure:20;",
      call$1: [function(chunk) {
        return H.interceptedTypeCheck(chunk, "$isChunk")._rule;
      }, null, null, 4, 0, null, 9, "call"]
    },
    dumpChunks_closure0: {
      "^": "Closure:12;",
      call$1: function(rule) {
        return H.interceptedTypeCheck(rule, "$isRule") != null;
      }
    },
    dumpChunks_addChunk: {
      "^": "Closure:36;spans,rules,rows",
      call$3: function(chunks, prefix, index) {
        var row, chunk, t1, t2, t3, t4, t5, spanBars, _i, span, t6, writeIf, ruleString, constrainedRules, j;
        H.assertSubtype(chunks, "$isList", [E.Chunk], "$asList");
        row = H.setRuntimeTypeInfo([], [P.String]);
        C.JSArray_methods.add$1(row, prefix + index + ":");
        if (index >= chunks.length)
          return H.ioore(chunks, index);
        chunk = chunks[index];
        t1 = chunk._text;
        if (t1.length > 70)
          C.JSArray_methods.add$1(row, J.substring$2$s(t1, 0, 70));
        else
          C.JSArray_methods.add$1(row, t1);
        t1 = this.spans;
        t2 = t1.length;
        if (t2 <= 20) {
          for (t3 = index > 0, t4 = index - 1, t5 = index !== 0, spanBars = "", _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
            span = t1[_i];
            if (C.JSArray_methods.contains$1(chunk.spans, span)) {
              if (t5) {
                if (t4 < 0 || t4 >= chunks.length)
                  return H.ioore(chunks, t4);
                t6 = !C.JSArray_methods.contains$1(chunks[t4].get$spans(), span);
              } else
                t6 = true;
              if (t6)
                spanBars = span.get$cost() === 1 ? spanBars + "\u2556" : spanBars + J.toString$0$(span.get$cost());
              else
                spanBars += "\u2551";
            } else {
              if (t3) {
                if (t4 < 0 || t4 >= chunks.length)
                  return H.ioore(chunks, t4);
                t6 = C.JSArray_methods.contains$1(chunks[t4].get$spans(), span);
              } else
                t6 = false;
              spanBars = t6 ? spanBars + "\u255c" : spanBars + " ";
            }
          }
          C.JSArray_methods.add$1(row, spanBars);
        }
        writeIf = new A.dumpChunks_addChunk_writeIf(row);
        t1 = chunk._rule;
        if (t1 == null) {
          C.JSArray_methods.add$1(row, "");
          C.JSArray_methods.add$1(row, "(no rule)");
          C.JSArray_methods.add$1(row, "");
        } else {
          writeIf.call$2(t1.get$cost() !== 0, new A.dumpChunks_addChunk_closure(chunk));
          ruleString = J.toString$0$(chunk._rule);
          C.JSArray_methods.add$1(row, chunk._rule._isHardened ? ruleString + "!" : ruleString);
          constrainedRules = chunk._rule.get$constrainedRules().toSet$0(0).intersection$1(0, this.rules);
          writeIf.call$2(constrainedRules.get$isNotEmpty(constrainedRules), new A.dumpChunks_addChunk_closure0(constrainedRules));
        }
        t1 = chunk._indent;
        t1 = t1 != null && t1 !== 0;
        writeIf.call$2(t1, new A.dumpChunks_addChunk_closure1(chunk));
        t1 = chunk._nesting;
        t1 = t1 != null && t1.indent !== 0;
        writeIf.call$2(t1, new A.dumpChunks_addChunk_closure2(chunk));
        t1 = chunk._flushLeft;
        writeIf.call$2(t1, new A.dumpChunks_addChunk_closure3());
        writeIf.call$2(chunk._canDivide, new A.dumpChunks_addChunk_closure4());
        C.JSArray_methods.add$1(this.rows, row);
        if (chunk._block != null)
          for (j = 0; t1 = chunk._block.chunks, j < t1.length; ++j)
            this.call$3(t1, prefix + index + ".", j);
      }
    },
    dumpChunks_addChunk_writeIf: {
      "^": "Closure:37;row",
      call$2: function(predicate, callback) {
        var t1;
        H.functionTypeCheck(callback, {func: 1, ret: P.String});
        t1 = this.row;
        if (predicate)
          C.JSArray_methods.add$1(t1, callback.call$0());
        else
          C.JSArray_methods.add$1(t1, "");
      }
    },
    dumpChunks_addChunk_closure: {
      "^": "Closure:3;chunk",
      call$0: function() {
        return "$" + this.chunk._rule.get$cost();
      }
    },
    dumpChunks_addChunk_closure0: {
      "^": "Closure:3;constrainedRules",
      call$0: function() {
        return "-> " + this.constrainedRules.join$1(0, " ");
      }
    },
    dumpChunks_addChunk_closure1: {
      "^": "Closure:3;chunk",
      call$0: function() {
        return "indent " + H.S(this.chunk._indent);
      }
    },
    dumpChunks_addChunk_closure2: {
      "^": "Closure:3;chunk",
      call$0: function() {
        return "nest " + H.S(this.chunk._nesting);
      }
    },
    dumpChunks_addChunk_closure3: {
      "^": "Closure:3;",
      call$0: function() {
        return "flush";
      }
    },
    dumpChunks_addChunk_closure4: {
      "^": "Closure:3;",
      call$0: function() {
        return "divide";
      }
    },
    dumpLines_writeIndent: {
      "^": "Closure:38;buffer",
      call$1: function(indent) {
        var t1;
        if (typeof indent !== "number")
          return indent.$tdiv();
        t1 = C.JSString_methods.$mul("| ", C.JSInt_methods._tdivFast$1(indent, 2));
        this.buffer._contents += H.S($.$get$_gray()) + t1 + H.S($.$get$_none());
        return;
      }
    },
    dumpLines_writeChunksUnsplit: {
      "^": "Closure:19;buffer",
      call$1: function(chunks) {
        var t1, t2, _i, chunk;
        H.assertSubtype(chunks, "$isList", [E.Chunk], "$asList");
        for (t1 = chunks.length, t2 = this.buffer, _i = 0; _i < chunks.length; chunks.length === t1 || (0, H.throwConcurrentModificationError)(chunks), ++_i) {
          chunk = chunks[_i];
          t2._contents += H.S(chunk.get$_text());
          if (chunk.get$_spaceWhenUnsplit())
            t2._contents += " ";
          if (chunk.get$_block() != null)
            this.call$1(chunk.get$_block().chunks);
        }
      }
    }
  }], ["dart_style.src.error_listener", "package:dart_style/src/error_listener.dart",, Y, {
    "^": "",
    ErrorListener: {
      "^": "Object;_errors",
      onError$1: function(_, error) {
        C.JSArray_methods.add$1(this._errors, error);
      },
      throwIfErrors$0: function() {
        var t1 = this._errors;
        if (t1.length === 0)
          return;
        throw H.wrapException(A.FormatterException$(t1));
      },
      $isAnalysisErrorListener: 1
    }
  }], ["dart_style.src.formatter_exception", "package:dart_style/src/exceptions.dart",, A, {
    "^": "",
    FormatterException: {
      "^": "Object;errors",
      message$1$color: function(_, color) {
        var shownErrors, shownErrors0, t1, t2, _i, t3, t4, error, source, t5, t6, t7, t8, file, end, highlight;
        shownErrors = this.errors;
        shownErrors0 = shownErrors.length > 10 ? H.SubListIterable$(shownErrors, 0, 10, H.getTypeArgumentByIndex(shownErrors, 0)).toList$0(0) : shownErrors;
        for (t1 = shownErrors0.length, t2 = [P.int], _i = 0, t3 = "Could not format because the source could not be parsed:\n"; t4 = shownErrors0.length, _i < t4; shownErrors0.length === t1 || (0, H.throwConcurrentModificationError)(shownErrors0), ++_i, t3 = t4) {
          error = shownErrors0[_i];
          t4 = J.getInterceptor$x(error);
          source = t4.get$source(error)._string_source$_contents;
          t5 = source.length;
          if (t4.get$offset(error) + t4.get$length(error) > t5)
            source += C.JSString_methods.$mul(" ", t4.get$offset(error) + t4.get$length(error) - t5);
          t5 = t4.get$source(error).fullName;
          t6 = new H.CodeUnits(source);
          t7 = H.setRuntimeTypeInfo([0], t2);
          t8 = new Uint32Array(H._ensureNativeList(t6.toList$0(t6)));
          file = new Y.SourceFile(t5, t7, t8);
          file.SourceFile$decoded$2$url(t6, t5);
          t5 = t4.get$offset(error);
          end = t4.get$offset(error) + t4.get$length(error);
          if (end < t5)
            H.throwExpression(P.ArgumentError$("End " + H.S(end) + " must come after start " + H.S(t5) + "."));
          else if (end > t8.length)
            H.throwExpression(P.RangeError$("End " + H.S(end) + " must not be greater than the number of characters in the file, " + file.get$length(file) + "."));
          else if (t5 < 0)
            H.throwExpression(P.RangeError$("Start may not be negative, was " + H.S(t5) + "."));
          if (t3.length !== 0)
            t3 += "\n";
          t4 = error.get$_message();
          t6 = Y.FileLocation$_(file, t5);
          t6 = t6.file.getLine$1(t6.offset);
          if (typeof t6 !== "number")
            return t6.$add();
          t6 = "line " + (t6 + 1) + ", column ";
          t7 = Y.FileLocation$_(file, t5);
          t7 = t6 + (t7.file.getColumn$1(t7.offset) + 1);
          t4 = t7 + (": " + H.S(t4));
          highlight = new Y._FileSpan(file, t5, end).highlight$1$color(0, color);
          if (highlight.length !== 0)
            t4 = t4 + "\n" + highlight;
          t4 = t3 + (t4.charCodeAt(0) == 0 ? t4 : t4);
        }
        t1 = shownErrors.length;
        t1 = t4 !== t1 ? t3 + "\n" + ("(" + (t1 - t4) + " more errors...)") : t3;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      message$0: function($receiver) {
        return this.message$1$color($receiver, null);
      },
      toString$0: function(_) {
        return this.message$0(0);
      },
      static: {
        FormatterException$: function(errors) {
          return new A.FormatterException(errors);
        }
      }
    },
    UnexpectedOutputException: {
      "^": "Object;_input,_output",
      toString$0: function(_) {
        return "The formatter produced unexpected output. Input was:\n" + this._input + "\nWhich formatted to:\n" + this._output;
      }
    }
  }], ["dart_style.src.fast_hash", "package:dart_style/src/fast_hash.dart",, N, {
    "^": "",
    FastHash: {
      "^": "Object;",
      get$hashCode: function(_) {
        return this.id;
      }
    }
  }], ["dart_style.src.line_splitting.line_splitter", "package:dart_style/src/line_splitting/line_splitter.dart",, D, {
    "^": "",
    LineSplitter: {
      "^": "Object;writer,chunks,rules,blockIndentation,firstLineIndent,_queue,0_bestSolution",
      LineSplitter$5$flushLeft: function(writer, chunks, blockIndentation, firstLineIndent, flushLeft) {
        var t1, i, t2, _i;
        this._queue._solve_state_queue$_splitter = this;
        for (t1 = this.rules, i = 0; t2 = t1.length, i < t2; ++i)
          J.set$index$x(t1[i], i);
        for (_i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].forgetUnusedRules$0();
      },
      apply$0: function() {
        var t1, t2, t3, attempts, t4, t5, t6, result, last, best, attempts0;
        t1 = this._queue;
        t2 = new Array(this.rules.length);
        t2.fixed$length = Array;
        t2 = new M.SolveState(this, new Y.RuleSet(H.setRuntimeTypeInfo(t2, [P.int])), P.LinkedHashSet_LinkedHashSet(null, null, null, O.Rule), true);
        t2._calculateSplits$0();
        t2._calculateCost$0();
        t1.add$1(0, t2);
        for (t2 = this.chunks, t3 = this.firstLineIndent, attempts = 0; t4 = t1._solve_state_queue$_length, t4 !== 0; attempts = attempts0) {
          t5 = t1._solve_state_queue$_queue;
          t6 = t5.length;
          if (0 >= t6)
            return H.ioore(t5, 0);
          result = t5[0];
          --t4;
          t1._solve_state_queue$_length = t4;
          if (t4 > 0) {
            if (t4 >= t6)
              return H.ioore(t5, t4);
            last = t5[t4];
            C.JSArray_methods.$indexSet(t5, t4, null);
            t1._bubbleDown$2(last, 0);
          }
          if (result.isBetterThan$1(this._bestSolution)) {
            this._bestSolution = result;
            if (result._overflowChars === 0)
              break;
          }
          if ($.traceSplitter) {
            best = result === this._bestSolution ? " (best)" : "";
            A.log(result.toString$0(0) + best);
            A.dumpLines(t2, t3, result._splits);
            A.log(null);
          }
          attempts0 = attempts + 1;
          if (attempts > 5000)
            break;
          result.expand$0(0);
        }
        if ($.traceSplitter) {
          A.log(H.S(this._bestSolution) + " (winner)");
          A.dumpLines(t2, t3, this._bestSolution._splits);
          A.log(null);
        }
        return this._bestSolution._splits;
      },
      static: {
        LineSplitter$: function(writer, chunks, blockIndentation, firstLineIndent, flushLeft) {
          var t1, t2, t3;
          t1 = new Array(7);
          t1.fixed$length = Array;
          t1 = H.setRuntimeTypeInfo(t1, [M.SolveState]);
          t2 = O.Rule;
          t3 = H.getTypeArgumentByIndex(chunks, 0);
          t2 = new H.MappedListIterable(chunks, H.functionTypeCheck(new D.LineSplitter_closure(), {func: 1, ret: t2, args: [t3]}), [t3, t2]).super$Iterable$where(0, H.functionTypeCheck(new D.LineSplitter_closure0(), {func: 1, ret: P.bool, args: [t2]}));
          t2 = P.LinkedHashSet_LinkedHashSet$from(t2, H.getTypeArgumentByIndex(t2, 0)).toList$1$growable(0, false);
          if (flushLeft)
            t3 = 0;
          else {
            if (typeof firstLineIndent !== "number")
              return firstLineIndent.$add();
            if (typeof blockIndentation !== "number")
              return H.iae(blockIndentation);
            t3 = firstLineIndent + blockIndentation;
          }
          t1 = new D.LineSplitter(writer, chunks, t2, blockIndentation, t3, new X.SolveStateQueue(t1, 0));
          t1.LineSplitter$5$flushLeft(writer, chunks, blockIndentation, firstLineIndent, flushLeft);
          return t1;
        }
      }
    },
    LineSplitter_closure: {
      "^": "Closure:20;",
      call$1: [function(chunk) {
        return H.interceptedTypeCheck(chunk, "$isChunk")._rule;
      }, null, null, 4, 0, null, 9, "call"]
    },
    LineSplitter_closure0: {
      "^": "Closure:12;",
      call$1: function(rule) {
        return H.interceptedTypeCheck(rule, "$isRule") != null;
      }
    }
  }], ["dart_style.src.line_splitting.rule_set", "package:dart_style/src/line_splitting/rule_set.dart",, Y, {
    "^": "",
    RuleSet: {
      "^": "Object;_values",
      contains$1: function(_, rule) {
        var t1, t2;
        if (rule._isHardened)
          return true;
        t1 = this._values;
        t2 = rule.index;
        if (t2 >>> 0 !== t2 || t2 >= t1.length)
          return H.ioore(t1, t2);
        return t1[t2] != null;
      },
      getValue$1: function(rule) {
        var t1, t2, value;
        if (rule._isHardened)
          return rule.get$numValues() - 1;
        t1 = this._values;
        t2 = rule.index;
        if (t2 >>> 0 !== t2 || t2 >= t1.length)
          return H.ioore(t1, t2);
        value = t1[t2];
        if (value != null)
          return value;
        return 0;
      },
      forEach$2: function(_, rules, callback) {
        var t1, t2, i, _i, rule, value;
        H.assertSubtype(rules, "$isList", [O.Rule], "$asList");
        H.functionTypeCheck(callback, {func: 1, args: [O.Rule, P.int]});
        for (t1 = rules.length, t2 = this._values, i = 0, _i = 0; _i < rules.length; rules.length === t1 || (0, H.throwConcurrentModificationError)(rules), ++_i) {
          rule = rules[_i];
          if (i >= t2.length)
            return H.ioore(t2, i);
          value = t2[i];
          if (value != null)
            callback.call$2(rule, value);
          ++i;
        }
      },
      tryBind$4: function(rules, rule, value, onSplitRule) {
        var t1, t2, t3, t4, otherValue, t5, constraint;
        H.assertSubtype(rules, "$isList", [O.Rule], "$asList");
        H.functionTypeCheck(onSplitRule, {func: 1, args: [O.Rule]});
        t1 = this._values;
        C.JSArray_methods.$indexSet(t1, rule.index, value);
        for (t2 = rule.get$constrainedRules(), t2 = t2.get$iterator(t2), t3 = value === 0; t2.moveNext$0();) {
          t4 = t2.get$current();
          if (t4._isHardened)
            otherValue = t4.get$numValues() - 1;
          else {
            t5 = t4.index;
            if (t5 >>> 0 !== t5 || t5 >= t1.length)
              return H.ioore(t1, t5);
            otherValue = t1[t5];
          }
          constraint = rule.constrain$2(value, t4);
          if (otherValue == null) {
            if (constraint === -1)
              if (t4.get$numValues() === 2) {
                if (!this.tryBind$4(rules, t4, 1, onSplitRule))
                  return false;
              } else
                onSplitRule.call$1(t4);
            else if (constraint != null)
              if (!this.tryBind$4(rules, t4, constraint, onSplitRule))
                return false;
          } else {
            if (constraint === -1) {
              if (J.$eq$(otherValue, 0))
                return false;
            } else if (constraint != null)
              if (!J.$eq$(otherValue, constraint))
                return false;
            constraint = t4.constrain$2(H.intTypeCheck(otherValue), rule);
            if (constraint === -1) {
              if (t3)
                return false;
            } else if (constraint != null)
              if (value !== constraint)
                return false;
          }
        }
        return true;
      },
      toString$0: function(_) {
        var t1, t2, t3;
        t1 = this._values;
        t2 = P.Object;
        t3 = H.getTypeArgumentByIndex(t1, 0);
        return new H.MappedListIterable(t1, H.functionTypeCheck(new Y.RuleSet_toString_closure(), {func: 1, ret: t2, args: [t3]}), [t3, t2]).join$1(0, " ");
      }
    },
    RuleSet_toString_closure: {
      "^": "Closure:39;",
      call$1: [function(value) {
        H.intTypeCheck(value);
        return value == null ? "?" : value;
      }, null, null, 4, 0, null, 26, "call"]
    },
    SplitSet: {
      "^": "Object;_columns,0_cost",
      get$cost: function() {
        return this._cost;
      },
      toString$0: function(_) {
        var result, t1, t2, i;
        result = [];
        for (t1 = this._columns, t2 = t1.length, i = 0; i < t2; ++i)
          if (t1[i] != null)
            result.push("" + i + ":" + H.S(t1[i]));
        return C.JSArray_methods.join$1(result, " ");
      }
    }
  }], ["dart_style.src.line_splitting.solve_state", "package:dart_style/src/line_splitting/solve_state.dart",, M, {
    "^": "",
    SolveState: {
      "^": "Object;_splitter,_ruleValues,0_boundRules,0_unboundRules,_liveRules,0_splits,0_overflowChars,_isComplete,0_constraints,0_unboundConstraints,0_boundRulesInUnboundLines",
      getValue$1: [function(rule) {
        return this._ruleValues.getValue$1(rule);
      }, "call$1", "get$getValue", 4, 0, 40],
      isBetterThan$1: function(other) {
        var t1, t2;
        if (!this._isComplete)
          return false;
        if (other == null)
          return true;
        t1 = this._overflowChars;
        t2 = other._overflowChars;
        if (t1 == null ? t2 != null : t1 !== t2) {
          if (typeof t1 !== "number")
            return t1.$lt();
          if (typeof t2 !== "number")
            return H.iae(t2);
          return t1 < t2;
        }
        t1 = this._splits._cost;
        t2 = other._splits._cost;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        return t1 < t2;
      },
      compareOverlap$1: function(other) {
        var t1, t2, t3, t4, _i, rule, value, otherValue;
        if (!this._isOverlapping$1(other))
          return 0;
        for (t1 = this._splitter.rules, t2 = t1.length, t3 = this._ruleValues, t4 = other._ruleValues, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          rule = t1[_i];
          value = t3.getValue$1(rule);
          otherValue = t4.getValue$1(rule);
          if (value !== otherValue)
            return C.JSInt_methods.compareTo$1(value, otherValue);
        }
        throw H.wrapException("unreachable");
      },
      expand$0: function(_) {
        var t1, t2, unsplitRules, t3, t4, t5, t6, t7, t8, triedRules, _i, rule, value, _box_0, t9, boundRules, state, t10;
        t1 = this._ruleValues;
        t2 = t1._values;
        t2 = J.JSArray_JSArray$markFixed(t2.slice(0), H.getTypeArgumentByIndex(t2, 0));
        unsplitRules = new Y.RuleSet(t2);
        for (t3 = this._splitter, t4 = t3.rules, t5 = t4.length, t6 = this._liveRules, t7 = t3._queue, t8 = O.Rule, triedRules = 0, _i = 0; _i < t4.length; t4.length === t5 || (0, H.throwConcurrentModificationError)(t4), ++_i) {
          rule = t4[_i];
          if (t6.contains$1(0, rule)) {
            for (value = 1; value < rule.get$numValues(); ++value) {
              _box_0 = {};
              t9 = H.setRuntimeTypeInfo(t2.slice(0), [H.getTypeArgumentByIndex(t2, 0)]);
              t9.fixed$length = Array;
              boundRules = new Y.RuleSet(t9);
              _box_0.mustSplitRules = null;
              if (!boundRules.tryBind$4(t4, rule, value, new M.SolveState_expand_closure(_box_0)))
                continue;
              t9 = P.LinkedHashSet_LinkedHashSet(null, null, null, t8);
              state = new M.SolveState(t3, boundRules, t9, true);
              state._calculateSplits$0();
              state._calculateCost$0();
              t10 = _box_0.mustSplitRules;
              if (t10 != null) {
                state._isComplete = false;
                t9.addAll$1(0, t10);
              }
              t7.add$1(0, state);
            }
            ++triedRules;
            if (triedRules === t6._length)
              break;
          }
          if (!t1.contains$1(0, rule))
            if (!unsplitRules.tryBind$4(t4, rule, 0, new M.SolveState_expand_closure0()))
              break;
        }
      },
      _isOverlapping$1: function(other) {
        var t1, t2, t3, t4, disallowed, otherDisallowed;
        this._ensureBoundRulesInUnboundLines$0();
        other._ensureBoundRulesInUnboundLines$0();
        t1 = this._boundRulesInUnboundLines;
        if (t1._length !== other._boundRulesInUnboundLines._length)
          return false;
        for (t1 = P._LinkedHashSetIterator$(t1, t1._modifications, H.getTypeArgumentByIndex(t1, 0)), t2 = this._ruleValues, t3 = other._ruleValues; t1.moveNext$0();) {
          t4 = t1._collection$_current;
          if (!other._boundRulesInUnboundLines.contains$1(0, t4))
            return false;
          if (t2.getValue$1(t4) !== t3.getValue$1(t4))
            return false;
        }
        this._ensureConstraints$0();
        other._ensureConstraints$0();
        t1 = this._constraints;
        t1 = t1.get$length(t1);
        t2 = other._constraints;
        if (t1 !== t2.get$length(t2))
          return false;
        for (t1 = this._constraints.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          t2 = t1.get$current();
          t3 = this._constraints.$index(0, t2);
          t2 = other._constraints.$index(0, t2);
          if (t3 == null ? t2 != null : t3 !== t2)
            return false;
        }
        this._ensureUnboundConstraints$0();
        other._ensureUnboundConstraints$0();
        t1 = this._unboundConstraints;
        t1 = t1.get$length(t1);
        t2 = other._unboundConstraints;
        if (t1 !== t2.get$length(t2))
          return false;
        for (t1 = this._unboundConstraints.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          t2 = t1.get$current();
          disallowed = this._unboundConstraints.$index(0, t2);
          otherDisallowed = other._unboundConstraints.$index(0, t2);
          if (disallowed._length !== otherDisallowed._length)
            return false;
          for (t2 = new P._LinkedHashSetIterator(disallowed, disallowed._modifications, [H.getTypeArgumentByIndex(disallowed, 0)]), t2._cell = disallowed._first; t2.moveNext$0();)
            if (!otherDisallowed.contains$1(0, t2._collection$_current))
              return false;
        }
        return true;
      },
      _calculateSplits$0: function() {
        var usedNestingLevels, t1, t2, t3, i, chunk, t4, t5, t6, indent;
        usedNestingLevels = P.LinkedHashSet_LinkedHashSet(null, null, null, M.NestingLevel);
        for (t1 = this._splitter, t2 = t1.chunks, t3 = this._ruleValues, i = 0; i < t2.length - 1; ++i) {
          chunk = t2[i];
          t4 = chunk._rule;
          if (t4.isSplit$2(t3.getValue$1(t4), chunk)) {
            usedNestingLevels.add$1(0, chunk._nesting);
            t4 = chunk._nesting;
            t4._totalUsedIndent = null;
            t4 = t4._nesting_level$_parent;
            if (t4 != null)
              t4.clearTotalUsedIndent$0();
          }
        }
        for (t4 = P._LinkedHashSetIterator$(usedNestingLevels, usedNestingLevels._modifications, H.getTypeArgumentByIndex(usedNestingLevels, 0)); t4.moveNext$0();)
          t4._collection$_current.refreshTotalUsedIndent$1(usedNestingLevels);
        t4 = new Array(t2.length - 1);
        t4.fixed$length = Array;
        this._splits = new Y.SplitSet(H.setRuntimeTypeInfo(t4, [P.int]));
        for (t4 = this.get$getValue(), t1 = t1.blockIndentation, i = 0; i < t2.length - 1; ++i) {
          chunk = t2[i];
          t5 = chunk._rule;
          if (t5.isSplit$2(t3.getValue$1(t5), chunk)) {
            if (!chunk.get$flushLeftAfter()) {
              t5 = chunk._indent;
              if (typeof t1 !== "number")
                return t1.$add();
              if (typeof t5 !== "number")
                return H.iae(t5);
              t6 = chunk._nesting._totalUsedIndent;
              if (typeof t6 !== "number")
                return H.iae(t6);
              indent = t1 + t5 + t6;
              if (chunk.indentBlock$1(t4))
                indent += 4;
            } else
              indent = 0;
            C.JSArray_methods.$indexSet(this._splits._columns, i, indent);
          }
        }
      },
      _calculateCost$0: function() {
        var _box_0, t1, endLine, splitSpans, t2, t3, previousNesting, i, t4, chunk, t5, t6, $length, span;
        _box_0 = {};
        _box_0.cost = 0;
        this._overflowChars = 0;
        t1 = this._splitter;
        _box_0.length = t1.firstLineIndent;
        _box_0.foundOverflowRules = false;
        _box_0.start = 0;
        endLine = new M.SolveState__calculateCost_endLine(_box_0, this);
        splitSpans = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        for (t2 = t1.chunks, t3 = t1.writer, previousNesting = null, i = 0; t4 = t2.length, i < t4; ++i) {
          chunk = t2[i];
          t5 = _box_0.length;
          t6 = chunk._text.length;
          if (typeof t5 !== "number")
            return t5.$add();
          $length = t5 + t6;
          _box_0.length = $length;
          if (i === t4 - 1)
            break;
          t4 = this._splits._columns;
          if (i < t4.length && t4[i] != null) {
            endLine.call$1(i);
            splitSpans.addAll$1(0, chunk.spans);
            if (chunk._block != null) {
              t4 = _box_0.cost;
              t5 = this._splits._columns;
              if (i >= t5.length)
                return H.ioore(t5, i);
              _box_0.cost = t4 + t3.formatBlock$2(chunk, t5[i]).cost;
            }
            if (previousNesting != null) {
              t4 = chunk._nesting;
              t5 = t4._totalUsedIndent;
              if (t5 !== 0) {
                t6 = previousNesting._totalUsedIndent;
                t4 = (t5 == null ? t6 == null : t5 === t6) && t4 !== previousNesting;
              } else
                t4 = false;
            } else
              t4 = false;
            if (t4) {
              t4 = this._overflowChars;
              if (typeof t4 !== "number")
                return t4.$add();
              this._overflowChars = t4 + 10000;
            }
            previousNesting = chunk._nesting;
            t4 = this._splits._columns;
            if (i >= t4.length)
              return H.ioore(t4, i);
            _box_0.length = t4[i];
          } else {
            if (chunk._spaceWhenUnsplit) {
              ++$length;
              _box_0.length = $length;
              t4 = $length;
            } else
              t4 = $length;
            _box_0.length = t4 + chunk.get$unsplitBlockLength();
          }
        }
        this._ruleValues.forEach$2(0, t1.rules, new M.SolveState__calculateCost_closure(_box_0));
        for (t1 = P._LinkedHashSetIterator$(splitSpans, splitSpans._modifications, H.getTypeArgumentByIndex(splitSpans, 0)); t1.moveNext$0();) {
          span = t1._collection$_current;
          t3 = _box_0.cost;
          t4 = span.get$cost();
          if (typeof t4 !== "number")
            return H.iae(t4);
          _box_0.cost = t3 + t4;
        }
        endLine.call$1(t2.length);
        this._splits._cost = _box_0.cost;
      },
      _addLiveRules$1: function(rule) {
        var t1, t2, t3, added, t4;
        if (rule == null)
          return false;
        for (t1 = rule.get$allConstrainedRules(), t1 = P._LinkedHashSetIterator$(t1, t1._modifications, H.getTypeArgumentByIndex(t1, 0)), t2 = this._liveRules, t3 = this._ruleValues, added = false; t1.moveNext$0();) {
          t4 = t1._collection$_current;
          if (t3.contains$1(0, t4))
            continue;
          t2.add$1(0, t4);
          added = true;
        }
        return added;
      },
      _ensureBoundRulesInUnboundLines$0: function() {
        var t1, boundInLine, t2, hasUnbound, i, t3, rule;
        if (this._boundRulesInUnboundLines != null)
          return;
        t1 = O.Rule;
        this._boundRulesInUnboundLines = P.LinkedHashSet_LinkedHashSet(null, null, null, t1);
        boundInLine = P.LinkedHashSet_LinkedHashSet(null, null, null, t1);
        for (t1 = this._splitter.chunks, t2 = this._ruleValues, hasUnbound = false, i = 0; i < t1.length - 1; ++i) {
          t3 = this._splits._columns;
          if (i < t3.length && t3[i] != null) {
            if (hasUnbound)
              this._boundRulesInUnboundLines.addAll$1(0, boundInLine);
            if (boundInLine._length > 0) {
              boundInLine._last = null;
              boundInLine._first = null;
              boundInLine._rest = null;
              boundInLine._nums = null;
              boundInLine._strings = null;
              boundInLine._length = 0;
              boundInLine._modifications = boundInLine._modifications + 1 & 67108863;
            }
            hasUnbound = false;
          }
          if (i >= t1.length)
            return H.ioore(t1, i);
          rule = t1[i].get$rule();
          if (rule != null)
            if (t2.contains$1(0, rule))
              boundInLine.add$1(0, rule);
            else
              hasUnbound = true;
        }
        if (hasUnbound)
          this._boundRulesInUnboundLines.addAll$1(0, boundInLine);
      },
      _ensureConstraints$0: function() {
        var t1, t2, t3, t4, _i, rule, t5, constraint;
        if (this._constraints != null)
          return;
        t1 = O.Rule;
        this._unboundRules = P.LinkedHashSet_LinkedHashSet(null, null, null, t1);
        this._boundRules = P.LinkedHashSet_LinkedHashSet(null, null, null, t1);
        for (t2 = this._splitter.rules, t3 = t2.length, t4 = this._ruleValues, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          rule = t2[_i];
          if (t4.contains$1(0, rule))
            this._boundRules.add$1(0, rule);
          else
            this._unboundRules.add$1(0, rule);
        }
        this._constraints = P.LinkedHashMap_LinkedHashMap$_empty(t1, P.int);
        for (t1 = this._boundRules, t1 = P._LinkedHashSetIterator$(t1, t1._modifications, H.getTypeArgumentByIndex(t1, 0)); t1.moveNext$0();) {
          t2 = t1._collection$_current;
          if (t2._constrainedRules == null) {
            t3 = t2._implied;
            t5 = t3._newSet$0();
            t5.addAll$1(0, t3);
            t2._constrainedRules = t5;
            t2.addConstrainedRules$1(t5);
          }
          t3 = t2._constrainedRules;
          t3 = t3.get$iterator(t3);
          for (; t3.moveNext$0();) {
            t5 = t3.get$current();
            if (!this._unboundRules.contains$1(0, t5))
              continue;
            constraint = t2.constrain$2(t4.getValue$1(t2), t5);
            if (constraint != null)
              this._constraints.$indexSet(0, t5, constraint);
          }
        }
      },
      _ensureUnboundConstraints$0: function() {
        var t1, t2, t3, t4, t5, t6, disallowedValues, boundValue, t7, value, constraint;
        if (this._unboundConstraints != null)
          return;
        this._unboundConstraints = P.LinkedHashMap_LinkedHashMap$_empty(O.Rule, [P.Set, P.int]);
        for (t1 = this._unboundRules, t1 = P._LinkedHashSetIterator$(t1, t1._modifications, H.getTypeArgumentByIndex(t1, 0)), t2 = P.int, t3 = this._ruleValues; t1.moveNext$0();) {
          t4 = t1._collection$_current;
          if (t4._constrainedRules == null) {
            t5 = t4._implied;
            t6 = t5._newSet$0();
            t6.addAll$1(0, t5);
            t4._constrainedRules = t6;
            t4.addConstrainedRules$1(t6);
          }
          t5 = t4._constrainedRules;
          t5 = t5.get$iterator(t5);
          disallowedValues = null;
          for (; t5.moveNext$0();) {
            t6 = t5.get$current();
            if (!this._boundRules.contains$1(0, t6))
              continue;
            boundValue = t3.getValue$1(t6);
            for (t7 = boundValue !== 0, value = 0; value < t4.get$numValues(); ++value) {
              constraint = t4.constrain$2(value, t6);
              if (constraint == null)
                continue;
              if (constraint === boundValue)
                continue;
              if (constraint === -1 && t7)
                continue;
              if (disallowedValues == null) {
                disallowedValues = P.LinkedHashSet_LinkedHashSet(null, null, null, t2);
                this._unboundConstraints.$indexSet(0, t4, disallowedValues);
              }
              disallowedValues.add$1(0, value);
            }
          }
        }
      },
      toString$0: function(_) {
        var t1, t2;
        t1 = this._splitter.rules;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        t2 = P.StringBuffer__writeAll("", new H.MappedListIterable(t1, H.functionTypeCheck(new M.SolveState_toString_closure(this), {func: 1, ret: null, args: [t2]}), [t2, null]), " ") + ("   $" + H.S(this._splits._cost));
        t1 = this._overflowChars;
        if (typeof t1 !== "number")
          return t1.$gt();
        t1 = t1 > 0 ? t2 + (" (" + t1 + " over)") : t2;
        if (!this._isComplete)
          t1 += " (incomplete)";
        if (this._splits == null)
          t1 += " invalid";
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    SolveState_expand_closure: {
      "^": "Closure:9;_box_0",
      call$1: function(rule) {
        var t1, t2, mustSplitRules;
        t1 = this._box_0;
        t2 = t1.mustSplitRules;
        if (t2 == null) {
          mustSplitRules = H.setRuntimeTypeInfo([], [O.Rule]);
          t1.mustSplitRules = mustSplitRules;
          t1 = mustSplitRules;
        } else
          t1 = t2;
        C.JSArray_methods.add$1(t1, rule);
      }
    },
    SolveState_expand_closure0: {
      "^": "Closure:9;",
      call$1: function(_) {
      }
    },
    SolveState__calculateCost_endLine: {
      "^": "Closure:41;_box_0,$this",
      call$1: function(end) {
        var t1, t2, t3, t4, t5, t6, i;
        t1 = this._box_0;
        t2 = t1.length;
        t3 = this.$this;
        t4 = t3._splitter;
        t5 = t4.writer.pageWidth;
        if (typeof t2 !== "number")
          return t2.$gt();
        if (t2 > t5) {
          t6 = t3._overflowChars;
          if (typeof t6 !== "number")
            return t6.$add();
          t3._overflowChars = t6 + (t2 - t5);
          if (!t1.foundOverflowRules)
            for (i = t1.start, t2 = t4.chunks; i < end; ++i) {
              if (i >= t2.length)
                return H.ioore(t2, i);
              if (t3._addLiveRules$1(t2[i].get$rule()))
                t1.foundOverflowRules = true;
            }
        }
        t1.start = end;
      }
    },
    SolveState__calculateCost_closure: {
      "^": "Closure:42;_box_0",
      call$2: function(rule, value) {
        var t1;
        if (value !== 0) {
          t1 = this._box_0;
          t1.cost = t1.cost + rule.get$cost();
        }
      }
    },
    SolveState_toString_closure: {
      "^": "Closure:43;$this",
      call$1: [function(rule) {
        var t1, t2, t3, value;
        H.interceptedTypeCheck(rule, "$isRule");
        t1 = "" + (rule.get$numValues() - 1);
        t2 = this.$this;
        t3 = t2._ruleValues;
        value = t3.contains$1(0, rule) ? "" + t3.getValue$1(rule) : "?";
        value = C.JSString_methods.padLeft$1(value, t1.length);
        return t2._liveRules.contains$1(0, rule) ? H.S($.$get$_bold()) + value + H.S($.$get$_none()) : H.S($.$get$_gray()) + value + H.S($.$get$_none());
      }, null, null, 4, 0, null, 27, "call"]
    }
  }], ["dart_style.src.line_splitting.solve_state_queue", "package:dart_style/src/line_splitting/solve_state_queue.dart",, X, {
    "^": "",
    SolveStateQueue: {
      "^": "Object;0_solve_state_queue$_splitter,_solve_state_queue$_queue,_solve_state_queue$_length",
      get$isNotEmpty: function(_) {
        return this._solve_state_queue$_length !== 0;
      },
      add$1: function(_, state) {
        var t1, t2, newCapacity, newQueue;
        if (this._tryOverlap$1(state))
          return;
        t1 = this._solve_state_queue$_length;
        t2 = this._solve_state_queue$_queue.length;
        if (t1 === t2) {
          newCapacity = t2 * 2 + 1;
          if (newCapacity < 7)
            newCapacity = 7;
          t1 = new Array(newCapacity);
          t1.fixed$length = Array;
          newQueue = H.setRuntimeTypeInfo(t1, [M.SolveState]);
          C.JSArray_methods.setRange$3(newQueue, 0, this._solve_state_queue$_length, this._solve_state_queue$_queue);
          this._solve_state_queue$_queue = newQueue;
        }
        this._bubbleUp$2(state, this._solve_state_queue$_length++);
      },
      _compare$2: function(a, b) {
        var comparison = this._compareScore$2(a, b);
        if (comparison !== 0)
          return comparison;
        return this._compareRules$2(a, b);
      },
      _compareScore$2: function(a, b) {
        var t1, t2;
        t1 = a._splits._cost;
        t2 = b._splits._cost;
        if (t1 == null ? t2 != null : t1 !== t2)
          return J.compareTo$1$ns(t1, t2);
        return J.compareTo$1$ns(a._overflowChars, b._overflowChars);
      },
      _compareRules$2: function(a, b) {
        var t1, t2, _i, rule, aValue, bValue;
        for (t1 = this._solve_state_queue$_splitter.rules, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          rule = t1[_i];
          a.toString;
          H.interceptedTypeCheck(rule, "$isRule");
          aValue = a._ruleValues.getValue$1(rule);
          bValue = b._ruleValues.getValue$1(rule);
          if (aValue !== bValue)
            return C.JSInt_methods.compareTo$1(aValue, bValue);
        }
        throw H.wrapException("unreachable");
      },
      _tryOverlap$1: function(state) {
        var position, index, t1, enqueued, comparison, overlap, leftChildPosition;
        if (this._solve_state_queue$_length === 0)
          return false;
        position = 1;
        do
          c$0: {
            index = position - 1;
            t1 = this._solve_state_queue$_queue;
            if (index < 0 || index >= t1.length)
              return H.ioore(t1, index);
            enqueued = t1[index];
            comparison = this._compareScore$2(enqueued, state);
            if (comparison === 0) {
              overlap = enqueued.compareOverlap$1(state);
              if (overlap < 0)
                return true;
              else if (overlap > 0) {
                C.JSArray_methods.$indexSet(this._solve_state_queue$_queue, index, state);
                return true;
              } else
                comparison = this._compareRules$2(enqueued, state);
            }
            if (comparison < 0) {
              leftChildPosition = position * 2;
              if (leftChildPosition <= this._solve_state_queue$_length) {
                position = leftChildPosition;
                break c$0;
              }
            }
            t1 = this._solve_state_queue$_length;
            do {
              for (; (position & 1) === 1;)
                position = position >>> 1;
              ++position;
            } while (position > t1);
          }
        while (position !== 1);
        return false;
      },
      _bubbleUp$2: function(element, index) {
        var parentIndex, t1, $parent;
        for (; index > 0; index = parentIndex) {
          parentIndex = C.JSInt_methods._tdivFast$1(index - 1, 2);
          t1 = this._solve_state_queue$_queue;
          if (parentIndex < 0 || parentIndex >= t1.length)
            return H.ioore(t1, parentIndex);
          $parent = t1[parentIndex];
          if (this._compare$2(element, $parent) > 0)
            break;
          C.JSArray_methods.$indexSet(this._solve_state_queue$_queue, index, $parent);
        }
        C.JSArray_methods.$indexSet(this._solve_state_queue$_queue, index, element);
      },
      _bubbleDown$2: function(element, index) {
        var rightChildIndex, t1, leftChildIndex, t2, leftChild, rightChild, minChild, minChildIndex, child;
        rightChildIndex = index * 2 + 2;
        for (; t1 = this._solve_state_queue$_length, rightChildIndex < t1; index = minChildIndex) {
          leftChildIndex = rightChildIndex - 1;
          t1 = this._solve_state_queue$_queue;
          t2 = t1.length;
          if (leftChildIndex < 0 || leftChildIndex >= t2)
            return H.ioore(t1, leftChildIndex);
          leftChild = t1[leftChildIndex];
          if (rightChildIndex < 0 || rightChildIndex >= t2)
            return H.ioore(t1, rightChildIndex);
          rightChild = t1[rightChildIndex];
          if (this._compare$2(leftChild, rightChild) < 0) {
            minChild = leftChild;
            minChildIndex = leftChildIndex;
          } else {
            minChild = rightChild;
            minChildIndex = rightChildIndex;
          }
          if (this._compare$2(element, minChild) <= 0) {
            C.JSArray_methods.$indexSet(this._solve_state_queue$_queue, index, element);
            return;
          }
          C.JSArray_methods.$indexSet(this._solve_state_queue$_queue, index, minChild);
          rightChildIndex = minChildIndex * 2 + 2;
        }
        leftChildIndex = rightChildIndex - 1;
        if (leftChildIndex < t1) {
          t1 = this._solve_state_queue$_queue;
          if (leftChildIndex < 0 || leftChildIndex >= t1.length)
            return H.ioore(t1, leftChildIndex);
          child = t1[leftChildIndex];
          if (this._compare$2(element, child) > 0) {
            C.JSArray_methods.$indexSet(this._solve_state_queue$_queue, index, child);
            index = leftChildIndex;
          }
        }
        C.JSArray_methods.$indexSet(this._solve_state_queue$_queue, index, element);
      }
    }
  }], ["dart_style.src.line_writer", "package:dart_style/src/line_writer.dart",, A, {
    "^": "",
    LineWriter: {
      "^": "Object;_buffer,_line_writer$_chunks,_lineEnding,pageWidth,_blockIndentation,_blockCache,0_selectionStart,0_selectionEnd",
      get$length: function(_) {
        return this._buffer._contents.length;
      },
      formatBlock$2: function(chunk, column) {
        var key, t1, cached, t2, t3, t4, result;
        key = new A._BlockKey(chunk, column);
        t1 = this._blockCache;
        cached = t1.$index(0, key);
        if (cached != null)
          return cached;
        t2 = chunk._block.chunks;
        t3 = this._lineEnding;
        t4 = new P.StringBuffer("");
        t4._contents += H.S(t3);
        result = new A.LineWriter(t4, t2, t3, this.pageWidth, column, t1).writeLines$2$flushLeft(2, chunk._flushLeft);
        t1.$indexSet(0, key, result);
        return result;
      },
      writeLines$3$flushLeft$isCompilationUnit: function(firstLineIndent, flushLeft, isCompilationUnit) {
        var t1, indent, newlines, totalCost, start, i, t2, chunk, start0;
        for (t1 = this._line_writer$_chunks, indent = firstLineIndent, newlines = 0, totalCost = 0, start = 0, i = 0; t2 = t1.length, i < t2; ++i) {
          chunk = t1[i];
          if (!chunk._canDivide)
            continue;
          start0 = i + 1;
          t2 = this._completeLine$5$flushLeft(newlines, indent, start, start0, flushLeft);
          if (typeof t2 !== "number")
            return H.iae(t2);
          totalCost += t2;
          t2 = chunk._isDouble;
          newlines = t2 != null && t2 ? 2 : 1;
          indent = chunk._indent;
          flushLeft = chunk._flushLeft;
          start = start0;
        }
        if (start < t2) {
          t1 = this._completeLine$5$flushLeft(newlines, indent, start, t2, flushLeft);
          if (typeof t1 !== "number")
            return H.iae(t1);
          totalCost += t1;
        }
        if (isCompilationUnit)
          this._buffer._contents += H.S(this._lineEnding);
        t1 = this._buffer._contents;
        return new A.FormatResult(t1.charCodeAt(0) == 0 ? t1 : t1, totalCost, this._selectionStart, this._selectionEnd);
      },
      writeLines$2$isCompilationUnit: function(firstLineIndent, isCompilationUnit) {
        return this.writeLines$3$flushLeft$isCompilationUnit(firstLineIndent, false, isCompilationUnit);
      },
      writeLines$2$flushLeft: function(firstLineIndent, flushLeft) {
        return this.writeLines$3$flushLeft$isCompilationUnit(firstLineIndent, flushLeft, false);
      },
      _completeLine$5$flushLeft: function(newlines, indent, start, end, flushLeft) {
        var t1, t2, j, chunks, t3, splits, i, chunk, t4, block, t5;
        for (t1 = this._buffer, t2 = this._lineEnding, j = 0; j < newlines; ++j)
          t1._contents += H.S(t2);
        chunks = C.JSArray_methods.sublist$2(this._line_writer$_chunks, start, end);
        if ($.traceLineWriter) {
          A.log(H.S($.$get$_green()) + "\nWriting:" + H.S($.$get$_none()));
          A.dumpChunks(0, chunks);
          A.log(null);
        }
        t3 = this._blockIndentation;
        splits = D.LineSplitter$(this, chunks, t3, indent, flushLeft).apply$0();
        if (!flushLeft) {
          if (typeof indent !== "number")
            return indent.$add();
          if (typeof t3 !== "number")
            return H.iae(t3);
          t1._contents += C.JSString_methods.$mul(" ", indent + t3);
        }
        for (i = 0; i < chunks.length; ++i) {
          chunk = chunks[i];
          this._writeChunk$1(chunk);
          if (chunk._block != null) {
            t3 = splits._columns;
            t4 = t3.length;
            if (!(i < t4 && t3[i] != null))
              this._writeChunksUnsplit$1(chunk);
            else {
              if (i >= t4)
                return H.ioore(t3, i);
              block = this.formatBlock$2(chunk, t3[i]);
              t3 = block.selectionStart;
              if (t3 != null)
                this._selectionStart = t1._contents.length + t3;
              t3 = block.selectionEnd;
              if (t3 != null)
                this._selectionEnd = t1._contents.length + t3;
              t1._contents += block.text;
            }
          }
          if (!(i === chunks.length - 1)) {
            t3 = splits._columns;
            t4 = t3.length;
            if (i < t4 && t3[i] != null) {
              t1._contents += H.S(t2);
              t5 = chunk._isDouble;
              if (t5 != null && t5)
                t1._contents += H.S(t2);
              if (i >= t4)
                return H.ioore(t3, i);
              t1._contents += C.JSString_methods.$mul(" ", t3[i]);
            } else if (chunk._spaceWhenUnsplit)
              t1._contents += " ";
          }
        }
        return splits._cost;
      },
      _writeChunksUnsplit$1: function(chunk) {
        var t1, t2, t3, _i, blockChunk;
        t1 = chunk._block;
        if (t1 == null)
          return;
        for (t1 = t1.chunks, t2 = t1.length, t3 = this._buffer, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          blockChunk = t1[_i];
          this._writeChunk$1(blockChunk);
          if (blockChunk.get$_spaceWhenUnsplit())
            t3._contents += " ";
          this._writeChunksUnsplit$1(blockChunk);
        }
      },
      _writeChunk$1: function(chunk) {
        var t1 = chunk._chunk$_selectionStart;
        if (t1 != null)
          this._selectionStart = this._buffer._contents.length + t1;
        t1 = chunk._chunk$_selectionEnd;
        if (t1 != null)
          this._selectionEnd = this._buffer._contents.length + t1;
        this._buffer._contents += H.S(chunk._text);
      }
    },
    _BlockKey: {
      "^": "Object;chunk,column",
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (!(other instanceof A._BlockKey))
          return false;
        t1 = this.chunk;
        t2 = other.chunk;
        if (t1 == null ? t2 == null : t1 === t2) {
          t1 = this.column;
          t2 = other.column;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        return (J.get$hashCode$(this.chunk) ^ J.get$hashCode$(this.column)) >>> 0;
      }
    },
    FormatResult: {
      "^": "Object;text>,cost<,selectionStart,selectionEnd"
    }
  }], ["dart_style.src.nesting_builder", "package:dart_style/src/nesting_builder.dart",, F, {
    "^": "",
    NestingBuilder: {
      "^": "Object;_stack,0_pendingNesting,_nesting_builder$_nesting",
      get$currentNesting: function() {
        var t1 = this._pendingNesting;
        return t1 != null ? t1 : this._nesting_builder$_nesting;
      },
      indent$1: function(spaces) {
        var t1;
        if (spaces == null)
          spaces = 2;
        t1 = this._stack;
        C.JSArray_methods.add$1(t1, C.JSArray_methods.get$last(t1) + spaces);
      },
      commitNesting$0: function() {
        var t1 = this._pendingNesting;
        if (t1 == null)
          return;
        this._nesting_builder$_nesting = t1;
        this._pendingNesting = null;
      }
    }
  }], ["dart_style.src.nesting_level", "package:dart_style/src/nesting_level.dart",, M, {
    "^": "",
    NestingLevel: {
      "^": "FastHash;_nesting_level$_parent,indent,0_totalUsedIndent,id",
      clearTotalUsedIndent$0: function() {
        this._totalUsedIndent = null;
        var t1 = this._nesting_level$_parent;
        if (t1 != null)
          t1.clearTotalUsedIndent$0();
      },
      refreshTotalUsedIndent$1: function(usedNesting) {
        var t1, t2;
        H.assertSubtype(usedNesting, "$isSet", [M.NestingLevel], "$asSet");
        if (this._totalUsedIndent != null)
          return;
        this._totalUsedIndent = 0;
        t1 = this._nesting_level$_parent;
        if (t1 != null) {
          t1.refreshTotalUsedIndent$1(usedNesting);
          t2 = this._totalUsedIndent;
          t1 = t1._totalUsedIndent;
          if (typeof t2 !== "number")
            return t2.$add();
          if (typeof t1 !== "number")
            return H.iae(t1);
          this._totalUsedIndent = t2 + t1;
        }
        if (usedNesting.contains$1(0, this)) {
          t1 = this._totalUsedIndent;
          if (typeof t1 !== "number")
            return t1.$add();
          this._totalUsedIndent = t1 + this.indent;
        }
      },
      toString$0: function(_) {
        var t1 = this._nesting_level$_parent;
        if (t1 == null)
          return C.JSInt_methods.toString$0(this.indent);
        return t1.toString$0(0) + ":" + this.indent;
      }
    }
  }], ["dart_style.src.rule.argument", "package:dart_style/src/rule/argument.dart",, G, {
    "^": "",
    ArgumentRule: {
      "^": "Rule;",
      get$splitsOnInnerRules: function() {
        return this._trackInnerRules;
      },
      addConstrainedRules$1: ["super$ArgumentRule$addConstrainedRules", function(rules) {
        var t1;
        H.assertSubtype(rules, "$isSet", [O.Rule], "$asSet");
        this.super$Rule$addConstrainedRules(rules);
        t1 = this._collectionRule;
        if (t1 != null)
          rules.add$1(0, t1);
      }],
      forgetUnusedRules$0: ["super$ArgumentRule$forgetUnusedRules", function() {
        this.super$Rule$forgetUnusedRules();
        var t1 = this._collectionRule;
        if (t1 != null && t1.index == null)
          this._collectionRule = null;
      }]
    },
    PositionalRule: {
      "^": "ArgumentRule;0_namedArgsRule,_arguments,_collectionRule,_leadingCollections,_trailingCollections,_trackInnerRules,_rule$_cost,0index,_isHardened,_implied,0_constrainedRules,0_allConstrainedRules,id",
      get$numValues: function() {
        var t1, result;
        t1 = this._arguments.length;
        result = t1 + 1;
        if (t1 > 1)
          ++result;
        return this._leadingCollections > 0 || this._trailingCollections > 0 ? result + 1 : result;
      },
      addConstrainedRules$1: function(rules) {
        var t1;
        H.assertSubtype(rules, "$isSet", [O.Rule], "$asSet");
        this.super$ArgumentRule$addConstrainedRules(rules);
        t1 = this._namedArgsRule;
        if (t1 != null)
          rules.add$1(0, t1);
      },
      forgetUnusedRules$0: function() {
        this.super$ArgumentRule$forgetUnusedRules();
        var t1 = this._namedArgsRule;
        if (t1 != null && t1.index == null)
          this._namedArgsRule = null;
      },
      isSplitAtValue$2: function(value, chunk) {
        var t1, t2, argument, t3, i, t4;
        if (value === 1) {
          t1 = C.JSArray_methods.get$first(this._arguments);
          return chunk == null ? t1 == null : chunk === t1;
        }
        t1 = this._arguments;
        t2 = t1.length;
        if (typeof value !== "number")
          return value.$le();
        if (value <= t2) {
          argument = t2 - value + 1;
          if (argument < 0 || argument >= t2)
            return H.ioore(t1, argument);
          t1 = t1[argument];
          return chunk == null ? t1 == null : chunk === t1;
        }
        if (value === t2 + 1) {
          for (t3 = this._leadingCollections, i = 0; i < t3; ++i) {
            if (i >= t2)
              return H.ioore(t1, i);
            t4 = t1[i];
            if (chunk == null ? t4 == null : chunk === t4)
              return false;
          }
          for (i = t2 - this._trailingCollections; i < t2; ++i) {
            if (i < 0)
              return H.ioore(t1, i);
            t3 = t1[i];
            if (chunk == null ? t3 == null : chunk === t3)
              return false;
          }
          return true;
        }
        return true;
      },
      constrain$2: function(value, other) {
        var constrained, t1, t2, argument;
        H.interceptedTypeCheck(other, "$isRule");
        constrained = this.super$Rule$constrain(value, other);
        if (constrained != null)
          return constrained;
        t1 = this._namedArgsRule;
        if (other == null ? t1 == null : other === t1) {
          if (value === this.get$numValues() - 1)
            return this._namedArgsRule.get$numValues() - 1;
          if (value !== 0)
            return -1;
        }
        t1 = this._collectionRule;
        if (other == null ? t1 != null : other !== t1)
          return;
        t1 = this._leadingCollections;
        if (t1 === 0 && this._trailingCollections === 0)
          return;
        if (value === 0)
          return;
        if (value === 1)
          if (t1 > 0)
            return 0;
          else
            return;
        t2 = this._arguments.length;
        if (value <= t2) {
          argument = t2 - value + 1;
          if (argument < t1 || argument >= t2 - this._trailingCollections)
            return 0;
          return;
        }
        if (value === t2 + 1)
          return 1;
        return;
      },
      toString$0: function(_) {
        return "Pos" + this.super$Rule$toString(0);
      }
    },
    NamedRule: {
      "^": "ArgumentRule;_arguments,_collectionRule,_leadingCollections,_trailingCollections,_trackInnerRules,_rule$_cost,0index,_isHardened,_implied,0_constrainedRules,0_allConstrainedRules,id",
      get$numValues: function() {
        return 3;
      },
      isSplitAtValue$2: function(value, chunk) {
        var t1;
        if (value === 1) {
          t1 = C.JSArray_methods.get$first(this._arguments);
          return chunk == null ? t1 == null : chunk === t1;
        }
        return true;
      },
      constrain$2: function(value, other) {
        var constrained, t1;
        H.interceptedTypeCheck(other, "$isRule");
        constrained = this.super$Rule$constrain(value, other);
        if (constrained != null)
          return constrained;
        t1 = this._collectionRule;
        if (other == null ? t1 != null : other !== t1)
          return;
        if (this._leadingCollections === 0 && this._trailingCollections === 0)
          return;
        if (value === 0)
          return;
        if (value === 1)
          return 0;
        return;
      },
      toString$0: function(_) {
        return "Named" + this.super$Rule$toString(0);
      }
    }
  }], ["dart_style.src.rule.combinator", "package:dart_style/src/rule/combinator.dart",, Q, {
    "^": "",
    CombinatorRule: {
      "^": "Rule;_combinator$_combinators,_names,_rule$_cost,0index,_isHardened,_implied,0_constrainedRules,0_allConstrainedRules,id",
      get$numValues: function() {
        return this._names.length === 2 ? 5 : 3;
      },
      isSplitAtValue$2: function(value, chunk) {
        switch (value) {
          case 1:
            return this._combinator$_combinators.contains$1(0, chunk);
          case 2:
            return this._isCombinatorSplit$2(0, chunk);
          case 3:
            if (this._names.length === 2)
              return this._isCombinatorSplit$2(1, chunk);
            return true;
          default:
            return true;
        }
      },
      _isCombinatorSplit$2: function(combinator, chunk) {
        var t1;
        if (!this._combinator$_combinators.contains$1(0, chunk)) {
          t1 = this._names;
          if (combinator >= t1.length)
            return H.ioore(t1, combinator);
          t1 = t1[combinator].contains$1(0, chunk);
        } else
          t1 = true;
        return t1;
      },
      toString$0: function(_) {
        return "Comb" + this.super$Rule$toString(0);
      }
    }
  }], ["dart_style.src.rule.metadata", "package:dart_style/src/rule/metadata.dart",, O, {
    "^": "",
    MetadataRule: {
      "^": "Rule;0_positionalRule,0_namedRule,_rule$_cost,0index,_isHardened,_implied,0_constrainedRules,0_allConstrainedRules,id",
      constrain$2: function(value, other) {
        var constrained, t1;
        H.interceptedTypeCheck(other, "$isRule");
        constrained = this.super$Rule$constrain(value, other);
        if (constrained != null)
          return constrained;
        if (value === 0)
          return;
        t1 = this._positionalRule;
        if (other == null ? t1 == null : other === t1)
          return t1.get$numValues() - 1;
        t1 = this._namedRule;
        if (other == null ? t1 == null : other === t1)
          return t1.get$numValues() - 1;
        return;
      },
      addConstrainedRules$1: function(rules) {
        var t1;
        H.assertSubtype(rules, "$isSet", [O.Rule], "$asSet");
        t1 = this._positionalRule;
        if (t1 != null)
          rules.add$1(0, t1);
        t1 = this._namedRule;
        if (t1 != null)
          rules.add$1(0, t1);
      },
      forgetUnusedRules$0: function() {
        this.super$Rule$forgetUnusedRules();
        var t1 = this._positionalRule;
        if (t1 != null && t1.index == null)
          this._positionalRule = null;
        t1 = this._namedRule;
        if (t1 != null && t1.index == null)
          this._namedRule = null;
      }
    }
  }], ["dart_style.src.rule.rule", "package:dart_style/src/rule/rule.dart",, O, {
    "^": "",
    Rule: {
      "^": "FastHash;_rule$_cost,0index',_isHardened,_implied,0_constrainedRules,0_allConstrainedRules,id",
      get$numValues: function() {
        return 2;
      },
      get$fullySplitValue: function() {
        return this.get$numValues() - 1;
      },
      get$cost: function() {
        return this._rule$_cost;
      },
      get$isHardened: function() {
        return this._isHardened;
      },
      get$splitsOnInnerRules: function() {
        return true;
      },
      harden$0: function() {
        this._isHardened = true;
      },
      isSplit$2: function(value, chunk) {
        H.intTypeCheck(value);
        if (this._isHardened)
          return true;
        if (value === 0)
          return false;
        return this.isSplitAtValue$2(value, chunk);
      },
      isSplitAtValue$2: function(value, chunk) {
        return true;
      },
      constrain$2: ["super$Rule$constrain", function(value, other) {
        H.interceptedTypeCheck(other, "$isRule");
        if (value === 0)
          return;
        if (this._implied.contains$1(0, other))
          return other.get$numValues() - 1;
        return;
      }],
      addConstrainedRules$1: ["super$Rule$addConstrainedRules", function(rules) {
        H.assertSubtype(rules, "$isSet", [O.Rule], "$asSet");
      }],
      forgetUnusedRules$0: ["super$Rule$forgetUnusedRules", function() {
        var t1 = this._implied;
        t1._filterWhere$2(H.functionTypeCheck(new O.Rule_forgetUnusedRules_closure(), {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(t1, 0)]}), false);
        this._constrainedRules = null;
        this._allConstrainedRules = null;
      }],
      get$constrainedRules: function() {
        if (this._constrainedRules == null) {
          var t1 = this._implied.toSet$0(0);
          this._constrainedRules = t1;
          this.addConstrainedRules$1(t1);
        }
        return this._constrainedRules;
      },
      get$allConstrainedRules: function() {
        if (this._allConstrainedRules == null) {
          this._allConstrainedRules = P.LinkedHashSet_LinkedHashSet(null, null, null, O.Rule);
          new O.Rule_allConstrainedRules_visit(this).call$1(this);
        }
        return this._allConstrainedRules;
      },
      toString$0: ["super$Rule$toString", function(_) {
        return "" + this.id;
      }],
      static: {
        Rule$: function(cost) {
          var t1, t2, t3;
          t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, O.Rule);
          t2 = cost == null ? 1 : cost;
          t3 = $.FastHash__nextId + 1 & 268435455;
          $.FastHash__nextId = t3;
          return new O.Rule(t2, false, t1, t3);
        }
      }
    },
    Rule_forgetUnusedRules_closure: {
      "^": "Closure:12;",
      call$1: function(rule) {
        return H.interceptedTypeCheck(rule, "$isRule").index != null;
      }
    },
    Rule_allConstrainedRules_visit: {
      "^": "Closure:9;$this",
      call$1: function(rule) {
        var t1;
        H.interceptedTypeCheck(rule, "$isRule");
        t1 = this.$this;
        if (t1._allConstrainedRules.contains$1(0, rule))
          return;
        t1._allConstrainedRules.add$1(0, rule);
        rule.get$constrainedRules().forEach$1(0, this);
      }
    }
  }], ["dart_style.src.rule.type_argument", "package:dart_style/src/rule/type_argument.dart",, Y, {
    "^": "",
    TypeArgumentRule: {
      "^": "Rule;_type_argument$_arguments,_rule$_cost,0index,_isHardened,_implied,0_constrainedRules,0_allConstrainedRules,id",
      get$cost: function() {
        return 4;
      },
      get$numValues: function() {
        var t1 = this._type_argument$_arguments.length;
        return t1 === 1 ? 2 : t1 + 2;
      },
      isSplit$2: function(value, chunk) {
        var t1, t2, t3;
        H.intTypeCheck(value);
        if (value === 0)
          return false;
        if (value === this.get$numValues() - 1)
          return true;
        t1 = this._type_argument$_arguments;
        t2 = t1.length;
        if (typeof value !== "number")
          return H.iae(value);
        t3 = t2 - value;
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        t3 = t1[t3];
        return chunk == null ? t3 == null : chunk === t3;
      },
      toString$0: function(_) {
        return "TypeArg" + this.super$Rule$toString(0);
      }
    }
  }], ["dart_style.src.source_code", "package:dart_style/src/source_code.dart",, A, {
    "^": "",
    SourceCode: {
      "^": "Object;uri,text>,isCompilationUnit,selectionStart,selectionLength",
      static: {
        SourceCode$: function(text, isCompilationUnit, selectionLength, selectionStart, uri) {
          var t1, t2;
          t1 = selectionStart == null;
          t2 = selectionLength == null;
          if (t1 !== t2)
            H.throwExpression(P.ArgumentError$("Is selectionStart is provided, selectionLength must be too."));
          if (!t1) {
            if (selectionStart < 0)
              H.throwExpression(P.ArgumentError$("selectionStart must be non-negative."));
            if (selectionStart > text.length)
              H.throwExpression(P.ArgumentError$("selectionStart must be within text."));
          }
          if (!t2) {
            if (selectionLength < 0)
              H.throwExpression(P.ArgumentError$("selectionLength must be non-negative."));
            if (typeof selectionStart !== "number")
              return selectionStart.$add();
            if (selectionStart + selectionLength > text.length)
              H.throwExpression(P.ArgumentError$("selectionLength must end within text."));
          }
          return new A.SourceCode(uri, text, true, selectionStart, selectionLength);
        }
      }
    }
  }], ["dart_style.src.source_visitor", "package:dart_style/src/source_visitor.dart",, F, {
    "^": "",
    SourceVisitor: {
      "^": "ThrowingAstVisitor;0builder,_source_visitor$_formatter,_lineInfo,_source_visitor$_source,_passedSelectionStart,_passedSelectionEnd,0_source_visitor$_selectionEnd,_constNesting,_collectionSplits,_metadataRules,_blockArgumentLists",
      visitAdjacentStrings$1: function(node) {
        var t1 = this.builder;
        C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 1));
        this.builder.startRule$0();
        this.visitNodes$2$between(node._ast$_strings, this.get$splitOrNewline());
        this.builder.endRule$0();
        this.builder.endSpan$0();
      },
      visitAnnotation$1: function(node) {
        this.token$1(node.atSign);
        this.visit$1(node._ast$_name);
        this.token$1(node.period);
        this.visit$1(node._constructorName);
        this.visit$1(node._ast$_arguments);
      },
      visitArgumentList$2$nestExpression: function(node, nestExpression) {
        var t1 = node._ast$_arguments;
        if (t1.get$length(t1) === 0) {
          this.token$1(node.leftParenthesis);
          t1 = node.rightParenthesis;
          if (t1._precedingComment != null)
            this.soloZeroSplit$0();
          this.token$1(t1);
          return;
        }
        t1 = node._ast$_arguments;
        if (t1.get$last(t1).get$endToken().next.type === C.TokenType_O55) {
          this._visitCollectionLiteral$4(null, node.leftParenthesis, node._ast$_arguments, node.rightParenthesis);
          return;
        }
        if (nestExpression)
          this.builder.nestExpression$0();
        B.ArgumentListVisitor_ArgumentListVisitor$forArguments(this, node.leftParenthesis, node.rightParenthesis, node._ast$_arguments).visit$0();
        if (nestExpression)
          this.builder.unnest$0();
      },
      visitArgumentList$1: function(node) {
        return this.visitArgumentList$2$nestExpression(node, true);
      },
      visitAsExpression$1: function(node) {
        var t1 = this.builder;
        C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 1));
        this.builder.nestExpression$0();
        this.visit$1(node._expression);
        this.soloSplit$0();
        this.token$1(node.asOperator);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.visit$1(node._type);
        this.builder.unnest$0();
        this.builder.endSpan$0();
      },
      visitAssertInitializer$1: function(node) {
        var $arguments, t1;
        this.token$1(node.assertKeyword);
        $arguments = H.setRuntimeTypeInfo([node._condition], [Y.Expression]);
        t1 = node._ast$_message;
        if (t1 != null)
          C.JSArray_methods.add$1($arguments, t1);
        this.builder.nestExpression$0();
        B.ArgumentListVisitor_ArgumentListVisitor$forArguments(this, node.leftParenthesis, node.rightParenthesis, $arguments).visit$0();
        this.builder.unnest$0();
      },
      visitAssertStatement$1: function(node) {
        this._simpleStatement$2(node, new F.SourceVisitor_visitAssertStatement_closure(this, node));
      },
      visitAssignmentExpression$1: function(node) {
        this.builder.nestExpression$0();
        this.visit$1(node._leftHandSide);
        this._visitAssignment$2(node.operator, node._rightHandSide);
        this.builder.unnest$0();
      },
      visitAwaitExpression$1: function(node) {
        this.token$1(node.awaitKeyword);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.visit$1(node._expression);
      },
      visitBinaryExpression$1: function(node) {
        var t1, precedence, t2;
        t1 = this.builder;
        C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 1));
        t1 = !J.getInterceptor(node._ast$_parent).$isExpressionFunctionBody;
        if (t1)
          this.builder.nestExpression$0();
        this.builder.startLazyRule$0();
        precedence = node.operator.type.precedence;
        t2 = this.builder;
        C.JSArray_methods.add$1(t2._blockArgumentNesting, t2._chunk_builder$_nesting.get$currentNesting());
        new F.SourceVisitor_visitBinaryExpression_traverse(this, precedence).call$1(node);
        t2 = this.builder._blockArgumentNesting;
        if (0 >= t2.length)
          return H.ioore(t2, -1);
        t2.pop();
        if (t1)
          this.builder.unnest$0();
        this.builder.endSpan$0();
        this.builder.endRule$0();
      },
      visitBlock$1: function(node) {
        var t1, t2, needsDouble, t3, body;
        t1 = node._statements;
        if (t1.get$length(t1) === 0 && node.rightBracket._precedingComment == null) {
          this.token$1(node.leftBracket);
          t1 = node._ast$_parent;
          if (!!J.getInterceptor(t1).$isIfStatement)
            if (t1._elseStatement != null && t1._thenStatement === node)
              this.builder._pendingWhitespace = C.Whitespace_newline;
          this.token$1(node.rightBracket);
          return;
        }
        t1 = node._ast$_parent;
        t2 = node.leftBracket;
        if (!!J.getInterceptor(t1).$isBlockFunctionBody)
          this._startLiteralBody$1(t2);
        else
          this._beginBody$1(t2);
        for (t1 = node._statements, t1 = new H.ListIterator(t1, t1.get$length(t1), 0, [H.getRuntimeTypeArgument(t1, "ListMixin", 0)]), needsDouble = true; t1.moveNext$0();) {
          t2 = t1.__internal$_current;
          t3 = this.builder;
          if (needsDouble)
            t3._pendingWhitespace = C.Whitespace_twoNewlines;
          else
            t3._pendingWhitespace = C.Whitespace_oneOrTwoNewlines;
          this.visit$1(t2);
          if (!!J.getInterceptor(t2).$isFunctionDeclarationStatement) {
            body = t2._functionDeclaration._functionExpression._body;
            if (!!J.getInterceptor(body).$isBlockFunctionBody) {
              t2 = body._ast$_block._statements;
              needsDouble = t2.get$length(t2) !== 0;
            } else
              needsDouble = false;
          } else
            needsDouble = false;
        }
        t1 = node._statements;
        if (t1.get$length(t1) !== 0)
          this.builder._pendingWhitespace = C.Whitespace_newline;
        t1 = node._ast$_parent;
        t2 = node.rightBracket;
        if (!!J.getInterceptor(t1).$isBlockFunctionBody) {
          t1 = node._statements;
          this._endLiteralBody$2$forceSplit(t2, t1.get$length(t1) !== 0);
        } else
          this._endBody$1(t2);
      },
      visitBlockFunctionBody$1: function(node) {
        var t1;
        this.builder._pendingWhitespace = C.Whitespace_space;
        t1 = node.keyword;
        this.token$1(t1);
        this.token$1(node.star);
        if (t1 != null)
          this.builder._pendingWhitespace = C.Whitespace_space;
        this.visit$1(node._ast$_block);
      },
      visitBooleanLiteral$1: function(node) {
        this.token$1(node.literal);
      },
      visitBreakStatement$1: function(node) {
        this._simpleStatement$2(node, new F.SourceVisitor_visitBreakStatement_closure(this, node));
      },
      visitCascadeExpression$1: function(node) {
        var splitIfOperandsSplit, t1, t2, t3, t4;
        splitIfOperandsSplit = node._cascadeSections._elements.length > 1 || this._isCollectionLike$1(node._ast$_target);
        if (splitIfOperandsSplit) {
          t1 = this.builder;
          if (this._allowInlineCascade$1(node))
            t2 = O.Rule$(null);
          else {
            t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, O.Rule);
            t3 = $.FastHash__nextId + 1 & 268435455;
            $.FastHash__nextId = t3;
            t3 = new O.Rule(0, false, t2, t3);
            t3._isHardened = true;
            t2 = t3;
          }
          t1.startLazyRule$1(t2);
        }
        t1 = node._ast$_target;
        if (!!J.getInterceptor(t1).$isMethodInvocation)
          N.CallChainVisitor_CallChainVisitor(this, t1).visit$1$unnest(false);
        else
          this.visit$1(t1);
        this.builder.nestExpression$2$indent$now(2, true);
        t1 = this.builder;
        C.JSArray_methods.add$1(t1._blockArgumentNesting, t1._chunk_builder$_nesting.get$currentNesting());
        t1 = !splitIfOperandsSplit;
        if (t1) {
          t2 = this.builder;
          if (this._allowInlineCascade$1(node))
            t3 = O.Rule$(null);
          else {
            t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, O.Rule);
            t4 = $.FastHash__nextId + 1 & 268435455;
            $.FastHash__nextId = t4;
            t4 = new O.Rule(0, false, t3, t4);
            t4._isHardened = true;
            t3 = t4;
          }
          t2.startRule$1(t3);
        }
        this.builder.split$0(0);
        if (t1)
          this.builder.endRule$0();
        this.visitNodes$2$between(node._cascadeSections, this.get$zeroSplit());
        if (splitIfOperandsSplit)
          this.builder.endRule$0();
        t1 = this.builder._blockArgumentNesting;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
        this.builder.unnest$0();
        if (!!J.getInterceptor(node._ast$_target).$isMethodInvocation)
          this.builder.unnest$0();
      },
      _isCollectionLike$1: function(expression) {
        var t1, $arguments;
        t1 = J.getInterceptor(expression);
        if (!!t1.$isListLiteral)
          return false;
        if (!!t1.$isMapLiteral)
          return false;
        if (!!t1.$isInvocationExpression)
          $arguments = expression._argumentList;
        else
          $arguments = !!t1.$isInstanceCreationExpression ? expression._argumentList : null;
        if ($arguments != null) {
          t1 = $arguments._ast$_arguments;
          if (t1.get$length(t1) !== 0) {
            t1 = $arguments._ast$_arguments;
            t1 = t1.get$last(t1).get$endToken().next.type !== C.TokenType_O55;
          } else
            t1 = true;
        } else
          t1 = true;
        return t1;
      },
      _allowInlineCascade$1: function(node) {
        var t1, $name, t2;
        t1 = J.getInterceptor(node._ast$_target);
        if (!!t1.$isConditionalExpression)
          return false;
        if (!!t1.$isBinaryExpression)
          return false;
        if (!!t1.$isPrefixExpression)
          return false;
        if (!!t1.$isAwaitExpression)
          return false;
        t1 = node._cascadeSections;
        if (t1._elements.length < 2)
          return true;
        for (t1 = new H.ListIterator(t1, t1.get$length(t1), 0, [H.getRuntimeTypeArgument(t1, "ListMixin", 0)]), $name = null; t1.moveNext$0();) {
          t2 = t1.__internal$_current;
          if (!!J.getInterceptor(t2).$isMethodInvocation) {
            if ($name == null)
              $name = t2._methodName.token.get$lexeme();
            else if ($name !== t2._methodName.token.get$lexeme())
              return false;
          } else
            return false;
        }
        return true;
      },
      visitCatchClause$1: function(node) {
        var t1, t2;
        t1 = this.get$space();
        this.token$2$after(node.onKeyword, t1);
        this.visit$1(node._exceptionType);
        t2 = node.catchKeyword;
        if (t2 != null) {
          if (node._exceptionType != null)
            this.builder._pendingWhitespace = C.Whitespace_space;
          this.token$1(t2);
          this.builder._pendingWhitespace = C.Whitespace_space;
          this.token$1(node.leftParenthesis);
          this.visit$1(node._exceptionParameter);
          this.token$2$after(node.comma, t1);
          this.visit$1(node._stackTraceParameter);
          this.token$1(node.rightParenthesis);
          this.builder._pendingWhitespace = C.Whitespace_space;
        } else
          this.builder._pendingWhitespace = C.Whitespace_space;
        this.visit$1(node._body);
      },
      visitClassDeclaration$1: function(node) {
        var t1, t2, t3, t4, t5, t6, needsDouble;
        this.visitMetadata$1(node._metadata);
        this.builder.nestExpression$0();
        t1 = this.get$space();
        this.token$2$after(node.abstractKeyword, t1);
        this.token$1(node.classKeyword);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.visit$1(node._ast$_name);
        this.visit$1(node._typeParameters);
        this.visit$1(node._extendsClause);
        t2 = this.builder;
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, E.Chunk);
        t4 = H.setRuntimeTypeInfo([], [[P.Set, E.Chunk]]);
        t5 = P.LinkedHashSet_LinkedHashSet(null, null, null, O.Rule);
        t6 = $.FastHash__nextId + 1 & 268435455;
        $.FastHash__nextId = t6;
        t2.startRule$1(new Q.CombinatorRule(t3, t4, 1, false, t5, t6));
        this.visit$1(node._withClause);
        this.visit$1(node._implementsClause);
        this.builder.endRule$0();
        this.visit$2$before(node._nativeClause, t1);
        t1 = this.builder;
        t1._pendingWhitespace = C.Whitespace_space;
        t1.unnest$0();
        this._beginBody$1(node.leftBracket);
        t1 = node._members;
        if (t1.get$length(t1) !== 0)
          for (t1 = node._members, t1 = new H.ListIterator(t1, t1.get$length(t1), 0, [H.getRuntimeTypeArgument(t1, "ListMixin", 0)]); t1.moveNext$0();) {
            t2 = t1.__internal$_current;
            this.visit$1(t2);
            t3 = node._members;
            if (t3.get$length(t3) === 0)
              H.throwExpression(H.IterableElementError_noElement());
            t3 = t3.$index(0, t3.get$length(t3) - 1);
            if (t2 == null ? t3 == null : t2 === t3) {
              this.builder._pendingWhitespace = C.Whitespace_newline;
              break;
            }
            if (!!J.getInterceptor(t2).$isMethodDeclaration) {
              t2 = t2._body;
              if (!!J.getInterceptor(t2).$isBlockFunctionBody) {
                t2 = t2._ast$_block._statements;
                needsDouble = t2.get$length(t2) !== 0;
              } else
                needsDouble = false;
            } else
              needsDouble = false;
            t2 = this.builder;
            if (needsDouble)
              t2._pendingWhitespace = C.Whitespace_twoNewlines;
            else
              t2._pendingWhitespace = C.Whitespace_oneOrTwoNewlines;
          }
        this._endBody$1(node.rightBracket);
      },
      visitClassTypeAlias$1: function(node) {
        this.visitMetadata$1(node._metadata);
        this._simpleStatement$2(node, new F.SourceVisitor_visitClassTypeAlias_closure(this, node));
      },
      visitComment$1: function(node) {
        return;
      },
      visitCommentReference$1: function(node) {
        return;
      },
      visitCompilationUnit$1: function(node) {
        var directives, t1, needsDouble, t2, t3, t4, t5, body;
        this.visit$1(node._scriptTag);
        directives = node._directives;
        if (directives.get$length(directives) !== 0 && !!J.getInterceptor(directives.get$first(directives)).$isLibraryDirective) {
          this.visit$1(directives.get$first(directives));
          this.builder._pendingWhitespace = C.Whitespace_twoNewlines;
          directives = H.SubListIterable$(directives, 1, null, H.getRuntimeTypeArgument(directives, "ListMixin", 0));
        }
        this.visitNodes$2$between(directives, this.get$oneOrTwoNewlines());
        for (t1 = node._declarations, t1 = new H.ListIterator(t1, t1.get$length(t1), 0, [H.getRuntimeTypeArgument(t1, "ListMixin", 0)]), needsDouble = true; t1.moveNext$0();) {
          t2 = t1.__internal$_current;
          t3 = J.getInterceptor(t2);
          t4 = !!t3.$isClassDeclaration;
          if (t4)
            needsDouble = true;
          t5 = this.builder;
          if (needsDouble)
            t5._pendingWhitespace = C.Whitespace_twoNewlines;
          else
            t5._pendingWhitespace = C.Whitespace_oneOrTwoNewlines;
          this.visit$1(t2);
          if (t4)
            needsDouble = true;
          else if (!!t3.$isFunctionDeclaration) {
            body = t2._functionExpression._body;
            if (!!J.getInterceptor(body).$isBlockFunctionBody) {
              t2 = body._ast$_block._statements;
              needsDouble = t2.get$length(t2) !== 0;
            } else
              needsDouble = false;
          } else
            needsDouble = false;
        }
      },
      visitConditionalExpression$1: function(node) {
        var t1;
        this.builder.nestExpression$0();
        this.builder.startLazyRule$0();
        this.visit$1(node._condition);
        this.builder.nestExpression$2$indent$now(2, true);
        t1 = this.builder;
        C.JSArray_methods.add$1(t1._blockArgumentNesting, t1._chunk_builder$_nesting.get$currentNesting());
        this.builder.unnest$0();
        t1 = this.builder;
        C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 1));
        this.builder.split$1$space(0, true);
        this.token$1(node.question);
        t1 = this.builder;
        t1._pendingWhitespace = C.Whitespace_space;
        t1.nestExpression$0();
        this.visit$1(node._thenExpression);
        this.builder.unnest$0();
        this.builder.split$1$space(0, true);
        this.token$1(node.colon);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.visit$1(node._elseExpression);
        this.builder.endRule$0();
        this.builder.endSpan$0();
        t1 = this.builder._blockArgumentNesting;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
        this.builder.unnest$0();
      },
      visitConfiguration$1: function(node) {
        var t1;
        this.token$1(node.ifKeyword);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.token$1(node.leftParenthesis);
        this.visit$1(node._ast$_name);
        t1 = node.equalToken;
        if (t1 != null) {
          this.builder.nestExpression$0();
          this.builder._pendingWhitespace = C.Whitespace_space;
          this.token$1(t1);
          this.soloSplit$0();
          this.visit$1(node._ast$_value);
          this.builder.unnest$0();
        }
        this.token$1(node.rightParenthesis);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.visit$1(node._uri);
      },
      visitConstructorDeclaration$1: function(node) {
        var t1;
        this.visitMetadata$1(node._metadata);
        t1 = this.get$space();
        this.token$2$after(node.externalKeyword, t1);
        this.token$2$after(node.constKeyword, t1);
        this.token$2$after(node.factoryKeyword, t1);
        this.visit$1(node._returnType);
        this.token$1(node.period);
        this.visit$1(node._ast$_name);
        this.builder.startRule$0();
        if (node._redirectedConstructor != null)
          this.builder.nestExpression$0();
        this._visitBody$4(null, node._parameters, node._body, new F.SourceVisitor_visitConstructorDeclaration_closure(this, node));
      },
      _visitConstructorInitializers$1: function(node) {
        var t1, hasTrailingComma, i;
        t1 = node._parameters._parameters;
        if (t1.get$length(t1) !== 0) {
          t1 = node._parameters._parameters;
          hasTrailingComma = t1.get$last(t1).get$endToken().next.type === C.TokenType_O55;
        } else
          hasTrailingComma = false;
        t1 = this.builder;
        if (hasTrailingComma) {
          t1._pendingWhitespace = C.Whitespace_space;
          t1 = node._parameters._parameters;
          t1 = J.get$kind$x(t1.get$last(t1));
          if (node._initializers._elements.length > 1) {
            t1 = t1 !== C.ParameterKind_REQUIRED_0_false ? " " : "  ";
            this._writeText$2(t1, node.separator.offset);
          }
          this.token$1(node.separator);
          t1 = this.builder;
          t1._pendingWhitespace = C.Whitespace_space;
          t1._chunk_builder$_nesting.indent$1(6);
        } else {
          t1._chunk_builder$_nesting.indent$1(4);
          this.builder.split$1$space(0, true);
          this.token$1(node.separator);
          t1 = this.builder;
          t1._pendingWhitespace = C.Whitespace_space;
          t1._chunk_builder$_nesting.indent$1(2);
        }
        for (i = 0; t1 = node._initializers, i < t1._elements.length; ++i) {
          if (i > 0) {
            this.token$1(t1.$index(0, i).get$beginToken().get$previous());
            this.builder._pendingWhitespace = C.Whitespace_newline;
          }
          J.accept$1$1$x(node._initializers.$index(0, i), this, null);
        }
        t1 = this.builder._chunk_builder$_nesting._stack;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
        if (!hasTrailingComma) {
          t1 = this.builder._chunk_builder$_nesting._stack;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
        }
        this.builder.endRule$0();
      },
      visitConstructorFieldInitializer$1: function(node) {
        this.builder.nestExpression$0();
        this.token$1(node.thisKeyword);
        this.token$1(node.period);
        this.visit$1(node._fieldName);
        this._visitAssignment$2(node.equals, node._expression);
        this.builder.unnest$0();
      },
      visitConstructorName$1: function(node) {
        this.visit$1(node._type);
        this.token$1(node.period);
        this.visit$1(node._ast$_name);
      },
      visitContinueStatement$1: function(node) {
        this._simpleStatement$2(node, new F.SourceVisitor_visitContinueStatement_closure(this, node));
      },
      visitDeclaredIdentifier$1: function(node) {
        var t1 = this.get$space();
        this.token$2$after(node.keyword, t1);
        this.visit$2$after(node._type, t1);
        this.visit$1(node._identifier);
      },
      visitDefaultFormalParameter$1: function(node) {
        var t1, t2;
        this.visit$1(node._parameter);
        t1 = node.separator;
        if (t1 != null) {
          t2 = this.builder;
          C.JSArray_methods.add$1(t2._openSpans, new E.OpenSpan(t2.get$_currentChunkIndex(), 1));
          this.builder.nestExpression$0();
          if (this._source_visitor$_formatter.fixes.contains$1(0, C.StyleFix_YDa)) {
            this.builder._pendingWhitespace = C.Whitespace_space;
            this.writePrecedingCommentsAndNewlines$1(t1);
            this._writeText$2("=", t1.offset);
          } else {
            if (t1.type === C.TokenType_tca)
              this.builder._pendingWhitespace = C.Whitespace_space;
            this.token$1(t1);
          }
          this.soloSplit$1(this._assignmentCost$1(node._defaultValue));
          this.visit$1(node._defaultValue);
          this.builder.unnest$0();
          this.builder.endSpan$0();
        }
      },
      visitDoStatement$1: function(node) {
        var t1;
        this.builder.nestExpression$0();
        this.token$1(node.doKeyword);
        t1 = this.builder;
        t1._pendingWhitespace = C.Whitespace_space;
        t1.unnest$1$now(false);
        this.visit$1(node._body);
        this.builder.nestExpression$0();
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.token$1(node.whileKeyword);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.token$1(node.leftParenthesis);
        this.soloZeroSplit$0();
        this.visit$1(node._condition);
        this.token$1(node.rightParenthesis);
        this.token$1(node.semicolon);
        this.builder.unnest$0();
      },
      visitDottedName$1: function(node) {
        var t1, t2, t3;
        for (t1 = node._components, t1 = new H.ListIterator(t1, t1.get$length(t1), 0, [H.getRuntimeTypeArgument(t1, "ListMixin", 0)]); t1.moveNext$0();) {
          t2 = t1.__internal$_current;
          t3 = node._components;
          if (t3.get$length(t3) === 0)
            H.throwExpression(H.IterableElementError_noElement());
          t3 = t3.$index(0, 0);
          if (t2 == null ? t3 != null : t2 !== t3)
            this.token$1(t2.token.previous);
          this.visit$1(t2);
        }
      },
      visitDoubleLiteral$1: function(node) {
        this.token$1(node.literal);
      },
      visitEmptyFunctionBody$1: function(node) {
        this.token$1(node.semicolon);
      },
      visitEmptyStatement$1: function(node) {
        this.token$1(node.semicolon);
      },
      visitEnumConstantDeclaration$1: function(node) {
        this.visitMetadata$1(node._metadata);
        this.visit$1(node._ast$_name);
      },
      visitEnumDeclaration$1: function(node) {
        var t1;
        this.visitMetadata$1(node._metadata);
        this.token$1(node.enumKeyword);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.visit$1(node._ast$_name);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this._beginBody$2$space(node.leftBracket, true);
        this.visitCommaSeparatedNodes$2$between(node._constants, this.get$splitOrTwoNewlines());
        t1 = node._constants;
        if (t1.get$last(t1).get$endToken().next.type === C.TokenType_O55)
          this.builder._handleHardSplit$0();
        this._endBody$2$space(node.rightBracket, true);
      },
      visitExportDirective$1: function(node) {
        this._visitDirectiveMetadata$1(node);
        this._simpleStatement$2(node, new F.SourceVisitor_visitExportDirective_closure(this, node));
      },
      visitExpressionFunctionBody$1: function(node) {
        var t1;
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.token$2$after(node.keyword, this.get$space());
        t1 = node._ast$_parent;
        if (!!J.getInterceptor(t1).$isFunctionExpression && !J.getInterceptor(t1._ast$_parent).$isFunctionDeclaration) {
          t1 = this.builder;
          C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 1));
        }
        this.token$1(node.functionDefinition);
        this.builder.split$1$space(0, true);
        if (!J.getInterceptor(node._expression).$isBinaryExpression)
          this.builder.endRule$0();
        t1 = node._ast$_parent;
        if (!!J.getInterceptor(t1).$isFunctionExpression && !J.getInterceptor(t1._ast$_parent).$isFunctionDeclaration)
          this.builder.endSpan$0();
        t1 = this.builder;
        C.JSArray_methods.add$1(t1._blockArgumentNesting, t1._chunk_builder$_nesting.get$currentNesting());
        t1 = this.builder;
        C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 1));
        this.visit$1(node._expression);
        this.builder.endSpan$0();
        t1 = this.builder._blockArgumentNesting;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
        if (!!J.getInterceptor(node._expression).$isBinaryExpression)
          this.builder.endRule$0();
        this.token$1(node.semicolon);
      },
      visitExpressionStatement$1: function(node) {
        this._simpleStatement$2(node, new F.SourceVisitor_visitExpressionStatement_closure(this, node));
      },
      visitExtendsClause$1: function(node) {
        this.soloSplit$0();
        this.token$1(node.extendsKeyword);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.visit$1(node._superclass);
      },
      visitFieldDeclaration$1: function(node) {
        this.visitMetadata$1(node._metadata);
        this._simpleStatement$2(node, new F.SourceVisitor_visitFieldDeclaration_closure(this, node));
      },
      visitFieldFormalParameter$1: function(node) {
        this.visitParameterMetadata$2(node._metadata, new F.SourceVisitor_visitFieldFormalParameter_closure(this, node));
      },
      visitForEachStatement$1: function(node) {
        var t1;
        this.builder.nestExpression$0();
        this.token$2$after(node.awaitKeyword, this.get$space());
        this.token$1(node.forKeyword);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.token$1(node.leftParenthesis);
        if (node._loopVariable != null) {
          this.builder.startRule$0();
          t1 = this.get$split(this);
          this.visitNodes$3$after$between(node._loopVariable._metadata, t1, t1);
          this.visit$1(node._loopVariable);
          this.builder.endRule$0();
        } else
          this.visit$1(node._identifier);
        this.soloSplit$0();
        this.token$1(node.inKeyword);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.visit$1(node._ast$_iterable);
        this.token$1(node.rightParenthesis);
        this.builder.unnest$0();
        this._visitLoopBody$1(node._body);
      },
      visitFormalParameterList$2$nestExpression: function(node, nestExpression) {
        var t1, t2, requiredParams, optionalParams, t3, t4, t5, rule, _i, param, namedRule;
        t1 = node._parameters;
        if (t1.get$length(t1) === 0) {
          this.token$1(node.leftParenthesis);
          t1 = node.rightParenthesis;
          if (t1._precedingComment != null)
            this.soloZeroSplit$0();
          this.token$1(t1);
          return;
        }
        t1 = node._parameters;
        if (t1.get$last(t1).get$endToken().next.type === C.TokenType_O55) {
          this._visitTrailingCommaParameterList$1(node);
          return;
        }
        t1 = node._parameters;
        t1.toString;
        t2 = H.getRuntimeTypeArgument(t1, "ListMixin", 0);
        requiredParams = P.List_List$from(new H.WhereIterable(t1, H.functionTypeCheck(new F.SourceVisitor_visitFormalParameterList_closure(), {func: 1, ret: P.bool, args: [t2]}), [t2]), true, t2);
        t2 = node._parameters;
        t2.toString;
        t1 = H.getRuntimeTypeArgument(t2, "ListMixin", 0);
        optionalParams = P.List_List$from(new H.WhereIterable(t2, H.functionTypeCheck(new F.SourceVisitor_visitFormalParameterList_closure0(), {func: 1, ret: P.bool, args: [t1]}), [t1]), true, t1);
        if (nestExpression)
          this.builder.nestExpression$0();
        this.token$1(node.leftParenthesis);
        t1 = this._metadataRules;
        t2 = O.Rule;
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, t2);
        t4 = $.FastHash__nextId + 1 & 268435455;
        $.FastHash__nextId = t4;
        C.JSArray_methods.add$1(t1, new O.MetadataRule(1, false, t3, t4));
        if (requiredParams.length !== 0) {
          t3 = H.setRuntimeTypeInfo([], [E.Chunk]);
          t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, t2);
          t5 = $.FastHash__nextId + 1 & 268435455;
          $.FastHash__nextId = t5;
          rule = new G.PositionalRule(t3, null, 0, 0, true, 1, false, t4, t5);
          C.JSArray_methods.get$last(t1)._positionalRule = rule;
          this.builder.startRule$1(rule);
          t4 = node._ast$_parent;
          if (!!J.getInterceptor(t4).$isFunctionExpression && !J.getInterceptor(t4._ast$_parent).$isFunctionDeclaration)
            C.JSArray_methods.add$1(t3, null);
          else
            C.JSArray_methods.add$1(t3, this.builder.split$0(0));
          t4 = this.builder;
          C.JSArray_methods.add$1(t4._openSpans, new E.OpenSpan(t4.get$_currentChunkIndex(), 1));
          for (t4 = requiredParams.length, _i = 0; _i < requiredParams.length; requiredParams.length === t4 || (0, H.throwConcurrentModificationError)(requiredParams), ++_i) {
            param = requiredParams[_i];
            this.visit$1(param);
            if (param.get$endToken().next.type === C.TokenType_O55)
              this.token$1(param.get$endToken().next);
            if (!J.$eq$(param, C.JSArray_methods.get$last(requiredParams)))
              C.JSArray_methods.add$1(t3, this.builder.split$1$space(0, true));
          }
          this.builder.endSpan$0();
          this.builder.endRule$0();
        } else
          rule = null;
        if (optionalParams.length !== 0) {
          t3 = H.setRuntimeTypeInfo([], [E.Chunk]);
          t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, t2);
          t4 = $.FastHash__nextId + 1 & 268435455;
          $.FastHash__nextId = t4;
          namedRule = new G.NamedRule(t3, null, 0, 0, true, 1, false, t2, t4);
          if (rule != null)
            rule._namedArgsRule = namedRule;
          C.JSArray_methods.get$last(t1)._namedRule = namedRule;
          this.builder.startRule$1(namedRule);
          t2 = this.builder;
          C.JSArray_methods.add$1(t2._blockArgumentNesting, t2._chunk_builder$_nesting.get$currentNesting());
          C.JSArray_methods.add$1(t3, this.builder.split$1$space(0, requiredParams.length !== 0));
          this.token$1(node.leftDelimiter);
          for (t2 = optionalParams.length, _i = 0; _i < optionalParams.length; optionalParams.length === t2 || (0, H.throwConcurrentModificationError)(optionalParams), ++_i) {
            param = optionalParams[_i];
            this.visit$1(param);
            if (param.get$endToken().next.type === C.TokenType_O55)
              this.token$1(param.get$endToken().next);
            if (!J.$eq$(param, C.JSArray_methods.get$last(optionalParams)))
              C.JSArray_methods.add$1(t3, this.builder.split$1$space(0, true));
          }
          t2 = this.builder._blockArgumentNesting;
          if (0 >= t2.length)
            return H.ioore(t2, -1);
          t2.pop();
          this.builder.endRule$0();
          this.token$1(node.rightDelimiter);
        }
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
        this.token$1(node.rightParenthesis);
        if (nestExpression)
          this.builder.unnest$0();
      },
      visitFormalParameterList$1: function(node) {
        return this.visitFormalParameterList$2$nestExpression(node, true);
      },
      visitForStatement$1: function(node) {
        var t1, declaration;
        this.builder.nestExpression$0();
        this.token$1(node.forKeyword);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.token$1(node.leftParenthesis);
        this.builder.startRule$0();
        t1 = node._initialization;
        if (t1 != null)
          this.visit$1(t1);
        else if (node._variableList != null) {
          this.builder.nestExpression$0();
          this.builder.startRule$0();
          declaration = node._variableList;
          this.visitMetadata$1(declaration._metadata);
          t1 = this.get$space();
          this.token$2$after(declaration.keyword, t1);
          this.visit$2$after(declaration._type, t1);
          this.visitCommaSeparatedNodes$2$between(declaration._variables, new F.SourceVisitor_visitForStatement_closure(this));
          this.builder.endRule$0();
          this.builder.unnest$0();
        }
        this.token$1(node.leftSeparator);
        if (node._condition != null)
          this.builder.split$1$space(0, true);
        this.visit$1(node._condition);
        this.token$1(node.rightSeparator);
        t1 = node._updaters;
        if (t1.get$length(t1) !== 0) {
          this.builder.split$1$space(0, true);
          this.builder.startRule$0();
          this.visitCommaSeparatedNodes$2$between(node._updaters, this.get$split(this));
          this.builder.endRule$0();
        }
        this.token$1(node.rightParenthesis);
        this.builder.endRule$0();
        this.builder.unnest$0();
        this._visitLoopBody$1(node._body);
      },
      visitFunctionDeclaration$1: function(node) {
        this._visitMemberDeclaration$2(node, node._functionExpression);
      },
      visitFunctionDeclarationStatement$1: function(node) {
        this.visit$1(node._functionDeclaration);
      },
      visitFunctionExpression$1: function(node) {
        var oldConstNesting = this._constNesting;
        this._constNesting = 0;
        this._visitBody$3(node._typeParameters, node._parameters, node._body);
        this._constNesting = oldConstNesting;
      },
      visitFunctionExpressionInvocation$1: function(node) {
        var t1 = this.builder;
        C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 1));
        this.builder.nestExpression$0();
        this.visit$1(node._function);
        this.visit$1(node._typeArguments);
        this.visitArgumentList$2$nestExpression(node._argumentList, false);
        this.builder.unnest$0();
        this.builder.endSpan$0();
      },
      visitFunctionTypeAlias$1: function(node) {
        this.visitMetadata$1(node._metadata);
        this._simpleStatement$2(node, new F.SourceVisitor_visitFunctionTypeAlias_closure(this, node));
      },
      visitFunctionTypedFormalParameter$1: function(node) {
        this.visitParameterMetadata$2(node._metadata, new F.SourceVisitor_visitFunctionTypedFormalParameter_closure(this, node));
      },
      visitGenericFunctionType$1: function(node) {
        this.builder.startLazyRule$0();
        this.builder.nestExpression$0();
        this.visit$2$after(node._returnType, this.get$split(this));
        this.token$1(node.functionKeyword);
        this.builder.unnest$0();
        this.builder.endRule$0();
        this._visitParameterSignature$2(node._typeParameters, node._parameters);
      },
      visitGenericTypeAlias$1: function(node) {
        var t1 = this.get$newline();
        this.visitNodes$3$after$between(node._metadata, t1, t1);
        this._simpleStatement$2(node, new F.SourceVisitor_visitGenericTypeAlias_closure(this, node));
      },
      visitHideCombinator$1: function(node) {
        this._visitCombinator$2(node.keyword, node._hiddenNames);
      },
      visitIfStatement$1: function(node) {
        var t1, t2, t3;
        this.builder.nestExpression$0();
        this.token$1(node.ifKeyword);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.token$1(node.leftParenthesis);
        this.visit$1(node._condition);
        this.token$1(node.rightParenthesis);
        this.builder.unnest$0();
        t1 = new F.SourceVisitor_visitIfStatement_visitClause(this, node);
        t1.call$1(node._thenStatement);
        if (node._elseStatement != null) {
          t2 = node._thenStatement;
          t3 = this.builder;
          if (!!J.getInterceptor(t2).$isBlock)
            t3._pendingWhitespace = C.Whitespace_space;
          else
            t3._pendingWhitespace = C.Whitespace_newline;
          this.token$1(node.elseKeyword);
          t1.call$1(node._elseStatement);
        }
      },
      visitImplementsClause$1: function(node) {
        this._visitCombinator$2(node.implementsKeyword, node._interfaces);
      },
      visitImportDirective$1: function(node) {
        this._visitDirectiveMetadata$1(node);
        this._simpleStatement$2(node, new F.SourceVisitor_visitImportDirective_closure(this, node));
      },
      visitIndexExpression$1: function(node) {
        var t1;
        this.builder.nestExpression$0();
        t1 = node.period;
        if (t1 != null)
          this.token$1(t1);
        else
          this.visit$1(node._ast$_target);
        this.finishIndexExpression$1(node);
        this.builder.unnest$0();
      },
      finishIndexExpression$1: function(node) {
        var t1;
        if (!!J.getInterceptor(node._ast$_target).$isIndexExpression)
          this.soloZeroSplit$0();
        t1 = this.builder;
        C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 4));
        this.token$1(node.leftBracket);
        this.soloZeroSplit$0();
        this.visit$1(node._ast$_index);
        this.token$1(node.rightBracket);
        this.builder.endSpan$0();
      },
      visitInstanceCreationExpression$1: function(node) {
        var t1, includeKeyword, t2;
        t1 = this.builder;
        C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 1));
        t1 = node.keyword;
        if (t1 != null)
          if (t1.get$keyword() === C.Keyword_cw1 && this._source_visitor$_formatter.fixes.contains$1(0, C.StyleFix_4KW))
            includeKeyword = false;
          else
            includeKeyword = !(t1.get$keyword() === C.Keyword_M8y && this._source_visitor$_formatter.fixes.contains$1(0, C.StyleFix_C7v) && this._constNesting > 0) || false;
        else
          includeKeyword = true;
        if (includeKeyword)
          this.token$2$after(t1, this.get$space());
        else
          this.writePrecedingCommentsAndNewlines$1(t1);
        t2 = this.builder;
        C.JSArray_methods.add$1(t2._openSpans, new E.OpenSpan(t2.get$_currentChunkIndex(), 4));
        this.builder.nestExpression$0();
        this.visit$1(node._constructorName);
        this._startPossibleConstContext$1(t1);
        this.builder.endSpan$0();
        this.visitArgumentList$2$nestExpression(node._argumentList, false);
        this.builder.endSpan$0();
        this._endPossibleConstContext$1(t1);
        this.builder.unnest$0();
      },
      visitIntegerLiteral$1: function(node) {
        this.token$1(node.literal);
      },
      visitInterpolationExpression$1: function(node) {
        var t1;
        ++this.builder._preventSplitNesting;
        this.token$1(node.leftBracket);
        t1 = this.builder;
        C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 1));
        this.visit$1(node._expression);
        this.builder.endSpan$0();
        this.token$1(node.rightBracket);
        --this.builder._preventSplitNesting;
      },
      visitInterpolationString$1: function(node) {
        this._writeStringLiteral$1(node.contents);
      },
      visitIsExpression$1: function(node) {
        var t1 = this.builder;
        C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 1));
        this.builder.nestExpression$0();
        this.visit$1(node._expression);
        this.soloSplit$0();
        this.token$1(node.isOperator);
        this.token$1(node.notOperator);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.visit$1(node._type);
        this.builder.unnest$0();
        this.builder.endSpan$0();
      },
      visitLabel$1: function(node) {
        this.visit$1(node._label);
        this.token$1(node.colon);
      },
      visitLabeledStatement$1: function(node) {
        var t1 = this.get$newline();
        this.visitNodes$3$after$between(H.assertSubtype(node._labels, "$isNodeList", [Y.Label], "$asNodeList"), t1, t1);
        this.visit$1(node._statement);
      },
      visitLibraryDirective$1: function(node) {
        this._visitDirectiveMetadata$1(node);
        this._simpleStatement$2(node, new F.SourceVisitor_visitLibraryDirective_closure(this, node));
      },
      visitLibraryIdentifier$1: function(node) {
        var t1, t2;
        t1 = node._components;
        this.visit$1(t1.get$first(t1));
        for (t1 = node._components, t1.toString, t1 = H.SubListIterable$(t1, 1, null, H.getRuntimeTypeArgument(t1, "ListMixin", 0)), t1 = new H.ListIterator(t1, t1.get$length(t1), 0, [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
          t2 = t1.__internal$_current;
          this.token$1(t2.token.previous);
          this.visit$1(t2);
        }
      },
      visitListLiteral$1: function(node) {
        var t1, cost;
        t1 = node._elements;
        cost = t1._elements.length <= 1 ? 2 : 1;
        this._visitCollectionLiteral$5(node, node.leftBracket, t1, node.rightBracket, cost);
      },
      visitMapLiteral$1: function(node) {
        this._visitCollectionLiteral$4(node, node.leftBracket, node._entries, node.rightBracket);
      },
      visitMapLiteralEntry$1: function(node) {
        this.visit$1(node._key);
        this.token$1(node.separator);
        this.soloSplit$0();
        this.visit$1(node._ast$_value);
      },
      visitMethodDeclaration$1: function(node) {
        this._visitMemberDeclaration$2(node, node);
      },
      visitMethodInvocation$1: function(node) {
        var t1;
        if (node._ast$_target == null || F.SourceVisitor_looksLikeStaticCall(node)) {
          this.builder.nestExpression$0();
          t1 = this.builder;
          C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 1));
          if (node._ast$_target != null) {
            t1 = this.builder;
            C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 4));
            this.visit$1(node._ast$_target);
            this.soloZeroSplit$0();
          }
          this.token$1(node.operator);
          this.visit$1(node._methodName);
          if (node._ast$_target != null)
            this.builder.endSpan$0();
          this.builder.nestExpression$0();
          this.visit$1(node._typeArguments);
          this.visitArgumentList$2$nestExpression(node._argumentList, false);
          this.builder.unnest$0();
          this.builder.endSpan$0();
          this.builder.unnest$0();
          return;
        }
        N.CallChainVisitor_CallChainVisitor(this, node).visit$0();
      },
      visitNamedExpression$1: function(node) {
        this.visitNamedArgument$1(node);
      },
      visitNativeClause$1: function(node) {
        this.token$1(node.nativeKeyword);
        this.visit$2$before(node._ast$_name, this.get$space());
      },
      visitNativeFunctionBody$1: function(node) {
        this._simpleStatement$2(node, new F.SourceVisitor_visitNativeFunctionBody_closure(this, node));
      },
      visitNullLiteral$1: function(node) {
        this.token$1(node.literal);
      },
      visitParenthesizedExpression$1: function(node) {
        this.builder.nestExpression$0();
        this.token$1(node.leftParenthesis);
        this.visit$1(node._expression);
        this.builder.unnest$0();
        this.token$1(node.rightParenthesis);
      },
      visitPartDirective$1: function(node) {
        this._visitDirectiveMetadata$1(node);
        this._simpleStatement$2(node, new F.SourceVisitor_visitPartDirective_closure(this, node));
      },
      visitPartOfDirective$1: function(node) {
        this._visitDirectiveMetadata$1(node);
        this._simpleStatement$2(node, new F.SourceVisitor_visitPartOfDirective_closure(this, node));
      },
      visitPostfixExpression$1: function(node) {
        this.visit$1(node._operand);
        this.token$1(node.operator);
      },
      visitPrefixedIdentifier$1: function(node) {
        N.CallChainVisitor_CallChainVisitor(this, node).visit$0();
      },
      visitPrefixExpression$1: function(node) {
        var operand, t1;
        this.token$1(node.operator);
        operand = node._operand;
        if (!!J.getInterceptor(operand).$isPrefixExpression)
          t1 = operand.operator.get$lexeme() === "-" || operand.operator.get$lexeme() === "--";
        else
          t1 = false;
        if (t1)
          this.builder._pendingWhitespace = C.Whitespace_space;
        this.visit$1(node._operand);
      },
      visitPropertyAccess$1: function(node) {
        if (node.get$isCascaded()) {
          this.token$1(node.operator);
          this.visit$1(node._propertyName);
          return;
        }
        N.CallChainVisitor_CallChainVisitor(this, node).visit$0();
      },
      visitRedirectingConstructorInvocation$1: function(node) {
        var t1 = this.builder;
        C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 1));
        this.token$1(node.thisKeyword);
        this.token$1(node.period);
        this.visit$1(node._constructorName);
        this.visit$1(node._argumentList);
        this.builder.endSpan$0();
      },
      visitRethrowExpression$1: function(node) {
        this.token$1(node.rethrowKeyword);
      },
      visitReturnStatement$1: function(node) {
        this._simpleStatement$2(node, new F.SourceVisitor_visitReturnStatement_closure(this, node));
      },
      visitScriptTag$1: function(node) {
        this._writeText$2(J.trim$0$s(node.scriptTag.get$lexeme()), node.get$offset(node));
        this.builder._pendingWhitespace = C.Whitespace_newline;
      },
      visitShowCombinator$1: function(node) {
        this._visitCombinator$2(node.keyword, node._shownNames);
      },
      visitSimpleFormalParameter$1: function(node) {
        this.visitParameterMetadata$2(node._metadata, new F.SourceVisitor_visitSimpleFormalParameter_closure(this, node));
      },
      visitSimpleIdentifier$1: function(node) {
        this.token$1(node.token);
      },
      visitSimpleStringLiteral$1: function(node) {
        this._writeStringLiteral$1(node.literal);
      },
      visitStringInterpolation$1: function(node) {
        var t1;
        for (t1 = node._elements, t1 = new H.ListIterator(t1, t1.get$length(t1), 0, [H.getRuntimeTypeArgument(t1, "ListMixin", 0)]); t1.moveNext$0();)
          this.visit$1(t1.__internal$_current);
      },
      visitSuperConstructorInvocation$1: function(node) {
        var t1 = this.builder;
        C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 1));
        this.token$1(node.superKeyword);
        this.token$1(node.period);
        this.visit$1(node._constructorName);
        this.visit$1(node._argumentList);
        this.builder.endSpan$0();
      },
      visitSuperExpression$1: function(node) {
        this.token$1(node.superKeyword);
      },
      visitSwitchCase$1: function(node) {
        var t1 = this.get$newline();
        this.visitNodes$3$after$between(H.assertSubtype(node._labels, "$isNodeList", [Y.Label], "$asNodeList"), t1, t1);
        this.token$1(node.keyword);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.visit$1(node._expression);
        this.token$1(node.colon);
        this.builder._chunk_builder$_nesting.indent$1(null);
        this.builder._pendingWhitespace = C.Whitespace_newline;
        this.visitNodes$2$between(node._statements, this.get$oneOrTwoNewlines());
        t1 = this.builder._chunk_builder$_nesting._stack;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      },
      visitSwitchDefault$1: function(node) {
        var t1 = this.get$newline();
        this.visitNodes$3$after$between(H.assertSubtype(node._labels, "$isNodeList", [Y.Label], "$asNodeList"), t1, t1);
        this.token$1(node.keyword);
        this.token$1(node.colon);
        this.builder._chunk_builder$_nesting.indent$1(null);
        this.builder._pendingWhitespace = C.Whitespace_newline;
        this.visitNodes$2$between(node._statements, this.get$oneOrTwoNewlines());
        t1 = this.builder._chunk_builder$_nesting._stack;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      },
      visitSwitchStatement$1: function(node) {
        this.builder.nestExpression$0();
        this.token$1(node.switchKeyword);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.token$1(node.leftParenthesis);
        this.soloZeroSplit$0();
        this.visit$1(node._expression);
        this.token$1(node.rightParenthesis);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.token$1(node.leftBracket);
        this.builder.unnest$0();
        this.builder._chunk_builder$_nesting.indent$1(null);
        this.builder._pendingWhitespace = C.Whitespace_newline;
        this.visitNodes$3$after$between(node._members, this.get$newline(), this.get$oneOrTwoNewlines());
        this.token$2$before(node.rightBracket, new F.SourceVisitor_visitSwitchStatement_closure(this));
      },
      visitSymbolLiteral$1: function(node) {
        var components, t1, _i, component;
        this.token$1(node.poundSign);
        components = node.components;
        for (t1 = components.length, _i = 0; _i < components.length; components.length === t1 || (0, H.throwConcurrentModificationError)(components), ++_i) {
          component = components[_i];
          if (component.get$previous().get$lexeme() === ".")
            this.token$1(component.get$previous());
          this.token$1(component);
        }
      },
      visitThisExpression$1: function(node) {
        this.token$1(node.thisKeyword);
      },
      visitThrowExpression$1: function(node) {
        this.token$1(node.throwKeyword);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.visit$1(node._expression);
      },
      visitTopLevelVariableDeclaration$1: function(node) {
        this.visitMetadata$1(node._metadata);
        this._simpleStatement$2(node, new F.SourceVisitor_visitTopLevelVariableDeclaration_closure(this, node));
      },
      visitTryStatement$1: function(node) {
        var t1;
        this.token$1(node.tryKeyword);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.visit$1(node._body);
        t1 = this.get$space();
        this.visitNodes$3$before$between(node._catchClauses, t1, t1);
        this.token$3$after$before(node.finallyKeyword, t1, t1);
        this.visit$1(node._finallyBlock);
      },
      visitTypeArgumentList$1: function(node) {
        this._visitGenericList$3(node.leftBracket, node.rightBracket, node._ast$_arguments);
      },
      visitTypeName$1: function(node) {
        this.visit$1(node._ast$_name);
        this.visit$1(node._typeArguments);
      },
      visitTypeParameter$1: function(node) {
        this.visitParameterMetadata$2(node._metadata, new F.SourceVisitor_visitTypeParameter_closure(this, node));
      },
      visitTypeParameterList$1: function(node) {
        var t1, t2, t3;
        t1 = this._metadataRules;
        t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, O.Rule);
        t3 = $.FastHash__nextId + 1 & 268435455;
        $.FastHash__nextId = t3;
        C.JSArray_methods.add$1(t1, new O.MetadataRule(1, false, t2, t3));
        this._visitGenericList$3(node.leftBracket, node.rightBracket, node._typeParameters);
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      },
      visitVariableDeclaration$1: function(node) {
        var t1;
        this.visit$1(node._ast$_name);
        t1 = node._initializer;
        if (t1 == null)
          return;
        this._visitAssignment$3$nest(node.equals, t1, H.interceptedTypeCast(node._ast$_parent, "$isVariableDeclarationList")._variables._elements.length > 1);
      },
      visitVariableDeclarationList$1: function(node) {
        var t1;
        this.visitMetadata$1(node._metadata);
        t1 = this.builder;
        C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 1));
        t1 = node.keyword;
        this.token$2$after(t1, this.get$space());
        this.visit$2$after(node._type, this.get$soloSplit());
        this.builder.endSpan$0();
        this._startPossibleConstContext$1(t1);
        this.builder.startRule$0();
        this.visitCommaSeparatedNodes$2$between(node._variables, this.get$split(this));
        this.builder.endRule$0();
        this._endPossibleConstContext$1(t1);
      },
      visitVariableDeclarationStatement$1: function(node) {
        this._simpleStatement$2(node, new F.SourceVisitor_visitVariableDeclarationStatement_closure(this, node));
      },
      visitWhileStatement$1: function(node) {
        this.builder.nestExpression$0();
        this.token$1(node.whileKeyword);
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.token$1(node.leftParenthesis);
        this.soloZeroSplit$0();
        this.visit$1(node._condition);
        this.token$1(node.rightParenthesis);
        this.builder.unnest$0();
        this._visitLoopBody$1(node._body);
      },
      visitWithClause$1: function(node) {
        this._visitCombinator$2(node.withKeyword, node._mixinTypes);
      },
      visitYieldStatement$1: function(node) {
        this._simpleStatement$2(node, new F.SourceVisitor_visitYieldStatement_closure(this, node));
      },
      visit$3$after$before: function(node, after, before) {
        var t1;
        H.interceptedTypeCheck(node, "$isAstNode");
        t1 = {func: 1, ret: -1};
        H.functionTypeCheck(before, t1);
        H.functionTypeCheck(after, t1);
        if (node == null)
          return;
        if (before != null)
          before.call$0();
        node.accept$1$1(0, this, null);
        if (after != null)
          after.call$0();
      },
      visit$1: function(node) {
        return this.visit$3$after$before(node, null, null);
      },
      visit$2$after: function(node, after) {
        return this.visit$3$after$before(node, after, null);
      },
      visit$2$before: function(node, before) {
        return this.visit$3$after$before(node, null, before);
      },
      visitMetadata$1: function(metadata) {
        var t1;
        H.assertSubtype(metadata, "$isNodeList", [Y.Annotation], "$asNodeList");
        ++this._constNesting;
        t1 = this.get$newline();
        this.visitNodes$3$after$between(metadata, t1, t1);
        --this._constNesting;
      },
      _visitDirectiveMetadata$1: function(directive) {
        var t1, t2, t3;
        t1 = H.interceptedTypeCast(directive._ast$_parent, "$isCompilationUnit")._directives;
        t1 = t1.get$first(t1);
        t2 = directive._metadata;
        t3 = this.get$newline();
        this.visitNodes$3$after$between(t2, directive === t1 ? this.get$oneOrTwoNewlines() : t3, t3);
      },
      visitParameterMetadata$2: function(metadata, visitParameter) {
        H.assertSubtype(metadata, "$isNodeList", [Y.Annotation], "$asNodeList");
        H.functionTypeCheck(visitParameter, {func: 1, ret: -1});
        if (metadata == null || metadata.get$length(metadata) === 0) {
          visitParameter.call$0();
          return;
        }
        this.builder.startLazyRule$1(C.JSArray_methods.get$last(this._metadataRules));
        this.visitNodes$3$after$between(metadata, new F.SourceVisitor_visitParameterMetadata_closure(this), this.get$split(this));
        visitParameter.call$0();
        this.builder.unnest$0();
        this.builder.endRule$0();
      },
      visitNamedArgument$2: function(node, rule) {
        var t1, split;
        this.builder.nestExpression$0();
        t1 = this.builder;
        C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 1));
        this.visit$1(node._ast$_name);
        t1 = J.getInterceptor(node._expression);
        if (!!t1.$isListLiteral || !!t1.$isMapLiteral)
          this.builder._pendingWhitespace = C.Whitespace_space;
        else {
          split = this.soloSplit$0();
          if (rule != null)
            split._implied.add$1(0, rule);
        }
        this.visit$1(node._expression);
        this.builder.endSpan$0();
        this.builder.unnest$0();
      },
      visitNamedArgument$1: function(node) {
        return this.visitNamedArgument$2(node, null);
      },
      _visitAssignment$3$nest: function(equalsOperator, rightHandSide, nest) {
        var t1;
        this.builder._pendingWhitespace = C.Whitespace_space;
        this.token$1(equalsOperator);
        if (nest)
          this.builder.nestExpression$1$now(true);
        this.soloSplit$1(this._assignmentCost$1(rightHandSide));
        t1 = this.builder;
        C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 1));
        this.visit$1(rightHandSide);
        this.builder.endSpan$0();
        if (nest)
          this.builder.unnest$0();
      },
      _visitAssignment$2: function(equalsOperator, rightHandSide) {
        return this._visitAssignment$3$nest(equalsOperator, rightHandSide, false);
      },
      _visitGenericList$3: function(leftBracket, rightBracket, nodes) {
        var t1, t2, t3, t4;
        H.assertSubtype(nodes, "$isList", [Y.AstNode], "$asList");
        t1 = H.setRuntimeTypeInfo([], [E.Chunk]);
        t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, O.Rule);
        t3 = $.FastHash__nextId + 1 & 268435455;
        $.FastHash__nextId = t3;
        this.builder.startLazyRule$1(new Y.TypeArgumentRule(t1, 1, false, t2, t3));
        t3 = this.builder;
        C.JSArray_methods.add$1(t3._openSpans, new E.OpenSpan(t3.get$_currentChunkIndex(), 1));
        this.builder.nestExpression$0();
        this.token$1(leftBracket);
        C.JSArray_methods.add$1(t1, this.builder.split$0(0));
        for (t2 = new H.ListIterator(nodes, nodes.get$length(nodes), 0, [H.getRuntimeTypeArgument(nodes, "ListMixin", 0)]); t2.moveNext$0();) {
          t3 = t2.__internal$_current;
          this.visit$1(t3);
          if (nodes.get$length(nodes) === 0)
            H.throwExpression(H.IterableElementError_noElement());
          t4 = nodes.$index(0, nodes.get$length(nodes) - 1);
          if (t3 == null ? t4 != null : t3 !== t4) {
            this.token$1(t3.get$endToken().next);
            C.JSArray_methods.add$1(t1, this.builder.split$1$space(0, true));
          }
        }
        this.token$1(rightBracket);
        this.builder.unnest$0();
        this.builder.endSpan$0();
        this.builder.endRule$0();
      },
      _visitMemberDeclaration$2: function(node, $function) {
        var t1, t2, typeParameters;
        this.visitMetadata$1(H.subtypeCast(node._metadata, "$isNodeList", [Y.Annotation], "$asNodeList"));
        this.builder.nestExpression$0();
        t1 = this.builder;
        C.JSArray_methods.add$1(t1._openSpans, new E.OpenSpan(t1.get$_currentChunkIndex(), 1));
        t1 = this.get$space();
        this.token$2$after(node.get$externalKeyword(), t1);
        t2 = !!node.$isMethodDeclaration;
        if (t2)
          this.token$2$after(node.modifierKeyword, t1);
        this.visit$2$after(node.get$returnType(), this.get$soloSplit());
        this.token$2$after(node.get$propertyKeyword(), t1);
        if (t2)
          this.token$2$after(node.operatorKeyword, t1);
        this.visit$1(node.get$name(node));
        this.builder.endSpan$0();
        typeParameters = !!node.$isFunctionDeclaration ? node._functionExpression._typeParameters : H.interceptedTypeCast(node, "$isMethodDeclaration")._typeParameters;
        this._visitBody$4(typeParameters, $function.get$parameters(), $function.get$body($function), new F.SourceVisitor__visitMemberDeclaration_closure(this, $function));
        if (!!J.getInterceptor($function.get$body($function)).$isExpressionFunctionBody)
          this.builder.unnest$0();
      },
      _visitBody$4: function(typeParameters, parameters, body, beforeBody) {
        var t1;
        H.functionTypeCheck(beforeBody, {func: 1});
        t1 = !!J.getInterceptor(body).$isExpressionFunctionBody;
        if (t1) {
          this.builder.nestExpression$0();
          this.builder.startLazyRule$1(O.Rule$(0));
        }
        this._visitParameterSignature$2(typeParameters, parameters);
        if (beforeBody != null)
          beforeBody.call$0();
        this.visit$1(body);
        if (t1)
          this.builder.unnest$0();
      },
      _visitBody$3: function(typeParameters, parameters, body) {
        return this._visitBody$4(typeParameters, parameters, body, null);
      },
      _visitParameterSignature$2: function(typeParameters, parameters) {
        this.builder.nestExpression$0();
        this.visit$1(typeParameters);
        if (parameters != null)
          this.visitFormalParameterList$2$nestExpression(parameters, false);
        this.builder.unnest$0();
      },
      _visitLoopBody$1: function(body) {
        var t1, t2;
        t1 = J.getInterceptor(body);
        if (!!t1.$isEmptyStatement)
          this.visit$1(body);
        else {
          t2 = this.builder;
          if (!!t1.$isBlock) {
            t2._pendingWhitespace = C.Whitespace_space;
            this.visit$1(body);
          } else {
            t2._chunk_builder$_nesting.indent$1(null);
            this.builder.startRule$0();
            this.builder.split$2$nest$space(0, false, true);
            this.visit$1(body);
            this.builder.endRule$0();
            t1 = this.builder._chunk_builder$_nesting._stack;
            if (0 >= t1.length)
              return H.ioore(t1, -1);
            t1.pop();
          }
        }
      },
      visitNodes$4$after$before$between: function(nodes, after, before, between) {
        var t1, t2, t3;
        H.assertSubtype(nodes, "$isIterable", [Y.AstNode], "$asIterable");
        t1 = {func: 1};
        H.functionTypeCheck(before, t1);
        H.functionTypeCheck(between, t1);
        H.functionTypeCheck(after, t1);
        if (nodes == null || nodes.get$isEmpty(nodes))
          return;
        if (before != null)
          before.call$0();
        this.visit$1(nodes.get$first(nodes));
        for (t1 = nodes.skip$1(nodes, 1), t1 = t1.get$iterator(t1), t2 = between != null; t1.moveNext$0();) {
          t3 = t1.get$current();
          if (t2)
            between.call$0();
          this.visit$1(t3);
        }
        if (after != null)
          after.call$0();
      },
      visitNodes$2$between: function(nodes, between) {
        return this.visitNodes$4$after$before$between(nodes, null, null, between);
      },
      visitNodes$3$after$between: function(nodes, after, between) {
        return this.visitNodes$4$after$before$between(nodes, after, null, between);
      },
      visitNodes$1: function(nodes) {
        return this.visitNodes$4$after$before$between(nodes, null, null, null);
      },
      visitNodes$3$before$between: function(nodes, before, between) {
        return this.visitNodes$4$after$before$between(nodes, null, before, between);
      },
      visitCommaSeparatedNodes$2$between: function(nodes, between) {
        var t1, first, t2;
        H.assertSubtype(nodes, "$isIterable", [Y.AstNode], "$asIterable");
        H.functionTypeCheck(between, {func: 1});
        if (nodes == null || nodes.get$length(nodes) === 0)
          return;
        if (between == null)
          between = this.get$space();
        for (t1 = new H.ListIterator(nodes, nodes.get$length(nodes), 0, [H.getRuntimeTypeArgument(nodes, "ListMixin", 0)]), first = true; t1.moveNext$0(); first = false) {
          t2 = t1.__internal$_current;
          if (!first)
            between.call$0();
          this.visit$1(t2);
          if (t2.get$endToken().next.get$lexeme() === ",")
            this.token$1(t2.get$endToken().next);
        }
      },
      visitCommaSeparatedNodes$1: function(nodes) {
        return this.visitCommaSeparatedNodes$2$between(nodes, null);
      },
      _visitCollectionLiteral$5: function(node, leftBracket, elements, rightBracket, cost) {
        var t1, t2, t3, i, preserveNewlines, t4, t5, t6, lineRule, rule, t7, t8, t9, t10, force;
        H.interceptedTypeCheck(node, "$isTypedLiteral");
        H.assertSubtype(elements, "$isIterable", [Y.AstNode], "$asIterable");
        t1 = node != null;
        if (t1) {
          t2 = node.constKeyword != null && this._constNesting > 0 && this._source_visitor$_formatter.fixes.contains$1(0, C.StyleFix_C7v);
          t3 = node.constKeyword;
          if (t2)
            this.writePrecedingCommentsAndNewlines$1(t3);
          else
            this.token$2$after(t3, this.get$space());
          this.visit$1(node._typeArguments);
        }
        if (elements.get$length(elements) === 0 && rightBracket._precedingComment == null) {
          this.token$1(leftBracket);
          this.token$1(rightBracket);
          return;
        }
        for (t2 = this._collectionSplits, i = 0; i < t2.length; ++i)
          C.JSArray_methods.$indexSet(t2, i, true);
        C.JSArray_methods.add$1(t2, false);
        this._startLiteralBody$1(leftBracket);
        if (t1)
          this._startPossibleConstContext$1(node.constKeyword);
        preserveNewlines = this._containsLineComments$2(elements, rightBracket);
        t3 = O.Rule;
        if (preserveNewlines) {
          t4 = H.setRuntimeTypeInfo([], [E.Chunk]);
          t5 = P.LinkedHashSet_LinkedHashSet(null, null, null, t3);
          t6 = $.FastHash__nextId + 1 & 268435455;
          $.FastHash__nextId = t6;
          lineRule = new Y.TypeArgumentRule(t4, 1, false, t5, t6);
          this.builder.startLazyRule$1(lineRule);
          rule = null;
        } else {
          t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, t3);
          t5 = $.FastHash__nextId + 1 & 268435455;
          $.FastHash__nextId = t5;
          rule = new O.Rule(0, false, t4, t5);
          rule._isHardened = true;
          this.builder.startRule$1(rule);
          lineRule = null;
        }
        for (t4 = new H.ListIterator(elements, elements.get$length(elements), 0, [H.getRuntimeTypeArgument(elements, "ListMixin", 0)]), t5 = this._lineInfo, t6 = [E.Chunk]; t4.moveNext$0();) {
          t7 = t4.__internal$_current;
          if (elements.get$length(elements) === 0)
            H.throwExpression(H.IterableElementError_noElement());
          t8 = elements.$index(0, 0);
          if (t7 == null ? t8 != null : t7 !== t8)
            if (preserveNewlines) {
              t8 = t7.get$beginToken().previous;
              t8 = t5.getLocation$1(t8.offset + t8.get$length(t8));
              t9 = t5.getLocation$1(t7.get$beginToken().offset);
              t10 = this.builder;
              if (t8.lineNumber !== t9.lineNumber) {
                t10._pendingWhitespace = C.Whitespace_oneOrTwoNewlines;
                t8 = t10._lazyRules;
                t9 = t8.length;
                if (t9 !== 0) {
                  if (0 >= t9)
                    return H.ioore(t8, -1);
                  t8.pop();
                } else {
                  t8 = t10._rules;
                  if (0 >= t8.length)
                    return H.ioore(t8, -1);
                  t8.pop();
                }
                t8 = H.setRuntimeTypeInfo([], t6);
                t9 = P.LinkedHashSet_LinkedHashSet(null, null, null, t3);
                t10 = $.FastHash__nextId + 1 & 268435455;
                $.FastHash__nextId = t10;
                lineRule = new Y.TypeArgumentRule(t8, 1, false, t9, t10);
                t10 = this.builder;
                C.JSArray_methods.add$1(t10._lazyRules, lineRule);
              } else {
                t8 = t10.split$1$space(0, true);
                C.JSArray_methods.add$1(lineRule._type_argument$_arguments, t8);
              }
            } else
              this.builder.split$2$nest$space(0, false, true);
          t8 = this.builder;
          t8 = t8._chunk_builder$_nesting;
          t9 = t8._pendingNesting;
          t10 = $.FastHash__nextId + 1;
          if (t9 != null) {
            t10 &= 268435455;
            $.FastHash__nextId = t10;
            t8._pendingNesting = new M.NestingLevel(t9, 4, t10);
          } else {
            t9 = t8._nesting_builder$_nesting;
            t9.toString;
            t10 &= 268435455;
            $.FastHash__nextId = t10;
            t8._pendingNesting = new M.NestingLevel(t9, 4, t10);
          }
          this.visit$1(t7);
          if (t7.get$endToken().next.type === C.TokenType_O55)
            this.token$1(t7.get$endToken().next);
          t7 = this.builder;
          t7 = t7._chunk_builder$_nesting;
          t8 = t7._pendingNesting;
          if (t8 != null)
            t7._pendingNesting = t8._nesting_level$_parent;
          else
            t7._pendingNesting = t7._nesting_builder$_nesting._nesting_level$_parent;
          t7.commitNesting$0();
        }
        this.builder.endRule$0();
        if (0 >= t2.length)
          return H.ioore(t2, -1);
        force = t2.pop();
        if (elements.get$length(elements) !== 0 && elements.get$last(elements).get$endToken().next.type === C.TokenType_O55)
          force = true;
        if (t1)
          this._endPossibleConstContext$1(node.constKeyword);
        this._endLiteralBody$3$forceSplit$ignoredRule(rightBracket, force, rule);
      },
      _visitCollectionLiteral$4: function(node, leftBracket, elements, rightBracket) {
        return this._visitCollectionLiteral$5(node, leftBracket, elements, rightBracket, null);
      },
      _visitTrailingCommaParameterList$1: function(parameters) {
        var t1, t2, t3, t4, lastRequired, i, firstDelimiter;
        t1 = this._metadataRules;
        t2 = O.Rule;
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, t2);
        t4 = $.FastHash__nextId + 1 & 268435455;
        $.FastHash__nextId = t4;
        C.JSArray_methods.add$1(t1, new O.MetadataRule(1, false, t3, t4));
        t4 = this.builder;
        t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, t2);
        t3 = $.FastHash__nextId + 1 & 268435455;
        $.FastHash__nextId = t3;
        t3 = new O.Rule(0, false, t2, t3);
        t3._isHardened = true;
        t4.startRule$1(t3);
        this.token$1(parameters.leftParenthesis);
        i = 0;
        while (true) {
          t2 = parameters._parameters;
          if (!(i < t2._elements.length)) {
            lastRequired = null;
            break;
          }
          if (!!J.getInterceptor(t2.$index(0, i)).$isDefaultFormalParameter) {
            lastRequired = i > 0 ? parameters._parameters.$index(0, i - 1) : null;
            break;
          }
          ++i;
        }
        t2 = parameters._parameters;
        if (!!J.getInterceptor(t2.get$first(t2)).$isDefaultFormalParameter)
          this.token$1(parameters.leftDelimiter);
        this.builder = this.builder.startBlock$1(null);
        for (t2 = parameters._parameters, t2 = new H.ListIterator(t2, t2.get$length(t2), 0, [H.getRuntimeTypeArgument(t2, "ListMixin", 0)]), t3 = parameters.leftDelimiter; t2.moveNext$0();) {
          t4 = t2.__internal$_current;
          this.visit$1(t4);
          if (t4.get$endToken().next.type === C.TokenType_O55)
            this.token$1(t4.get$endToken().next);
          if (t4 === lastRequired) {
            this.builder._pendingWhitespace = C.Whitespace_space;
            this.token$1(t3);
            lastRequired = null;
          }
          this.builder._pendingWhitespace = C.Whitespace_newline;
        }
        firstDelimiter = parameters.rightDelimiter;
        if (firstDelimiter == null)
          firstDelimiter = parameters.rightParenthesis;
        this.writePrecedingCommentsAndNewlines$1(firstDelimiter);
        t2 = this.builder.endBlock$2$forceSplit(null, true);
        this.builder = t2;
        t2.endRule$0();
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
        this._writeText$2(firstDelimiter.get$lexeme(), firstDelimiter.offset);
        t1 = parameters.rightParenthesis;
        if (firstDelimiter !== t1)
          this.token$1(t1);
      },
      _assignmentCost$1: function(rightHandSide) {
        var t1 = J.getInterceptor(rightHandSide);
        if (!!t1.$isListLiteral)
          return 2;
        if (!!t1.$isMapLiteral)
          return 2;
        if (!!t1.$isCascadeExpression)
          return 2;
        return 1;
      },
      _containsLineComments$2: function(elements, rightBracket) {
        var hasLineCommentBefore, t1;
        H.assertSubtype(elements, "$isIterable", [Y.AstNode], "$asIterable");
        hasLineCommentBefore = new F.SourceVisitor__containsLineComments_hasLineCommentBefore();
        for (t1 = new H.ListIterator(elements, elements.get$length(elements), 0, [H.getRuntimeTypeArgument(elements, "ListMixin", 0)]); t1.moveNext$0();)
          if (hasLineCommentBefore.call$1(t1.__internal$_current.get$beginToken()))
            return true;
        return hasLineCommentBefore.call$1(rightBracket);
      },
      _startLiteralBody$1: function(leftBracket) {
        var t1, argumentList, rule, argumentChunk;
        this.token$1(leftBracket);
        t1 = this._blockArgumentLists;
        if (t1.containsKey$1(leftBracket)) {
          argumentList = t1.$index(0, leftBracket);
          rule = argumentList._blockRule;
          argumentChunk = argumentList._previousSplit;
        } else {
          rule = null;
          argumentChunk = null;
        }
        this.builder.startRule$1(rule);
        this.builder = this.builder.startBlock$1(argumentChunk);
      },
      _endLiteralBody$3$forceSplit$ignoredRule: function(rightBracket, forceSplit, ignoredRule) {
        var hasLeadingNewline, t1;
        hasLeadingNewline = this.writePrecedingCommentsAndNewlines$1(rightBracket);
        t1 = this.builder;
        t1 = t1.endBlock$2$forceSplit(ignoredRule, hasLeadingNewline || forceSplit);
        this.builder = t1;
        t1.endRule$0();
        this._writeText$2(rightBracket.get$lexeme(), rightBracket.offset);
      },
      _endLiteralBody$2$forceSplit: function(rightBracket, forceSplit) {
        return this._endLiteralBody$3$forceSplit$ignoredRule(rightBracket, forceSplit, null);
      },
      _visitConfigurations$1: function(configurations) {
        var t1, t2;
        H.assertSubtype(configurations, "$isNodeList", [Y.Configuration], "$asNodeList");
        if (configurations.get$length(configurations) === 0)
          return;
        this.builder.startRule$0();
        for (t1 = new H.ListIterator(configurations, configurations.get$length(configurations), 0, [H.getRuntimeTypeArgument(configurations, "ListMixin", 0)]); t1.moveNext$0();) {
          t2 = t1.__internal$_current;
          this.builder.split$1$space(0, true);
          this.visit$1(t2);
        }
        this.builder.endRule$0();
      },
      _visitCombinator$2: function(keyword, nodes) {
        var rule, t1, t2;
        H.assertSubtype(nodes, "$isIterable", [Y.AstNode], "$asIterable");
        rule = H.interceptedTypeCast(C.JSArray_methods.get$last(this.builder._rules), "$isCombinatorRule");
        t1 = this.builder.split$1$space(0, true);
        rule._combinator$_combinators.add$1(0, t1);
        t1 = rule._names;
        C.JSArray_methods.add$1(t1, P.LinkedHashSet_LinkedHashSet(null, null, null, E.Chunk));
        this.builder.nestExpression$0();
        this.token$1(keyword);
        t2 = this.builder.split$1$space(0, true);
        C.JSArray_methods.get$last(t1).add$1(0, t2);
        this.visitCommaSeparatedNodes$2$between(nodes, new F.SourceVisitor__visitCombinator_closure(this, rule));
        this.builder.unnest$0();
      },
      _startPossibleConstContext$1: function(keyword) {
        if (keyword != null && keyword.get$keyword() === C.Keyword_M8y)
          ++this._constNesting;
      },
      _endPossibleConstContext$1: function(keyword) {
        if (keyword != null && keyword.get$keyword() === C.Keyword_M8y)
          --this._constNesting;
      },
      _simpleStatement$2: function(node, body) {
        H.functionTypeCheck(body, {func: 1});
        this.builder.nestExpression$0();
        body.call$0();
        this.token$1(node.get$semicolon());
        this.builder.unnest$0();
      },
      _beginBody$2$space: function(leftBracket, space) {
        this.token$1(leftBracket);
        this.builder._chunk_builder$_nesting.indent$1(null);
        this.builder.startRule$0();
        this.builder.split$3$isDouble$nest$space(0, false, false, space);
      },
      _beginBody$1: function(leftBracket) {
        return this._beginBody$2$space(leftBracket, false);
      },
      _endBody$2$space: function(rightBracket, space) {
        this.token$2$before(rightBracket, new F.SourceVisitor__endBody_closure(this, space));
        this.builder.endRule$0();
      },
      _endBody$1: function(rightBracket) {
        return this._endBody$2$space(rightBracket, false);
      },
      _writeStringLiteral$1: function(string) {
        var lines, offset, t1, t2;
        this.writePrecedingCommentsAndNewlines$1(string);
        lines = J.split$1$s(string.get$lexeme(), this._source_visitor$_formatter.lineEnding);
        offset = string.offset;
        this._writeText$2(C.JSArray_methods.get$first(lines), offset);
        t1 = J.get$length$asx(C.JSArray_methods.get$first(lines));
        if (typeof t1 !== "number")
          return H.iae(t1);
        offset += t1;
        for (t1 = H.SubListIterable$(lines, 1, null, H.getTypeArgumentByIndex(lines, 0)), t1 = new H.ListIterator(t1, t1.get$length(t1), 0, [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
          t2 = t1.__internal$_current;
          this.builder._pendingWhitespace = C.Whitespace_newlineFlushLeft;
          ++offset;
          this._writeText$2(t2, offset);
          offset += t2.length;
        }
      },
      space$0: [function() {
        this.builder._pendingWhitespace = C.Whitespace_space;
      }, "call$0", "get$space", 0, 0, 1],
      newline$0: [function() {
        this.builder._pendingWhitespace = C.Whitespace_newline;
      }, "call$0", "get$newline", 0, 0, 1],
      splitOrNewline$0: [function() {
        this.builder._pendingWhitespace = C.Whitespace_splitOrNewline;
      }, "call$0", "get$splitOrNewline", 0, 0, 1],
      splitOrTwoNewlines$0: [function() {
        this.builder._pendingWhitespace = C.Whitespace_splitOrTwoNewlines;
      }, "call$0", "get$splitOrTwoNewlines", 0, 0, 1],
      oneOrTwoNewlines$0: [function() {
        this.builder._pendingWhitespace = C.Whitespace_oneOrTwoNewlines;
      }, "call$0", "get$oneOrTwoNewlines", 0, 0, 1],
      split$0: [function(_) {
        return this.builder.split$1$space(0, true);
      }, "call$0", "get$split", 1, 0, 21],
      zeroSplit$0: [function() {
        return this.builder.split$0(0);
      }, "call$0", "get$zeroSplit", 0, 0, 21],
      soloSplit$1: [function(cost) {
        var rule = O.Rule$(cost);
        this.builder.startRule$1(rule);
        this.builder.split$1$space(0, true);
        this.builder.endRule$0();
        return rule;
      }, function() {
        return this.soloSplit$1(null);
      }, "soloSplit$0", "call$1", "call$0", "get$soloSplit", 0, 2, 45],
      soloZeroSplit$0: function() {
        this.builder.startRule$0();
        this.builder.split$0(0);
        this.builder.endRule$0();
      },
      token$3$after$before: [function(token, after, before) {
        var t1 = {func: 1};
        H.functionTypeCheck(before, t1);
        H.functionTypeCheck(after, t1);
        if (token == null)
          return;
        this.writePrecedingCommentsAndNewlines$1(token);
        if (before != null)
          before.call$0();
        this._writeText$2(token.get$lexeme(), token.offset);
        if (after != null)
          after.call$0();
      }, function(token) {
        return this.token$3$after$before(token, null, null);
      }, "token$1", function(token, after) {
        return this.token$3$after$before(token, after, null);
      }, "token$2$after", function(token, before) {
        return this.token$3$after$before(token, null, before);
      }, "token$2$before", "call$3$after$before", "call$1", "call$2$after", "call$2$before", "get$token", 4, 5, 46],
      writePrecedingCommentsAndNewlines$1: function(token) {
        var comment, t1, t2, t3, t4, previousLine, tokenLine, comments, commentLine, text, linesBefore, flushLeft, sourceComment, start, end;
        comment = token._precedingComment;
        if (comment == null) {
          t1 = this.builder;
          t2 = t1._pendingWhitespace;
          if (t2 === C.Whitespace_oneOrTwoNewlines || t2 === C.Whitespace_splitOrTwoNewlines || t2 === C.Whitespace_splitOrNewline) {
            t2 = this._lineInfo;
            t3 = t2.getLocation$1(token.offset);
            t4 = token.previous;
            t1.preserveNewlines$1(t3.lineNumber - t2.getLocation$1(t4.offset + t4.get$length(t4)).lineNumber);
          }
          return false;
        }
        t1 = token.previous;
        t2 = this._lineInfo;
        previousLine = t2.getLocation$1(t1.offset + t1.get$length(t1)).lineNumber;
        tokenLine = t2.getLocation$1(token.offset).lineNumber;
        if (token.previous.type === C.TokenType_oZ3)
          previousLine = tokenLine;
        comments = H.setRuntimeTypeInfo([], [E.SourceComment]);
        for (; comment != null;) {
          commentLine = t2.getLocation$1(comment.offset).lineNumber;
          if (comment === token._precedingComment && token.previous.type === C.TokenType_Emx)
            previousLine = commentLine;
          text = J.trim$0$s(comment.get$lexeme());
          linesBefore = commentLine - previousLine;
          flushLeft = t2.getLocation$1(comment.offset).columnNumber === 1;
          if (C.JSString_methods.startsWith$1(text, "///") && !C.JSString_methods.startsWith$1(text, "////")) {
            if (comment === token._precedingComment)
              linesBefore = 2;
            flushLeft = false;
          }
          sourceComment = new E.SourceComment(text, linesBefore, comment.type === C.TokenType_WjT, flushLeft);
          start = this._getSelectionStartWithin$2(comment.offset, comment.get$length(comment));
          if (start != null)
            sourceComment._chunk$_selectionStart = start;
          end = this._getSelectionEndWithin$2(comment.offset, comment.get$length(comment));
          if (end != null)
            sourceComment._chunk$_selectionEnd = end;
          C.JSArray_methods.add$1(comments, sourceComment);
          previousLine = t2.getLocation$1(comment.offset + comment.get$length(comment)).lineNumber;
          comment = comment.next;
        }
        this.builder.writeComments$3(comments, tokenLine - previousLine, token.get$lexeme());
        return C.JSArray_methods.get$first(comments).linesBefore > 0;
      },
      _writeText$2: function(text, offset) {
        var t1, t2, start, end;
        H.stringTypeCheck(text);
        t1 = this.builder;
        t1._emitPendingWhitespace$0();
        t1._chunk_builder$_writeText$1(text);
        t2 = t1._lazyRules;
        C.JSArray_methods.forEach$1(t2, t1.get$_activateRule());
        C.JSArray_methods.set$length(t2, 0);
        t1._chunk_builder$_nesting.commitNesting$0();
        t1 = text.length;
        start = this._getSelectionStartWithin$2(offset, t1);
        if (start != null)
          C.JSArray_methods.get$last(this.builder._chunks).startSelectionFromEnd$1(t1 - start);
        end = this._getSelectionEndWithin$2(offset, t1);
        if (end != null)
          C.JSArray_methods.get$last(this.builder._chunks).endSelectionFromEnd$1(t1 - end);
      },
      _getSelectionStartWithin$2: function(offset, $length) {
        var t1, start;
        t1 = this._source_visitor$_source.selectionStart;
        if (t1 == null)
          return;
        if (this._passedSelectionStart)
          return;
        start = t1 - offset;
        if (start < 0)
          start = 0;
        if (start >= $length)
          return;
        this._passedSelectionStart = true;
        return start;
      },
      _getSelectionEndWithin$2: function(offset, $length) {
        var t1, t2, end;
        t1 = this._source_visitor$_source;
        if (t1.selectionLength == null)
          return;
        if (this._passedSelectionEnd)
          return;
        t2 = this._findSelectionEnd$0();
        if (typeof t2 !== "number")
          return t2.$sub();
        end = t2 - offset;
        if (end < 0)
          end = 0;
        if (end > $length)
          return;
        if (end === $length) {
          t2 = this._findSelectionEnd$0();
          t1 = t1.selectionStart;
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
        if (t1)
          return;
        this._passedSelectionEnd = true;
        return end;
      },
      _findSelectionEnd$0: function() {
        var t1, t2, t3, t4, char;
        t1 = this._source_visitor$_selectionEnd;
        if (t1 != null)
          return t1;
        t1 = this._source_visitor$_source;
        t2 = t1.selectionStart;
        t3 = t1.selectionLength;
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t3 = t2 + t3;
        this._source_visitor$_selectionEnd = t3;
        t1 = t1.text;
        if (t3 === t1.length)
          return t3;
        for (; t3 > t2; t3 = t4) {
          t4 = t3 - 1;
          char = C.JSString_methods.codeUnitAt$1(t1, t4);
          if (char !== 32 && char !== 9 && char !== 10 && char !== 13)
            break;
          this._source_visitor$_selectionEnd = t4;
        }
        return t3;
      },
      $asAstVisitor: Isolate.functionThatReturnsNull,
      static: {
        SourceVisitor_looksLikeStaticCall: function(node) {
          var t1, target;
          if (!J.getInterceptor(node).$isMethodInvocation)
            return false;
          t1 = node._ast$_target;
          if (t1 == null)
            return false;
          if (!!t1.$isSimpleIdentifier && F.SourceVisitor__looksLikeClassName(node._methodName.token.get$lexeme()))
            return true;
          target = node._ast$_target;
          if (!!J.getInterceptor(target).$isPrefixedIdentifier)
            target = target._identifier;
          return !!J.getInterceptor(target).$isSimpleIdentifier && F.SourceVisitor__looksLikeClassName(target.token.get$lexeme());
        },
        SourceVisitor__looksLikeClassName: function($name) {
          var t1;
          if ($name === "bool")
            return true;
          if ($name === "double")
            return true;
          if ($name === "int")
            return true;
          if ($name === "num")
            return true;
          t1 = $.$get$_capitalPattern()._nativeRegExp;
          if (typeof $name !== "string")
            H.throwExpression(H.argumentErrorValue($name));
          return t1.test($name);
        }
      }
    },
    SourceVisitor_visitAssertStatement_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2, $arguments, t3;
        t1 = this.$this;
        t2 = this.node;
        t1.token$1(t2.assertKeyword);
        $arguments = H.setRuntimeTypeInfo([t2._condition], [Y.Expression]);
        t3 = t2._ast$_message;
        if (t3 != null)
          C.JSArray_methods.add$1($arguments, t3);
        B.ArgumentListVisitor_ArgumentListVisitor$forArguments(t1, t2.leftParenthesis, t2.rightParenthesis, $arguments).visit$0();
      }
    },
    SourceVisitor_visitBinaryExpression_traverse: {
      "^": "Closure:18;$this,precedence",
      call$1: function(e) {
        var t1, t2, t3;
        t1 = J.getInterceptor(e);
        t2 = !!t1.$isBinaryExpression && e.operator.type.precedence === this.precedence;
        t3 = this.$this;
        if (t2) {
          this.call$1(e.get$leftOperand());
          t3.builder._pendingWhitespace = C.Whitespace_space;
          t3.token$1(t1.get$operator(e));
          t3.builder.split$1$space(0, true);
          this.call$1(e.get$rightOperand());
        } else
          t3.visit$1(e);
      }
    },
    SourceVisitor_visitBreakStatement_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2;
        t1 = this.$this;
        t2 = this.node;
        t1.token$1(t2.breakKeyword);
        t1.visit$2$before(t2._label, t1.get$space());
      }
    },
    SourceVisitor_visitClassTypeAlias_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2, t3, t4, t5, t6, t7;
        t1 = this.$this;
        t2 = this.node;
        t1.token$2$after(t2.abstractKeyword, t1.get$space());
        t1.token$1(t2.typedefKeyword);
        t1.builder._pendingWhitespace = C.Whitespace_space;
        t1.visit$1(t2._ast$_name);
        t1.visit$1(t2._typeParameters);
        t1.builder._pendingWhitespace = C.Whitespace_space;
        t1.token$1(t2.equals);
        t1.builder._pendingWhitespace = C.Whitespace_space;
        t1.visit$1(t2._superclass);
        t3 = t1.builder;
        t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, E.Chunk);
        t5 = H.setRuntimeTypeInfo([], [[P.Set, E.Chunk]]);
        t6 = P.LinkedHashSet_LinkedHashSet(null, null, null, O.Rule);
        t7 = $.FastHash__nextId + 1 & 268435455;
        $.FastHash__nextId = t7;
        t3.startRule$1(new Q.CombinatorRule(t4, t5, 1, false, t6, t7));
        t1.visit$1(t2._withClause);
        t1.visit$1(t2._implementsClause);
        t1.builder.endRule$0();
      }
    },
    SourceVisitor_visitConstructorDeclaration_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2;
        t1 = this.node;
        if (t1._redirectedConstructor != null) {
          t2 = this.$this;
          t2.token$2$before(t1.separator, t2.get$space());
          t2.soloSplit$0();
          t2.visitCommaSeparatedNodes$1(t1._initializers);
          t2.visit$1(t1._redirectedConstructor);
          t2.builder.unnest$0();
        } else {
          t2 = t1._initializers;
          if (t2.get$length(t2) !== 0)
            this.$this._visitConstructorInitializers$1(t1);
        }
      }
    },
    SourceVisitor_visitContinueStatement_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2;
        t1 = this.$this;
        t2 = this.node;
        t1.token$1(t2.continueKeyword);
        t1.visit$2$before(t2._label, t1.get$space());
      }
    },
    SourceVisitor_visitExportDirective_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2, t3, t4, t5, t6, t7;
        t1 = this.$this;
        t2 = this.node;
        t1.token$1(t2.keyword);
        t1.builder._pendingWhitespace = C.Whitespace_space;
        t1.visit$1(t2._uri);
        t1._visitConfigurations$1(t2._configurations);
        t3 = t1.builder;
        t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, E.Chunk);
        t5 = H.setRuntimeTypeInfo([], [[P.Set, E.Chunk]]);
        t6 = P.LinkedHashSet_LinkedHashSet(null, null, null, O.Rule);
        t7 = $.FastHash__nextId + 1 & 268435455;
        $.FastHash__nextId = t7;
        t3.startRule$1(new Q.CombinatorRule(t4, t5, 1, false, t6, t7));
        t1.visitNodes$1(t2._combinators);
        t1.builder.endRule$0();
      }
    },
    SourceVisitor_visitExpressionStatement_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        this.$this.visit$1(this.node._expression);
      }
    },
    SourceVisitor_visitFieldDeclaration_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2, t3;
        t1 = this.$this;
        t2 = this.node;
        t3 = t1.get$space();
        t1.token$2$after(t2.staticKeyword, t3);
        t1.token$2$after(t2.covariantKeyword, t3);
        t1.visit$1(t2._fieldList);
      }
    },
    SourceVisitor_visitFieldFormalParameter_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2, t3;
        t1 = this.$this;
        t1.builder.startLazyRule$1(O.Rule$(4));
        t1.builder.nestExpression$0();
        t2 = this.node;
        t3 = t1.get$space();
        t1.token$2$after(t2.covariantKeyword, t3);
        t1.token$2$after(t2.keyword, t3);
        t1.visit$2$after(t2._type, t1.get$split(t1));
        t1.token$1(t2.thisKeyword);
        t1.token$1(t2.period);
        t1.visit$1(t2._identifier);
        t1.visit$1(t2._parameters);
        t1.builder.unnest$0();
        t1.builder.endRule$0();
      }
    },
    SourceVisitor_visitFormalParameterList_closure: {
      "^": "Closure:22;",
      call$1: function(param) {
        return !J.getInterceptor(H.interceptedTypeCheck(param, "$isFormalParameter")).$isDefaultFormalParameter;
      }
    },
    SourceVisitor_visitFormalParameterList_closure0: {
      "^": "Closure:22;",
      call$1: function(param) {
        return !!J.getInterceptor(H.interceptedTypeCheck(param, "$isFormalParameter")).$isDefaultFormalParameter;
      }
    },
    SourceVisitor_visitForStatement_closure: {
      "^": "Closure:0;$this",
      call$0: function() {
        this.$this.builder.split$1$space(0, true);
      }
    },
    SourceVisitor_visitFunctionTypeAlias_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2;
        t1 = this.$this;
        t2 = this.node;
        t1.token$1(t2.typedefKeyword);
        t1.builder._pendingWhitespace = C.Whitespace_space;
        t1.visit$2$after(t2._returnType, t1.get$space());
        t1.visit$1(t2._ast$_name);
        t1.visit$1(t2._typeParameters);
        t1.visit$1(t2._parameters);
      }
    },
    SourceVisitor_visitFunctionTypedFormalParameter_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2, t3;
        t1 = this.$this;
        t2 = this.node;
        t3 = t1.get$space();
        t1.token$2$after(t2.covariantKeyword, t3);
        t1.visit$2$after(t2._returnType, t3);
        t3 = t1.builder;
        C.JSArray_methods.add$1(t3._openSpans, new E.OpenSpan(t3.get$_currentChunkIndex(), 1));
        t1.visit$1(t2._identifier);
        t1._visitParameterSignature$2(t2._typeParameters, t2._parameters);
        t1.builder.endSpan$0();
      }
    },
    SourceVisitor_visitGenericTypeAlias_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2, t3;
        t1 = this.$this;
        t2 = this.node;
        t1.token$1(t2.typedefKeyword);
        t3 = t1.builder;
        t3._pendingWhitespace = C.Whitespace_space;
        t3.startRule$0();
        t1.visit$1(t2._ast$_name);
        t1.visit$1(t2._typeParameters);
        t1.builder.split$1$space(0, true);
        t1.token$1(t2.equals);
        t1.builder.endRule$0();
        t1.builder._pendingWhitespace = C.Whitespace_space;
        t1.visit$1(t2._functionType);
      }
    },
    SourceVisitor_visitIfStatement_visitClause: {
      "^": "Closure:73;$this,node",
      call$1: function(clause) {
        var t1, t2, t3;
        t1 = J.getInterceptor(clause);
        t1 = !!t1.$isBlock || !!t1.$isIfStatement;
        t2 = this.$this;
        t3 = t2.builder;
        if (t1) {
          t3._pendingWhitespace = C.Whitespace_space;
          t2.visit$1(clause);
        } else {
          t3._chunk_builder$_nesting.indent$1(null);
          t2.builder.startRule$0();
          t1 = this.node._elseStatement;
          t3 = t2.builder;
          if (t1 != null)
            t3._pendingWhitespace = C.Whitespace_newline;
          else
            t3.split$2$nest$space(0, false, true);
          t2.visit$1(clause);
          t2.builder.endRule$0();
          t1 = t2.builder._chunk_builder$_nesting._stack;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
        }
      }
    },
    SourceVisitor_visitImportDirective_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2, t3, t4, t5, t6, t7;
        t1 = this.$this;
        t2 = this.node;
        t1.token$1(t2.keyword);
        t1.builder._pendingWhitespace = C.Whitespace_space;
        t1.visit$1(t2._uri);
        t1._visitConfigurations$1(t2._configurations);
        if (t2.asKeyword != null) {
          t1.soloSplit$0();
          t1.token$2$after(t2.deferredKeyword, t1.get$space());
          t1.token$1(t2.asKeyword);
          t1.builder._pendingWhitespace = C.Whitespace_space;
          t1.visit$1(t2._prefix);
        }
        t3 = t1.builder;
        t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, E.Chunk);
        t5 = H.setRuntimeTypeInfo([], [[P.Set, E.Chunk]]);
        t6 = P.LinkedHashSet_LinkedHashSet(null, null, null, O.Rule);
        t7 = $.FastHash__nextId + 1 & 268435455;
        $.FastHash__nextId = t7;
        t3.startRule$1(new Q.CombinatorRule(t4, t5, 1, false, t6, t7));
        t1.visitNodes$1(t2._combinators);
        t1.builder.endRule$0();
      }
    },
    SourceVisitor_visitLibraryDirective_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2;
        t1 = this.$this;
        t2 = this.node;
        t1.token$1(t2.libraryKeyword);
        t1.builder._pendingWhitespace = C.Whitespace_space;
        t1.visit$1(t2._ast$_name);
      }
    },
    SourceVisitor_visitNativeFunctionBody_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2;
        t1 = this.$this;
        t1.builder.nestExpression$1$now(true);
        t1.soloSplit$0();
        t2 = this.node;
        t1.token$1(t2.nativeKeyword);
        t1.visit$2$before(t2._stringLiteral, t1.get$space());
        t1.builder.unnest$0();
      }
    },
    SourceVisitor_visitPartDirective_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2;
        t1 = this.$this;
        t2 = this.node;
        t1.token$1(t2.partKeyword);
        t1.builder._pendingWhitespace = C.Whitespace_space;
        t1.visit$1(t2._uri);
      }
    },
    SourceVisitor_visitPartOfDirective_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2;
        t1 = this.$this;
        t2 = this.node;
        t1.token$1(t2.partKeyword);
        t1.builder._pendingWhitespace = C.Whitespace_space;
        t1.token$1(t2.ofKeyword);
        t1.builder._pendingWhitespace = C.Whitespace_space;
        t1.visit$1(t2._libraryName);
        t1.visit$1(t2._uri);
      }
    },
    SourceVisitor_visitReturnStatement_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2;
        t1 = this.$this;
        t2 = this.node;
        t1.token$1(t2.returnKeyword);
        t1.visit$2$before(t2._expression, t1.get$space());
      }
    },
    SourceVisitor_visitSimpleFormalParameter_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2, t3;
        t1 = this.$this;
        t1.builder.startLazyRule$1(O.Rule$(4));
        t1.builder.nestExpression$0();
        t2 = this.node;
        t3 = t1.get$space();
        t1.token$2$after(t2.covariantKeyword, t3);
        t1.token$2$after(t2.keyword, t3);
        t1.visit$1(t2._type);
        if (t2._type != null && t2._identifier != null)
          t1.builder.split$1$space(0, true);
        t1.visit$1(t2._identifier);
        t1.builder.unnest$0();
        t1.builder.endRule$0();
      }
    },
    SourceVisitor_visitSwitchStatement_closure: {
      "^": "Closure:0;$this",
      call$0: function() {
        var t1, t2;
        t1 = this.$this;
        t2 = t1.builder._chunk_builder$_nesting._stack;
        if (0 >= t2.length)
          return H.ioore(t2, -1);
        t2.pop();
        t1.builder._pendingWhitespace = C.Whitespace_newline;
      }
    },
    SourceVisitor_visitTopLevelVariableDeclaration_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        this.$this.visit$1(this.node._variableList);
      }
    },
    SourceVisitor_visitTypeParameter_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2, t3;
        t1 = this.$this;
        t2 = this.node;
        t1.visit$1(t2._ast$_name);
        t3 = t1.get$space();
        t1.token$3$after$before(t2.extendsKeyword, t3, t3);
        t1.visit$1(t2._bound);
      }
    },
    SourceVisitor_visitVariableDeclarationStatement_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        this.$this.visit$1(this.node._variableList);
      }
    },
    SourceVisitor_visitYieldStatement_closure: {
      "^": "Closure:0;$this,node",
      call$0: function() {
        var t1, t2;
        t1 = this.$this;
        t2 = this.node;
        t1.token$1(t2.yieldKeyword);
        t1.token$1(t2.star);
        t1.builder._pendingWhitespace = C.Whitespace_space;
        t1.visit$1(t2._expression);
      }
    },
    SourceVisitor_visitParameterMetadata_closure: {
      "^": "Closure:0;$this",
      call$0: function() {
        var t1 = this.$this;
        t1.builder.nestExpression$1$now(true);
        t1.builder.split$1$space(0, true);
      }
    },
    SourceVisitor__visitMemberDeclaration_closure: {
      "^": "Closure:0;$this,$function",
      call$0: function() {
        var t1 = this.$function;
        if (!J.getInterceptor(t1.get$body(t1)).$isExpressionFunctionBody)
          this.$this.builder.unnest$0();
      }
    },
    SourceVisitor__containsLineComments_hasLineCommentBefore: {
      "^": "Closure:49;",
      call$1: function(token) {
        var comment = token._precedingComment;
        for (; comment != null; comment = comment.next)
          if (comment.type === C.TokenType_WjT)
            return true;
        return false;
      }
    },
    SourceVisitor__visitCombinator_closure: {
      "^": "Closure:1;$this,rule",
      call$0: function() {
        var t1 = this.$this.builder.split$1$space(0, true);
        C.JSArray_methods.get$last(this.rule._names).add$1(0, t1);
        return;
      }
    },
    SourceVisitor__endBody_closure: {
      "^": "Closure:0;$this,space",
      call$0: function() {
        var t1, t2;
        t1 = this.$this;
        t2 = t1.builder._chunk_builder$_nesting._stack;
        if (0 >= t2.length)
          return H.ioore(t2, -1);
        t2.pop();
        t1.builder.split$2$nest$space(0, false, this.space);
      }
    }
  }], ["dart_style.src.string_compare", "package:dart_style/src/string_compare.dart",, M, {
    "^": "",
    _moveNextNonWhitespace: function(str, len, i) {
      var t1;
      while (true) {
        if (i < len) {
          t1 = C.JSString_methods._codeUnitAt$1(str, i);
          t1 = t1 <= 13 && t1 >= 9 || t1 === 32;
        } else
          t1 = false;
        if (!t1)
          break;
        ++i;
      }
      return i;
    },
    equalIgnoringWhitespace: function(str1, str2) {
      var len1, len2, i1, i2, t1;
      len1 = str1.length;
      len2 = str2.length;
      for (i1 = 0, i2 = 0; true;) {
        i1 = M._moveNextNonWhitespace(str1, len1, i1);
        i2 = M._moveNextNonWhitespace(str2, len2, i2);
        t1 = i1 >= len1;
        if (t1 || i2 >= len2)
          return t1 === i2 >= len2;
        if (i1 >= len1)
          return H.ioore(str1, i1);
        t1 = str1[i1];
        if (i2 >= len2)
          return H.ioore(str2, i2);
        if (t1 !== str2[i2])
          return false;
        ++i1;
        ++i2;
      }
    }
  }], ["", "package:dart_style/src/style_fix.dart",, Q, {
    "^": "",
    StyleFix: {
      "^": "Object;name,description"
    }
  }], ["dart_style.src.whitespace", "package:dart_style/src/whitespace.dart",, L, {
    "^": "",
    Whitespace: {
      "^": "Object;name",
      get$minimumLines: function() {
        switch (this) {
          case C.Whitespace_newline:
          case C.Whitespace_nestedNewline:
          case C.Whitespace_newlineFlushLeft:
          case C.Whitespace_oneOrTwoNewlines:
            return 1;
          case C.Whitespace_twoNewlines:
            return 2;
          default:
            return 0;
        }
      },
      toString$0: function(_) {
        return this.name;
      }
    }
  }], ["", "package:front_end/src/base/errors.dart",, A, {
    "^": "",
    ErrorCode: {
      "^": "Object;",
      toString$0: function(_) {
        return new H.TypeImpl(H.getRti(this)).toString$0(0) + "." + this.name;
      }
    },
    ErrorSeverity: {
      "^": "Object;name,ordinal,machineCode,displayName",
      get$hashCode: function(_) {
        return this.ordinal;
      },
      compareTo$1: function(_, other) {
        return this.ordinal - H.interceptedTypeCheck(other, "$isErrorSeverity").ordinal;
      },
      toString$0: function(_) {
        return this.name;
      },
      $isComparable: 1,
      $asComparable: function() {
        return [A.ErrorSeverity];
      }
    },
    ErrorType: {
      "^": "Object;name,ordinal,severity",
      get$hashCode: function(_) {
        return this.ordinal;
      },
      compareTo$1: function(_, other) {
        return this.ordinal - H.interceptedTypeCheck(other, "$isErrorType").ordinal;
      },
      toString$0: function(_) {
        return this.name;
      },
      $isComparable: 1,
      $asComparable: function() {
        return [A.ErrorType];
      }
    }
  }], ["", "package:front_end/src/base/source.dart",, Z, {
    "^": "",
    Source: {
      "^": "Object;",
      get$source: function(_) {
        return this;
      }
    }
  }], ["fasta.codes", "package:front_end/src/fasta/fasta_codes.dart",, B, {
    "^": "",
    _withArgumentsAsciiControlCharacter: [function(codePoint) {
      H.intTypeCheck(codePoint);
      return new B.Message(C.Code_UCF, "The control character " + ("U+" + C.JSString_methods.padLeft$2(J.toRadixString$1$n(codePoint, 16).toUpperCase(), 4, "0")) + " can only be used in strings and comments.", null, P.LinkedHashMap_LinkedHashMap$_literal(["codePoint", codePoint], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsAsciiControlCharacter$closure", 4, 0, 25, 4],
    _withArgumentsBuiltInIdentifierAsType: [function(token) {
      H.interceptedTypeCheck(token, "$isToken");
      return new B.Message(C.Code_uXf, "The built-in identifier '" + H.S(token.get$lexeme()) + "' can't be used as a type.", "Try correcting the name to match an existing type.", P.LinkedHashMap_LinkedHashMap$_literal(["token", token], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsBuiltInIdentifierAsType$closure", 4, 0, 2, 0],
    _withArgumentsBuiltInIdentifierInDeclaration: [function(token) {
      H.interceptedTypeCheck(token, "$isToken");
      return new B.Message(C.Code_2dw, "Can't use '" + H.S(token.get$lexeme()) + "' as a name here.", null, P.LinkedHashMap_LinkedHashMap$_literal(["token", token], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsBuiltInIdentifierInDeclaration$closure", 4, 0, 2, 0],
    _withArgumentsConstFieldWithoutInitializer: [function($name) {
      H.stringTypeCheck($name);
      return new B.Message(C.Code_cQL, "The const variable '" + H.S($name) + "' must be initialized.", "Try adding an initializer ('= <expression>') to the declaration.", P.LinkedHashMap_LinkedHashMap$_literal(["name", $name], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsConstFieldWithoutInitializer$closure", 4, 0, 6, 10],
    _withArgumentsDuplicatedModifier: [function(token) {
      H.interceptedTypeCheck(token, "$isToken");
      return new B.Message(C.Code_7pq, "The modifier '" + H.S(token.get$lexeme()) + "' was already specified.", "Try removing all but one occurance of the modifier.", P.LinkedHashMap_LinkedHashMap$_literal(["token", token], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsDuplicatedModifier$closure", 4, 0, 2, 0],
    _withArgumentsExpectedAfterButGot: [function(string) {
      H.stringTypeCheck(string);
      return new B.Message(C.Code_4QF, "Expected '" + H.S(string) + "' after this.", null, P.LinkedHashMap_LinkedHashMap$_literal(["string", string], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsExpectedAfterButGot$closure", 4, 0, 6, 1],
    _withArgumentsExpectedButGot: [function(string) {
      H.stringTypeCheck(string);
      return new B.Message(C.Code_MdF, "Expected '" + H.S(string) + "' before this.", null, P.LinkedHashMap_LinkedHashMap$_literal(["string", string], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsExpectedButGot$closure", 4, 0, 6, 1],
    _withArgumentsExpectedClassBody: [function(token) {
      H.interceptedTypeCheck(token, "$isToken");
      return new B.Message(C.Code_NOA, "Expected a class body, but got '" + H.S(token.get$lexeme()) + "'.", null, P.LinkedHashMap_LinkedHashMap$_literal(["token", token], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsExpectedClassBody$closure", 4, 0, 2, 0],
    _withArgumentsExpectedClassMember: [function(token) {
      H.interceptedTypeCheck(token, "$isToken");
      return new B.Message(C.Code_6UD, "Expected a class member, but got '" + H.S(token.get$lexeme()) + "'.", null, P.LinkedHashMap_LinkedHashMap$_literal(["token", token], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsExpectedClassMember$closure", 4, 0, 2, 0],
    _withArgumentsExpectedDeclaration: [function(token) {
      H.interceptedTypeCheck(token, "$isToken");
      return new B.Message(C.Code_qFu, "Expected a declaration, but got '" + H.S(token.get$lexeme()) + "'.", null, P.LinkedHashMap_LinkedHashMap$_literal(["token", token], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsExpectedDeclaration$closure", 4, 0, 2, 0],
    _withArgumentsExpectedEnumBody: [function(token) {
      H.interceptedTypeCheck(token, "$isToken");
      return new B.Message(C.Code_IQc, "Expected a enum body, but got '" + H.S(token.get$lexeme()) + "'.", "An enum definition must have a body with at least one constant name.", P.LinkedHashMap_LinkedHashMap$_literal(["token", token], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsExpectedEnumBody$closure", 4, 0, 2, 0],
    _withArgumentsExpectedFunctionBody: [function(token) {
      H.interceptedTypeCheck(token, "$isToken");
      return new B.Message(C.Code_yzN, "Expected a function body, but got '" + H.S(token.get$lexeme()) + "'.", null, P.LinkedHashMap_LinkedHashMap$_literal(["token", token], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsExpectedFunctionBody$closure", 4, 0, 2, 0],
    _withArgumentsExpectedIdentifier: [function(token) {
      H.interceptedTypeCheck(token, "$isToken");
      return new B.Message(C.Code_GFv, "Expected an identifier, but got '" + H.S(token.get$lexeme()) + "'.", null, P.LinkedHashMap_LinkedHashMap$_literal(["token", token], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsExpectedIdentifier$closure", 4, 0, 2, 0],
    _withArgumentsExpectedString: [function(token) {
      H.interceptedTypeCheck(token, "$isToken");
      return new B.Message(C.Code_QWS, "Expected a String, but got '" + H.S(token.get$lexeme()) + "'.", null, P.LinkedHashMap_LinkedHashMap$_literal(["token", token], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsExpectedString$closure", 4, 0, 2, 0],
    _withArgumentsExpectedToken: [function(string) {
      H.stringTypeCheck(string);
      return new B.Message(C.Code_fRV, "Expected to find '" + H.S(string) + "'.", null, P.LinkedHashMap_LinkedHashMap$_literal(["string", string], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsExpectedToken$closure", 4, 0, 6, 1],
    _withArgumentsExpectedType: [function(token) {
      H.interceptedTypeCheck(token, "$isToken");
      return new B.Message(C.Code_7Ap, "Expected a type, but got '" + H.S(token.get$lexeme()) + "'.", null, P.LinkedHashMap_LinkedHashMap$_literal(["token", token], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsExpectedType$closure", 4, 0, 2, 0],
    _withArgumentsExtraneousModifier: [function(token) {
      var lexeme;
      H.interceptedTypeCheck(token, "$isToken");
      lexeme = token.get$lexeme();
      return new B.Message(C.Code_oqF, "Can't have modifier '" + H.S(lexeme) + "' here.", "Try removing '" + H.S(lexeme) + "'.", P.LinkedHashMap_LinkedHashMap$_literal(["token", token], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsExtraneousModifier$closure", 4, 0, 2, 0],
    _withArgumentsFinalFieldWithoutInitializer: [function($name) {
      H.stringTypeCheck($name);
      return new B.Message(C.Code_kyk, "The final variable '" + H.S($name) + "' must be initialized.", "Try adding an initializer ('= <expression>') to the declaration.", P.LinkedHashMap_LinkedHashMap$_literal(["name", $name], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsFinalFieldWithoutInitializer$closure", 4, 0, 6, 10],
    _withArgumentsInvalidOperator: [function(token) {
      H.interceptedTypeCheck(token, "$isToken");
      return new B.Message(C.Code_8eb, "The string '" + H.S(token.get$lexeme()) + "' isn't a user-definable operator.", null, P.LinkedHashMap_LinkedHashMap$_literal(["token", token], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsInvalidOperator$closure", 4, 0, 2, 0],
    _withArgumentsNonAsciiIdentifier: [function(character, codePoint) {
      var unicode;
      H.stringTypeCheck(character);
      H.intTypeCheck(codePoint);
      unicode = "U+" + C.JSString_methods.padLeft$2(J.toRadixString$1$n(codePoint, 16).toUpperCase(), 4, "0");
      return new B.Message(C.Code_m9N, "The non-ASCII character '" + H.S(character) + "' (" + unicode + ") can't be used in identifiers, only in strings and comments.", "Try using an US-ASCII letter, a digit, '_' (an underscore), or '$' (a dollar sign).", P.LinkedHashMap_LinkedHashMap$_literal(["character", character, "codePoint", codePoint], P.String, null));
    }, "call$2", "fasta_codes___withArgumentsNonAsciiIdentifier$closure", 8, 0, 70, 28, 4],
    _withArgumentsNonAsciiWhitespace: [function(codePoint) {
      H.intTypeCheck(codePoint);
      return new B.Message(C.Code_ynK, "The non-ASCII space character " + ("U+" + C.JSString_methods.padLeft$2(J.toRadixString$1$n(codePoint, 16).toUpperCase(), 4, "0")) + " can only be used in strings and comments.", null, P.LinkedHashMap_LinkedHashMap$_literal(["codePoint", codePoint], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsNonAsciiWhitespace$closure", 4, 0, 25, 4],
    _withArgumentsUnexpectedToken: [function(token) {
      H.interceptedTypeCheck(token, "$isToken");
      return new B.Message(C.Code_qd9, "Unexpected token '" + H.S(token.get$lexeme()) + "'.", null, P.LinkedHashMap_LinkedHashMap$_literal(["token", token], P.String, null));
    }, "call$1", "fasta_codes___withArgumentsUnexpectedToken$closure", 4, 0, 2, 0],
    _withArgumentsUnmatchedToken: [function(string, token) {
      var lexeme;
      H.stringTypeCheck(string);
      H.interceptedTypeCheck(token, "$isToken");
      lexeme = token.get$lexeme();
      return new B.Message(C.Code_a9w, "Can't find '" + H.S(string) + "' to match '" + H.S(lexeme) + "'.", null, P.LinkedHashMap_LinkedHashMap$_literal(["string", string, "token", token], P.String, null));
    }, "call$2", "fasta_codes___withArgumentsUnmatchedToken$closure", 8, 0, 71, 1, 0],
    _withArgumentsUnterminatedString: [function(string, string2) {
      H.stringTypeCheck(string);
      H.stringTypeCheck(string2);
      return new B.Message(C.Code_67z, "String starting with " + H.S(string) + " must end with " + H.S(string2) + ".", null, P.LinkedHashMap_LinkedHashMap$_literal(["string", string, "string2", string2], P.String, null));
    }, "call$2", "fasta_codes___withArgumentsUnterminatedString$closure", 8, 0, 72, 1, 29],
    Code: {
      "^": "Object;name,template,analyzerCode,dart2jsCode,severity,$ti",
      toString$0: function(_) {
        return this.name;
      }
    },
    Message: {
      "^": "Object;code>,message>,tip,$arguments"
    },
    MessageCode: {
      "^": "Code;message>,tip,name,template,analyzerCode,dart2jsCode,severity",
      get$code: function(_) {
        return this;
      },
      $asCode: function() {
        return [P.Null];
      },
      $isMessage: 1
    },
    Template: {
      "^": "Object;messageTemplate,tipTemplate,withArguments,$ti"
    }
  }], ["fasta.parser.Assert", "package:front_end/src/fasta/parser/assert.dart",, M, {
    "^": "",
    Assert: {
      "^": "Object;index,_assert$_name",
      toString$0: function(_) {
        return this._assert$_name;
      }
    }
  }], ["fasta.parser.async_modifier", "package:front_end/src/fasta/parser/async_modifier.dart",, V, {
    "^": "",
    AsyncModifier: {
      "^": "Object;index,_async_modifier$_name",
      toString$0: function(_) {
        return this._async_modifier$_name;
      }
    }
  }], ["", "package:front_end/src/fasta/parser/directive_context.dart",, A, {
    "^": "",
    DirectiveContext: {
      "^": "Object;state",
      checkScriptTag$2: function(parser, token) {
        if (this.state === C.DirectiveState_0) {
          this.state = C.DirectiveState_1;
          return;
        }
        throw H.wrapException("Internal error: Unexpected script tag.");
      },
      checkDeclaration$0: function() {
        if (this.state !== C.DirectiveState_5)
          this.state = C.DirectiveState_6;
      },
      checkExport$2: function(parser, token) {
        var t1 = this.state;
        if (t1.index <= 3) {
          this.state = C.DirectiveState_3;
          return;
        }
        if (t1 === C.DirectiveState_4)
          parser.reportRecoverableError$2(token, C.MessageCode_ylG);
        else if (t1 === C.DirectiveState_5)
          parser.reportRecoverableError$2(token, C.MessageCode_sx4);
        else
          parser.reportRecoverableError$2(token, C.MessageCode_Ibr);
      },
      checkImport$2: function(parser, token) {
        var t1 = this.state;
        if (t1.index <= 3) {
          this.state = C.DirectiveState_3;
          return;
        }
        if (t1 === C.DirectiveState_4)
          parser.reportRecoverableError$2(token, C.MessageCode_IEl);
        else if (t1 === C.DirectiveState_5)
          parser.reportRecoverableError$2(token, C.MessageCode_sx4);
        else
          parser.reportRecoverableError$2(token, C.MessageCode_Ibr);
      },
      checkLibrary$2: function(parser, token) {
        var t1 = this.state;
        if (t1.index < 2) {
          this.state = C.DirectiveState_2;
          return;
        }
        if (t1 === C.DirectiveState_2)
          parser.reportRecoverableError$2(token, C.MessageCode_jrB);
        else if (t1 === C.DirectiveState_5)
          parser.reportRecoverableError$2(token, C.MessageCode_sx4);
        else
          parser.reportRecoverableError$2(token, C.MessageCode_Kkt);
      },
      checkPart$2: function(parser, token) {
        var t1 = this.state;
        if (t1.index <= 4) {
          this.state = C.DirectiveState_4;
          return;
        }
        if (t1 === C.DirectiveState_5)
          parser.reportRecoverableError$2(token, C.MessageCode_sx4);
        else
          parser.reportRecoverableError$2(token, C.MessageCode_Ibr);
      },
      checkPartOf$2: function(parser, token) {
        var t1 = this.state;
        if (t1 === C.DirectiveState_0) {
          this.state = C.DirectiveState_5;
          return;
        }
        if (t1 === C.DirectiveState_5)
          parser.reportRecoverableError$2(token, C.MessageCode_qXF);
        else
          parser.reportRecoverableError$2(token, C.MessageCode_sx4);
      }
    },
    DirectiveState: {
      "^": "Object;index,_directive_context$_name",
      toString$0: function(_) {
        return this._directive_context$_name;
      }
    }
  }], ["fasta.parser.formal_parameter_kind", "package:front_end/src/fasta/parser/formal_parameter_kind.dart",, N, {
    "^": "",
    FormalParameterKind: {
      "^": "Object;index,_formal_parameter_kind$_name",
      toString$0: function(_) {
        return this._formal_parameter_kind$_name;
      }
    }
  }], ["", "package:front_end/src/fasta/parser/forwarding_listener.dart",, Y, {
    "^": "",
    ForwardingListener: {
      "^": "Object;listener,forwardErrors",
      beginArguments$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginArguments$1(token);
      },
      beginAssert$2: function(assertKeyword, kind) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginAssert$2(assertKeyword, kind);
      },
      beginAwaitExpression$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginAwaitExpression$1(token);
      },
      beginBinaryExpression$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginBinaryExpression$1(token);
      },
      beginBlock$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginBlock$1(token);
      },
      beginBlockFunctionBody$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginBlockFunctionBody$1(token);
      },
      beginCascade$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginCascade$1(token);
      },
      beginCaseExpression$1: function(caseKeyword) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginCaseExpression$1(caseKeyword);
      },
      beginCatchClause$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginCatchClause$1(token);
      },
      beginClassBody$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginClassBody$1(token);
      },
      beginClassDeclaration$3: function(begin, abstractToken, $name) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginClassDeclaration$3(begin, abstractToken, $name);
      },
      beginClassOrNamedMixinApplication$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginClassOrNamedMixinApplication$1(token);
      },
      beginCombinators$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginCombinators$1(token);
      },
      beginCompilationUnit$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginCompilationUnit$1(token);
      },
      beginConditionalUri$1: function(ifKeyword) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginConditionalUri$1(ifKeyword);
      },
      beginConditionalUris$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginConditionalUris$1(token);
      },
      beginConstExpression$1: function(constKeyword) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginConstExpression$1(constKeyword);
      },
      beginConstLiteral$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginConstLiteral$1(token);
      },
      beginConstructorReference$1: function(start) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginConstructorReference$1(start);
      },
      beginDoWhileStatement$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginDoWhileStatement$1(token);
      },
      beginDoWhileStatementBody$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginDoWhileStatementBody$1(token);
      },
      beginElseStatement$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginElseStatement$1(token);
      },
      beginEnum$1: function(enumKeyword) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginEnum$1(enumKeyword);
      },
      beginExport$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginExport$1(token);
      },
      beginExpressionStatement$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginExpressionStatement$1(token);
      },
      beginFactoryMethod$3: function(lastConsumed, externalToken, constToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginFactoryMethod$3(lastConsumed, externalToken, constToken);
      },
      beginFieldInitializer$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginFieldInitializer$1(token);
      },
      beginForInBody$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginForInBody$1(token);
      },
      beginForInExpression$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginForInExpression$1(token);
      },
      beginForStatement$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginForStatement$1(token);
      },
      beginForStatementBody$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginForStatementBody$1(token);
      },
      beginFormalParameter$4: function(token, kind, covariantToken, varFinalOrConst) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginFormalParameter$4(token, kind, covariantToken, varFinalOrConst);
      },
      beginFormalParameters$2: function(token, kind) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginFormalParameters$2(token, kind);
      },
      beginLocalFunctionDeclaration$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginLocalFunctionDeclaration$1(token);
      },
      beginFunctionExpression$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginFunctionExpression$1(token);
      },
      beginFunctionName$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginFunctionName$1(token);
      },
      beginFunctionType$1: function(beginToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginFunctionType$1(beginToken);
      },
      beginFunctionTypeAlias$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginFunctionTypeAlias$1(token);
      },
      beginFunctionTypedFormalParameter$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginFunctionTypedFormalParameter$1(token);
      },
      beginHide$1: function(hideKeyword) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginHide$1(hideKeyword);
      },
      beginIfStatement$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginIfStatement$1(token);
      },
      beginImport$1: function(importKeyword) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginImport$1(importKeyword);
      },
      beginInitializedIdentifier$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginInitializedIdentifier$1(token);
      },
      beginInitializer$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginInitializer$1(token);
      },
      beginInitializers$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginInitializers$1(token);
      },
      beginLabeledStatement$2: function(token, labelCount) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginLabeledStatement$2(token, labelCount);
      },
      beginLibraryName$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginLibraryName$1(token);
      },
      beginLiteralMapEntry$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginLiteralMapEntry$1(token);
      },
      beginLiteralString$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginLiteralString$1(token);
      },
      beginLiteralSymbol$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginLiteralSymbol$1(token);
      },
      beginMember$0: function() {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginMember$0();
      },
      beginMetadata$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginMetadata$1(token);
      },
      beginMetadataStar$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginMetadataStar$1(token);
      },
      beginMethod$5: function(externalToken, staticToken, covariantToken, varFinalOrConst, $name) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginMethod$5(externalToken, staticToken, covariantToken, varFinalOrConst, $name);
      },
      beginMixinApplication$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginMixinApplication$1(token);
      },
      beginNamedFunctionExpression$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginNamedFunctionExpression$1(token);
      },
      beginNamedMixinApplication$3: function(begin, abstractToken, $name) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginNamedMixinApplication$3(begin, abstractToken, $name);
      },
      beginNewExpression$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginNewExpression$1(token);
      },
      beginOptionalFormalParameters$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginOptionalFormalParameters$1(token);
      },
      beginPart$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginPart$1(token);
      },
      beginPartOf$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginPartOf$1(token);
      },
      beginRedirectingFactoryBody$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginRedirectingFactoryBody$1(token);
      },
      beginRethrowStatement$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginRethrowStatement$1(token);
      },
      beginReturnStatement$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginReturnStatement$1(token);
      },
      beginShow$1: function(showKeyword) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginShow$1(showKeyword);
      },
      beginSwitchBlock$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginSwitchBlock$1(token);
      },
      beginSwitchCase$3: function(labelCount, expressionCount, firstToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginSwitchCase$3(labelCount, expressionCount, firstToken);
      },
      beginSwitchStatement$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginSwitchStatement$1(token);
      },
      beginThenStatement$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginThenStatement$1(token);
      },
      beginTopLevelMember$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginTopLevelMember$1(token);
      },
      beginTopLevelMethod$2: function(lastConsumed, externalToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginTopLevelMethod$2(lastConsumed, externalToken);
      },
      beginTryStatement$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginTryStatement$1(token);
      },
      beginTypeArguments$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginTypeArguments$1(token);
      },
      beginTypeList$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginTypeList$1(token);
      },
      beginTypeVariable$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginTypeVariable$1(token);
      },
      beginTypeVariables$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginTypeVariables$1(token);
      },
      beginVariableInitializer$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginVariableInitializer$1(token);
      },
      beginVariablesDeclaration$2: function(token, varFinalOrConst) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginVariablesDeclaration$2(token, varFinalOrConst);
      },
      beginWhileStatement$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginWhileStatement$1(token);
      },
      beginWhileStatementBody$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginWhileStatementBody$1(token);
      },
      beginYieldStatement$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginYieldStatement$1(token);
      },
      endArguments$3: function(count, beginToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endArguments$3(count, beginToken, endToken);
      },
      endAssert$5: function(assertKeyword, kind, leftParenthesis, commaToken, semicolonToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endAssert$5(assertKeyword, kind, leftParenthesis, commaToken, semicolonToken);
      },
      endAwaitExpression$2: function(beginToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endAwaitExpression$2(beginToken, endToken);
      },
      endBinaryExpression$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endBinaryExpression$1(token);
      },
      endBlock$3: function(count, beginToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endBlock$3(count, beginToken, endToken);
      },
      endBlockFunctionBody$3: function(count, beginToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endBlockFunctionBody$3(count, beginToken, endToken);
      },
      endCascade$0: function() {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endCascade$0();
      },
      endCaseExpression$1: function(colon) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endCaseExpression$1(colon);
      },
      endCatchClause$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endCatchClause$1(token);
      },
      endClassBody$3: function(memberCount, beginToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endClassBody$3(memberCount, beginToken, endToken);
      },
      endClassDeclaration$2: function(beginToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endClassDeclaration$2(beginToken, endToken);
      },
      endCombinators$1: function(count) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endCombinators$1(count);
      },
      endCompilationUnit$2: function(count, token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endCompilationUnit$2(count, token);
      },
      endConditionalUri$3: ["super$ForwardingListener$endConditionalUri", function(ifKeyword, leftParen, equalSign) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endConditionalUri$3(ifKeyword, leftParen, equalSign);
      }],
      endConditionalUris$1: function(count) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endConditionalUris$1(count);
      },
      endConstExpression$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endConstExpression$1(token);
      },
      endConstLiteral$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endConstLiteral$1(token);
      },
      endConstructorReference$3: function(start, periodBeforeName, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endConstructorReference$3(start, periodBeforeName, endToken);
      },
      endDoWhileStatement$3: function(doKeyword, whileKeyword, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endDoWhileStatement$3(doKeyword, whileKeyword, endToken);
      },
      endDoWhileStatementBody$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endDoWhileStatementBody$1(token);
      },
      endElseStatement$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endElseStatement$1(token);
      },
      endEnum$3: function(enumKeyword, leftBrace, count) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endEnum$3(enumKeyword, leftBrace, count);
      },
      endExport$2: function(exportKeyword, semicolon) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endExport$2(exportKeyword, semicolon);
      },
      endExpressionStatement$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endExpressionStatement$1(token);
      },
      endFactoryMethod$3: function(beginToken, factoryKeyword, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endFactoryMethod$3(beginToken, factoryKeyword, endToken);
      },
      endFieldInitializer$2: function(assignment, token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endFieldInitializer$2(assignment, token);
      },
      endFields$6: function(staticToken, covariantToken, varFinalOrConst, count, beginToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endFields$6(staticToken, covariantToken, varFinalOrConst, count, beginToken, endToken);
      },
      endForIn$5: function(awaitToken, forToken, leftParen, inKeyword, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endForIn$5(awaitToken, forToken, leftParen, inKeyword, endToken);
      },
      endForInBody$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endForInBody$1(token);
      },
      endForInExpression$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endForInExpression$1(token);
      },
      endForStatement$5: function(forKeyword, leftParen, leftSeparator, updateExpressionCount, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endForStatement$5(forKeyword, leftParen, leftSeparator, updateExpressionCount, endToken);
      },
      endForStatementBody$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endForStatementBody$1(token);
      },
      endFormalParameter$5: function(thisKeyword, periodAfterThis, nameToken, kind, memberKind) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endFormalParameter$5(thisKeyword, periodAfterThis, nameToken, kind, memberKind);
      },
      endFormalParameters$4: function(count, beginToken, endToken, kind) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endFormalParameters$4(count, beginToken, endToken, kind);
      },
      endLocalFunctionDeclaration$1: function(endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endLocalFunctionDeclaration$1(endToken);
      },
      endFunctionExpression$2: function(beginToken, token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endFunctionExpression$2(beginToken, token);
      },
      endFunctionName$2: function(beginToken, token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endFunctionName$2(beginToken, token);
      },
      endFunctionType$2: function(functionToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endFunctionType$2(functionToken, endToken);
      },
      endFunctionTypeAlias$3: function(typedefKeyword, equals, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endFunctionTypeAlias$3(typedefKeyword, equals, endToken);
      },
      endFunctionTypedFormalParameter$1: function(nameToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endFunctionTypedFormalParameter$1(nameToken);
      },
      endHide$1: ["super$ForwardingListener$endHide", function(hideKeyword) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endHide$1(hideKeyword);
      }],
      endIfStatement$2: function(ifToken, elseToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endIfStatement$2(ifToken, elseToken);
      },
      endImport$2: function(importKeyword, semicolon) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endImport$2(importKeyword, semicolon);
      },
      endInitializedIdentifier$1: function(nameToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endInitializedIdentifier$1(nameToken);
      },
      endInitializer$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endInitializer$1(token);
      },
      endInitializers$3: function(count, beginToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endInitializers$3(count, beginToken, endToken);
      },
      endLabeledStatement$1: function(labelCount) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endLabeledStatement$1(labelCount);
      },
      endLibraryName$2: function(libraryKeyword, semicolon) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endLibraryName$2(libraryKeyword, semicolon);
      },
      endLiteralMapEntry$2: function(colon, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endLiteralMapEntry$2(colon, endToken);
      },
      endLiteralString$2: function(interpolationCount, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endLiteralString$2(interpolationCount, endToken);
      },
      endLiteralSymbol$2: function(hashToken, identifierCount) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endLiteralSymbol$2(hashToken, identifierCount);
      },
      endMember$0: function() {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endMember$0();
      },
      endMetadata$3: function(beginToken, periodBeforeName, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endMetadata$3(beginToken, periodBeforeName, endToken);
      },
      endMetadataStar$1: function(count) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endMetadataStar$1(count);
      },
      endMethod$4: function(getOrSet, beginToken, beginParam, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endMethod$4(getOrSet, beginToken, beginParam, endToken);
      },
      endMixinApplication$1: ["super$ForwardingListener$endMixinApplication", function(withKeyword) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endMixinApplication$1(withKeyword);
      }],
      endNamedFunctionExpression$1: function(endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endNamedFunctionExpression$1(endToken);
      },
      endNamedMixinApplication$5: function(begin, classKeyword, equals, implementsKeyword, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endNamedMixinApplication$5(begin, classKeyword, equals, implementsKeyword, endToken);
      },
      endNewExpression$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endNewExpression$1(token);
      },
      endOptionalFormalParameters$3: function(count, beginToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endOptionalFormalParameters$3(count, beginToken, endToken);
      },
      endPart$2: function(partKeyword, semicolon) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endPart$2(partKeyword, semicolon);
      },
      endPartOf$4: function(partKeyword, ofKeyword, semicolon, hasName) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endPartOf$4(partKeyword, ofKeyword, semicolon, hasName);
      },
      endRedirectingFactoryBody$2: function(beginToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endRedirectingFactoryBody$2(beginToken, endToken);
      },
      endRethrowStatement$2: function(rethrowToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endRethrowStatement$2(rethrowToken, endToken);
      },
      endReturnStatement$3: function(hasExpression, beginToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endReturnStatement$3(hasExpression, beginToken, endToken);
      },
      endShow$1: ["super$ForwardingListener$endShow", function(showKeyword) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endShow$1(showKeyword);
      }],
      endSwitchBlock$3: function(caseCount, beginToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endSwitchBlock$3(caseCount, beginToken, endToken);
      },
      endSwitchCase$7: function(labelCount, expressionCount, defaultKeyword, colonAfterDefault, statementCount, firstToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endSwitchCase$7(labelCount, expressionCount, defaultKeyword, colonAfterDefault, statementCount, firstToken, endToken);
      },
      endSwitchStatement$2: function(switchKeyword, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endSwitchStatement$2(switchKeyword, endToken);
      },
      endThenStatement$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endThenStatement$1(token);
      },
      endTopLevelDeclaration$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endTopLevelDeclaration$1(token);
      },
      endTopLevelFields$6: function(staticToken, covariantToken, varFinalOrConst, count, beginToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endTopLevelFields$6(staticToken, covariantToken, varFinalOrConst, count, beginToken, endToken);
      },
      endTopLevelMethod$3: function(beginToken, getOrSet, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endTopLevelMethod$3(beginToken, getOrSet, endToken);
      },
      endTryStatement$3: function(catchCount, tryKeyword, finallyKeyword) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endTryStatement$3(catchCount, tryKeyword, finallyKeyword);
      },
      endTypeArguments$3: function(count, beginToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endTypeArguments$3(count, beginToken, endToken);
      },
      endTypeList$1: function(count) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endTypeList$1(count);
      },
      endTypeVariable$3: function(token, index, extendsOrSuper) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endTypeVariable$3(token, index, extendsOrSuper);
      },
      endTypeVariables$2: function(beginToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endTypeVariables$2(beginToken, endToken);
      },
      endVariableInitializer$1: function(assignmentOperator) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endVariableInitializer$1(assignmentOperator);
      },
      endVariablesDeclaration$2: function(count, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endVariablesDeclaration$2(count, endToken);
      },
      endWhileStatement$2: function(whileKeyword, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endWhileStatement$2(whileKeyword, endToken);
      },
      endWhileStatementBody$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endWhileStatementBody$1(token);
      },
      endYieldStatement$3: function(yieldToken, starToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endYieldStatement$3(yieldToken, starToken, endToken);
      },
      handleAsOperator$1: function(operator) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleAsOperator$1(operator);
      },
      handleAssignmentExpression$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleAssignmentExpression$1(token);
      },
      handleAsyncModifier$2: function(asyncToken, starToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleAsyncModifier$2(asyncToken, starToken);
      },
      handleBreakStatement$3: function(hasTarget, breakKeyword, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleBreakStatement$3(hasTarget, breakKeyword, endToken);
      },
      handleCaseMatch$2: function(caseKeyword, colon) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleCaseMatch$2(caseKeyword, colon);
      },
      handleCatchBlock$3: function(onKeyword, catchKeyword, comma) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleCatchBlock$3(onKeyword, catchKeyword, comma);
      },
      handleClassExtends$1: ["super$ForwardingListener$handleClassExtends", function(extendsKeyword) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleClassExtends$1(extendsKeyword);
      }],
      handleClassHeader$3: function(begin, classKeyword, nativeToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleClassHeader$3(begin, classKeyword, nativeToken);
      },
      handleClassImplements$2: ["super$ForwardingListener$handleClassImplements", function(implementsKeyword, interfacesCount) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleClassImplements$2(implementsKeyword, interfacesCount);
      }],
      beginConditionalExpression$1: function(question) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginConditionalExpression$1(question);
      },
      handleConditionalExpressionColon$0: function() {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleConditionalExpressionColon$0();
      },
      endConditionalExpression$2: function(question, colon) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endConditionalExpression$2(question, colon);
      },
      handleContinueStatement$3: function(hasTarget, continueKeyword, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleContinueStatement$3(hasTarget, continueKeyword, endToken);
      },
      handleDottedName$2: function(count, firstIdentifier) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleDottedName$2(count, firstIdentifier);
      },
      beginImplicitCreationExpression$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginImplicitCreationExpression$1(token);
      },
      endImplicitCreationExpression$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endImplicitCreationExpression$1(token);
      },
      handleEmptyStatement$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleEmptyStatement$1(token);
      },
      handleEmptyFunctionBody$1: function(semicolon) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleEmptyFunctionBody$1(semicolon);
      },
      handleExpressionFunctionBody$2: function(arrowToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleExpressionFunctionBody$2(arrowToken, endToken);
      },
      handleFinallyBlock$1: function(finallyKeyword) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleFinallyBlock$1(finallyKeyword);
      },
      handleFormalParameterWithoutValue$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleFormalParameterWithoutValue$1(token);
      },
      handleIdentifier$2: function(token, context) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleIdentifier$2(token, context);
      },
      handleIdentifierList$1: function(count) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleIdentifierList$1(count);
      },
      handleRecoverImport$1: function(semicolon) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleRecoverImport$1(semicolon);
      },
      handleIndexedExpression$2: function(openSquareBracket, closeSquareBracket) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleIndexedExpression$2(openSquareBracket, closeSquareBracket);
      },
      handleInterpolationExpression$2: function(leftBracket, rightBracket) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleInterpolationExpression$2(leftBracket, rightBracket);
      },
      handleInvalidFunctionBody$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleInvalidFunctionBody$1(token);
      },
      handleInvalidMember$1: function(endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleInvalidMember$1(endToken);
      },
      handleInvalidOperatorName$2: function(operatorKeyword, token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleInvalidOperatorName$2(operatorKeyword, token);
      },
      handleInvalidTopLevelBlock$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleInvalidTopLevelBlock$1(token);
      },
      handleInvalidTopLevelDeclaration$1: function(endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleInvalidTopLevelDeclaration$1(endToken);
      },
      handleIsOperator$2: function(isOperator, not) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleIsOperator$2(isOperator, not);
      },
      handleLabel$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleLabel$1(token);
      },
      handleLiteralBool$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleLiteralBool$1(token);
      },
      handleLiteralDouble$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleLiteralDouble$1(token);
      },
      handleLiteralInt$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleLiteralInt$1(token);
      },
      handleLiteralList$4: function(count, beginToken, constKeyword, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleLiteralList$4(count, beginToken, constKeyword, endToken);
      },
      handleLiteralMap$4: function(count, beginToken, constKeyword, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleLiteralMap$4(count, beginToken, constKeyword, endToken);
      },
      handleLiteralNull$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleLiteralNull$1(token);
      },
      handleNamedArgument$1: function(colon) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleNamedArgument$1(colon);
      },
      handleNativeClause$2: function(nativeToken, hasName) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleNativeClause$2(nativeToken, hasName);
      },
      handleNativeFunctionBody$2: function(nativeToken, semicolon) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleNativeFunctionBody$2(nativeToken, semicolon);
      },
      handleNativeFunctionBodyIgnored$2: function(nativeToken, semicolon) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleNativeFunctionBodyIgnored$2(nativeToken, semicolon);
      },
      handleNoArguments$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleNoArguments$1(token);
      },
      handleNoConstructorReferenceContinuationAfterTypeArguments$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleNoConstructorReferenceContinuationAfterTypeArguments$1(token);
      },
      handleNoExpression$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleNoExpression$1(token);
      },
      handleNoFieldInitializer$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleNoFieldInitializer$1(token);
      },
      handleNoFormalParameters$2: function(token, kind) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleNoFormalParameters$2(token, kind);
      },
      handleNoInitializers$0: function() {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleNoInitializers$0();
      },
      handleNoName$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleNoName$1(token);
      },
      handleNoType$1: function(lastConsumed) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleNoType$1(lastConsumed);
      },
      handleNoTypeArguments$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleNoTypeArguments$1(token);
      },
      handleNoTypeVariables$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleNoTypeVariables$1(token);
      },
      handleNoVariableInitializer$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleNoVariableInitializer$1(token);
      },
      handleOperator$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleOperator$1(token);
      },
      handleOperatorName$2: function(operatorKeyword, token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleOperatorName$2(operatorKeyword, token);
      },
      handleParenthesizedCondition$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleParenthesizedCondition$1(token);
      },
      handleParenthesizedExpression$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleParenthesizedExpression$1(token);
      },
      handleImportPrefix$2: ["super$ForwardingListener$handleImportPrefix", function(deferredKeyword, asKeyword) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleImportPrefix$2(deferredKeyword, asKeyword);
      }],
      handleQualified$1: function(period) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleQualified$1(period);
      },
      handleRecoverClassHeader$0: function() {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleRecoverClassHeader$0();
      },
      handleRecoverableError$3: function(message, startToken, endToken) {
        var t1;
        H.interceptedTypeCheck(message, "$isMessage");
        if (this.forwardErrors) {
          t1 = this.listener;
          if (!(t1 == null))
            t1.handleRecoverableError$3(message, startToken, endToken);
        }
      },
      handleInvalidStatement$2: function(token, message) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleInvalidStatement$2(token, message);
      },
      handleScript$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleScript$1(token);
      },
      handleSend$2: function(beginToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleSend$2(beginToken, endToken);
      },
      handleStringJuxtaposition$1: function(literalCount) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleStringJuxtaposition$1(literalCount);
      },
      handleStringPart$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleStringPart$1(token);
      },
      handleSuperExpression$2: function(token, context) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleSuperExpression$2(token, context);
      },
      handleSymbolVoid$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleSymbolVoid$1(token);
      },
      handleThisExpression$2: function(token, context) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleThisExpression$2(token, context);
      },
      handleThrowExpression$2: function(throwToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleThrowExpression$2(throwToken, endToken);
      },
      handleType$2: function(beginToken, endToken) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleType$2(beginToken, endToken);
      },
      handleTypeVariablesDefined$2: function(token, count) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleTypeVariablesDefined$2(token, count);
      },
      handleUnaryPostfixAssignmentExpression$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleUnaryPostfixAssignmentExpression$1(token);
      },
      handleUnaryPrefixAssignmentExpression$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleUnaryPrefixAssignmentExpression$1(token);
      },
      handleUnaryPrefixExpression$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleUnaryPrefixExpression$1(token);
      },
      beginFormalParameterDefaultValueExpression$0: function() {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.beginFormalParameterDefaultValueExpression$0();
      },
      endFormalParameterDefaultValueExpression$0: function() {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.endFormalParameterDefaultValueExpression$0();
      },
      handleValuedFormalParameter$2: function(equals, token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleValuedFormalParameter$2(equals, token);
      },
      handleVoidKeyword$1: function(token) {
        var t1 = this.listener;
        if (!(t1 == null))
          t1.handleVoidKeyword$1(token);
      }
    }
  }], ["", "package:front_end/src/fasta/parser/identifier_context.dart",, D, {
    "^": "",
    looksLikeExpressionStart: function(next) {
      var t1;
      if (!next.get$isIdentifier())
        if (!(next.get$isKeyword() && !D.looksLikeStatementStart(next))) {
          t1 = next.type;
          if (t1 !== C.TokenType_q1z)
            if (t1 !== C.TokenType_P5Z)
              if (t1 !== C.TokenType_pCd)
                if (t1 !== C.TokenType_GbN)
                  if (t1 !== C.TokenType_Vyt)
                    if (t1 !== C.TokenType_86y) {
                      t1 = t1.stringValue;
                      t1 = "{" === t1 || "(" === t1 || "[" === t1 || "[]" === t1 || "<" === t1 || "!" === t1 || "-" === t1 || "~" === t1 || "++" === t1 || "--" === t1;
                    } else
                      t1 = true;
                  else
                    t1 = true;
                else
                  t1 = true;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        } else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    looksLikeStatementStart: function(token) {
      return M.isOneOfOrEof(token, C.List_G4S);
    },
    IdentifierContext: {
      "^": "Object;",
      toString$0: function(_) {
        return this._identifier_context$_name;
      },
      ensureIdentifier$2: function(token, parser) {
        return;
      }
    }
  }], ["", "package:front_end/src/fasta/parser/identifier_context_impl.dart",, G, {
    "^": "",
    checkAsyncAwaitYieldAsIdentifier: function(identifier, parser) {
      var t1;
      if (parser.asyncState !== C.AsyncModifier_0 && identifier.type.get$isPseudo()) {
        t1 = identifier.type.stringValue;
        if ("await" === t1)
          parser.reportRecoverableError$2(identifier, C.MessageCode_Yqs);
        else if ("yield" === t1)
          parser.reportRecoverableError$2(identifier, C.MessageCode_Nsp);
        else if ("async" === t1)
          parser.reportRecoverableError$2(identifier, C.MessageCode_sU7);
      }
    },
    CatchParameterIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier = token.next;
        if (identifier.get$isIdentifier()) {
          G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
          return identifier;
        }
        parser.reportRecoverableError$2(identifier, C.MessageCode_scL);
        if (D.looksLikeStatementStart(identifier) || M.isOneOfOrEof(identifier, C.List_QYh))
          return parser.get$rewriter().insertSyntheticIdentifier$1(token);
        else if (!identifier.get$isKeywordOrIdentifier())
          return parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
        return identifier;
      }
    },
    ClassOrNamedMixinIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier, t1;
        identifier = token.next;
        t1 = identifier.type;
        if (t1.get$isPseudo())
          return identifier;
        if (t1.isTopLevelKeyword || M.isOneOfOrEof(identifier, C.List_Xul) || M.isOneOfOrEof(identifier, C.List_i1a))
          identifier = parser.insertSyntheticIdentifier$3$message(token, this, B._withArgumentsExpectedIdentifier(identifier));
        else if (t1.get$isBuiltIn())
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_yHq);
        else {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          if (!identifier.get$isKeywordOrIdentifier())
            identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
        }
        return identifier;
      }
    },
    CombinatorIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier = token.next;
        if (identifier.get$isIdentifier())
          if (!(identifier.type.isTopLevelKeyword || M.isOneOfOrEof(identifier, C.List_Xul)) || M.isOneOfOrEof(identifier.next, C.List_Kp9))
            return identifier;
        if (M.isOneOfOrEof(identifier, C.List_Kp9) || identifier.type.isTopLevelKeyword || M.isOneOfOrEof(identifier, C.List_Xul))
          identifier = parser.insertSyntheticIdentifier$3$message(token, this, B._withArgumentsExpectedIdentifier(identifier));
        else {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          if (!identifier.get$isKeywordOrIdentifier())
            identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
        }
        return identifier;
      }
    },
    ConstructorReferenceIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier = token.next;
        if (identifier.get$isIdentifier()) {
          G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
          return identifier;
        }
        if (!identifier.get$isKeywordOrIdentifier())
          identifier = parser.insertSyntheticIdentifier$3$message(token, this, B._withArgumentsExpectedIdentifier(identifier));
        else
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
        return identifier;
      }
    },
    DottedNameIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier = token.next;
        if (identifier.get$isIdentifier())
          if (!identifier.type.isTopLevelKeyword || M.isOneOfOrEof(identifier.next, C.List_6z6))
            return identifier;
        if (identifier.type.isTopLevelKeyword || M.isOneOfOrEof(identifier, C.List_Xul) || M.isOneOfOrEof(identifier, C.List_6z6))
          identifier = parser.insertSyntheticIdentifier$3$message(token, this, B._withArgumentsExpectedIdentifier(identifier));
        else {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          if (!identifier.get$isKeywordOrIdentifier())
            identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
        }
        return identifier;
      }
    },
    EnumDeclarationIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier, t1;
        identifier = token.next;
        t1 = identifier.type;
        if (t1.get$isPseudo())
          return identifier;
        if (t1.isTopLevelKeyword || M.isOneOfOrEof(identifier, C.List_Xul) || M.isOneOfOrEof(identifier, C.List_wsa))
          identifier = parser.insertSyntheticIdentifier$3$message(token, this, B._withArgumentsExpectedIdentifier(identifier));
        else if (t1.get$isBuiltIn())
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_yHq);
        else {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          if (!identifier.get$isKeywordOrIdentifier())
            identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
        }
        return identifier;
      }
    },
    EnumValueDeclarationIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier = token.next;
        if (identifier.get$isIdentifier())
          return identifier;
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
        if (identifier.type.isTopLevelKeyword || M.isOneOfOrEof(identifier, C.List_Xul) || M.isOneOfOrEof(identifier, C.List_CpJ))
          return parser.get$rewriter().insertSyntheticIdentifier$1(token);
        else if (!identifier.get$isKeywordOrIdentifier())
          return parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
        return identifier;
      }
    },
    ExpressionIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier = token.next;
        if (identifier.get$isIdentifier()) {
          if ("await" === identifier.type.stringValue && identifier.next.get$isIdentifier()) {
            parser.reportRecoverableErrorWithToken$2(identifier, C.Template_RkP);
            return identifier.next;
          } else
            G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
          return identifier;
        }
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
        if (!D.looksLikeStatementStart(identifier))
          if (identifier.get$isKeywordOrIdentifier()) {
            if (!M.isOneOfOrEof(identifier, C.List_as_is))
              return identifier;
          } else if (!identifier.type.isOperator && !M.isOneOfOrEof(identifier, C.List_ECQ))
            token = identifier;
        return parser.get$rewriter().insertSyntheticIdentifier$1(token);
      }
    },
    FieldDeclarationIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier = token.next;
        if (identifier.get$isIdentifier())
          return identifier;
        if (M.isOneOfOrEof(identifier, C.List_NMh) || identifier.type.isModifier || M.isOneOfOrEof(identifier, C.List_get_set_void))
          return parser.insertSyntheticIdentifier$2(token, this);
        else if (!identifier.get$isKeywordOrIdentifier())
          return parser.insertSyntheticIdentifier$4$message$messageOnToken(identifier, this, B._withArgumentsExpectedIdentifier(identifier), identifier);
        else {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          return identifier;
        }
      }
    },
    FieldInitializerIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier = token.next;
        if (identifier.get$isIdentifier())
          return identifier;
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
        return parser.get$rewriter().insertSyntheticIdentifier$1(token);
      }
    },
    FormalParameterDeclarationIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier = token.next;
        if (identifier.get$isIdentifier()) {
          G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
          return identifier;
        }
        if (identifier.type.isModifier || M.isOneOfOrEof(identifier, C.List_get_set_void) || D.looksLikeStatementStart(identifier) || M.isOneOfOrEof(identifier, C.List_EBV))
          identifier = parser.insertSyntheticIdentifier$3$message(token, this, B._withArgumentsExpectedIdentifier(identifier));
        else {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          if (!identifier.get$isKeywordOrIdentifier())
            identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
        }
        return identifier;
      }
    },
    ImportPrefixIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier, t1;
        identifier = token.next;
        t1 = identifier.type;
        if (t1.get$isPseudo())
          return identifier;
        if (t1.get$isBuiltIn() && M.isOneOfOrEof(identifier.next, C.List_YwG))
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_yHq);
        else if (t1.isTopLevelKeyword || M.isOneOfOrEof(identifier, C.List_Xul) || M.isOneOfOrEof(identifier, C.List_YwG))
          identifier = parser.insertSyntheticIdentifier$3$message(token, this, B._withArgumentsExpectedIdentifier(identifier));
        else {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          if (!identifier.get$isKeywordOrIdentifier())
            identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
        }
        return identifier;
      }
    },
    LiteralSymbolIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier = token.next;
        if (identifier.get$isIdentifier())
          return identifier;
        return parser.insertSyntheticIdentifier$3$message(token, this, B._withArgumentsExpectedIdentifier(identifier));
      }
    },
    LocalFunctionDeclarationIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier = token.next;
        if (identifier.get$isIdentifier()) {
          G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
          return identifier;
        }
        if (M.isOneOfOrEof(identifier, C.List_8eb) || D.looksLikeStatementStart(identifier))
          identifier = parser.insertSyntheticIdentifier$3$message(token, this, B._withArgumentsExpectedIdentifier(identifier));
        else {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          if (!identifier.get$isKeywordOrIdentifier())
            identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
        }
        return identifier;
      }
    },
    LabelDeclarationIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier = token.next;
        if (identifier.get$isIdentifier()) {
          G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
          return identifier;
        }
        if (M.isOneOfOrEof(identifier, C.List_PHH) || D.looksLikeStatementStart(identifier))
          identifier = parser.insertSyntheticIdentifier$3$message(token, this, B._withArgumentsExpectedIdentifier(identifier));
        else {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          if (!identifier.get$isKeywordOrIdentifier())
            identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
        }
        return identifier;
      }
    },
    LabelReferenceIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier = token.next;
        if (identifier.get$isIdentifier()) {
          G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
          return identifier;
        }
        if (M.isOneOfOrEof(identifier, C.List_oKf))
          identifier = parser.insertSyntheticIdentifier$3$message(token, this, B._withArgumentsExpectedIdentifier(identifier));
        else {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          if (!identifier.get$isKeywordOrIdentifier())
            identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
        }
        return identifier;
      }
    },
    LibraryIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier, next;
        identifier = token.next;
        if (identifier.get$isIdentifier()) {
          next = identifier.next;
          if (!(identifier.type.isTopLevelKeyword || M.isOneOfOrEof(identifier, C.List_Xul)) || M.isOneOfOrEof(next, C.List_aFE))
            return identifier;
        }
        if (M.isOneOfOrEof(identifier, C.List_aFE) || identifier.type.isTopLevelKeyword || M.isOneOfOrEof(identifier, C.List_Xul))
          identifier = parser.insertSyntheticIdentifier$3$message(token, this, B._withArgumentsExpectedIdentifier(identifier));
        else {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          if (!identifier.get$isKeywordOrIdentifier())
            identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
        }
        return identifier;
      }
    },
    LocalVariableDeclarationIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier = token.next;
        if (identifier.get$isIdentifier()) {
          G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
          return identifier;
        }
        if (M.isOneOfOrEof(identifier, C.List_qTx) || D.looksLikeStatementStart(identifier))
          identifier = parser.insertSyntheticIdentifier$3$message(token, this, B._withArgumentsExpectedIdentifier(identifier));
        else {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          if (!identifier.get$isKeywordOrIdentifier())
            identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
        }
        return identifier;
      }
    },
    MetadataReferenceIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier, t1;
        identifier = token.next;
        if (identifier.get$isIdentifier()) {
          G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
          return identifier;
        }
        if (!M.isOneOfOrEof(identifier, C.List_sv1)) {
          t1 = identifier.type;
          if (!(t1.isTopLevelKeyword || M.isOneOfOrEof(identifier, C.List_Xul)))
            t1 = t1.isModifier || M.isOneOfOrEof(identifier, C.List_get_set_void) || D.looksLikeStatementStart(identifier);
          else
            t1 = true;
        } else
          t1 = true;
        if (t1)
          identifier = parser.insertSyntheticIdentifier$3$message(token, this, B._withArgumentsExpectedIdentifier(identifier));
        else {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          if (!identifier.get$isKeywordOrIdentifier())
            identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
        }
        return identifier;
      }
    },
    MethodDeclarationIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier, t1;
        identifier = token.next;
        if (identifier.get$isIdentifier())
          return identifier;
        t1 = identifier.type;
        if (t1.isUserDefinableOperator && !this.isContinuation)
          return parser.insertSyntheticIdentifier$4$message$messageOnToken(identifier, this, C.MessageCode_KGl, identifier);
        else if (M.isOneOfOrEof(identifier, C.List_8eb) || t1.isModifier || M.isOneOfOrEof(identifier, C.List_get_set_void))
          return parser.insertSyntheticIdentifier$2(token, this);
        else if (!identifier.get$isKeywordOrIdentifier())
          return parser.insertSyntheticIdentifier$4$message$messageOnToken(identifier, this, B._withArgumentsExpectedIdentifier(identifier), identifier);
        else {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          return identifier;
        }
      }
    },
    NamedArgumentReferenceIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier = token.next;
        if (identifier.get$isIdentifier()) {
          G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
          return identifier;
        }
        if (M.isOneOfOrEof(identifier, C.List_PHH))
          identifier = parser.insertSyntheticIdentifier$3$message(token, this, B._withArgumentsExpectedIdentifier(identifier));
        else {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          if (!identifier.get$isKeywordOrIdentifier())
            identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
        }
        return identifier;
      }
    },
    TopLevelDeclarationIdentifierContext: {
      "^": "IdentifierContext;followingValues,_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier, next, t1;
        identifier = token.next;
        if (identifier.get$isIdentifier()) {
          next = identifier.next;
          if (!(identifier.type.isTopLevelKeyword || M.isOneOfOrEof(identifier, C.List_Xul)) || M.isOneOfOrEof(next, this.followingValues))
            return identifier;
        }
        t1 = identifier.type;
        if (t1.isTopLevelKeyword || M.isOneOfOrEof(identifier, C.List_Xul) || M.isOneOfOrEof(identifier, this.followingValues))
          identifier = parser.insertSyntheticIdentifier$3$message(token, this, B._withArgumentsExpectedIdentifier(identifier));
        else if (t1.get$isBuiltIn())
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_yHq);
        else {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          if (!identifier.get$isKeywordOrIdentifier())
            identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
        }
        return identifier;
      }
    },
    TypedefDeclarationIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier, t1;
        identifier = token.next;
        t1 = identifier.type;
        if (t1.get$isPseudo()) {
          if ("Function" === t1.stringValue)
            parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          return identifier;
        }
        if (t1.get$isBuiltIn() && M.isOneOfOrEof(identifier.next, C.List_aTZ))
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_yHq);
        else if (t1.isTopLevelKeyword || M.isOneOfOrEof(identifier, C.List_Xul) || M.isOneOfOrEof(identifier, C.List_aTZ))
          identifier = parser.insertSyntheticIdentifier$3$message(token, this, B._withArgumentsExpectedIdentifier(identifier));
        else {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          if (!identifier.get$isKeywordOrIdentifier())
            identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
        }
        return identifier;
      }
    },
    TypeReferenceIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var next, t1;
        next = token.next;
        if (R.isValidTypeReference(next))
          return next;
        else if (next.get$isKeywordOrIdentifier()) {
          t1 = next.type;
          if ("void" === t1.stringValue)
            parser.reportRecoverableError$2(next, C.MessageCode_ww8);
          else if (t1.get$isBuiltIn()) {
            if (!this.isBuiltInIdentifierAllowed)
              parser.reportRecoverableErrorWithToken$2(next, C.Template_h0f);
          } else
            parser.reportRecoverableErrorWithToken$2(next, C.Template_0zQ);
          return next;
        }
        parser.reportRecoverableErrorWithToken$2(next, C.Template_0zQ);
        if (!M.isOneOfOrEof(next, C.List_1qV))
          token = next;
        return parser.get$rewriter().insertSyntheticIdentifier$1(token);
      }
    },
    TypeVariableDeclarationIdentifierContext: {
      "^": "IdentifierContext;_identifier_context$_name,inDeclaration,inLibraryOrPartOfDeclaration,inSymbol,isContinuation,isScopeReference,isBuiltInIdentifierAllowed,allowedInConstantExpression,recoveryTemplate",
      ensureIdentifier$2: function(token, parser) {
        var identifier, t1, t2;
        identifier = token.next;
        t1 = identifier.type;
        if (t1.get$isPseudo())
          return identifier;
        if (!(t1.isTopLevelKeyword || M.isOneOfOrEof(identifier, C.List_Xul)))
          t2 = t1.isModifier || M.isOneOfOrEof(identifier, C.List_get_set_void) || D.looksLikeStatementStart(identifier) || M.isOneOfOrEof(identifier, C.List_mBP);
        else
          t2 = true;
        if (t2) {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          identifier = parser.get$rewriter().insertSyntheticIdentifier$1(token);
        } else if (t1.get$isBuiltIn())
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_yHq);
        else {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_YUp);
          if (!identifier.get$isKeywordOrIdentifier())
            identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
        }
        return identifier;
      }
    }
  }], ["fasta.parser.loop_state", "package:front_end/src/fasta/parser/loop_state.dart",, E, {
    "^": "",
    LoopState: {
      "^": "Object;index,_loop_state$_name",
      toString$0: function(_) {
        return this._loop_state$_name;
      }
    }
  }], ["fasta.parser.member_kind", "package:front_end/src/fasta/parser/member_kind.dart",, S, {
    "^": "",
    MemberKind: {
      "^": "Object;index,_member_kind$_name",
      toString$0: function(_) {
        return this._member_kind$_name;
      }
    }
  }], ["", "package:front_end/src/fasta/parser/modifier_context.dart",, X, {
    "^": "",
    isModifier: function(token) {
      var t1 = token.type;
      if (!t1.isModifier)
        return false;
      if (t1.get$isBuiltIn()) {
        t1 = token.next;
        if (t1.type.kind !== 107 && !t1.get$isIdentifier())
          return false;
      }
      return true;
    },
    ModifierRecoveryContext: {
      "^": "Object;parser,0abstractToken,0constToken,0covariantToken,0externalToken,0finalToken,0staticToken,0varFinalOrConst,0varToken,afterFactory",
      parseModifiers$6$covariantToken$externalToken$staticOrCovariant$staticToken$varFinalOrConst: function(token, covariantToken, externalToken, staticOrCovariant, staticToken, varFinalOrConst) {
        var t1, next, t2, value;
        if (externalToken != null)
          this.externalToken = externalToken;
        if (staticOrCovariant != null) {
          t1 = staticOrCovariant.type.stringValue;
          if ("static" === t1)
            this.staticToken = staticOrCovariant;
          else if ("covariant" === t1)
            this.covariantToken = staticOrCovariant;
          else
            throw H.wrapException("Internal error: Unexpected staticOrCovariant '" + staticOrCovariant.toString$0(0) + "'.");
        } else if (staticToken != null)
          this.staticToken = staticToken;
        else if (covariantToken != null)
          this.covariantToken = covariantToken;
        if (varFinalOrConst != null) {
          this.varFinalOrConst = varFinalOrConst;
          t1 = varFinalOrConst.type.stringValue;
          if ("var" === t1)
            this.varToken = varFinalOrConst;
          else if ("final" === t1)
            this.finalToken = varFinalOrConst;
          else if ("const" === t1)
            this.constToken = varFinalOrConst;
          else
            throw H.wrapException("Internal error: Unexpected varFinalOrConst '" + varFinalOrConst.toString$0(0) + "'.");
        }
        next = token.next;
        for (t1 = this.parser, t2 = [{func: 1, ret: B.Message, args: [L.Token]}]; true;) {
          value = next.type.stringValue;
          if (X.isModifier(next))
            if ("abstract" === value)
              token = this.parseAbstract$1(token);
            else if ("const" === value)
              token = this.parseConst$1(token);
            else if ("covariant" === value)
              token = this.parseCovariant$1(token);
            else if ("external" === value)
              token = this.parseExternal$1(token);
            else if ("final" === value)
              token = this.parseFinal$1(token);
            else if ("static" === value)
              token = this.parseStatic$1(token);
            else if ("var" === value)
              token = this.parseVar$1(token);
            else
              throw H.wrapException("Internal Error: Unhandled modifier: " + H.S(value));
          else {
            if (this.afterFactory && "factory" === value) {
              H.assertSubtype(C.Template_LYg, "$isTemplate", t2, "$asTemplate");
              if (!!next.$isErrorToken)
                t1.listener.handleRecoverableError$3(next.get$assertionMessage(), next, next);
              else {
                token = M.findNonZeroLengthToken(next);
                t1.listener.handleRecoverableError$3(C.Template_LYg.withArguments.call$1(token), token, token);
              }
            } else
              break;
            token = next;
          }
          next = token.next;
        }
        return token;
      },
      parseModifiers$3$covariantToken$varFinalOrConst: function(token, covariantToken, varFinalOrConst) {
        return this.parseModifiers$6$covariantToken$externalToken$staticOrCovariant$staticToken$varFinalOrConst(token, covariantToken, null, null, null, varFinalOrConst);
      },
      parseModifiers$2$varFinalOrConst: function(token, varFinalOrConst) {
        return this.parseModifiers$6$covariantToken$externalToken$staticOrCovariant$staticToken$varFinalOrConst(token, null, null, null, null, varFinalOrConst);
      },
      parseModifiers$3$externalToken$varFinalOrConst: function(token, externalToken, varFinalOrConst) {
        return this.parseModifiers$6$covariantToken$externalToken$staticOrCovariant$staticToken$varFinalOrConst(token, null, externalToken, null, null, varFinalOrConst);
      },
      parseModifiers$5$covariantToken$externalToken$staticToken$varFinalOrConst: function(token, covariantToken, externalToken, staticToken, varFinalOrConst) {
        return this.parseModifiers$6$covariantToken$externalToken$staticOrCovariant$staticToken$varFinalOrConst(token, covariantToken, externalToken, null, staticToken, varFinalOrConst);
      },
      parseModifiers$4$externalToken$staticOrCovariant$varFinalOrConst: function(token, externalToken, staticOrCovariant, varFinalOrConst) {
        return this.parseModifiers$6$covariantToken$externalToken$staticOrCovariant$staticToken$varFinalOrConst(token, null, externalToken, staticOrCovariant, null, varFinalOrConst);
      },
      parseAbstract$1: function(token) {
        var next = token.next;
        if (this.abstractToken == null) {
          this.abstractToken = next;
          return next;
        }
        this.parser.reportRecoverableErrorWithToken$2(next, C.Template_LYg);
        return next;
      },
      parseConst$1: function(token) {
        var next, t1;
        next = token.next;
        t1 = this.varFinalOrConst;
        if (t1 == null && this.covariantToken == null) {
          this.constToken = next;
          this.varFinalOrConst = next;
          if (this.afterFactory)
            this.parser.reportRecoverableError$2(next, C.MessageCode_2bC);
          return next;
        }
        if (this.constToken != null)
          this.parser.reportRecoverableErrorWithToken$2(next, C.Template_LYg);
        else if (this.covariantToken != null)
          this.parser.reportRecoverableError$2(next, C.MessageCode_IVQ);
        else if (this.finalToken != null)
          this.parser.reportRecoverableError$2(next, C.MessageCode_OVi);
        else if (this.varToken != null)
          this.parser.reportRecoverableError$2(next, C.MessageCode_0);
        else
          throw H.wrapException("Internal Error: Unexpected varFinalOrConst: " + H.S(t1));
        return next;
      },
      parseCovariant$1: function(token) {
        var next, t1;
        next = token.next;
        t1 = this.constToken == null;
        if (t1 && this.covariantToken == null && this.staticToken == null && !this.afterFactory) {
          this.covariantToken = next;
          if (this.varToken != null)
            this.parser.reportRecoverableError$2(next, C.MessageCode_bFE);
          else if (this.finalToken != null)
            this.parser.reportRecoverableError$2(next, C.MessageCode_glC);
          return next;
        }
        if (this.covariantToken != null)
          this.parser.reportRecoverableErrorWithToken$2(next, C.Template_LYg);
        else if (this.afterFactory)
          this.reportExtraneousModifier$1(next);
        else if (!t1)
          this.parser.reportRecoverableError$2(next, C.MessageCode_IVQ);
        else if (this.staticToken != null)
          this.parser.reportRecoverableError$2(next, C.MessageCode_ooG);
        else
          throw H.wrapException("Internal Error: Unhandled recovery: " + H.S(next));
        return next;
      },
      parseExternal$1: function(token) {
        var next = token.next;
        if (this.externalToken == null) {
          this.externalToken = next;
          if (this.afterFactory)
            this.parser.reportRecoverableError$2(next, C.MessageCode_2Zi);
          else if (this.constToken != null)
            this.parser.reportRecoverableError$2(next, C.MessageCode_Etw);
          else if (this.staticToken != null)
            this.parser.reportRecoverableError$2(next, C.MessageCode_RWS);
          return next;
        }
        this.parser.reportRecoverableErrorWithToken$2(next, C.Template_LYg);
        return next;
      },
      parseFinal$1: function(token) {
        var next, t1;
        next = token.next;
        t1 = this.varFinalOrConst;
        if (t1 == null && !this.afterFactory) {
          this.finalToken = next;
          this.varFinalOrConst = next;
          return next;
        }
        if (this.finalToken != null)
          this.parser.reportRecoverableErrorWithToken$2(next, C.Template_LYg);
        else if (this.afterFactory)
          this.reportExtraneousModifier$1(next);
        else if (this.constToken != null)
          this.parser.reportRecoverableError$2(next, C.MessageCode_OVi);
        else if (this.varToken != null)
          this.parser.reportRecoverableError$2(next, C.MessageCode_Igx);
        else
          throw H.wrapException("Internal Error: Unexpected varFinalOrConst: " + H.S(t1));
        return next;
      },
      parseStatic$1: function(token) {
        var next, t1;
        next = token.next;
        t1 = this.covariantToken == null;
        if (t1 && this.staticToken == null && !this.afterFactory) {
          this.staticToken = next;
          if (this.constToken != null)
            this.parser.reportRecoverableError$2(next, C.MessageCode_0CN);
          else if (this.finalToken != null)
            this.parser.reportRecoverableError$2(next, C.MessageCode_zDj);
          else if (this.varToken != null)
            this.parser.reportRecoverableError$2(next, C.MessageCode_c9P);
          return next;
        }
        if (!t1)
          this.parser.reportRecoverableError$2(next, C.MessageCode_ooG);
        else if (this.staticToken != null)
          this.parser.reportRecoverableErrorWithToken$2(next, C.Template_LYg);
        else if (this.afterFactory)
          this.reportExtraneousModifier$1(next);
        else
          throw H.wrapException("Internal Error: Unhandled recovery: " + H.S(next));
        return next;
      },
      parseVar$1: function(token) {
        var next, t1;
        next = token.next;
        t1 = this.varFinalOrConst;
        if (t1 == null && !this.afterFactory) {
          this.varToken = next;
          this.varFinalOrConst = next;
          return next;
        }
        if (this.varToken != null)
          this.parser.reportRecoverableErrorWithToken$2(next, C.Template_LYg);
        else if (this.afterFactory)
          this.reportExtraneousModifier$1(next);
        else if (this.constToken != null)
          this.parser.reportRecoverableError$2(next, C.MessageCode_0);
        else if (this.finalToken != null)
          this.parser.reportRecoverableError$2(next, C.MessageCode_Igx);
        else
          throw H.wrapException("Internal Error: Unexpected varFinalOrConst: " + H.S(t1));
        return next;
      },
      reportExtraneousModifier$1: function(token) {
        if (token != null)
          this.parser.reportRecoverableErrorWithToken$2(token, C.Template_hkZ);
      }
    }
  }], ["fasta.parser.parser", "package:front_end/src/fasta/parser/parser.dart",, A, {}], ["", "package:front_end/src/fasta/parser/recovery_listeners.dart",, R, {
    "^": "",
    ClassHeaderRecoveryListener: {
      "^": "ForwardingListener;0extendsKeyword,0implementsKeyword,0withKeyword,listener,forwardErrors",
      endMixinApplication$1: function(withKeyword) {
        this.withKeyword = withKeyword;
        this.super$ForwardingListener$endMixinApplication(withKeyword);
      },
      handleClassExtends$1: function(extendsKeyword) {
        this.extendsKeyword = extendsKeyword;
        this.super$ForwardingListener$handleClassExtends(extendsKeyword);
      },
      handleClassImplements$2: function(implementsKeyword, interfacesCount) {
        this.implementsKeyword = implementsKeyword;
        this.super$ForwardingListener$handleClassImplements(implementsKeyword, interfacesCount);
      }
    },
    ImportRecoveryListener: {
      "^": "ForwardingListener;0asKeyword,0deferredKeyword,0ifKeyword,hasCombinator,listener,forwardErrors",
      endConditionalUri$3: function(ifKeyword, leftParen, equalSign) {
        this.ifKeyword = ifKeyword;
        this.super$ForwardingListener$endConditionalUri(ifKeyword, leftParen, equalSign);
      },
      endHide$1: function(hideKeyword) {
        this.hasCombinator = true;
        this.super$ForwardingListener$endHide(hideKeyword);
      },
      endShow$1: function(showKeyword) {
        this.hasCombinator = true;
        this.super$ForwardingListener$endShow(showKeyword);
      },
      handleImportPrefix$2: function(deferredKeyword, asKeyword) {
        this.deferredKeyword = deferredKeyword;
        this.asKeyword = asKeyword;
        this.super$ForwardingListener$handleImportPrefix(deferredKeyword, asKeyword);
      }
    }
  }], ["", "package:front_end/src/fasta/parser/token_stream_rewriter.dart",, R, {
    "^": "",
    TokenStreamRewriter: {
      "^": "Object;",
      insertParens$2: function(token, includeIdentifier) {
        var offset, next, t1, next0;
        offset = token.next.offset;
        next = new L.SyntheticBeginToken(C.TokenType_5uk, offset, null);
        next._setCommentParent$1(null);
        if (includeIdentifier) {
          t1 = new L.SyntheticStringToken(0, C.TokenType_GbN, offset, null);
          t1._setCommentParent$1(null);
          $.$get$StringUtilities_INTERNER().toString;
          t1._value = "";
          next0 = next.setNext$1(t1);
        } else
          next0 = next;
        t1 = new L.SyntheticToken(C.TokenType_coy, offset, null);
        t1._setCommentParent$1(null);
        next0 = next0.setNext$1(t1);
        next.endToken = next0;
        next0.setNext$1(token.next);
        token.setNext$1(next);
        return next;
      },
      insertSyntheticIdentifier$1: function(token) {
        var t1 = new L.SyntheticStringToken(0, C.TokenType_GbN, token.next.offset, null);
        t1._setCommentParent$1(null);
        $.$get$StringUtilities_INTERNER().toString;
        t1._value = "";
        t1.setNext$1(token.next);
        token.setNext$1(t1);
        return t1;
      },
      insertTokenAfter$2: function(previousToken, insertedToken) {
        var afterToken = previousToken.next;
        previousToken.setNext$1(insertedToken);
        this._lastTokenInChain$1(insertedToken).setNext$1(afterToken);
        return previousToken;
      },
      moveSynthetic$2: function(token, endGroup) {
        var errorToken, t1, t2, next;
        errorToken = endGroup.next;
        errorToken = errorToken instanceof S.UnmatchedToken ? errorToken : null;
        t1 = endGroup.get$beforeSynthetic();
        t2 = errorToken == null;
        t1.setNext$1((t2 ? endGroup : errorToken).next);
        next = token.next;
        token.setNext$1(endGroup);
        (t2 ? endGroup : errorToken).setNext$1(next);
        endGroup.offset = next.offset;
        if (!t2)
          errorToken.offset = next.offset;
        return endGroup;
      },
      replaceTokenFollowing$2: function(previousToken, replacementToken) {
        var replacedToken, t1;
        replacedToken = previousToken.next;
        previousToken.setNext$1(replacementToken);
        t1 = replacedToken._precedingComment;
        replacementToken._precedingComment = t1;
        replacementToken._setCommentParent$1(t1);
        this._lastTokenInChain$1(replacementToken).setNext$1(replacedToken.next);
        return replacementToken;
      },
      splitEndGroup$2: function(start, end) {
        var t1, t2, gt, next, token, next0;
        if (end == null)
          end = start.endToken;
        t1 = end.type.stringValue;
        if (">>" === t1) {
          t1 = end.offset;
          t2 = end._precedingComment;
          gt = new L.SimpleToken(C.TokenType_wOL, t1, t2);
          gt._setCommentParent$1(t2);
          t2 = new L.SimpleToken(C.TokenType_wOL, end.offset + 1, null);
          t2._setCommentParent$1(null);
          t2.setNext$1(end.next);
          gt.setNext$1(t2);
        } else if (">=" === t1) {
          t1 = end.offset;
          t2 = end._precedingComment;
          gt = new L.SimpleToken(C.TokenType_wOL, t1, t2);
          gt._setCommentParent$1(t2);
          t2 = new L.SimpleToken(C.TokenType_tca, end.offset + 1, null);
          t2._setCommentParent$1(null);
          t2.setNext$1(end.next);
          gt.setNext$1(t2);
        } else if (">>=" === t1) {
          t1 = end.offset;
          t2 = end._precedingComment;
          gt = new L.SimpleToken(C.TokenType_wOL, t1, t2);
          gt._setCommentParent$1(t2);
          t2 = new L.SimpleToken(C.TokenType_wOL, end.offset + 1, null);
          t2._setCommentParent$1(null);
          t1 = new L.SimpleToken(C.TokenType_tca, end.offset + 2, null);
          t1._setCommentParent$1(null);
          t1.setNext$1(end.next);
          t2.setNext$1(t1);
          gt.setNext$1(t2);
        } else {
          gt = new L.SyntheticToken(C.TokenType_wOL, end.offset, null);
          gt._setCommentParent$1(null);
          gt.setNext$1(end);
        }
        next = start.next;
        for (token = start; next == null ? end != null : next !== end; token = next, next = next0)
          next0 = next.next;
        token.setNext$1(gt);
        if (start.endToken != null)
          start.endToken = gt.next;
        else
          start.endToken = gt;
        return gt;
      },
      splitEndGroup$1: function(start) {
        return this.splitEndGroup$2(start, null);
      },
      _lastTokenInChain$1: function(firstToken) {
        var current, previous, current0;
        current = firstToken;
        previous = null;
        while (true) {
          current0 = current.next;
          if (!(current0 != null && current0.type !== C.TokenType_Emx))
            break;
          if (previous != null)
            current.previous = previous;
          previous = current;
          current = current0;
        }
        if (previous != null)
          current.previous = previous;
        return current;
      }
    }
  }], ["fasta.parser.type_info", "package:front_end/src/fasta/parser/type_info.dart",, R, {
    "^": "",
    isGeneralizedFunctionType: function(token) {
      var t1;
      if ("Function" === token.type.stringValue) {
        t1 = token.next.type.stringValue;
        t1 = "<" === t1 || "(" === t1;
      } else
        t1 = false;
      return t1;
    },
    isValidTypeReference: function(token) {
      var t1, kind, value;
      t1 = token.type;
      kind = t1.kind;
      if (97 === kind)
        return true;
      if (107 === kind) {
        value = t1.lexeme;
        if (!t1.get$isPseudo())
          t1 = t1.get$isBuiltIn() && "." === token.next.type.stringValue || value === "dynamic" || value === "void";
        else
          t1 = true;
        return t1;
      }
      return false;
    },
    computeType: function(token, required, inDeclaration, innerEndGroup) {
      var next, t1, typeParamOrArg, value;
      next = token.next;
      if (!R.isValidTypeReference(next)) {
        t1 = next.type;
        if (t1.get$isBuiltIn()) {
          typeParamOrArg = R.computeTypeParamOrArg(next, inDeclaration, innerEndGroup);
          if (typeParamOrArg !== C.C_NoTypeParamOrArg) {
            if (required || O.looksLikeName(typeParamOrArg.skip$1(0, next).next))
              return new O.ComplexTypeInfo(token.next, typeParamOrArg, C.C_Link).computeBuiltinAsType$1(required);
          } else if (required || R.isGeneralizedFunctionType(next.next)) {
            value = t1.stringValue;
            if ("get" !== value)
              if ("set" !== value)
                if ("factory" !== value)
                  if ("operator" !== value)
                    t1 = !("typedef" === value && next.next.get$isIdentifier());
                  else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
            if (t1)
              return new O.ComplexTypeInfo(token.next, typeParamOrArg, C.C_Link).computeBuiltinAsType$1(required);
          }
        } else if (required && "." === t1.stringValue) {
          t1 = R.computeTypeParamOrArg(next, inDeclaration, innerEndGroup);
          return new O.ComplexTypeInfo(token.next, t1, C.C_Link).computePrefixedType$1(required);
        }
        return C.C_NoType;
      }
      if ("void" === next.type.stringValue) {
        if (R.isGeneralizedFunctionType(next.next))
          return new O.ComplexTypeInfo(token.next, C.C_NoTypeParamOrArg, C.C_Link).computeVoidGFT$1(required);
        return C.C_VoidType;
      }
      if (R.isGeneralizedFunctionType(next))
        return new O.ComplexTypeInfo(token.next, C.C_NoTypeParamOrArg, C.C_Link).computeNoTypeGFT$1(required);
      typeParamOrArg = R.computeTypeParamOrArg(next, inDeclaration, innerEndGroup);
      if (typeParamOrArg !== C.C_NoTypeParamOrArg) {
        if (typeParamOrArg === C.C_SimpleTypeArgument1) {
          next = typeParamOrArg.skip$1(0, next).next;
          if (!R.isGeneralizedFunctionType(next))
            if (required || O.looksLikeName(next))
              return C.C_SimpleTypeWith1Argument;
            else
              return C.C_NoType;
        }
        return new O.ComplexTypeInfo(token.next, typeParamOrArg, C.C_Link).computeSimpleWithTypeArguments$1(required);
      }
      next = next.next;
      if ("." === next.type.stringValue) {
        next = next.next;
        if (R.isValidTypeReference(next)) {
          typeParamOrArg = R.computeTypeParamOrArg(next, inDeclaration, innerEndGroup);
          next = next.next;
          if (typeParamOrArg === C.C_NoTypeParamOrArg && !R.isGeneralizedFunctionType(next))
            if (required || O.looksLikeName(next))
              return C.C_PrefixedType;
            else
              return C.C_NoType;
          return new O.ComplexTypeInfo(token.next, typeParamOrArg, C.C_Link).computePrefixedType$1(required);
        }
        if (required) {
          typeParamOrArg = R.computeTypeParamOrArg(token.next.next, inDeclaration, innerEndGroup);
          return new O.ComplexTypeInfo(token.next, typeParamOrArg, C.C_Link).computePrefixedType$1(true);
        }
        return C.C_NoType;
      }
      if (R.isGeneralizedFunctionType(next))
        return new O.ComplexTypeInfo(token.next, C.C_NoTypeParamOrArg, C.C_Link).computeIdentifierGFT$1(required);
      if (required || O.looksLikeName(next))
        return C.C_SimpleType;
      return C.C_NoType;
    },
    computeTypeParamOrArg: function(token, inDeclaration, innerEndGroup) {
      var next, endGroup, identifier, t1;
      H.interceptedTypeCheck(token, "$isToken");
      next = token.next;
      if ("<" !== next.type.stringValue)
        return C.C_NoTypeParamOrArg;
      endGroup = next.get$endGroup();
      if (endGroup == null)
        endGroup = innerEndGroup;
      if (endGroup == null) {
        if (inDeclaration)
          return new O.ComplexTypeParamOrArgInfo(H.interceptedTypeCheck(token.next, "$isBeginToken"), true).compute$1(innerEndGroup);
        return C.C_NoTypeParamOrArg;
      }
      identifier = next.next;
      t1 = identifier.type;
      if ((t1.kind === 97 || t1.get$isPseudo()) && identifier.next === endGroup)
        return C.C_SimpleTypeArgument1;
      return new O.ComplexTypeParamOrArgInfo(H.interceptedTypeCheck(token.next, "$isBeginToken"), inDeclaration).compute$1(innerEndGroup);
    },
    computeMethodTypeArguments: function(token) {
      var typeArg = R.computeTypeParamOrArg(token, false, null);
      return "(" === typeArg.skip$1(0, token).next.type.stringValue ? typeArg : C.C_NoTypeParamOrArg;
    },
    TypeInfo: {
      "^": "Object;"
    }
  }], ["fasta.parser.type_info_impl", "package:front_end/src/fasta/parser/type_info_impl.dart",, O, {
    "^": "",
    looksLikeName: function(token) {
      var t1 = token.type;
      if (t1.kind !== 97) {
        t1 = t1.stringValue;
        if ("this" !== t1)
          if (token.get$isIdentifier())
            t1 = "typedef" !== t1 || !token.next.get$isIdentifier();
          else
            t1 = false;
        else
          t1 = true;
      } else
        t1 = true;
      return t1;
    },
    looksLikeTypeParamOrArg: function(inDeclaration, token) {
      var next;
      if (inDeclaration && token.type.kind === 97) {
        next = token.next;
        if (next.type.kind === 97 || M.isOneOf(next, C.List_ERv))
          return true;
      }
      return false;
    },
    processBeginGroup: function(start, parser) {
      var t1 = start.endToken;
      if (t1 != null && ">>" === t1.type.stringValue)
        return parser.get$rewriter().splitEndGroup$1(start);
      return;
    },
    processEndGroup: function(token, start, parser) {
      var next, t1, next0, t2;
      next = token.next;
      t1 = start.endToken;
      if (next == null ? t1 == null : next === t1)
        return next;
      else if (">" === next.type.stringValue && !next.get$isSynthetic()) {
        start.endToken = next;
        return next;
      }
      if (start.endToken != null) {
        parser.reportRecoverableErrorWithToken$2(next, C.Template_RkP);
        return start.endToken;
      } else if (M.isOneOf(next, C.List_9Is))
        return parser.get$rewriter().splitEndGroup$2(start, next);
      while (true) {
        if (!(next.get$isSynthetic() && next.type !== C.TokenType_Emx))
          break;
        next0 = next.next;
        token = next;
        next = next0;
      }
      parser.reportRecoverableError$2(next, B._withArgumentsExpectedButGot(">"));
      t1 = parser.get$rewriter();
      t2 = new L.SyntheticToken(C.TokenType_wOL, next.offset, null);
      t2._setCommentParent$1(null);
      t2 = t1.insertTokenAfter$2(token, t2).next;
      start.endToken = t2;
      return t2;
    },
    NoType: {
      "^": "Object;",
      get$couldBeExpression: function() {
        return false;
      },
      ensureTypeNotVoid$2: function(token, parser) {
        parser.reportRecoverableErrorWithToken$2(token.next, C.Template_0zQ);
        parser.get$rewriter().insertSyntheticIdentifier$1(token);
        return C.C_SimpleType.parseType$2(token, parser);
      },
      ensureTypeOrVoid$2: function(token, parser) {
        return this.ensureTypeNotVoid$2(token, parser);
      },
      parseType$2: function(token, parser) {
        parser.listener.handleNoType$1(token);
        return token;
      },
      skipType$1: function(token) {
        return token;
      },
      $isTypeInfo: 1
    },
    PrefixedType: {
      "^": "Object;",
      get$couldBeExpression: function() {
        return true;
      },
      ensureTypeNotVoid$2: function(token, parser) {
        return this.parseType$2(token, parser);
      },
      ensureTypeOrVoid$2: function(token, parser) {
        return this.parseType$2(token, parser);
      },
      parseType$2: function(token, parser) {
        var listener, token0, token1;
        token = token.next;
        listener = parser.listener;
        listener.handleIdentifier$2(token, C.TypeReferenceIdentifierContext_EGT);
        token0 = token.next;
        token1 = token0.next;
        listener.handleIdentifier$2(token1, C.TypeReferenceIdentifierContext_E6F);
        listener.handleQualified$1(token0);
        listener.handleNoTypeArguments$1(token1.next);
        listener.handleType$2(token, token1.next);
        return token1;
      },
      skipType$1: function(token) {
        return token.next.next.next;
      },
      $isTypeInfo: 1
    },
    SimpleTypeWith1Argument: {
      "^": "Object;",
      get$couldBeExpression: function() {
        return false;
      },
      ensureTypeNotVoid$2: function(token, parser) {
        return this.parseType$2(token, parser);
      },
      ensureTypeOrVoid$2: function(token, parser) {
        return this.parseType$2(token, parser);
      },
      parseType$2: function(token, parser) {
        var listener, token0;
        token = token.next;
        listener = parser.listener;
        listener.handleIdentifier$2(token, C.TypeReferenceIdentifierContext_OTL);
        token0 = C.C_SimpleTypeArgument1.parseArguments$2(token, parser);
        listener.handleType$2(token, token0.next);
        return token0;
      },
      skipType$1: function(token) {
        return C.C_SimpleTypeArgument1.skip$1(0, token.next);
      },
      $isTypeInfo: 1
    },
    SimpleType: {
      "^": "Object;",
      get$couldBeExpression: function() {
        return true;
      },
      ensureTypeNotVoid$2: function(token, parser) {
        return this.parseType$2(token, parser);
      },
      ensureTypeOrVoid$2: function(token, parser) {
        return this.parseType$2(token, parser);
      },
      parseType$2: function(token, parser) {
        var listener;
        token = token.next;
        listener = parser.listener;
        listener.handleIdentifier$2(token, C.TypeReferenceIdentifierContext_OTL);
        parser.listener.handleNoTypeArguments$1(token.next);
        listener.handleType$2(token, token.next);
        return token;
      },
      skipType$1: function(token) {
        return token.next;
      },
      $isTypeInfo: 1
    },
    VoidType: {
      "^": "Object;",
      get$couldBeExpression: function() {
        return false;
      },
      ensureTypeNotVoid$2: function(token, parser) {
        parser.reportRecoverableError$2(token.next, C.MessageCode_ww8);
        return C.C_SimpleType.parseType$2(token, parser);
      },
      ensureTypeOrVoid$2: function(token, parser) {
        token = token.next;
        parser.listener.handleVoidKeyword$1(token);
        return token;
      },
      parseType$2: function(token, parser) {
        token = token.next;
        parser.listener.handleVoidKeyword$1(token);
        return token;
      },
      skipType$1: function(token) {
        return token.next;
      },
      $isTypeInfo: 1
    },
    ComplexTypeInfo: {
      "^": "Object;start,typeArguments,0end,typeVariableStarters,0gftHasReturnType",
      get$couldBeExpression: function() {
        return false;
      },
      ensureTypeNotVoid$2: function(token, parser) {
        return this.parseType$2(token, parser);
      },
      ensureTypeOrVoid$2: function(token, parser) {
        return this.parseType$2(token, parser);
      },
      parseType$2: function(token, parser) {
        var t, typeRefOrPrefix, t1, t2, token0;
        if ("." === this.start.type.stringValue)
          this.start = parser.insertSyntheticIdentifier$2(token, C.TypeReferenceIdentifierContext_EGT);
        for (t = this.typeVariableStarters; t.get$isNotEmpty(t); t = t.get$tail()) {
          R.computeTypeParamOrArg(t.get$head(t), true, null).parseVariables$2(t.get$head(t), parser);
          parser.listener.beginFunctionType$1(this.start);
        }
        if (this.gftHasReturnType === false)
          parser.listener.handleNoType$1(token);
        else {
          typeRefOrPrefix = token.next;
          t1 = typeRefOrPrefix.type.stringValue;
          if ("void" === t1) {
            parser.listener.handleVoidKeyword$1(typeRefOrPrefix);
            token = typeRefOrPrefix;
          } else {
            if ("." !== t1 && "." !== typeRefOrPrefix.next.type.stringValue)
              token = parser.ensureIdentifier$2(token, C.TypeReferenceIdentifierContext_OTL);
            else {
              token = parser.parseQualifiedRest$2(parser.ensureIdentifier$2(token, C.TypeReferenceIdentifierContext_EGT), C.TypeReferenceIdentifierContext_E6F);
              if (token.get$isSynthetic()) {
                t1 = this.end;
                t2 = typeRefOrPrefix.next;
                t2 = t1 == null ? t2 == null : t1 === t2;
                t1 = t2;
              } else
                t1 = false;
              if (t1)
                this.end = token;
            }
            token = this.typeArguments.parseArguments$2(token, parser);
            parser.listener.handleType$2(typeRefOrPrefix, token.next);
          }
        }
        for (t = this.typeVariableStarters; t.get$isNotEmpty(t); t = t.get$tail(), token = token0) {
          token = token.next;
          t1 = token.next;
          token0 = parser.parseFormalParametersRequiredOpt$2("<" === t1.type.stringValue ? t1.get$endGroup() : token, C.MemberKind_4);
          parser.listener.endFunctionType$2(token, token0.next);
        }
        this.end = token;
        return token;
      },
      skipType$1: function(token) {
        return this.end;
      },
      computeNoTypeGFT$1: function(required) {
        this.computeRest$2(this.start, required);
        if (this.gftHasReturnType == null)
          return required ? C.C_SimpleType : C.C_NoType;
        return this;
      },
      computeVoidGFT$1: function(required) {
        this.computeRest$2(this.start.next, required);
        if (this.gftHasReturnType == null)
          return C.C_VoidType;
        return this;
      },
      computeIdentifierGFT$1: function(required) {
        this.computeRest$2(this.start.next, required);
        if (this.gftHasReturnType == null)
          return C.C_SimpleType;
        return this;
      },
      computeBuiltinAsType$1: function(required) {
        var t1 = this.typeArguments.skip$1(0, this.start);
        this.end = t1;
        this.computeRest$2(t1.next, required);
        return this;
      },
      computeSimpleWithTypeArguments$1: function(required) {
        var t1 = this.typeArguments.skip$1(0, this.start);
        this.end = t1;
        this.computeRest$2(t1.next, required);
        if (!required && !O.looksLikeName(this.end.next) && this.gftHasReturnType == null)
          return C.C_NoType;
        return this;
      },
      computePrefixedType$1: function(required) {
        var token, t1;
        token = this.start;
        if ("." !== token.type.stringValue)
          token = token.next;
        if (token.next.get$isKeywordOrIdentifier())
          token = token.next;
        t1 = this.typeArguments.skip$1(0, token);
        this.end = t1;
        this.computeRest$2(t1.next, required);
        if (!required && !O.looksLikeName(this.end.next) && this.gftHasReturnType == null)
          return C.C_NoType;
        return this;
      },
      computeRest$2: function(token, required) {
        var t1, token0, t2;
        for (t1 = !required; "Function" === token.type.stringValue;) {
          token0 = R.computeTypeParamOrArg(token, true, null).skip$1(0, token).next;
          if ("(" !== token0.type.stringValue)
            break;
          token0 = token0.get$endGroup();
          if (token0 == null)
            break;
          if (t1 && !token0.next.get$isIdentifier())
            break;
          if (this.gftHasReturnType == null) {
            t2 = this.start;
            this.gftHasReturnType = token == null ? t2 != null : token !== t2;
          }
          this.typeVariableStarters = this.typeVariableStarters.prepend$1(token);
          this.end = token0;
          token = token0.next;
        }
      },
      $isTypeInfo: 1
    },
    NoTypeParamOrArg: {
      "^": "Object;",
      parseArguments$2: function(token, parser) {
        parser.listener.handleNoTypeArguments$1(token.next);
        return token;
      },
      parseVariables$2: function(token, parser) {
        H.interceptedTypeCheck(token, "$isToken");
        parser.listener.handleNoTypeVariables$1(token.next);
        return token;
      },
      skip$1: function(_, token) {
        return token;
      }
    },
    SimpleTypeArgument1: {
      "^": "Object;",
      parseArguments$2: function(token, parser) {
        var token0;
        token = H.interceptedTypeCheck(token.next, "$isBeginToken");
        parser.listener.beginTypeArguments$1(token);
        token0 = O.processEndGroup(C.C_SimpleType.parseType$2(token, parser), token, parser);
        parser.listener.endTypeArguments$3(1, token, token0);
        return token0;
      },
      parseVariables$2: function(token, parser) {
        var listener, token0;
        token = H.interceptedTypeCheck(H.interceptedTypeCheck(token, "$isToken").next, "$isBeginToken");
        listener = parser.listener;
        listener.beginTypeVariables$1(token);
        token0 = token.next;
        listener.beginMetadataStar$1(token0);
        listener.endMetadataStar$1(0);
        listener.handleIdentifier$2(token0, C.TypeVariableDeclarationIdentifierContext_EoR);
        listener.beginTypeVariable$1(token0);
        listener.handleTypeVariablesDefined$2(token0, 1);
        listener.handleNoType$1(token0);
        token0 = O.processEndGroup(token0, token, parser);
        listener.endTypeVariable$3(token0, 0, null);
        listener.endTypeVariables$2(token, token0);
        return token0;
      },
      skip$1: function(_, token) {
        var t1, t2;
        token = token.next;
        t1 = token.get$endGroup();
        t1 = (t1 == null ? token.next.next : t1).type.stringValue;
        t2 = token.next;
        return ">" === t1 ? t2.next : t2;
      }
    },
    ComplexTypeParamOrArgInfo: {
      "^": "Object;start,inDeclaration,0end",
      compute$1: function(endGroup) {
        var next, innerEndGroup, t1, next0, token, typeInfo, t2, next1;
        next = this.start;
        innerEndGroup = next.endToken;
        innerEndGroup = innerEndGroup != null && ">>" === innerEndGroup.type.stringValue ? innerEndGroup : null;
        for (t1 = this.inDeclaration, next0 = next, token = null; true;) {
          typeInfo = R.computeType(next0, true, t1, innerEndGroup);
          if (typeInfo === C.C_NoType) {
            while (true) {
              t2 = typeInfo === C.C_NoType;
              if (!(t2 && "@" === next0.next.type.stringValue))
                break;
              next0 = M.skipMetadata(next0);
              typeInfo = R.computeType(next0, true, t1, innerEndGroup);
            }
            if (t2 && "," !== next0.next.type.stringValue) {
              next1 = next0.next;
              token = next0;
              next0 = next1;
              break;
            }
          }
          token = typeInfo.skipType$1(next0);
          next0 = token.next;
          t2 = next0.type.stringValue;
          if ("extends" === t2 || "super" === t2) {
            token = R.computeType(next0, true, t1, innerEndGroup).skipType$1(next0);
            next0 = token.next;
          }
          if ("," !== next0.type.stringValue)
            if (!O.looksLikeTypeParamOrArg(t1, next0))
              break;
        }
        t2 = next.endToken;
        if (next0 == null ? t2 == null : next0 === t2)
          this.end = next0;
        else if (next0 == null ? endGroup == null : next0 === endGroup)
          this.end = ">>" === next0.type.stringValue ? token : next0;
        else if (t1) {
          this.end = t2;
          if (t2 == null)
            this.end = token;
        } else
          return C.C_NoTypeParamOrArg;
        return this;
      },
      parseArguments$2: function(token, parser) {
        var next, innerEndGroup, t1, t2, next0, count, typeInfo, t3, token0, afterToken, lastReplacement;
        next = this.start;
        innerEndGroup = O.processBeginGroup(next, parser);
        parser.listener.beginTypeArguments$1(next);
        for (t1 = this.inDeclaration, t2 = [{func: 1, ret: B.Message, args: [L.Token]}], next0 = next, count = 0; true;) {
          typeInfo = R.computeType(next0, true, t1, innerEndGroup);
          if (typeInfo === C.C_NoType)
            while (true) {
              if (!(typeInfo === C.C_NoType && "@" === next0.next.type.stringValue))
                break;
              t3 = next0.next;
              H.assertSubtype(C.Template_RkP, "$isTemplate", t2, "$asTemplate");
              if (t3 instanceof S.ErrorToken)
                parser.listener.handleRecoverableError$3(t3.get$assertionMessage(), t3, t3);
              else {
                token = M.findNonZeroLengthToken(t3);
                parser.listener.handleRecoverableError$3(C.Template_RkP.withArguments.call$1(token), token, token);
              }
              next0 = M.skipMetadata(next0);
              typeInfo = R.computeType(next0, true, t1, innerEndGroup);
            }
          token = typeInfo.ensureTypeOrVoid$2(next0, parser);
          next0 = token.next;
          ++count;
          if ("," !== next0.type.stringValue) {
            if (!O.looksLikeTypeParamOrArg(t1, next0))
              break;
            t3 = H.interceptedTypeCheck(B._withArgumentsExpectedButGot(","), "$isMessage");
            if (next0 instanceof S.ErrorToken)
              parser.listener.handleRecoverableError$3(next0.get$assertionMessage(), next0, next0);
            else {
              token0 = M.findNonZeroLengthToken(next0);
              parser.listener.handleRecoverableError$3(t3, token0, token0);
            }
            t3 = parser.cachedRewriter;
            if (t3 == null) {
              t3 = new R.TokenStreamRewriter();
              parser.cachedRewriter = t3;
            }
            next0 = new L.SyntheticToken(C.TokenType_O55, next0.offset, null);
            next0._setCommentParent$1(null);
            afterToken = token.next;
            token.next = next0;
            next0.previous = token;
            next0.beforeSynthetic = token;
            lastReplacement = t3._lastTokenInChain$1(next0);
            lastReplacement.next = afterToken;
            afterToken.previous = lastReplacement;
            afterToken.set$beforeSynthetic(lastReplacement);
            next0 = token.next;
          }
        }
        t1 = O.processEndGroup(token, next, parser);
        this.end = t1;
        parser.listener.endTypeArguments$3(count, next, t1);
        return this.end;
      },
      parseVariables$2: function(token, parser) {
        var next, listener, innerEndGroup, t1, next0, count, typeStarts, superTypeInfos, identifier, t2, typeInfo, token0, afterToken, lastReplacement, token2, next2, next20, extendsOrSuper;
        H.interceptedTypeCheck(token, "$isToken");
        next = this.start;
        listener = parser.listener;
        listener.beginTypeVariables$1(next);
        innerEndGroup = O.processBeginGroup(next, parser);
        for (t1 = this.inDeclaration, next0 = next, count = 0, typeStarts = C.C_Link, superTypeInfos = C.C_Link0; true;) {
          token = parser.parseMetadataStar$1(next0);
          identifier = token.next;
          if (identifier.type.kind !== 97)
            identifier = C.TypeVariableDeclarationIdentifierContext_EoR.ensureIdentifier$2(token, parser);
          parser.listener.handleIdentifier$2(identifier, C.TypeVariableDeclarationIdentifierContext_EoR);
          listener.beginTypeVariable$1(identifier);
          typeStarts = typeStarts.prepend$1(identifier);
          next0 = identifier.next;
          t2 = next0.type.stringValue;
          if ("extends" === t2 || "super" === t2) {
            typeInfo = R.computeType(next0, true, t1, innerEndGroup);
            token = typeInfo.skipType$1(next0);
            next0 = token.next;
            superTypeInfos = superTypeInfos.prepend$1(typeInfo);
          } else {
            superTypeInfos = superTypeInfos.prepend$1(null);
            token = identifier;
          }
          ++count;
          if ("," !== next0.type.stringValue) {
            if (!O.looksLikeTypeParamOrArg(t1, next0))
              break;
            t2 = H.interceptedTypeCheck(B._withArgumentsExpectedButGot(","), "$isMessage");
            if (next0 instanceof S.ErrorToken)
              parser.listener.handleRecoverableError$3(next0.get$assertionMessage(), next0, next0);
            else {
              token0 = M.findNonZeroLengthToken(next0);
              parser.listener.handleRecoverableError$3(t2, token0, token0);
            }
            t2 = parser.cachedRewriter;
            if (t2 == null) {
              t2 = new R.TokenStreamRewriter();
              parser.cachedRewriter = t2;
            }
            next0 = new L.SyntheticToken(C.TokenType_O55, next0.offset, null);
            next0._setCommentParent$1(null);
            afterToken = token.next;
            token.next = next0;
            next0.previous = token;
            next0.beforeSynthetic = token;
            lastReplacement = t2._lastTokenInChain$1(next0);
            lastReplacement.next = afterToken;
            afterToken.previous = lastReplacement;
            afterToken.set$beforeSynthetic(lastReplacement);
            next0 = token.next;
          }
        }
        listener.handleTypeVariablesDefined$2(token, count);
        for (token = null; typeStarts.get$isNotEmpty(typeStarts);) {
          token2 = typeStarts.get$head(typeStarts);
          typeInfo = superTypeInfos.get$head(superTypeInfos);
          next2 = token2.next;
          if (typeInfo != null) {
            token2 = typeInfo.ensureTypeOrVoid$2(next2, parser);
            next20 = token2.next;
            extendsOrSuper = next2;
            next2 = next20;
          } else {
            listener.handleNoType$1(token2);
            extendsOrSuper = null;
          }
          if (token == null)
            token = token2;
          --count;
          listener.endTypeVariable$3(next2, count, extendsOrSuper);
          typeStarts = typeStarts.get$tail();
          superTypeInfos = superTypeInfos.get$tail();
        }
        t1 = O.processEndGroup(token, next, parser);
        this.end = t1;
        listener.endTypeVariables$2(next, t1);
        return this.end;
      },
      skip$1: function(_, token) {
        return this.end;
      }
    }
  }], ["fasta.parser.util", "package:front_end/src/fasta/parser/util.dart",, M, {
    "^": "",
    findPreviousNonZeroLengthToken: function(token) {
      var previous;
      while (true) {
        if (!(token.get$isSynthetic() && token.get$length(token) === 0))
          break;
        previous = token.get$beforeSynthetic();
        if (previous == null)
          break;
        token = previous;
      }
      return token;
    },
    findNonZeroLengthToken: function(token) {
      while (true) {
        if (!(token.get$isSynthetic() && token.get$length(token) === 0 && token.type !== C.TokenType_Emx))
          break;
        token = token.next;
      }
      return token;
    },
    isOneOf: function(token, values) {
      var t1, _i;
      H.assertSubtype(values, "$isIterable", [P.String], "$asIterable");
      for (t1 = values.length, _i = 0; _i < t1; ++_i)
        if (values[_i] === token.type.stringValue)
          return true;
      return false;
    },
    isOneOfOrEof: function(token, values) {
      var t1, _i;
      H.assertSubtype(values, "$isIterable", [P.String], "$asIterable");
      for (t1 = values.length, _i = 0; _i < t1; ++_i)
        if (values[_i] === token.type.stringValue)
          return true;
      return token.type === C.TokenType_Emx;
    },
    skipMetadata: function(token) {
      var next, next0, t1;
      token = token.next;
      next = token.next;
      if (next.get$isIdentifier()) {
        next0 = next.next;
        for (token = next, next = next0; t1 = next.type.stringValue, "." === t1;) {
          next0 = next.next;
          if (next0.get$isIdentifier()) {
            next = next0.next;
            token = next0;
          } else {
            token = next;
            next = next0;
          }
        }
        if ("(" === t1 && !next.get$endGroup().get$isSynthetic()) {
          token = next.get$endGroup();
          token.next;
        }
      }
      return token;
    }
  }], ["fasta.scanner", "package:front_end/src/fasta/scanner.dart",, G, {
    "^": "",
    scanString: function(source, includeComments, recover, scanGenericMethodComments, scanLazyAssignmentOperators) {
      var t1, t2, t3, scanner, tokens, bytes;
      t1 = source.length;
      t1 = t1 === 0 || C.JSString_methods.codeUnitAt$1(source, t1 - 1) !== 0 ? source + "\x00" : source;
      t2 = L.Token_Token$eof(-1, null);
      t3 = new U.LineStarts(0);
      t3.array = new Uint16Array(14);
      t3.add$1(0, 0);
      scanner = new T.StringScanner(t1, -1, false, C.C_Link1, includeComments, false, -1, t2, t3);
      scanner.tail = t2;
      tokens = scanner.tokenize$0();
      if (scanner.hasErrors) {
        bytes = C.Utf8Codec_false.get$encoder().convert$1(source);
        tokens = U.recover__defaultRecoveryStrategy$closure().call$3(bytes, tokens, t3);
      }
      return new G.ScannerResult(tokens, t3, scanner.hasErrors);
    },
    ScannerResult: {
      "^": "Object;tokens,lineStarts,hasErrors"
    }
  }], ["fasta.scanner.abstract_scanner", "package:front_end/src/fasta/scanner/abstract_scanner.dart",, U, {
    "^": "",
    AbstractScanner: {
      "^": "Object;0tail<",
      beginToken$0: [function() {
        this.tokenStart = this.scanOffset;
      }, "call$0", "get$beginToken", 0, 0, 1],
      tokenize$0: function() {
        var t1, t2, t3, next;
        for (t1 = this.string, t2 = t1.length - 1; t3 = this.scanOffset, t3 < t2;) {
          ++t3;
          this.scanOffset = t3;
          next = C.JSString_methods.codeUnitAt$1(t1, t3);
          for (; next !== 0;)
            next = this.bigSwitch$1(next);
          if (this.scanOffset >= t2)
            this.appendEofToken$0();
          else {
            t3 = S.buildUnexpectedCharacterToken(0, this.tokenStart);
            this.hasErrors = true;
            this.appendToken$1(t3);
            this.advanceAfterError$1(true);
          }
        }
        this.lineStarts.add$1(0, t3 + 1);
        return this.tokens.next;
      },
      bigSwitch$1: function(next) {
        var t1, nextLower, t2;
        t1 = this.scanOffset;
        this.tokenStart = t1;
        if (next === 32 || next === 9 || next === 10 || next === 13) {
          if (next === 10)
            this.lineStarts.add$1(0, t1 + 1);
          next = this.advance$0();
          for (t1 = this.string; next === 32;)
            next = C.JSString_methods.codeUnitAt$1(t1, ++this.scanOffset);
          return next;
        }
        if (typeof next !== "number")
          return next.$or();
        nextLower = (next | 32) >>> 0;
        if (97 <= nextLower && nextLower <= 122) {
          if (114 === next)
            return this.tokenizeRawStringKeywordOrIdentifier$1(next);
          return this.tokenizeKeywordOrIdentifier$2(next, true);
        }
        if (next === 41)
          return this.appendEndGroup$2(C.TokenType_coy, 40);
        if (next === 40) {
          this.appendBeginGroup$1(C.TokenType_5uk);
          return this.advance$0();
        }
        if (next === 59) {
          t2 = this.comments;
          t1 = new L.SimpleToken(C.TokenType_FmR, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          this.discardOpenLt$0();
          return this.advance$0();
        }
        if (next === 46)
          return this.tokenizeDotsOrNumber$1(next);
        if (next === 44) {
          t2 = this.comments;
          t1 = new L.SimpleToken(C.TokenType_O55, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          return this.advance$0();
        }
        if (next === 61)
          return this.tokenizeEquals$1(next);
        if (next === 125)
          return this.appendEndGroup$2(C.TokenType_2ty, 123);
        if (next === 47)
          return this.tokenizeSlashOrComment$1(next);
        if (next === 123) {
          this.appendBeginGroup$1(C.TokenType_cOk);
          return this.advance$0();
        }
        if (next === 34 || next === 39)
          return this.tokenizeString$3(next, t1, false);
        if (next === 95)
          return this.tokenizeKeywordOrIdentifier$2(next, true);
        if (next === 58) {
          t2 = this.comments;
          t1 = new L.SimpleToken(C.TokenType_gg4, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          return this.advance$0();
        }
        if (next === 60)
          return this.tokenizeLessThan$1(next);
        if (next === 62)
          return this.tokenizeGreaterThan$1(next);
        if (next === 33)
          return this.tokenizeExclamation$1(next);
        if (next === 91)
          return this.tokenizeOpenSquareBracket$1(next);
        if (next === 93)
          return this.appendEndGroup$2(C.TokenType_zra, 91);
        if (next === 64) {
          t2 = this.comments;
          t1 = new L.SimpleToken(C.TokenType_yzz, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          return this.advance$0();
        }
        if (next >= 49 && next <= 57)
          return this.tokenizeNumber$1(next);
        if (next === 38)
          return this.tokenizeAmpersand$1(next);
        if (next === 48)
          return this.tokenizeHexOrNumber$1(next);
        if (next === 63)
          return this.tokenizeQuestion$1(next);
        if (next === 124)
          return this.tokenizeBar$1(next);
        if (next === 43)
          return this.tokenizePlus$1(next);
        if (next === 36)
          return this.tokenizeKeywordOrIdentifier$2(next, true);
        if (next === 45)
          return this.tokenizeMinus$1(next);
        if (next === 42)
          return this.select$3(0, 61, C.TokenType_SfG, C.TokenType_CNR);
        if (next === 94)
          return this.select$3(0, 61, C.TokenType_2Hh, C.TokenType_SGC);
        if (next === 126)
          return this.tokenizeTilde$1(next);
        if (next === 37)
          return this.select$3(0, 61, C.TokenType_ao1, C.TokenType_k07);
        if (next === 96) {
          t2 = this.comments;
          t1 = new L.SimpleToken(C.TokenType_1KU, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          return this.advance$0();
        }
        if (next === 92) {
          t2 = this.comments;
          t1 = new L.SimpleToken(C.TokenType_IIj, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          return this.advance$0();
        }
        if (next === 35)
          return this.tokenizeTag$1(next);
        if (next < 31)
          return this.unexpected$1(next);
        return this.unexpected$1(next);
      },
      tokenizeTag$1: function(next) {
        var t1, asciiOnly, t2;
        t1 = this.scanOffset;
        if (t1 === 0)
          if (C.JSString_methods.codeUnitAt$1(this.string, t1 + 1) === 33) {
            asciiOnly = true;
            do {
              next = this.advance$0();
              if (next > 127)
                asciiOnly = false;
            } while (next !== 10 && next !== 13 && next !== 0);
            this.appendToken$1(this.createSubstringToken$4(C.TokenType_oZ3, t1, asciiOnly, 0));
            return next;
          }
        t1 = this.tokenStart;
        t2 = this.comments;
        t1 = new L.SimpleToken(C.TokenType_P5Z, t1, t2);
        t1._setCommentParent$1(t2);
        this.appendToken$1(t1);
        return this.advance$0();
      },
      tokenizeTilde$1: function(next) {
        var t1, t2;
        next = this.advance$0();
        if (next === 47)
          return this.select$3(0, 61, C.TokenType_QOM, C.TokenType_NQ8);
        else {
          t1 = this.tokenStart;
          t2 = this.comments;
          t1 = new L.SimpleToken(C.TokenType_ufh, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          return next;
        }
      },
      tokenizeOpenSquareBracket$1: function(next) {
        next = this.advance$0();
        if (next === 93)
          return this.select$3(0, 61, C.TokenType_cQv, C.TokenType_Qq8);
        this.appendBeginGroup$1(C.TokenType_AGi);
        return next;
      },
      tokenizeQuestion$1: function(next) {
        var t1, t2;
        next = this.advance$0();
        if (next === 63)
          return this.select$3(0, 61, C.TokenType_cI8, C.TokenType_lOW);
        else {
          t1 = this.tokenStart;
          t2 = this.comments;
          if (next === 46) {
            t1 = new L.SimpleToken(C.TokenType_ifb, t1, t2);
            t1._setCommentParent$1(t2);
            this.appendToken$1(t1);
            return this.advance$0();
          } else {
            t1 = new L.SimpleToken(C.TokenType_V43, t1, t2);
            t1._setCommentParent$1(t2);
            this.appendToken$1(t1);
            return next;
          }
        }
      },
      tokenizeBar$1: function(next) {
        var t1, t2;
        next = this.advance$0();
        if (next === 124) {
          next = this.advance$0();
          t1 = this.tokenStart;
          t2 = this.comments;
          t1 = new L.SimpleToken(C.TokenType_wDN, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          return next;
        } else {
          t1 = this.tokenStart;
          t2 = this.comments;
          if (next === 61) {
            t1 = new L.SimpleToken(C.TokenType_kqK, t1, t2);
            t1._setCommentParent$1(t2);
            this.appendToken$1(t1);
            return this.advance$0();
          } else {
            t1 = new L.SimpleToken(C.TokenType_ssu, t1, t2);
            t1._setCommentParent$1(t2);
            this.appendToken$1(t1);
            return next;
          }
        }
      },
      tokenizeAmpersand$1: function(next) {
        var t1, t2;
        next = this.advance$0();
        if (next === 38) {
          next = this.advance$0();
          t1 = this.tokenStart;
          t2 = this.comments;
          t1 = new L.SimpleToken(C.TokenType_eOk, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          return next;
        } else {
          t1 = this.tokenStart;
          t2 = this.comments;
          if (next === 61) {
            t1 = new L.SimpleToken(C.TokenType_HH1, t1, t2);
            t1._setCommentParent$1(t2);
            this.appendToken$1(t1);
            return this.advance$0();
          } else {
            t1 = new L.SimpleToken(C.TokenType_OxW, t1, t2);
            t1._setCommentParent$1(t2);
            this.appendToken$1(t1);
            return next;
          }
        }
      },
      tokenizeMinus$1: function(next) {
        var t1, t2;
        next = this.advance$0();
        if (next === 45) {
          t1 = this.tokenStart;
          t2 = this.comments;
          t1 = new L.SimpleToken(C.TokenType_jTn, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          return this.advance$0();
        } else {
          t1 = this.tokenStart;
          t2 = this.comments;
          if (next === 61) {
            t1 = new L.SimpleToken(C.TokenType_AO3, t1, t2);
            t1._setCommentParent$1(t2);
            this.appendToken$1(t1);
            return this.advance$0();
          } else {
            t1 = new L.SimpleToken(C.TokenType_M5Z, t1, t2);
            t1._setCommentParent$1(t2);
            this.appendToken$1(t1);
            return next;
          }
        }
      },
      tokenizePlus$1: function(next) {
        var t1, t2;
        next = this.advance$0();
        if (43 === next) {
          t1 = this.tokenStart;
          t2 = this.comments;
          t1 = new L.SimpleToken(C.TokenType_GNi, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          return this.advance$0();
        } else {
          t1 = this.tokenStart;
          t2 = this.comments;
          if (61 === next) {
            t1 = new L.SimpleToken(C.TokenType_qNW, t1, t2);
            t1._setCommentParent$1(t2);
            this.appendToken$1(t1);
            return this.advance$0();
          } else {
            t1 = new L.SimpleToken(C.TokenType_RzD, t1, t2);
            t1._setCommentParent$1(t2);
            this.appendToken$1(t1);
            return next;
          }
        }
      },
      tokenizeExclamation$1: function(next) {
        var t1, t2;
        next = this.advance$0();
        if (next === 61)
          return this.select$3(0, 61, C.TokenType_xgG, C.TokenType_Yb0);
        t1 = this.tokenStart;
        t2 = this.comments;
        t1 = new L.SimpleToken(C.TokenType_cYV, t1, t2);
        t1._setCommentParent$1(t2);
        this.appendToken$1(t1);
        return next;
      },
      tokenizeEquals$1: function(next) {
        var t1, t2;
        this.discardOpenLt$0();
        next = this.advance$0();
        if (next === 61)
          return this.select$3(0, 61, C.TokenType_sxw, C.TokenType_gg40);
        else if (next === 62) {
          t1 = this.tokenStart;
          t2 = this.comments;
          t1 = new L.SimpleToken(C.TokenType_ECn, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          return this.advance$0();
        }
        t1 = this.tokenStart;
        t2 = this.comments;
        t1 = new L.SimpleToken(C.TokenType_tca, t1, t2);
        t1._setCommentParent$1(t2);
        this.appendToken$1(t1);
        return next;
      },
      tokenizeGreaterThan$1: function(next) {
        var t1, t2;
        next = this.advance$0();
        if (61 === next) {
          t1 = this.tokenStart;
          t2 = this.comments;
          t1 = new L.SimpleToken(C.TokenType_0Ef, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          return this.advance$0();
        } else if (62 === next) {
          next = this.advance$0();
          if (61 === next) {
            t1 = this.tokenStart;
            t2 = this.comments;
            t1 = new L.SimpleToken(C.TokenType_DCV, t1, t2);
            t1._setCommentParent$1(t2);
            this.appendToken$1(t1);
            return this.advance$0();
          } else {
            this.appendGtGt$1(C.TokenType_4XV);
            return next;
          }
        } else {
          this.appendGt$1(C.TokenType_wOL);
          return next;
        }
      },
      tokenizeLessThan$1: function(next) {
        var t1, t2;
        next = this.advance$0();
        if (61 === next) {
          t1 = this.tokenStart;
          t2 = this.comments;
          t1 = new L.SimpleToken(C.TokenType_my0, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          return this.advance$0();
        } else if (60 === next)
          return this.select$3(0, 61, C.TokenType_3D9, C.TokenType_FgV);
        else {
          this.appendBeginGroup$1(C.TokenType_Drw);
          return next;
        }
      },
      tokenizeNumber$1: function(next) {
        var start, t1, t2, t3, nextnext, t4, $length;
        start = this.scanOffset;
        for (t1 = this.string, t2 = start; true;) {
          ++t2;
          this.scanOffset = t2;
          next = C.JSString_methods.codeUnitAt$1(t1, t2);
          if (48 <= next && next <= 57)
            continue;
          else if (next === 101 || next === 69)
            return this.tokenizeFractionPart$2(next, start);
          else {
            if (next === 46) {
              t3 = t2 + 1;
              nextnext = C.JSString_methods.codeUnitAt$1(t1, t3);
              if (48 <= nextnext && nextnext <= 57) {
                this.scanOffset = t3;
                return this.tokenizeFractionPart$2(nextnext, start);
              }
            }
            t3 = this.tokenStart;
            t4 = this.comments;
            t3 = new D.StringToken0(null, C.TokenType_Vyt, t3, t4);
            t3._setCommentParent$1(t4);
            $length = t2 - start;
            if ($length <= 4)
              t3.valueOrLazySubstring = D.StringToken_canonicalizedString(t1, start, t2, true);
            else
              t3.valueOrLazySubstring = D._LazySubstring__LazySubstring(t1, start, $length, true);
            this.appendToken$1(t3);
            return next;
          }
        }
      },
      tokenizeHexOrNumber$1: function(next) {
        var x = C.JSString_methods.codeUnitAt$1(this.string, this.scanOffset + 1);
        if (x === 120 || x === 88)
          return this.tokenizeHex$1(next);
        return this.tokenizeNumber$1(next);
      },
      tokenizeHex$1: function(next) {
        var start, t1, hasDigits, t2, t3, t4, $length;
        start = this.scanOffset;
        this.advance$0();
        for (t1 = this.string, hasDigits = false; true; hasDigits = true) {
          t2 = ++this.scanOffset;
          next = C.JSString_methods.codeUnitAt$1(t1, t2);
          if (!(48 <= next && next <= 57))
            if (!(65 <= next && next <= 70))
              t3 = 97 <= next && next <= 102;
            else
              t3 = true;
          else
            t3 = true;
          if (!t3) {
            if (!hasDigits) {
              t1 = new S.UnterminatedToken(C.MessageCode_XZn, t2, C.TokenType_uv8, this.tokenStart, null);
              t1._setCommentParent$1(null);
              this.hasErrors = true;
              this.appendToken$1(t1);
              this.advanceAfterError$1(false);
              return next;
            }
            t3 = this.tokenStart;
            t4 = this.comments;
            t3 = new D.StringToken0(null, C.TokenType_pCd, t3, t4);
            t3._setCommentParent$1(t4);
            $length = t2 - start;
            if ($length <= 4)
              t3.valueOrLazySubstring = D.StringToken_canonicalizedString(t1, start, t2, true);
            else
              t3.valueOrLazySubstring = D._LazySubstring__LazySubstring(t1, start, $length, true);
            this.appendToken$1(t3);
            return next;
          }
        }
      },
      tokenizeDotsOrNumber$1: function(next) {
        var start, t1, t2;
        start = this.scanOffset;
        next = this.advance$0();
        if (48 <= next && next <= 57)
          return this.tokenizeFractionPart$2(next, start);
        else if (46 === next)
          return this.select$3(0, 46, C.TokenType_j7J, C.TokenType_cv8);
        else {
          t1 = this.tokenStart;
          t2 = this.comments;
          t1 = new L.SimpleToken(C.TokenType_wCI, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          return next;
        }
      },
      tokenizeFractionPart$2: function(next, start) {
        var t1, done, hasDigit, t2, hasExponentDigits, source, t3;
        for (t1 = this.string, done = false, hasDigit = false; !done;) {
          if (!(48 <= next && next <= 57))
            if (101 === next || 69 === next) {
              t2 = ++this.scanOffset;
              next = C.JSString_methods.codeUnitAt$1(t1, t2);
              if (next === 43 || next === 45) {
                ++t2;
                this.scanOffset = t2;
                next = C.JSString_methods.codeUnitAt$1(t1, t2);
              }
              for (hasExponentDigits = false; true; hasExponentDigits = true) {
                if (!(48 <= next && next <= 57)) {
                  if (!hasExponentDigits) {
                    source = C.JSString_methods.substring$2(t1, start, t2);
                    t2 = source + "0";
                    t3 = new L.SyntheticStringToken(source.length, C.TokenType_q1z, this.tokenStart, null);
                    t3._setCommentParent$1(null);
                    $.$get$StringUtilities_INTERNER().toString;
                    t3._value = t2;
                    this.appendToken$1(t3);
                    t3 = this.tokenStart;
                    t3 = new S.UnterminatedToken(C.MessageCode_Ecu, this.scanOffset, C.TokenType_uv8, t3, null);
                    t3._setCommentParent$1(null);
                    this.hasErrors = true;
                    this.appendToken$1(t3);
                    return next;
                  }
                  break;
                }
                ++t2;
                this.scanOffset = t2;
                next = C.JSString_methods.codeUnitAt$1(t1, t2);
              }
              done = true;
              hasDigit = true;
              continue;
            } else {
              done = true;
              continue;
            }
          next = C.JSString_methods.codeUnitAt$1(t1, ++this.scanOffset);
          hasDigit = true;
        }
        if (!hasDigit) {
          this.appendToken$1(this.createSubstringToken$4(C.TokenType_Vyt, start, true, -1));
          if (46 === next)
            return this.select$3(0, 46, C.TokenType_j7J, C.TokenType_cv8);
          t1 = this.tokenStart;
          t2 = this.comments;
          t1 = new L.SimpleToken(C.TokenType_wCI, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          return next;
        }
        this.appendToken$1(this.createSubstringToken$4(C.TokenType_q1z, start, true, 0));
        return next;
      },
      tokenizeSlashOrComment$1: function(next) {
        var start, t1, t2;
        start = this.scanOffset;
        next = this.advance$0();
        if (42 === next)
          return this.tokenizeMultiLineComment$2(next, start);
        else if (47 === next)
          return this.tokenizeSingleLineComment$2(next, start);
        else {
          t1 = this.tokenStart;
          t2 = this.comments;
          if (61 === next) {
            t1 = new L.SimpleToken(C.TokenType_nD8, t1, t2);
            t1._setCommentParent$1(t2);
            this.appendToken$1(t1);
            return this.advance$0();
          } else {
            t1 = new L.SimpleToken(C.TokenType_sBE, t1, t2);
            t1._setCommentParent$1(t2);
            this.appendToken$1(t1);
            return next;
          }
        }
      },
      tokenizeSingleLineComment$2: function(next, start) {
        var t1, t2, t3, asciiOnly;
        t1 = this.string;
        t2 = this.scanOffset;
        t3 = C.JSString_methods.codeUnitAt$1(t1, t2 + 1);
        for (asciiOnly = true; true;) {
          ++t2;
          this.scanOffset = t2;
          next = C.JSString_methods.codeUnitAt$1(t1, t2);
          if (next > 127)
            asciiOnly = false;
          if (10 === next || 13 === next || 0 === next) {
            if (47 === t3)
              this.appendDartDoc$3(start, C.TokenType_WjT, asciiOnly);
            else
              this.appendComment$3(start, C.TokenType_WjT, asciiOnly);
            return next;
          }
        }
      },
      tokenizeMultiLineComment$2: function(next, start) {
        var t1, t2, unicodeStart, next0, asciiOnlyComment, asciiOnlyLines, nesting, t3;
        next = this.advance$0();
        t1 = this.string;
        t2 = this.lineStarts;
        unicodeStart = start;
        next0 = next;
        asciiOnlyComment = true;
        asciiOnlyLines = true;
        nesting = 1;
        while (true) {
          if (!true) {
            next = next0;
            break;
          }
          if (0 === next0) {
            t1 = this.tokenStart;
            t1 = new S.UnterminatedToken(C.MessageCode_wYn, this.scanOffset, C.TokenType_uv8, t1, null);
            t1._setCommentParent$1(null);
            this.hasErrors = true;
            this.appendToken$1(t1);
            this.advanceAfterError$1(true);
            next = next0;
            break;
          } else if (42 === next0) {
            t3 = ++this.scanOffset;
            next0 = C.JSString_methods.codeUnitAt$1(t1, t3);
            if (47 === next0) {
              --nesting;
              if (0 === nesting) {
                t2 = t3 + 1;
                this.scanOffset = t2;
                next0 = C.JSString_methods.codeUnitAt$1(t1, t2);
                if (42 === next)
                  this.appendDartDoc$3(start, C.TokenType_Uvq, asciiOnlyComment);
                else
                  this.appendComment$3(start, C.TokenType_Uvq, asciiOnlyComment);
                next = next0;
                break;
              } else {
                ++t3;
                this.scanOffset = t3;
                next0 = C.JSString_methods.codeUnitAt$1(t1, t3);
              }
            }
          } else if (47 === next0) {
            t3 = ++this.scanOffset;
            next0 = C.JSString_methods.codeUnitAt$1(t1, t3);
            if (42 === next0) {
              ++t3;
              this.scanOffset = t3;
              next0 = C.JSString_methods.codeUnitAt$1(t1, t3);
              ++nesting;
            }
          } else if (next0 === 10) {
            if (!asciiOnlyLines) {
              unicodeStart = this.scanOffset;
              asciiOnlyLines = true;
            }
            t2.add$1(0, this.scanOffset + 1);
            next0 = C.JSString_methods.codeUnitAt$1(t1, ++this.scanOffset);
          } else {
            if (next0 > 127) {
              asciiOnlyComment = false;
              asciiOnlyLines = false;
            }
            next0 = C.JSString_methods.codeUnitAt$1(t1, ++this.scanOffset);
          }
        }
        return next;
      },
      appendComment$3: function(start, type, asciiOnly) {
        var t1, t2, newComment;
        if (!this.includeComments)
          return;
        t1 = this.scanOffset;
        t2 = this.tokenStart;
        newComment = new D.CommentToken0(null, type, t2, null);
        newComment._setCommentParent$1(null);
        newComment.StringToken$fromSubstring$7$canonicalize$precedingComments(type, this.string, start, t1, t2, true, null);
        this._appendToCommentStream$1(newComment);
      },
      appendDartDoc$3: function(start, type, asciiOnly) {
        var t1, t2, newComment;
        if (!this.includeComments)
          return;
        t1 = this.scanOffset;
        t2 = this.tokenStart;
        newComment = new D.DartDocToken(H.setRuntimeTypeInfo([], [L.Token]), null, type, t2, null);
        newComment._setCommentParent$1(null);
        newComment.StringToken$fromSubstring$7$canonicalize$precedingComments(type, this.string, start, t1, t2, true, null);
        this._appendToCommentStream$1(newComment);
      },
      appendToken$1: function(token) {
        var t1 = this.tail;
        t1.next = token;
        token.previous = t1;
        this.tail = token;
        t1 = this.comments;
        if (t1 != null && t1 === token._precedingComment) {
          this.comments = null;
          this.commentsTail = null;
        }
      },
      _appendToCommentStream$1: function(newComment) {
        var t1;
        if (this.comments == null) {
          this.comments = newComment;
          this.commentsTail = newComment;
        } else {
          t1 = this.commentsTail;
          t1.next = newComment;
          newComment.previous = t1;
          this.commentsTail = newComment;
        }
      },
      tokenizeRawStringKeywordOrIdentifier$1: function(next) {
        var t1, nextnext;
        t1 = this.scanOffset;
        nextnext = C.JSString_methods.codeUnitAt$1(this.string, t1 + 1);
        if (nextnext === 34 || nextnext === 39)
          return this.tokenizeString$3(this.advance$0(), t1, true);
        return this.tokenizeKeywordOrIdentifier$2(next, true);
      },
      tokenizeKeywordOrIdentifier$2: function(next, allowDollar) {
        var state, start, t1, t2, t3;
        state = U.KeywordState_KEYWORD_STATE0();
        start = this.scanOffset;
        if (typeof next !== "number")
          return H.iae(next);
        if (65 <= next && next <= 90) {
          state = state.nextCapital$1(next);
          next = this.advance$0();
        } else if (97 <= next && next <= 122) {
          state = state.next$1(next);
          next = this.advance$0();
        }
        t1 = this.string;
        while (true) {
          t2 = state != null;
          if (!(t2 && 97 <= next && next <= 122))
            break;
          state = state.next$1(next);
          next = C.JSString_methods.codeUnitAt$1(t1, ++this.scanOffset);
        }
        if (!t2 || state.get$keyword() == null)
          return this.tokenizeIdentifier$3(next, start, allowDollar);
        if (!(65 <= next && next <= 90))
          t1 = 48 <= next && next <= 57 || next === 95 || next === 36;
        else
          t1 = true;
        if (t1)
          return this.tokenizeIdentifier$3(next, start, allowDollar);
        else {
          t1 = state.get$keyword();
          if (t1.lexeme === "this")
            this.discardOpenLt$0();
          t2 = this.tokenStart;
          t3 = this.comments;
          t2 = new L.KeywordToken(t1, t1, t2, t3);
          t2._setCommentParent$1(t3);
          this.appendToken$1(t2);
          return next;
        }
      },
      tokenizeIdentifier$3: function(next, start, allowDollar) {
        var t1, t2, t3, t4, $length;
        for (t1 = this.string; true;) {
          if (typeof next !== "number")
            return H.iae(next);
          if (!(97 <= next && next <= 122))
            if (!(65 <= next && next <= 90))
              if (!(48 <= next && next <= 57))
                if (next !== 95)
                  t2 = next === 36 && allowDollar;
                else
                  t2 = true;
              else
                t2 = true;
            else
              t2 = true;
          else
            t2 = true;
          if (t2)
            next = C.JSString_methods.codeUnitAt$1(t1, ++this.scanOffset);
          else {
            t2 = this.scanOffset;
            t3 = this.tokenStart;
            if (start === t2) {
              t1 = S.buildUnexpectedCharacterToken(next, t3);
              this.hasErrors = true;
              this.appendToken$1(t1);
              return this.advanceAfterError$1(true);
            } else {
              t4 = this.comments;
              t3 = new D.StringToken0(null, C.TokenType_GbN, t3, t4);
              t3._setCommentParent$1(t4);
              $length = t2 - start;
              if ($length <= 4)
                t3.valueOrLazySubstring = D.StringToken_canonicalizedString(t1, start, t2, true);
              else
                t3.valueOrLazySubstring = D._LazySubstring__LazySubstring(t1, start, $length, true);
              this.appendToken$1(t3);
            }
            break;
          }
        }
        return next;
      },
      tokenizeString$3: function(next, start, raw) {
        var next0 = this.advance$0();
        if (next === next0) {
          next0 = this.advance$0();
          if (next === next0)
            return this.tokenizeMultiLineString$3(next, start, raw);
          else {
            this.appendToken$1(this.createSubstringToken$4(C.TokenType_86y, start, true, 0));
            return next0;
          }
        }
        if (raw)
          return this.tokenizeSingleLineRawString$3(next0, next, start);
        else
          return this.tokenizeSingleLineString$3(next0, next, start);
      },
      tokenizeSingleLineString$3: function(next, quoteChar, start) {
        var t1, asciiOnly, t2;
        for (t1 = this.string, asciiOnly = true; next == null ? quoteChar != null : next !== quoteChar;) {
          if (next === 92)
            next = C.JSString_methods.codeUnitAt$1(t1, ++this.scanOffset);
          else if (next === 36) {
            next = this.tokenizeStringInterpolation$2(start, asciiOnly);
            start = this.scanOffset;
            asciiOnly = true;
            continue;
          }
          if (typeof next !== "number")
            return next.$le();
          if (next <= 13)
            t2 = next === 10 || next === 13 || next === 0;
          else
            t2 = false;
          if (t2) {
            this.unterminatedString$5$asciiOnly$isMultiLine$isRaw(quoteChar, start, asciiOnly, false, false);
            return next;
          }
          if (next > 127)
            asciiOnly = false;
          next = C.JSString_methods.codeUnitAt$1(t1, ++this.scanOffset);
        }
        next = this.advance$0();
        this.appendToken$1(this.createSubstringToken$4(C.TokenType_86y, start, asciiOnly, 0));
        return next;
      },
      tokenizeStringInterpolation$2: function(start, asciiOnly) {
        var next, t1, t2;
        this.appendToken$1(this.createSubstringToken$4(C.TokenType_86y, start, asciiOnly, 0));
        this.tokenStart = this.scanOffset;
        next = this.advance$0();
        if (next === 123)
          return this.tokenizeInterpolatedExpression$1(next);
        else {
          t1 = this.tokenStart;
          t2 = this.comments;
          t1 = new L.SimpleToken(C.TokenType_MvE, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          if (!(97 <= next && next <= 122))
            t1 = 65 <= next && next <= 90 || next === 95;
          else
            t1 = true;
          t2 = this.scanOffset;
          if (t1) {
            this.tokenStart = t2;
            next = this.tokenizeKeywordOrIdentifier$2(next, false);
          } else {
            this.tokenStart = t2;
            this.appendToken$1(this.createSyntheticSubstringToken$4(C.TokenType_GbN, t2, true, ""));
            this.unterminated$2$shouldAdvance(C.MessageCode_wCL, false);
          }
          this.tokenStart = this.scanOffset;
          return next;
        }
      },
      tokenizeInterpolatedExpression$1: function(next) {
        var t1;
        this.appendBeginGroup$1(C.TokenType_skV);
        this.tokenStart = this.scanOffset;
        next = this.advance$0();
        while (true) {
          t1 = next === 0;
          if (!(!t1 && next !== 2))
            break;
          next = this.bigSwitch$1(next);
        }
        if (t1) {
          this.tokenStart = this.scanOffset;
          this.discardInterpolation$0();
          return next;
        }
        next = this.advance$0();
        this.tokenStart = this.scanOffset;
        return next;
      },
      tokenizeSingleLineRawString$3: function(next, quoteChar, start) {
        var t1, asciiOnly, t2, t3, t4, $length;
        for (t1 = this.string, asciiOnly = true; next !== 0;) {
          if (next === quoteChar) {
            t2 = ++this.scanOffset;
            next = C.JSString_methods.codeUnitAt$1(t1, t2);
            t3 = this.tokenStart;
            t4 = this.comments;
            t3 = new D.StringToken0(null, C.TokenType_86y, t3, t4);
            t3._setCommentParent$1(t4);
            $length = t2 - start;
            if ($length <= 4)
              t3.valueOrLazySubstring = D.StringToken_canonicalizedString(t1, start, t2, true);
            else
              t3.valueOrLazySubstring = D._LazySubstring__LazySubstring(t1, start, $length, true);
            this.appendToken$1(t3);
            return next;
          } else if (next === 10 || next === 13) {
            this.unterminatedString$5$asciiOnly$isMultiLine$isRaw(quoteChar, start, asciiOnly, false, true);
            return next;
          } else if (next > 127)
            asciiOnly = false;
          next = C.JSString_methods.codeUnitAt$1(t1, ++this.scanOffset);
        }
        this.unterminatedString$5$asciiOnly$isMultiLine$isRaw(quoteChar, start, asciiOnly, false, true);
        return next;
      },
      tokenizeMultiLineRawString$2: function(quoteChar, start) {
        var next, t1, t2, unicodeStart, asciiOnlyString, asciiOnlyLine, t3, t4, $length;
        next = this.advance$0();
        $label0$0:
          for (t1 = this.string, t2 = this.lineStarts, unicodeStart = start, asciiOnlyString = true, asciiOnlyLine = true; next !== 0;) {
            for (; next !== quoteChar;) {
              if (next === 10) {
                if (!asciiOnlyLine) {
                  unicodeStart = this.scanOffset;
                  asciiOnlyLine = true;
                }
                t2.add$1(0, this.scanOffset + 1);
              } else if (next > 127) {
                asciiOnlyString = false;
                asciiOnlyLine = false;
              }
              next = C.JSString_methods.codeUnitAt$1(t1, ++this.scanOffset);
              if (next === 0)
                break $label0$0;
            }
            t3 = ++this.scanOffset;
            next = C.JSString_methods.codeUnitAt$1(t1, t3);
            if (next === quoteChar) {
              ++t3;
              this.scanOffset = t3;
              next = C.JSString_methods.codeUnitAt$1(t1, t3);
              if (next === quoteChar) {
                t2 = t3 + 1;
                this.scanOffset = t2;
                next = C.JSString_methods.codeUnitAt$1(t1, t2);
                t3 = this.tokenStart;
                t4 = this.comments;
                t3 = new D.StringToken0(null, C.TokenType_86y, t3, t4);
                t3._setCommentParent$1(t4);
                $length = t2 - start;
                if ($length <= 4)
                  t3.valueOrLazySubstring = D.StringToken_canonicalizedString(t1, start, t2, true);
                else
                  t3.valueOrLazySubstring = D._LazySubstring__LazySubstring(t1, start, $length, true);
                this.appendToken$1(t3);
                return next;
              }
            }
          }
        this.unterminatedString$5$asciiOnly$isMultiLine$isRaw(quoteChar, start, asciiOnlyLine, true, true);
        return next;
      },
      tokenizeMultiLineString$3: function(quoteChar, start, raw) {
        var next, t1, t2, unicodeStart, asciiOnlyString, asciiOnlyLine, t3, t4, $length;
        if (raw)
          return this.tokenizeMultiLineRawString$2(quoteChar, start);
        next = this.advance$0();
        for (t1 = this.string, t2 = this.lineStarts, unicodeStart = start, asciiOnlyString = true, asciiOnlyLine = true; next !== 0;) {
          if (next === 36) {
            next = this.tokenizeStringInterpolation$2(start, asciiOnlyString);
            start = this.scanOffset;
            unicodeStart = start;
            asciiOnlyString = true;
            asciiOnlyLine = true;
            continue;
          }
          if (next == null ? quoteChar == null : next === quoteChar) {
            t3 = ++this.scanOffset;
            next = C.JSString_methods.codeUnitAt$1(t1, t3);
            if (next === quoteChar) {
              ++t3;
              this.scanOffset = t3;
              next = C.JSString_methods.codeUnitAt$1(t1, t3);
              if (next === quoteChar) {
                t2 = t3 + 1;
                this.scanOffset = t2;
                next = C.JSString_methods.codeUnitAt$1(t1, t2);
                t3 = this.tokenStart;
                t4 = this.comments;
                t3 = new D.StringToken0(null, C.TokenType_86y, t3, t4);
                t3._setCommentParent$1(t4);
                $length = t2 - start;
                if ($length <= 4)
                  t3.valueOrLazySubstring = D.StringToken_canonicalizedString(t1, start, t2, true);
                else
                  t3.valueOrLazySubstring = D._LazySubstring__LazySubstring(t1, start, $length, true);
                this.appendToken$1(t3);
                return next;
              }
            }
            continue;
          }
          if (next === 92) {
            next = C.JSString_methods.codeUnitAt$1(t1, ++this.scanOffset);
            if (next === 0)
              break;
          }
          if (next === 10) {
            if (!asciiOnlyLine) {
              unicodeStart = this.scanOffset;
              asciiOnlyLine = true;
            }
            t2.add$1(0, this.scanOffset + 1);
          } else {
            if (typeof next !== "number")
              return next.$gt();
            if (next > 127) {
              asciiOnlyString = false;
              asciiOnlyLine = false;
            }
          }
          next = C.JSString_methods.codeUnitAt$1(t1, ++this.scanOffset);
        }
        this.unterminatedString$5$asciiOnly$isMultiLine$isRaw(quoteChar, start, asciiOnlyString, true, false);
        return next;
      },
      unexpected$1: function(character) {
        var t1 = S.buildUnexpectedCharacterToken(character, this.tokenStart);
        this.hasErrors = true;
        this.appendToken$1(t1);
        return this.advanceAfterError$1(true);
      },
      unterminated$2$shouldAdvance: function(message, shouldAdvance) {
        var t1 = this.tokenStart;
        t1 = new S.UnterminatedToken(message, this.scanOffset, C.TokenType_uv8, t1, null);
        t1._setCommentParent$1(null);
        this.hasErrors = true;
        this.appendToken$1(t1);
        return this.advanceAfterError$1(shouldAdvance);
      },
      unterminatedString$5$asciiOnly$isMultiLine$isRaw: function(quoteChar, start, asciiOnly, isMultiLine, isRaw) {
        var t1, suffix, prefix;
        t1 = [P.int];
        suffix = P.String_String$fromCharCodes(isMultiLine ? H.setRuntimeTypeInfo([quoteChar, quoteChar, quoteChar], t1) : H.setRuntimeTypeInfo([quoteChar], t1), 0, null);
        prefix = isRaw ? "r" + suffix : suffix;
        this.appendToken$1(this.createSyntheticSubstringToken$4(C.TokenType_86y, start, asciiOnly, suffix));
        t1 = this.tokenStart;
        t1 = new S.UnterminatedString(prefix, this.scanOffset, C.TokenType_uv8, t1, null);
        t1._setCommentParent$1(null);
        this.hasErrors = true;
        this.appendToken$1(t1);
      },
      advanceAfterError$1: function(shouldAdvance) {
        if (this.atEndOfFile$0())
          return 0;
        if (shouldAdvance)
          return this.advance$0();
        else
          return -1;
      }
    },
    LineStarts: {
      "^": "_LineStarts_Object_ListMixin;0array,arrayLength",
      get$length: function(_) {
        return this.arrayLength;
      },
      $index: function(_, index) {
        var t1 = this.array;
        if (index < 0 || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      set$length: function(_, newLength) {
        if (newLength > this.array.length)
          this.grow$1(newLength);
        this.arrayLength = newLength;
      },
      $indexSet: function(_, index, value) {
        var t1;
        H.intTypeCheck(index);
        H.intTypeCheck(value);
        if (typeof value !== "number")
          return value.$gt();
        if (value > 65535 && !J.getInterceptor(this.array).$isUint32List)
          this.switchToUint32$1(this.array.length);
        t1 = this.array;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        t1[index] = value;
      },
      add$1: function(_, value) {
        var t1, t2;
        H.intTypeCheck(value);
        if (this.arrayLength >= this.array.length)
          this.grow$1(0);
        if (typeof value !== "number")
          return value.$gt();
        if (value > 65535 && !J.getInterceptor(this.array).$isUint32List)
          this.switchToUint32$1(this.array.length);
        t1 = this.array;
        t2 = this.arrayLength++;
        if (t2 < 0 || t2 >= t1.length)
          return H.ioore(t1, t2);
        t1[t2] = value;
      },
      grow$1: function(newLengthMinimum) {
        var t1, newLength, newArray;
        t1 = this.array;
        newLength = t1.length * 2;
        if (newLength < newLengthMinimum)
          newLength = newLengthMinimum;
        if (!!J.getInterceptor(t1).$isUint16List) {
          newArray = new Uint16Array(newLength);
          C.NativeUint16List_methods.setRange$3(newArray, 0, this.arrayLength, this.array);
          this.array = newArray;
        } else
          this.switchToUint32$1(newLength);
      },
      switchToUint32$1: function(newLength) {
        var newArray = new Uint32Array(newLength);
        C.NativeUint32List_methods.setRange$3(newArray, 0, this.arrayLength, this.array);
        this.array = newArray;
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.int];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      }
    },
    _LineStarts_Object_ListMixin: {
      "^": "Object+ListMixin;"
    }
  }], ["fasta.scanner.array_based_scanner", "package:front_end/src/fasta/scanner/array_based_scanner.dart",, V, {
    "^": "",
    ArrayBasedScanner: {
      "^": "AbstractScanner;",
      select$3: function(_, choice, yes, no) {
        var next, t1, t2;
        next = this.advance$0();
        t1 = this.tokenStart;
        t2 = this.comments;
        if (next === choice) {
          t1 = new L.SimpleToken(yes, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          return this.advance$0();
        } else {
          t1 = new L.SimpleToken(no, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          return next;
        }
      },
      appendEofToken$0: function() {
        this.tokenStart = this.scanOffset;
        this.discardOpenLt$0();
        for (; t1 = this.groupingStack, !t1.get$isEmpty(t1);) {
          var t1 = this.groupingStack;
          this.unmatchedBeginGroup$1(t1.get$head(t1));
          this.groupingStack = this.groupingStack.get$tail();
        }
        this.appendToken$1(L.Token_Token$eof(this.tokenStart, this.comments));
      },
      appendBeginGroup$1: function(type) {
        var t1, t2, token;
        t1 = this.tokenStart;
        t2 = this.comments;
        token = new L.BeginToken(type, t1, t2);
        token._setCommentParent$1(t2);
        this.appendToken$1(token);
        t1 = type.kind;
        if (t1 !== 60 && t1 !== 40)
          this.discardOpenLt$0();
        this.groupingStack = this.groupingStack.prepend$1(token);
      },
      appendEndGroup$2: function(type, openKind) {
        var t1, t2, $close, begin;
        if (!this.discardBeginGroupUntil$1(openKind)) {
          t1 = this.tokenStart;
          t2 = this.comments;
          t1 = new L.SimpleToken(type, t1, t2);
          t1._setCommentParent$1(t2);
          this.appendToken$1(t1);
          return this.advance$0();
        }
        t1 = this.tokenStart;
        t2 = this.comments;
        t1 = new L.SimpleToken(type, t1, t2);
        t1._setCommentParent$1(t2);
        this.appendToken$1(t1);
        $close = this.tail;
        t1 = this.groupingStack;
        begin = t1.get$head(t1);
        if (begin.type.kind !== openKind) {
          begin.endToken = $close;
          this.groupingStack = this.groupingStack.get$tail();
          return 2;
        }
        begin.endToken = $close;
        this.groupingStack = this.groupingStack.get$tail();
        return this.advance$0();
      },
      discardBeginGroupUntil$1: function(openKind) {
        var originalStack, t1, first, t2;
        originalStack = this.groupingStack;
        t1 = openKind === 123;
        first = true;
        do {
          this.discardOpenLt$0();
          t2 = this.groupingStack;
          if (t2.get$isEmpty(t2))
            break;
          t2 = this.groupingStack;
          t2 = t2.get$head(t2).type.kind;
          if (openKind !== t2)
            t2 = t1 && t2 === 128;
          else
            t2 = true;
          if (t2) {
            if (first)
              return true;
            break;
          }
          t2 = this.groupingStack.get$tail();
          this.groupingStack = t2;
          if (!t2.get$isEmpty(t2)) {
            first = false;
            continue;
          } else
            break;
        } while (true);
        t1 = this.groupingStack;
        if (t1.get$isEmpty(t1)) {
          this.groupingStack = originalStack;
          return false;
        }
        for (; t1 = this.groupingStack, originalStack == null ? t1 != null : originalStack !== t1;) {
          t1 = t1.get$head(t1);
          if (t1.get$kind(t1) !== 60)
            this.unmatchedBeginGroup$1(originalStack.get$head(originalStack));
          originalStack = originalStack.get$tail();
        }
        return true;
      },
      appendGt$1: function(type) {
        var t1, t2;
        t1 = this.tokenStart;
        t2 = this.comments;
        t1 = new L.SimpleToken(type, t1, t2);
        t1._setCommentParent$1(t2);
        this.appendToken$1(t1);
        t1 = this.groupingStack;
        if (t1.get$isEmpty(t1))
          return;
        t1 = this.groupingStack;
        t1 = t1.get$head(t1);
        if (t1.get$kind(t1) === 60) {
          t1 = this.groupingStack;
          t1.get$head(t1).set$endGroup(this.tail);
          this.groupingStack = this.groupingStack.get$tail();
        }
      },
      appendGtGt$1: function(type) {
        var t1, t2;
        t1 = this.tokenStart;
        t2 = this.comments;
        t1 = new L.SimpleToken(type, t1, t2);
        t1._setCommentParent$1(t2);
        this.appendToken$1(t1);
        t1 = this.groupingStack;
        if (t1.get$isEmpty(t1))
          return;
        t1 = this.groupingStack;
        t1 = t1.get$head(t1);
        if (t1.get$kind(t1) === 60)
          this.groupingStack = this.groupingStack.get$tail();
        t1 = this.groupingStack;
        if (t1.get$isEmpty(t1))
          return;
        t1 = this.groupingStack;
        t1 = t1.get$head(t1);
        if (t1.get$kind(t1) === 60) {
          t1 = this.groupingStack;
          t1.get$head(t1).set$endGroup(this.tail);
          this.groupingStack = this.groupingStack.get$tail();
        }
      },
      discardOpenLt$0: function() {
        while (true) {
          var t1 = this.groupingStack;
          if (!t1.get$isEmpty(t1)) {
            t1 = this.groupingStack;
            t1 = t1.get$head(t1);
            t1 = t1.get$kind(t1) === 60;
          } else
            t1 = false;
          if (!t1)
            break;
          this.groupingStack = this.groupingStack.get$tail();
        }
      },
      discardInterpolation$0: function() {
        var t1, beginToken;
        for (; t1 = this.groupingStack, !t1.get$isEmpty(t1);) {
          t1 = this.groupingStack;
          beginToken = t1.get$head(t1);
          this.unmatchedBeginGroup$1(beginToken);
          this.groupingStack = this.groupingStack.get$tail();
          if (beginToken.type.kind === 128)
            break;
        }
      },
      unmatchedBeginGroup$1: function(begin) {
        var t1;
        H.interceptedTypeCheck(begin, "$isBeginToken");
        t1 = new L.SyntheticToken(C.Map_4uyfz.$index(0, begin.type.lexeme), this.tokenStart, null);
        t1._setCommentParent$1(null);
        t1.beforeSynthetic = this.tail;
        this.appendToken$1(t1);
        begin.endToken = this.tail;
        t1 = new S.UnmatchedToken(begin, C.TokenType_uv8, begin.offset, null);
        t1._setCommentParent$1(null);
        this.hasErrors = true;
        this.appendToken$1(t1);
      }
    }
  }], ["dart_scanner.error_token", "package:front_end/src/fasta/scanner/error_token.dart",, S, {
    "^": "",
    buildUnexpectedCharacterToken: function(character, charOffset) {
      var t1;
      if (typeof character !== "number")
        return character.$lt();
      if (character < 31) {
        t1 = new S.AsciiControlCharacterToken(character, C.TokenType_uv8, charOffset, null);
        t1._setCommentParent$1(null);
        return t1;
      }
      switch (character) {
        case 65533:
          t1 = new S.EncodingErrorToken(C.TokenType_uv8, charOffset, null);
          t1._setCommentParent$1(null);
          return t1;
        case 160:
        case 5760:
        case 6158:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8203:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          t1 = new S.NonAsciiWhitespaceToken(character, C.TokenType_uv8, charOffset, null);
          t1._setCommentParent$1(null);
          return t1;
        default:
          t1 = new S.NonAsciiIdentifierToken(character, C.TokenType_uv8, charOffset, null);
          t1._setCommentParent$1(null);
          return t1;
      }
    },
    ErrorToken: {
      "^": "SimpleToken;",
      get$length: function(_) {
        return 1;
      },
      get$lexeme: function() {
        var t1 = this.get$assertionMessage();
        return H.throwExpression(t1.get$message(t1));
      },
      get$character: function() {
        return;
      },
      get$endOffset: function() {
        return;
      },
      get$begin: function() {
        return;
      }
    },
    EncodingErrorToken: {
      "^": "ErrorToken;type,offset,0previous,0next,_precedingComment",
      toString$0: function(_) {
        return "EncodingErrorToken()";
      },
      get$assertionMessage: function() {
        return C.MessageCode_qtW;
      }
    },
    NonAsciiIdentifierToken: {
      "^": "ErrorToken;character<,type,offset,0previous,0next,_precedingComment",
      toString$0: function(_) {
        return "NonAsciiIdentifierToken(" + H.S(this.character) + ")";
      },
      get$assertionMessage: function() {
        var t1 = this.character;
        return B._withArgumentsNonAsciiIdentifier(P.String_String$fromCharCodes(H.setRuntimeTypeInfo([t1], [P.int]), 0, null), t1);
      }
    },
    NonAsciiWhitespaceToken: {
      "^": "ErrorToken;character<,type,offset,0previous,0next,_precedingComment",
      toString$0: function(_) {
        return "NonAsciiWhitespaceToken(" + H.S(this.character) + ")";
      },
      get$assertionMessage: function() {
        return B._withArgumentsNonAsciiWhitespace(this.character);
      }
    },
    AsciiControlCharacterToken: {
      "^": "ErrorToken;character<,type,offset,0previous,0next,_precedingComment",
      toString$0: function(_) {
        return "AsciiControlCharacterToken(" + H.S(this.character) + ")";
      },
      get$assertionMessage: function() {
        return B._withArgumentsAsciiControlCharacter(this.character);
      }
    },
    UnterminatedString: {
      "^": "ErrorToken;start,endOffset<,type,offset,0previous,0next,_precedingComment",
      toString$0: function(_) {
        return "UnterminatedString(" + this.start + ")";
      },
      get$assertionMessage: function() {
        var t1 = this.start;
        return B._withArgumentsUnterminatedString(t1, C.Map_nZmPa.$index(0, t1));
      }
    },
    UnterminatedToken: {
      "^": "ErrorToken;assertionMessage<,endOffset<,type,offset,0previous,0next,_precedingComment",
      toString$0: function(_) {
        return "UnterminatedToken(" + this.assertionMessage.name + ")";
      }
    },
    UnmatchedToken: {
      "^": "ErrorToken;begin<,type,offset,0previous,0next,_precedingComment",
      toString$0: function(_) {
        return "UnmatchedToken(" + this.begin.type.lexeme + ")";
      },
      get$assertionMessage: function() {
        var t1 = this.begin;
        return B._withArgumentsUnmatchedToken(C.Map_4u8XL.$index(0, t1.type.lexeme), t1);
      }
    }
  }], ["fasta.scanner.keywords", "package:front_end/src/fasta/scanner/keyword_state.dart",, U, {
    "^": "",
    KeywordState_KEYWORD_STATE0: function() {
      var t1, strings, i;
      t1 = $.KeywordState__KEYWORD_STATE;
      if (t1 == null) {
        t1 = new Array(64);
        t1.fixed$length = Array;
        strings = H.setRuntimeTypeInfo(t1, [P.String]);
        for (i = 0; i < 64; ++i)
          C.JSArray_methods.$indexSet(strings, i, C.List_W1o[i].lexeme);
        C.JSArray_methods.sort$1(strings, new U.KeywordState_KEYWORD_STATE_closure());
        t1 = U.KeywordState_computeKeywordStateTable(0, strings, 0, strings.length);
        $.KeywordState__KEYWORD_STATE = t1;
      }
      return t1;
    },
    KeywordState_computeKeywordStateTable: function(start, strings, offset, $length) {
      var t1, table, t2, t3, i, isLowercase, chunk, chunkStart, isLeaf, t4, t5, c, syntax;
      H.assertSubtype(strings, "$isList", [P.String], "$asList");
      t1 = new Array(58);
      t1.fixed$length = Array;
      table = H.setRuntimeTypeInfo(t1, [U.KeywordState0]);
      for (t1 = offset + $length, t2 = strings.length, t3 = start + 1, i = offset, isLowercase = true, chunk = 0, chunkStart = -1, isLeaf = false; i < t1; ++i) {
        if (i < 0 || i >= t2)
          return H.ioore(strings, i);
        t4 = strings[i];
        t5 = t4.length;
        if (t5 === start)
          isLeaf = true;
        if (t5 > start) {
          c = J._codeUnitAt$1$s(t4, start);
          if (65 <= c && c <= 90)
            isLowercase = false;
          if (chunk !== c) {
            if (chunkStart !== -1)
              C.JSArray_methods.$indexSet(table, chunk - 65, U.KeywordState_computeKeywordStateTable(t3, strings, chunkStart, i - chunkStart));
            chunkStart = i;
            chunk = c;
          }
        }
      }
      if (chunkStart !== -1)
        C.JSArray_methods.$indexSet(table, chunk - 65, U.KeywordState_computeKeywordStateTable(t3, strings, chunkStart, t1 - chunkStart));
      else {
        if (offset < 0 || offset >= t2)
          return H.ioore(strings, offset);
        t1 = strings[offset];
        return new U.LeafKeywordState($.$get$Keyword_keywords().$index(0, t1));
      }
      if (isLeaf) {
        if (offset < 0 || offset >= t2)
          return H.ioore(strings, offset);
        syntax = strings[offset];
      } else
        syntax = null;
      if (isLowercase) {
        table = C.JSArray_methods.sublist$1(table, 32);
        return new U.LowerCaseArrayKeywordState(table, syntax == null ? null : $.$get$Keyword_keywords().$index(0, syntax));
      } else
        return new U.UpperCaseArrayKeywordState(table, syntax == null ? null : $.$get$Keyword_keywords().$index(0, syntax));
    },
    KeywordState0: {
      "^": "Object;"
    },
    KeywordState_KEYWORD_STATE_closure: {
      "^": "Closure:50;",
      call$2: function(a, b) {
        return J.compareTo$1$ns(H.stringTypeCheck(a), H.stringTypeCheck(b));
      }
    },
    ArrayKeywordState: {
      "^": "Object;keyword<",
      toString$0: function(_) {
        var sb, t1, foo, i, t2;
        sb = new P.StringBuffer("");
        sb._contents = "[";
        t1 = this.keyword;
        if (t1 != null) {
          sb._contents = "[*";
          t1 = "[*" + t1.toString$0(0);
          sb._contents = t1;
          sb._contents = t1 + " ";
        }
        foo = this.table;
        for (t1 = [P.int], i = 0; i < foo.length; ++i)
          if (foo[i] != null) {
            t2 = P.String_String$fromCharCodes(H.setRuntimeTypeInfo([i + 97], t1), 0, null) + ": ";
            if (i >= foo.length)
              return H.ioore(foo, i);
            sb._contents += t2 + H.S(foo[i]) + "; ";
          }
        t1 = sb._contents += "]";
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      $isKeywordState0: 1
    },
    LowerCaseArrayKeywordState: {
      "^": "ArrayKeywordState;table,keyword",
      next$1: [function(c) {
        var t1, t2;
        t1 = this.table;
        if (typeof c !== "number")
          return c.$sub();
        t2 = c - 97;
        if (t2 < 0 || t2 >= t1.length)
          return H.ioore(t1, t2);
        return t1[t2];
      }, "call$1", "get$next", 4, 0, 13],
      nextCapital$1: function(c) {
        return;
      }
    },
    UpperCaseArrayKeywordState: {
      "^": "ArrayKeywordState;table,keyword",
      next$1: [function(c) {
        var t1, t2;
        t1 = this.table;
        if (typeof c !== "number")
          return c.$sub();
        t2 = c - 65;
        if (t2 < 0 || t2 >= t1.length)
          return H.ioore(t1, t2);
        return t1[t2];
      }, "call$1", "get$next", 4, 0, 13],
      nextCapital$1: function(c) {
        var t1, t2;
        t1 = this.table;
        if (typeof c !== "number")
          return c.$sub();
        t2 = c - 65;
        if (t2 < 0 || t2 >= t1.length)
          return H.ioore(t1, t2);
        return t1[t2];
      }
    },
    LeafKeywordState: {
      "^": "Object;keyword<",
      next$1: [function(c) {
        return;
      }, "call$1", "get$next", 4, 0, 13],
      nextCapital$1: function(c) {
        return;
      },
      toString$0: function(_) {
        return this.keyword.lexeme;
      },
      $isKeywordState0: 1
    }
  }], ["fasta.scanner.recover", "package:front_end/src/fasta/scanner/recover.dart",, U, {
    "^": "",
    defaultRecoveryStrategy: [function(bytes, tokens, lineStarts) {
      var _box_0, t1, recoverIdentifier, recoverExponent, recoverString, recoverHexDigit, recoverStringInterpolation, recoverComment, recoverUnmatched, current, error, next, t2, code, tail;
      _box_0 = {};
      t1 = [P.int];
      H.assertSubtype(bytes, "$isList", t1, "$asList");
      H.assertSubtype(lineStarts, "$isList", t1, "$asList");
      _box_0.errorTail = null;
      _box_0.good = null;
      _box_0.goodTail = null;
      _box_0.beforeGoodTail = null;
      recoverIdentifier = new U.defaultRecoveryStrategy_recoverIdentifier(_box_0);
      recoverExponent = new U.defaultRecoveryStrategy_recoverExponent(_box_0);
      recoverString = new U.defaultRecoveryStrategy_recoverString(_box_0);
      recoverHexDigit = new U.defaultRecoveryStrategy_recoverHexDigit(_box_0);
      recoverStringInterpolation = new U.defaultRecoveryStrategy_recoverStringInterpolation(_box_0);
      recoverComment = new U.defaultRecoveryStrategy_recoverComment(_box_0);
      recoverUnmatched = new U.defaultRecoveryStrategy_recoverUnmatched(_box_0);
      for (current = tokens, error = null; current.type !== C.TokenType_Emx; current = current.next) {
        for (; current instanceof S.ErrorToken;) {
          next = current;
          do {
            t1 = _box_0.errorTail;
            if (t1 == null) {
              H.interceptedTypeCheck(next, "$isErrorToken");
              error = next;
            } else {
              t1.next = next;
              next.previous = t1;
              next.set$beforeSynthetic(t1);
            }
            H.interceptedTypeCheck(next, "$isErrorToken");
            _box_0.errorTail = next;
            next = next.next;
            if (next instanceof S.ErrorToken) {
              t1 = current.get$assertionMessage();
              t1 = t1.get$code(t1);
              t2 = next.get$assertionMessage();
              t2 = t1 === t2.get$code(t2);
              t1 = t2;
            } else
              t1 = false;
          } while (t1);
          t1 = current.get$assertionMessage();
          code = t1.get$code(t1);
          if (code === C.MessageCode_qtW || code === C.Code_ynK || code === C.Code_UCF)
            current = _box_0.errorTail.next;
          else if (code === C.Code_m9N)
            current = recoverIdentifier.call$1(H.interceptedTypeCheck(current, "$isNonAsciiIdentifierToken"));
          else if (code === C.MessageCode_Ecu)
            current = recoverExponent.call$0();
          else if (code === C.Code_67z)
            current = recoverString.call$0();
          else if (code === C.MessageCode_XZn)
            current = recoverHexDigit.call$0();
          else if (code === C.MessageCode_wCL)
            current = recoverStringInterpolation.call$0();
          else if (code === C.MessageCode_wYn)
            current = recoverComment.call$0();
          else
            current = code === C.Code_a9w ? recoverUnmatched.call$0() : _box_0.errorTail.next;
        }
        t1 = _box_0.goodTail;
        if (t1 == null)
          _box_0.good = current;
        else {
          t1.next = current;
          current.previous = t1;
          current.set$beforeSynthetic(t1);
        }
        _box_0.beforeGoodTail = _box_0.goodTail;
        _box_0.goodTail = current;
      }
      L.Token_Token$eof(-1, null).setNext$1(error);
      t1 = _box_0.good;
      tail = _box_0.errorTail;
      if (t1 != null) {
        tail.setNext$1(t1);
        tail = _box_0.goodTail;
      }
      if (tail.type !== C.TokenType_Emx)
        tail.setNext$1(L.Token_Token$eof(tail.offset + tail.get$length(tail), null));
      return error;
    }, "call$3", "recover__defaultRecoveryStrategy$closure", 12, 0, 48],
    skipToEof: function(token) {
      for (; token.type !== C.TokenType_Emx;)
        token = token.next;
      return token;
    },
    defaultRecoveryStrategy_recoverIdentifier: {
      "^": "Closure:52;_box_0",
      call$1: function(first) {
        var codeUnits, t1, t2, prepend, next, append, current, charOffset, value;
        codeUnits = H.setRuntimeTypeInfo([], [P.int]);
        t1 = this._box_0;
        t2 = t1.goodTail;
        if (t2 != null)
          prepend = t2.type === C.TokenType_GbN && t2.offset + t2.get$length(t2) === first.offset && true;
        else
          prepend = false;
        t2 = t1.errorTail;
        next = t2.next;
        append = next.type === C.TokenType_GbN && t2.offset + 1 === next.offset && true;
        if (prepend) {
          t2 = t1.goodTail.get$lexeme();
          t2.toString;
          C.JSArray_methods.addAll$1(codeUnits, new H.CodeUnits(t2));
        }
        for (current = first; t2 = t1.errorTail, current == null ? t2 != null : current !== t2;) {
          C.JSArray_methods.add$1(codeUnits, current.character);
          current = H.interceptedTypeCheck(current.next, "$isNonAsciiIdentifierToken");
        }
        C.JSArray_methods.add$1(codeUnits, t2.get$character());
        charOffset = first.offset;
        if (prepend) {
          charOffset = t1.goodTail.offset;
          t2 = t1.beforeGoodTail;
          if (t2 == null) {
            t1.good = null;
            t1.goodTail = null;
            t1.beforeGoodTail = null;
          } else
            t1.goodTail = t2;
        }
        if (append) {
          t1 = next.get$lexeme();
          t1.toString;
          C.JSArray_methods.addAll$1(codeUnits, new H.CodeUnits(t1));
          next = next.next;
        }
        value = P.String_String$fromCharCodes(codeUnits, 0, null);
        t1 = new D.StringToken0(D.StringToken_canonicalizedString(value, 0, value.length, false), C.TokenType_GbN, charOffset, null);
        t1._setCommentParent$1(null);
        t1.setNext$1(next);
        return t1;
      }
    },
    defaultRecoveryStrategy_recoverExponent: {
      "^": "Closure:5;_box_0",
      call$0: function() {
        return this._box_0.errorTail.next;
      }
    },
    defaultRecoveryStrategy_recoverString: {
      "^": "Closure:5;_box_0",
      call$0: function() {
        return this._box_0.errorTail.next;
      }
    },
    defaultRecoveryStrategy_recoverHexDigit: {
      "^": "Closure:5;_box_0",
      call$0: function() {
        var t1, t2;
        t1 = this._box_0;
        t2 = t1.errorTail.offset;
        t2 = new D.StringToken0(D.StringToken_canonicalizedString("0", 0, 1, false), C.TokenType_Vyt, t2, null);
        t2._setCommentParent$1(null);
        t2.setNext$1(t1.errorTail.next);
        return t2;
      }
    },
    defaultRecoveryStrategy_recoverStringInterpolation: {
      "^": "Closure:5;_box_0",
      call$0: function() {
        return this._box_0.errorTail.next;
      }
    },
    defaultRecoveryStrategy_recoverComment: {
      "^": "Closure:5;_box_0",
      call$0: function() {
        return U.skipToEof(this._box_0.errorTail);
      }
    },
    defaultRecoveryStrategy_recoverUnmatched: {
      "^": "Closure:5;_box_0",
      call$0: function() {
        return this._box_0.errorTail.next;
      }
    }
  }], ["fasta.scanner.string_canonicalizer", "package:front_end/src/fasta/scanner/string_canonicalizer.dart",, D, {
    "^": "",
    Node0: {
      "^": "Object;data,start,end,payload,next<"
    },
    StringCanonicalizer: {
      "^": "Object;_size,_count,_nodes",
      rehash$0: function() {
        var newSize, t1, newNodes, t2, t3, i, t4, t, n, t5, t6, newIndex;
        newSize = this._size * 2;
        t1 = new Array(newSize);
        t1.fixed$length = Array;
        newNodes = H.setRuntimeTypeInfo(t1, [D.Node0]);
        for (t1 = newNodes.length, t2 = [P.int], t3 = newSize - 1, i = 0; i < this._size; ++i) {
          t4 = this._nodes;
          if (i >= t4.length)
            return H.ioore(t4, i);
          t = t4[i];
          for (; t != null; t = n) {
            n = t.next;
            t4 = t.data;
            t5 = t.start;
            t6 = t.end;
            newIndex = typeof t4 === "string" ? D.StringCanonicalizer_hashString(t4, t5, t6) & t3 : D.StringCanonicalizer_hashBytes(H.assertSubtype(t4, "$isList", t2, "$asList"), t5, t6) & t3;
            if (newIndex >= t1)
              return H.ioore(newNodes, newIndex);
            t.next = newNodes[newIndex];
            C.JSArray_methods.$indexSet(newNodes, newIndex, t);
          }
        }
        this._size = newSize;
        this._nodes = newNodes;
      },
      canonicalize$4: function(data, start, end, asciiOnly) {
        var t1, index, t2, s, len, t, j, i, t3, payload, s0;
        if (this._count > this._size)
          this.rehash$0();
        t1 = typeof data === "string";
        index = t1 ? D.StringCanonicalizer_hashString(data, start, end) : D.StringCanonicalizer_hashBytes(H.assertSubtype(data, "$isList", [P.int], "$asList"), start, end);
        index &= this._size - 1;
        t2 = this._nodes;
        if (index >= t2.length)
          return H.ioore(t2, index);
        s = t2[index];
        len = end - start;
        for (t = s; t != null;) {
          t2 = t.end;
          j = t.start;
          if (t2 - j === len) {
            t2 = t.data;
            i = start;
            while (true) {
              if (i < end) {
                if (i < 0 || i >= data.length)
                  return H.ioore(data, i);
                t3 = data[i];
                if (j < 0 || j >= t2.length)
                  return H.ioore(t2, j);
                t3 = t3 === t2[j];
              } else
                t3 = false;
              if (!t3)
                break;
              ++i;
              ++j;
            }
            if (i === end)
              return t.payload;
          }
          t = t.next;
        }
        if (t1)
          payload = C.JSString_methods.substring$2(data, start, end);
        else {
          H.assertSubtype(data, "$isList", [P.int], "$asList");
          s0 = asciiOnly ? P.String_String$fromCharCodes(data, start, end) : new P.Utf8Decoder(true).convert$3(data, start, end);
          payload = s0;
        }
        C.JSArray_methods.$indexSet(this._nodes, index, new D.Node0(data, start, end, payload, s));
        ++this._count;
        return payload;
      },
      static: {
        StringCanonicalizer_hashBytes: function(data, start, end) {
          var i, h;
          for (i = start, h = 5381; i < end; ++i)
            h = C.JSInt_methods.$add((h << 5 >>> 0) + h, C.JSNull_methods.$index(data, i)) & 16777215;
          return h;
        },
        StringCanonicalizer_hashString: function(data, start, end) {
          var t1, i, h;
          for (t1 = J.getInterceptor$s(data), i = start, h = 5381; i < end; ++i)
            h = (h << 5 >>> 0) + h + t1.codeUnitAt$1(data, i) & 16777215;
          return h;
        }
      }
    }
  }], ["dart2js.scanner.string_scanner", "package:front_end/src/fasta/scanner/string_scanner.dart",, T, {
    "^": "",
    StringScanner: {
      "^": "ArrayBasedScanner;string,scanOffset,hasErrors,groupingStack,includeComments,scanGenericMethodComments,tokenStart,tokens,0tail,0comments,0commentsTail,lineStarts",
      advance$0: function() {
        return C.JSString_methods.codeUnitAt$1(this.string, ++this.scanOffset);
      },
      createSubstringToken$4: function(type, start, asciiOnly, extraOffset) {
        return D.StringToken$fromSubstring(type, this.string, start, this.scanOffset + extraOffset, this.tokenStart, true, this.comments);
      },
      createSyntheticSubstringToken$4: function(type, start, asciiOnly, syntheticChars) {
        var source, t1, t2;
        source = C.JSString_methods.substring$2(this.string, start, this.scanOffset);
        t1 = source + syntheticChars;
        t2 = new L.SyntheticStringToken(source.length, type, this.tokenStart, null);
        t2._setCommentParent$1(null);
        $.$get$StringUtilities_INTERNER().toString;
        t2._value = t1;
        return t2;
      },
      atEndOfFile$0: function() {
        return this.scanOffset >= this.string.length - 1;
      }
    }
  }], ["fasta.scanner.token", "package:front_end/src/fasta/scanner/token.dart",, D, {
    "^": "",
    _LazySubstring__LazySubstring: function(data, start, $length, b) {
      if (start < 1048576 && $length < 512)
        return new D._CompactLazySubstring(data, ((start << 9 | $length) << 1 | 1) >>> 0);
      else
        return new D._FullLazySubstring(data, start, $length, true);
    },
    StringToken0: {
      "^": "SimpleToken;valueOrLazySubstring,type,offset,0previous,0next,_precedingComment",
      StringToken$fromSubstring$7$canonicalize$precedingComments: function(type, data, start, end, charOffset, canonicalize, precedingComments) {
        var $length = end - start;
        if ($length <= 4)
          this.valueOrLazySubstring = D.StringToken_canonicalizedString(data, start, end, true);
        else
          this.valueOrLazySubstring = D._LazySubstring__LazySubstring(data, start, $length, true);
      },
      get$lexeme: function() {
        var t1, data, start;
        t1 = this.valueOrLazySubstring;
        if (typeof t1 === "string")
          return t1;
        else {
          data = J.get$data$x(t1);
          start = J.get$start$x(this.valueOrLazySubstring);
          t1 = D.StringToken_canonicalizedString(data, start, start + J.get$length$asx(this.valueOrLazySubstring), this.valueOrLazySubstring.get$boolValue());
          this.valueOrLazySubstring = t1;
          return t1;
        }
      },
      get$isIdentifier: function() {
        return this.type.kind === 97;
      },
      toString$0: function(_) {
        return this.get$lexeme();
      },
      static: {
        StringToken$fromSubstring: function(type, data, start, end, charOffset, canonicalize, precedingComments) {
          var t1 = new D.StringToken0(null, type, charOffset, precedingComments);
          t1._setCommentParent$1(precedingComments);
          t1.StringToken$fromSubstring$7$canonicalize$precedingComments(type, data, start, end, charOffset, true, precedingComments);
          return t1;
        },
        StringToken_canonicalizedString: function(s, start, end, canonicalize) {
          if (!canonicalize)
            return s;
          return $.$get$StringToken_canonicalizer().canonicalize$4(s, start, end, false);
        }
      }
    },
    CommentToken0: {
      "^": "StringToken0;0parent',valueOrLazySubstring,type,offset,0previous,0next,_precedingComment",
      $isCommentToken: 1
    },
    DartDocToken: {
      "^": "CommentToken0;references<,0parent,valueOrLazySubstring,type,offset,0previous,0next,_precedingComment",
      $isDocumentationCommentToken: 1
    },
    _LazySubstring: {
      "^": "Object;"
    },
    _CompactLazySubstring: {
      "^": "_LazySubstring;data>,fields",
      get$start: function(_) {
        return this.fields >>> 10;
      },
      get$length: function(_) {
        return this.fields >>> 1 & 511;
      },
      get$boolValue: function() {
        return (this.fields & 1) === 1;
      }
    },
    _FullLazySubstring: {
      "^": "_LazySubstring;data>,start>,length>,boolValue<"
    }
  }], ["fasta.severity", "package:front_end/src/fasta/severity.dart",, Y, {
    "^": "",
    Severity: {
      "^": "Object;index,_severity$_name",
      toString$0: function(_) {
        return this._severity$_name;
      },
      static: {
        "^": "Severity_error<"
      }
    }
  }], ["fasta.stack_listener", "package:front_end/src/fasta/source/stack_listener.dart",, R, {
    "^": "",
    NullValue: {
      "^": "Object;index,_stack_listener$_name",
      toString$0: function(_) {
        return this._stack_listener$_name;
      }
    }
  }], ["fasta.util.link", "package:front_end/src/fasta/util/link.dart",, N, {
    "^": "",
    Link: {
      "^": "Object;$ti",
      get$head: function(_) {
        return H.throwExpression(P.StateError$("no elements"));
      },
      get$tail: function() {
        return;
      },
      prepend$1: function(element) {
        var t1 = H.getTypeArgumentByIndex(this, 0);
        return S.LinkEntry$(H.assertSubtypeOfRuntimeType(element, t1), this, t1);
      },
      get$iterator: function(_) {
        return new S.LinkIterator(this, this.$ti);
      },
      get$isEmpty: function(_) {
        return true;
      },
      get$isNotEmpty: function(_) {
        return false;
      },
      forEach$1: function(_, f) {
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
      },
      $eq: function(_, other) {
        var t1;
        if (other == null)
          return false;
        t1 = H.checkSubtypeV2(other, "$isLink", this.$ti, "$asLink");
        if (!t1)
          return false;
        return J.get$isEmpty$asx(other);
      },
      get$hashCode: function(_) {
        return H.throwExpression(P.UnsupportedError$("Link.hashCode"));
      },
      toString$0: function(_) {
        return "[]";
      },
      get$length: function(_) {
        throw H.wrapException(P.UnsupportedError$("get:length"));
      },
      contains$1: function(_, element) {
        var link;
        for (link = this; !link.get$isEmpty(link); link = link.get$tail())
          link.get$head(link);
        return false;
      },
      $isIterable: 1
    }
  }], ["fasta.util.link_implementation", "package:front_end/src/fasta/util/link_implementation.dart",, S, {
    "^": "",
    LinkIterator: {
      "^": "Object;0_link_implementation$_current,_link,$ti",
      get$current: function() {
        return this._link_implementation$_current;
      },
      moveNext$0: function() {
        var t1 = this._link;
        if (t1.get$isEmpty(t1)) {
          this._link_implementation$_current = null;
          return false;
        }
        t1 = this._link;
        this._link_implementation$_current = t1.get$head(t1);
        this._link = this._link.get$tail();
        return true;
      }
    },
    LinkEntry: {
      "^": "Link;head>,tail<,$ti",
      prepend$1: function(element) {
        var t1 = H.getTypeArgumentByIndex(this, 0);
        return S.LinkEntry$(H.assertSubtypeOfRuntimeType(element, t1), this, t1);
      },
      printOn$2: function(buffer, separatedBy) {
        var link;
        buffer._contents += H.S(this.head);
        for (link = this.tail; link.get$isNotEmpty(link); link = link.get$tail()) {
          buffer._contents += separatedBy;
          buffer._contents += H.S(link.get$head(link));
        }
      },
      toString$0: function(_) {
        var buffer, t1;
        buffer = new P.StringBuffer("");
        buffer._contents = "[ ";
        this.printOn$2(buffer, ", ");
        t1 = buffer._contents += " ]";
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      get$isEmpty: function(_) {
        return false;
      },
      get$isNotEmpty: function(_) {
        return true;
      },
      forEach$1: function(_, f) {
        var link;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
        for (link = this; link.get$isNotEmpty(link); link = link.get$tail())
          f.call$1(link.get$head(link));
      },
      $eq: function(_, other) {
        var t1, myElements, t2;
        if (other == null)
          return false;
        t1 = H.checkSubtypeV2(other, "$isLink", this.$ti, "$asLink");
        if (!t1)
          return false;
        myElements = this;
        while (true) {
          if (!(myElements.get$isNotEmpty(myElements) && J.get$isNotEmpty$asx(other)))
            break;
          t1 = myElements.get$head(myElements);
          t2 = J.get$head$x(other);
          if (t1 == null ? t2 != null : t1 !== t2)
            return false;
          myElements = myElements.get$tail();
          other = other.get$tail();
        }
        return myElements.get$isEmpty(myElements) && J.get$isEmpty$asx(other);
      },
      get$hashCode: function(_) {
        return H.throwExpression(P.UnsupportedError$("LinkEntry.hashCode"));
      },
      static: {
        LinkEntry$: function(head, tail, $T) {
          return new S.LinkEntry(head, tail, [$T]);
        }
      }
    }
  }], ["", "package:front_end/src/scanner/errors.dart",, A, {
    "^": "",
    translateErrorToken: function(token, reportError) {
      var t1, charOffset, endOffset, t2, t3, errorCode, type;
      t1 = {};
      H.functionTypeCheck(reportError, {func: 1, args: [A.ScannerErrorCode, P.int, [P.List, P.Object]]});
      charOffset = token.offset;
      t1.charOffset = charOffset;
      endOffset = token.get$endOffset();
      if (endOffset == null)
        endOffset = charOffset;
      t2 = new A.translateErrorToken__makeError(t1, token, reportError);
      t3 = token.get$assertionMessage();
      errorCode = t3.get$code(t3);
      switch (errorCode.analyzerCode) {
        case "UNTERMINATED_STRING_LITERAL":
          t1.charOffset = endOffset - 1;
          return t2.call$2(C.ScannerErrorCode_IFE, null);
        case "UNTERMINATED_MULTI_LINE_COMMENT":
          t1.charOffset = endOffset;
          return t2.call$2(C.ScannerErrorCode_X7k, null);
        case "MISSING_DIGIT":
          t1.charOffset = endOffset - 1;
          return t2.call$2(C.ScannerErrorCode_k4X, null);
        case "MISSING_HEX_DIGIT":
          t1.charOffset = endOffset - 1;
          return t2.call$2(C.ScannerErrorCode_qBY, null);
        case "ILLEGAL_CHARACTER":
          return t2.call$2(C.ScannerErrorCode_UAS, H.setRuntimeTypeInfo([token.get$character()], [P.Object]));
        default:
          if (errorCode === C.Code_a9w) {
            t1.charOffset = token.get$begin().endToken.offset;
            t1 = token.get$begin();
            type = t1 == null ? null : t1.type;
            if (type === C.TokenType_cOk || type === C.TokenType_skV)
              return t2.call$2(C.ScannerErrorCode_xw8, H.setRuntimeTypeInfo(["}"], [P.Object]));
            if (type === C.TokenType_AGi)
              return t2.call$2(C.ScannerErrorCode_xw8, H.setRuntimeTypeInfo(["]"], [P.Object]));
            if (type === C.TokenType_5uk)
              return t2.call$2(C.ScannerErrorCode_xw8, H.setRuntimeTypeInfo([")"], [P.Object]));
            if (type === C.TokenType_Drw)
              return t2.call$2(C.ScannerErrorCode_xw8, H.setRuntimeTypeInfo([">"], [P.Object]));
          } else if (errorCode === C.MessageCode_wCL)
            return t2.call$2(C.ScannerErrorCode_o7s, null);
          throw H.wrapException(P.UnimplementedError$(errorCode.toString$0(0)));
      }
    },
    _isAtEnd: function(token, charOffset) {
      var t1;
      for (; true;) {
        token = token.next;
        t1 = token.type;
        if (t1 === C.TokenType_Emx)
          return token.offset === charOffset;
        if (t1.kind !== 88)
          return false;
      }
    },
    ScannerErrorCode: {
      "^": "ErrorCode;name,message,correction,isUnresolvedIdentifier",
      get$type: function(_) {
        return C.ErrorType_3X9;
      }
    },
    translateErrorToken__makeError: {
      "^": "Closure:54;_box_0,token,reportError",
      call$2: function(errorCode, $arguments) {
        var t1;
        H.assertSubtype($arguments, "$isList", [P.Object], "$asList");
        t1 = this._box_0;
        if (A._isAtEnd(this.token, t1.charOffset))
          --t1.charOffset;
        this.reportError.call$3(errorCode, t1.charOffset, $arguments);
      }
    }
  }], ["", "package:front_end/src/scanner/interner.dart",, E, {
    "^": "",
    NullInterner: {
      "^": "Object;",
      static: {
        NullInterner$: function() {
          return new E.NullInterner();
        }
      }
    }
  }], ["", "package:front_end/src/scanner/reader.dart",, D, {
    "^": "",
    CharSequenceReader: {
      "^": "Object;_sequence,0_stringLength,0_charOffset",
      get$offset: function(_) {
        return this._charOffset - 1;
      },
      getContents$0: ["super$CharSequenceReader$getContents", function() {
        return this._sequence;
      }],
      static: {
        CharSequenceReader$: function(_sequence) {
          var t1 = new D.CharSequenceReader(_sequence);
          t1._stringLength = _sequence.length;
          t1._charOffset = 0;
          return t1;
        }
      }
    },
    SubSequenceReader: {
      "^": "CharSequenceReader;_offsetDelta,_sequence,0_stringLength,0_charOffset",
      get$offset: function(_) {
        return this._offsetDelta + D.CharSequenceReader.prototype.get$offset.call(this, this);
      },
      getContents$0: function() {
        return this.super$CharSequenceReader$getContents();
      }
    }
  }], ["", "package:front_end/src/scanner/scanner.dart",, O, {
    "^": "",
    KeywordState: {
      "^": "Object;_table,0_keyword",
      keyword$0: [function() {
        return this._keyword;
      }, "call$0", "get$keyword", 0, 0, 55],
      next$1: [function(character) {
        var t1, t2;
        t1 = this._table;
        if (typeof character !== "number")
          return character.$sub();
        t2 = character - 65;
        if (t2 < 0 || t2 >= t1.length)
          return H.ioore(t1, t2);
        return t1[t2];
      }, "call$1", "get$next", 4, 0, 56],
      static: {
        KeywordState$: function(_table, syntax) {
          var t1 = new O.KeywordState(_table);
          t1._keyword = syntax == null ? null : $.$get$Keyword_keywords().$index(0, syntax);
          return t1;
        },
        KeywordState__computeKeywordStateTable: function(start, strings, offset, $length) {
          var t1, result, t2, t3, i, chunk, chunkStart, isLeaf, t4, t5, c;
          H.assertSubtype(strings, "$isList", [P.String], "$asList");
          t1 = new Array(58);
          t1.fixed$length = Array;
          result = H.setRuntimeTypeInfo(t1, [O.KeywordState]);
          for (t1 = offset + $length, t2 = strings.length, t3 = start + 1, i = offset, chunk = 0, chunkStart = -1, isLeaf = false; i < t1; ++i) {
            if (i < 0 || i >= t2)
              return H.ioore(strings, i);
            t4 = strings[i];
            t5 = t4.length;
            if (t5 === start)
              isLeaf = true;
            if (t5 > start) {
              c = J._codeUnitAt$1$s(t4, start);
              if (chunk !== c) {
                if (chunkStart !== -1)
                  C.JSArray_methods.$indexSet(result, chunk - 65, O.KeywordState__computeKeywordStateTable(t3, strings, chunkStart, i - chunkStart));
                chunkStart = i;
                chunk = c;
              }
            }
          }
          if (chunkStart !== -1)
            C.JSArray_methods.$indexSet(result, chunk - 65, O.KeywordState__computeKeywordStateTable(t3, strings, chunkStart, t1 - chunkStart));
          else {
            t1 = $.$get$KeywordState__EMPTY_TABLE();
            if (offset < 0 || offset >= t2)
              return H.ioore(strings, offset);
            return O.KeywordState$(t1, strings[offset]);
          }
          if (isLeaf) {
            if (offset < 0 || offset >= t2)
              return H.ioore(strings, offset);
            return O.KeywordState$(result, strings[offset]);
          } else
            return O.KeywordState$(result, null);
        },
        KeywordState__createKeywordStateTable: function() {
          var t1, strings, i;
          t1 = new Array(64);
          t1.fixed$length = Array;
          strings = H.setRuntimeTypeInfo(t1, [P.String]);
          for (i = 0; i < 64; ++i)
            C.JSArray_methods.$indexSet(strings, i, C.List_W1o[i].lexeme);
          C.JSArray_methods.sort$0(strings);
          return O.KeywordState__computeKeywordStateTable(0, strings, 0, strings.length);
        }
      }
    },
    Scanner0: {
      "^": "Object;",
      get$firstToken: function() {
        return this._tokens.get$next();
      },
      get$tail: function() {
        return this._tail;
      },
      bigSwitch$1: function(next) {
        var t1, t2;
        t1 = this._reader;
        this._tokenStart = t1.get$offset(t1);
        if (next === 13) {
          next = t1.advance$0();
          C.JSArray_methods.add$1(this._lineStarts, t1.get$offset(t1));
          return next;
        } else if (next === 10) {
          next = t1.advance$0();
          C.JSArray_methods.add$1(this._lineStarts, t1.get$offset(t1));
          return next;
        } else if (next === 9 || next === 32)
          return t1.advance$0();
        if (next === 114)
          t1.peek$0();
        if (typeof next !== "number")
          return H.iae(next);
        if (!(65 <= next && next <= 90))
          t2 = 97 <= next && next <= 122;
        else
          t2 = true;
        if (t2)
          return this._tokenizeKeywordOrIdentifier$2(next, true);
        if (next === 95 || next === 36)
          return this._tokenizeIdentifier$3(next, t1.get$offset(t1), true);
        if (next === 60)
          return this._tokenizeLessThan$1(next);
        if (next === 62)
          return this._tokenizeGreaterThan$1(next);
        if (next === 61)
          return this._tokenizeEquals$1(next);
        if (next === 33)
          return this._tokenizeExclamation$1(next);
        if (next === 43)
          return this._tokenizePlus$1(next);
        if (next === 45)
          return this._tokenizeMinus$1(next);
        if (next === 42)
          return this._tokenizeMultiply$1(next);
        if (next === 37)
          return this._tokenizePercent$1(next);
        if (next === 38)
          return this._tokenizeAmpersand$1(next);
        if (next === 124)
          return this._tokenizeBar$1(next);
        if (next === 94)
          return this._tokenizeCaret$1(next);
        if (next === 91)
          return this._tokenizeOpenSquareBracket$1(next);
        if (next === 126)
          return this._tokenizeTilde$1(next);
        if (next === 92) {
          this._appendTokenOfType$1(C.TokenType_IIj);
          return t1.advance$0();
        }
        if (next === 35)
          return this._tokenizeTag$1(next);
        if (next === 40) {
          this._appendBeginToken$1(C.TokenType_5uk);
          return t1.advance$0();
        }
        if (next === 41) {
          this._appendEndToken$2(C.TokenType_coy, C.TokenType_5uk);
          return t1.advance$0();
        }
        if (next === 44) {
          this._appendTokenOfType$1(C.TokenType_O55);
          return t1.advance$0();
        }
        if (next === 58) {
          this._appendTokenOfType$1(C.TokenType_gg4);
          return t1.advance$0();
        }
        if (next === 59) {
          this._appendTokenOfType$1(C.TokenType_FmR);
          return t1.advance$0();
        }
        if (next === 63)
          return this._tokenizeQuestion$0();
        if (next === 93) {
          this._appendEndToken$2(C.TokenType_zra, C.TokenType_AGi);
          return t1.advance$0();
        }
        if (next === 96) {
          this._appendTokenOfType$1(C.TokenType_1KU);
          return t1.advance$0();
        }
        if (next === 123) {
          this._appendBeginToken$1(C.TokenType_cOk);
          return t1.advance$0();
        }
        if (next === 125) {
          this._appendEndToken$2(C.TokenType_2ty, C.TokenType_cOk);
          return t1.advance$0();
        }
        if (next === 47)
          return this._tokenizeSlashOrComment$1(next);
        if (next === 64) {
          this._appendTokenOfType$1(C.TokenType_yzz);
          return t1.advance$0();
        }
        if (next === 34 || next === 39)
          return this._tokenizeString$3(next, t1.get$offset(t1), false);
        if (next === 46)
          return this._tokenizeDotOrNumber$1(next);
        if (next === 48)
          return this._tokenizeHexOrNumber$1(next);
        if (49 <= next && next <= 57)
          return this._tokenizeNumber$1(next);
        if (next === -1)
          return -1;
        t2 = [P.Object];
        t2 = H.assertSubtype(H.setRuntimeTypeInfo([next], t2), "$isList", t2, "$asList");
        this._scanner$_errorListener.onError$1(0, V.AnalysisError$(this.source, t1.get$offset(t1), 1, C.ScannerErrorCode_UAS, t2));
        return t1.advance$0();
      },
      setSourceStart$2: function(line, column) {
        var t1, offset, i;
        t1 = this._reader;
        offset = t1.get$offset(t1);
        if (line.$lt(0, 1) || column.$lt(0, 1) || offset.$lt(0, 0) || line.$add(0, column).$sub(0, 2).$ge(0, offset))
          return;
        for (t1 = this._lineStarts, i = 2; C.JSInt_methods.$lt(i, line); ++i)
          C.JSArray_methods.add$1(t1, 1);
        C.JSArray_methods.add$1(t1, offset.$sub(0, column).$add(0, 1));
      },
      tokenize$0: function() {
        var t1, next, eofToken;
        t1 = this._reader;
        next = t1.advance$0();
        for (; next !== -1;)
          next = this.bigSwitch$1(next);
        if (this._firstComment == null)
          eofToken = L.Token_Token$eof(t1.get$offset(t1).$add(0, 1), null);
        else {
          eofToken = L.Token_Token$eof(t1.get$offset(t1).$add(0, 1), this._firstComment);
          this._firstComment = null;
          this._lastComment = null;
        }
        eofToken.setNext$1(eofToken);
        this._tail = this._tail.setNext$1(eofToken);
        if (this._stackEnd >= 0)
          this._hasUnmatchedGroups = true;
        return this.get$firstToken();
      },
      _appendBeginToken$1: function(type) {
        var t1, t2, token;
        t1 = this._firstComment;
        t2 = this._tokenStart;
        if (t1 == null) {
          token = new L.BeginToken(type, t2, null);
          token._setCommentParent$1(null);
        } else {
          token = new L.BeginToken(type, t2, t1);
          token._setCommentParent$1(t1);
          this._firstComment = null;
          this._lastComment = null;
        }
        this._tail = this._tail.setNext$1(token);
        C.JSArray_methods.add$1(this._groupingStack, token);
        ++this._stackEnd;
      },
      _appendEndToken$2: function(type, beginType) {
        var t1, t2, token, begin;
        t1 = this._firstComment;
        t2 = this._tokenStart;
        if (t1 == null) {
          token = new L.SimpleToken(type, t2, null);
          token._setCommentParent$1(null);
        } else {
          token = new L.SimpleToken(type, t2, t1);
          token._setCommentParent$1(t1);
          this._firstComment = null;
          this._lastComment = null;
        }
        this._tail = this._tail.setNext$1(token);
        t1 = this._stackEnd;
        if (t1 >= 0) {
          t2 = this._groupingStack;
          if (t1 >= t2.length)
            return H.ioore(t2, t1);
          begin = t2[t1];
          if (begin.type === beginType) {
            begin.endToken = token;
            this._stackEnd = t1 - 1;
            C.JSArray_methods.removeAt$1(t2, t1);
          }
        }
      },
      _appendStringToken$2: function(type, value) {
        var t1, t2, t3;
        t1 = this._firstComment;
        t2 = this._tail;
        t3 = this._tokenStart;
        if (t1 == null) {
          t1 = new L.StringToken(type, t3, null);
          t1._setCommentParent$1(null);
          $.$get$StringUtilities_INTERNER().toString;
          t1._value = value;
          this._tail = t2.setNext$1(t1);
        } else {
          t3 = new L.StringToken(type, t3, t1);
          t3._setCommentParent$1(t1);
          $.$get$StringUtilities_INTERNER().toString;
          t3._value = value;
          this._tail = t2.setNext$1(t3);
          this._firstComment = null;
          this._lastComment = null;
        }
      },
      _appendStringTokenWithOffset$3: function(type, value, offset) {
        var t1, t2, t3;
        t1 = this._firstComment;
        t2 = this._tail;
        t3 = this._tokenStart + offset;
        if (t1 == null) {
          t1 = new L.StringToken(type, t3, null);
          t1._setCommentParent$1(null);
          $.$get$StringUtilities_INTERNER().toString;
          t1._value = value;
          this._tail = t2.setNext$1(t1);
        } else {
          t3 = new L.StringToken(type, t3, t1);
          t3._setCommentParent$1(t1);
          $.$get$StringUtilities_INTERNER().toString;
          t3._value = value;
          this._tail = t2.setNext$1(t3);
          this._firstComment = null;
          this._lastComment = null;
        }
      },
      _appendTokenOfType$1: function(type) {
        var t1, t2, t3;
        t1 = this._firstComment;
        t2 = this._tail;
        t3 = this._tokenStart;
        if (t1 == null) {
          t1 = new L.SimpleToken(type, t3, null);
          t1._setCommentParent$1(null);
          this._tail = t2.setNext$1(t1);
        } else {
          t3 = new L.SimpleToken(type, t3, t1);
          t3._setCommentParent$1(t1);
          this._tail = t2.setNext$1(t3);
          this._firstComment = null;
          this._lastComment = null;
        }
      },
      _appendTokenOfTypeWithOffset$2: function(type, offset) {
        var t1, t2, t3;
        t1 = this._firstComment;
        t2 = this._tail;
        if (t1 == null) {
          t1 = new L.SimpleToken(type, offset, null);
          t1._setCommentParent$1(null);
          this._tail = t2.setNext$1(t1);
        } else {
          t3 = new L.SimpleToken(type, offset, t1);
          t3._setCommentParent$1(t1);
          this._tail = t2.setNext$1(t3);
          this._firstComment = null;
          this._lastComment = null;
        }
      },
      _select$3: function(choice, yesType, noType) {
        var next = this._reader.advance$0();
        this._appendTokenOfType$1(noType);
        return next;
      },
      _tokenizeAmpersand$1: function(next) {
        next = this._reader.advance$0();
        this._appendTokenOfType$1(C.TokenType_OxW);
        return next;
      },
      _tokenizeBar$1: function(next) {
        next = this._reader.advance$0();
        this._appendTokenOfType$1(C.TokenType_ssu);
        return next;
      },
      _tokenizeCaret$1: function(next) {
        return this._select$3(61, C.TokenType_2Hh, C.TokenType_SGC);
      },
      _tokenizeDotOrNumber$1: function(next) {
        var t1, start;
        t1 = this._reader;
        start = t1.get$offset(t1);
        next = t1.advance$0();
        if (C.JSInt_methods.$le(48, next) && next.$le(0, 57))
          return this._tokenizeFractionPart$2(next, start);
        else {
          this._appendTokenOfType$1(C.TokenType_wCI);
          return next;
        }
      },
      _tokenizeEquals$1: function(next) {
        next = this._reader.advance$0();
        this._appendTokenOfType$1(C.TokenType_tca);
        return next;
      },
      _tokenizeExclamation$1: function(next) {
        next = this._reader.advance$0();
        this._appendTokenOfType$1(C.TokenType_cYV);
        return next;
      },
      _tokenizeFractionPart$2: function(next, start) {
        var t1, done, hasDigit;
        for (t1 = this._reader, done = false, hasDigit = false; !done;) {
          if (typeof next !== "number")
            return H.iae(next);
          if (!(48 <= next && next <= 57)) {
            done = true;
            continue;
          }
          next = t1.advance$0();
          hasDigit = true;
        }
        if (!hasDigit) {
          this._appendStringToken$2(C.TokenType_Vyt, t1.getString$2(start, -2));
          this._appendTokenOfTypeWithOffset$2(C.TokenType_wCI, t1.get$offset(t1).$sub(0, 1));
          return this.bigSwitch$1(next);
        }
        if (typeof next !== "number")
          return next.$lt();
        this._appendStringToken$2(C.TokenType_q1z, t1.getString$2(start, next < 0 ? 0 : -1));
        return next;
      },
      _tokenizeGreaterThan$1: function(next) {
        next = this._reader.advance$0();
        this._appendTokenOfType$1(C.TokenType_wOL);
        return next;
      },
      _tokenizeHexOrNumber$1: function(next) {
        this._reader.peek$0();
        return this._tokenizeNumber$1(next);
      },
      _tokenizeIdentifier$3: function(next, start, allowDollar) {
        var t1, t2;
        t1 = this._reader;
        while (true) {
          if (typeof next !== "number")
            return H.iae(next);
          if (!(97 <= next && next <= 122))
            if (!(65 <= next && next <= 90))
              if (!(48 <= next && next <= 57))
                if (next !== 95)
                  t2 = next === 36 && allowDollar;
                else
                  t2 = true;
              else
                t2 = true;
            else
              t2 = true;
          else
            t2 = true;
          if (!t2)
            break;
          next = t1.advance$0();
        }
        this._appendStringToken$2(C.TokenType_GbN, t1.getString$2(start, next < 0 ? 0 : -1));
        return next;
      },
      _tokenizeKeywordOrIdentifier$2: function(next, allowDollar) {
        var state, t1, start, t2, t3, t4;
        state = $.$get$KeywordState_KEYWORD_STATE();
        t1 = this._reader;
        start = t1.get$offset(t1);
        while (true) {
          t2 = state != null;
          if (t2) {
            if (typeof next !== "number")
              return H.iae(next);
            if (!(65 <= next && next <= 90))
              t3 = 97 <= next && next <= 122;
            else
              t3 = true;
          } else
            t3 = false;
          if (!t3)
            break;
          t2 = state._table;
          if (typeof next !== "number")
            return next.$sub();
          t3 = next - 65;
          if (t3 < 0 || t3 >= t2.length)
            return H.ioore(t2, t3);
          state = t2[t3];
          next = t1.advance$0();
        }
        if (!t2 || state._keyword == null)
          return this._tokenizeIdentifier$3(next, start, allowDollar);
        if (typeof next !== "number")
          return H.iae(next);
        if (48 <= next && next <= 57 || next === 95 || next === 36)
          return this._tokenizeIdentifier$3(next, start, allowDollar);
        else if (next < 128) {
          t1 = state._keyword;
          t2 = this._firstComment;
          t3 = this._tail;
          t4 = this._tokenStart;
          if (t2 == null) {
            t1 = new L.KeywordToken(t1, t1, t4, null);
            t1._setCommentParent$1(null);
            this._tail = t3.setNext$1(t1);
          } else {
            t1 = new L.KeywordToken(t1, t1, t4, t2);
            t1._setCommentParent$1(t2);
            this._tail = t3.setNext$1(t1);
            this._firstComment = null;
            this._lastComment = null;
          }
          return next;
        } else
          return this._tokenizeIdentifier$3(next, start, allowDollar);
      },
      _tokenizeLessThan$1: function(next) {
        next = this._reader.advance$0();
        this._appendTokenOfType$1(C.TokenType_Drw);
        return next;
      },
      _tokenizeMinus$1: function(next) {
        next = this._reader.advance$0();
        this._appendTokenOfType$1(C.TokenType_M5Z);
        return next;
      },
      _tokenizeMultiply$1: function(next) {
        return this._select$3(61, C.TokenType_SfG, C.TokenType_CNR);
      },
      _tokenizeNumber$1: function(next) {
        var t1, start;
        t1 = this._reader;
        start = t1.get$offset(t1);
        for (; true;) {
          next = t1.advance$0();
          if (C.JSInt_methods.$le(48, next) && next.$le(0, 57))
            continue;
          else {
            this._appendStringToken$2(C.TokenType_Vyt, t1.getString$2(start, next.$lt(0, 0) ? 0 : -1));
            return next;
          }
        }
      },
      _tokenizeOpenSquareBracket$1: function(next) {
        next = this._reader.advance$0();
        this._appendBeginToken$1(C.TokenType_AGi);
        return next;
      },
      _tokenizePercent$1: function(next) {
        return this._select$3(61, C.TokenType_ao1, C.TokenType_k07);
      },
      _tokenizePlus$1: function(next) {
        next = this._reader.advance$0();
        this._appendTokenOfType$1(C.TokenType_RzD);
        return next;
      },
      _tokenizeQuestion$0: function() {
        var next = this._reader.advance$0();
        this._appendTokenOfType$1(C.TokenType_V43);
        return next;
      },
      _tokenizeSingleLineRawString$3: function(next, quoteChar, start) {
        var t1 = this._reader;
        t1.advance$0();
        for (; true;)
          t1.advance$0();
        this._scanner$_errorListener.onError$1(0, V.AnalysisError$(this.source, t1.get$offset(t1), 1, C.ScannerErrorCode_IFE, null));
        this._appendStringToken$2(C.TokenType_86y, t1.getString$2(start, 0));
        return t1.advance$0();
      },
      _tokenizeSingleLineString$3: function(next, quoteChar, start) {
        var t1, t2;
        for (t1 = this._reader; next == null ? quoteChar != null : next !== quoteChar;) {
          if (next === 92)
            next = t1.advance$0();
          else if (next === 36) {
            this._appendStringToken$2(C.TokenType_86y, t1.getString$2(start, -1));
            next = this._tokenizeStringInterpolation$1(start);
            this._tokenStart = t1.get$offset(t1);
            start = t1.get$offset(t1);
            continue;
          }
          if (typeof next !== "number")
            return next.$le();
          if (next <= 13)
            t2 = next === 10 || next === 13 || next === -1;
          else
            t2 = false;
          if (t2) {
            this._scanner$_errorListener.onError$1(0, V.AnalysisError$(this.source, t1.get$offset(t1), 1, C.ScannerErrorCode_IFE, null));
            t1.get$offset(t1);
            if (next === -1)
              this._appendStringToken$2(C.TokenType_86y, t1.getString$2(start, 0));
            else
              this._appendStringToken$2(C.TokenType_86y, t1.getString$2(start, -1));
            return t1.advance$0();
          }
          next = t1.advance$0();
        }
        this._appendStringToken$2(C.TokenType_86y, t1.getString$2(start, 0));
        return t1.advance$0();
      },
      _tokenizeSlashOrComment$1: function(next) {
        next = this._reader.advance$0();
        this._appendTokenOfType$1(C.TokenType_sBE);
        return next;
      },
      _tokenizeString$3: function(next, start, raw) {
        var next0 = this._reader.advance$0();
        if (raw)
          return this._tokenizeSingleLineRawString$3(next0, next, start);
        else
          return this._tokenizeSingleLineString$3(next0, next, start);
      },
      _tokenizeStringInterpolation$1: function(start) {
        var t1, next, t2;
        t1 = this._reader;
        this._tokenStart = t1.get$offset(t1);
        next = t1.advance$0();
        this._appendStringTokenWithOffset$3(C.TokenType_MvE, "$", 0);
        if (!(C.JSInt_methods.$le(65, next) && next.$le(0, 90)))
          t2 = C.JSInt_methods.$le(97, next) && next.$le(0, 122) || false;
        else
          t2 = true;
        if (t2) {
          this._tokenStart = t1.get$offset(t1);
          next = this._tokenizeKeywordOrIdentifier$2(next, false);
        }
        this._tokenStart = t1.get$offset(t1);
        return next;
      },
      _tokenizeTag$1: function(next) {
        var t1 = this._reader;
        t1.get$offset(t1);
        this._appendTokenOfType$1(C.TokenType_P5Z);
        return t1.advance$0();
      },
      _tokenizeTilde$1: function(next) {
        next = this._reader.advance$0();
        this._appendTokenOfType$1(C.TokenType_ufh);
        return next;
      }
    }
  }], ["", "package:front_end/src/scanner/string_utilities.dart",, D, {}], ["", "package:front_end/src/scanner/token.dart",, L, {
    "^": "",
    Token_Token$eof: function(offset, precedingComments) {
      var eof = new L.SimpleToken(C.TokenType_Emx, offset, precedingComments);
      eof._setCommentParent$1(precedingComments);
      eof.previous = eof;
      eof.next = eof;
      return eof;
    },
    Token_lexicallyFirst: function(tokens) {
      var first, offset, i, token, t1;
      H.assertSubtype(tokens, "$isList", [L.Token], "$asList");
      for (first = null, offset = -1, i = 0; i < 3; ++i) {
        token = tokens[i];
        if (token != null)
          t1 = offset < 0 || token.offset < offset;
        else
          t1 = false;
        if (t1) {
          offset = token.offset;
          first = token;
        }
      }
      return first;
    },
    BeginToken: {
      "^": "SimpleToken;0endToken<,type,offset,0previous,0next,_precedingComment",
      get$endGroup: function() {
        return this.endToken;
      },
      set$endGroup: function(token) {
        this.endToken = token;
      }
    },
    CommentToken: {
      "^": "StringToken;"
    },
    DocumentationCommentToken: {
      "^": "CommentToken;"
    },
    Keyword: {
      "^": "TokenType;isBuiltIn<,isPseudo<,kind,isModifier,isOperator,isTopLevelKeyword,isUserDefinableOperator,lexeme,name,precedence,stringValue",
      get$name: function(_) {
        return this.lexeme.toUpperCase();
      },
      toString$0: function(_) {
        return this.lexeme.toUpperCase();
      },
      static: {
        Keyword__createKeywordMap: function() {
          var result, _i, keyword;
          result = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, L.Keyword);
          for (_i = 0; _i < 64; ++_i) {
            keyword = C.List_W1o[_i];
            result.$indexSet(0, keyword.lexeme, keyword);
          }
          return result;
        }
      }
    },
    KeywordToken: {
      "^": "SimpleToken;keyword<,type,offset,0previous,0next,_precedingComment",
      get$isIdentifier: function() {
        var t1 = this.keyword;
        return t1.isPseudo || t1.isBuiltIn;
      },
      get$isKeyword: function() {
        return true;
      },
      get$isKeywordOrIdentifier: function() {
        return true;
      }
    },
    SimpleToken: {
      "^": "Object;type>,offset>,0previous<,0next<,_precedingComment",
      get$beforeSynthetic: function() {
        return;
      },
      set$beforeSynthetic: function(previous) {
      },
      get$endGroup: function() {
        return;
      },
      get$isIdentifier: function() {
        return false;
      },
      get$isKeyword: function() {
        return false;
      },
      get$isKeywordOrIdentifier: function() {
        return this.get$isIdentifier();
      },
      get$isSynthetic: function() {
        return this.get$length(this) === 0;
      },
      get$keyword: function() {
        return;
      },
      get$kind: function(_) {
        return this.type.kind;
      },
      get$length: function(_) {
        return this.get$lexeme().length;
      },
      get$lexeme: function() {
        return this.type.lexeme;
      },
      matchesAny$1: function(types) {
        var t1, t2, _i;
        H.assertSubtype(types, "$isList", [L.TokenType], "$asList");
        for (t1 = types.length, t2 = this.type, _i = 0; _i < t1; ++_i)
          if (t2 === types[_i])
            return true;
        return false;
      },
      setNext$1: function(token) {
        this.next = token;
        token.previous = this;
        token.set$beforeSynthetic(this);
        return token;
      },
      toString$0: function(_) {
        return this.get$lexeme();
      },
      _setCommentParent$1: function(comment) {
        for (; comment != null;) {
          comment.set$parent(0, this);
          comment = H.interceptedTypeCheck(comment.next, "$isCommentToken");
        }
      },
      $isToken: 1
    },
    StringToken: {
      "^": "SimpleToken;0_value,type,offset,0previous,0next,_precedingComment",
      get$isIdentifier: function() {
        return this.type.kind === 97;
      },
      get$lexeme: function() {
        return this._value;
      }
    },
    SyntheticBeginToken: {
      "^": "BeginToken;0endToken,type,offset,0previous,0next,_precedingComment",
      get$isSynthetic: function() {
        return true;
      },
      get$length: function(_) {
        return 0;
      }
    },
    SyntheticKeywordToken: {
      "^": "KeywordToken;keyword,type,offset,0previous,0next,_precedingComment",
      get$length: function(_) {
        return 0;
      }
    },
    SyntheticStringToken: {
      "^": "StringToken;_token$_length,0_value,type,offset,0previous,0next,_precedingComment",
      get$isSynthetic: function() {
        return true;
      },
      get$length: function(_) {
        var t1 = this._token$_length;
        return t1 == null ? L.SimpleToken.prototype.get$length.call(this, this) : t1;
      }
    },
    SyntheticToken: {
      "^": "SimpleToken;0beforeSynthetic@,type,offset,0previous,0next,_precedingComment",
      get$isSynthetic: function() {
        return true;
      },
      get$length: function(_) {
        return 0;
      }
    },
    Token: {
      "^": "Object;"
    },
    TokenType: {
      "^": "Object;kind>,isModifier,isOperator,isTopLevelKeyword,isUserDefinableOperator,lexeme<,name>,precedence<,stringValue",
      get$isBuiltIn: function() {
        return false;
      },
      get$isPseudo: function() {
        return false;
      },
      get$isRelationalOperator: function() {
        return this === C.TokenType_Drw || this === C.TokenType_my0 || this === C.TokenType_wOL || this === C.TokenType_0Ef;
      },
      toString$0: function(_) {
        return this.get$name(this);
      }
    }
  }], ["", "package:source_span/src/file.dart",, Y, {
    "^": "",
    SourceFile: {
      "^": "Object;url,_file$_lineStarts,_decodedChars,0_cachedLine",
      get$length: function(_) {
        return this._decodedChars.length;
      },
      get$lines: function() {
        return this._file$_lineStarts.length;
      },
      SourceFile$decoded$2$url: function(decodedChars, url) {
        var t1, t2, t3, i, c, j, t4;
        for (t1 = this._decodedChars, t2 = t1.length, t3 = this._file$_lineStarts, i = 0; i < t2; ++i) {
          c = t1[i];
          if (c === 13) {
            j = i + 1;
            if (j < t2) {
              if (j >= t2)
                return H.ioore(t1, j);
              t4 = t1[j] !== 10;
            } else
              t4 = true;
            if (t4)
              c = 10;
          }
          if (c === 10)
            C.JSArray_methods.add$1(t3, i + 1);
        }
      },
      getLine$1: function(offset) {
        var t1;
        if (offset < 0)
          throw H.wrapException(P.RangeError$("Offset may not be negative, was " + offset + "."));
        else if (offset > this._decodedChars.length)
          throw H.wrapException(P.RangeError$("Offset " + offset + " must not be greater than the number of characters in the file, " + this.get$length(this) + "."));
        t1 = this._file$_lineStarts;
        if (offset < C.JSArray_methods.get$first(t1))
          return -1;
        if (offset >= C.JSArray_methods.get$last(t1))
          return t1.length - 1;
        if (this._isNearCachedLine$1(offset))
          return this._cachedLine;
        t1 = this._binarySearch$1(offset) - 1;
        this._cachedLine = t1;
        return t1;
      },
      _isNearCachedLine$1: function(offset) {
        var t1, t2, t3, t4;
        t1 = this._cachedLine;
        if (t1 == null)
          return false;
        t2 = this._file$_lineStarts;
        t3 = t2.length;
        if (t1 >>> 0 !== t1 || t1 >= t3)
          return H.ioore(t2, t1);
        if (offset < t2[t1])
          return false;
        if (t1 < t3 - 1) {
          t4 = t1 + 1;
          if (t4 >= t3)
            return H.ioore(t2, t4);
          t4 = offset < t2[t4];
        } else
          t4 = true;
        if (t4)
          return true;
        if (t1 < t3 - 2) {
          t4 = t1 + 2;
          if (t4 >= t3)
            return H.ioore(t2, t4);
          t4 = offset < t2[t4];
          t2 = t4;
        } else
          t2 = true;
        if (t2) {
          this._cachedLine = t1 + 1;
          return true;
        }
        return false;
      },
      _binarySearch$1: function(offset) {
        var t1, t2, max, min, half;
        t1 = this._file$_lineStarts;
        t2 = t1.length;
        max = t2 - 1;
        for (min = 0; min < max;) {
          half = min + C.JSInt_methods._tdivFast$1(max - min, 2);
          if (half < 0 || half >= t2)
            return H.ioore(t1, half);
          if (t1[half] > offset)
            max = half;
          else
            min = half + 1;
        }
        return max;
      },
      getColumn$2$line: function(offset, line) {
        var t1, lineStart;
        if (offset < 0)
          throw H.wrapException(P.RangeError$("Offset may not be negative, was " + offset + "."));
        else if (offset > this._decodedChars.length)
          throw H.wrapException(P.RangeError$("Offset " + offset + " must be not be greater than the number of characters in the file, " + this.get$length(this) + "."));
        line = this.getLine$1(offset);
        t1 = this._file$_lineStarts;
        if (line >>> 0 !== line || line >= t1.length)
          return H.ioore(t1, line);
        lineStart = t1[line];
        if (lineStart > offset)
          throw H.wrapException(P.RangeError$("Line " + line + " comes after offset " + offset + "."));
        return offset - lineStart;
      },
      getColumn$1: function(offset) {
        return this.getColumn$2$line(offset, null);
      },
      getOffset$2: function(line, column) {
        var t1, t2, result, t3;
        if (typeof line !== "number")
          return line.$lt();
        if (line < 0)
          throw H.wrapException(P.RangeError$("Line may not be negative, was " + line + "."));
        else {
          t1 = this._file$_lineStarts;
          t2 = t1.length;
          if (line >= t2)
            throw H.wrapException(P.RangeError$("Line " + line + " must be less than the number of lines in the file, " + this.get$lines() + "."));
        }
        result = t1[line];
        if (result <= this._decodedChars.length) {
          t3 = line + 1;
          t1 = t3 < t2 && result >= t1[t3];
        } else
          t1 = true;
        if (t1)
          throw H.wrapException(P.RangeError$("Line " + line + " doesn't have 0 columns."));
        return result;
      },
      getOffset$1: function(line) {
        return this.getOffset$2(line, null);
      }
    },
    FileLocation: {
      "^": "SourceLocationMixin;file,offset>",
      get$sourceUrl: function() {
        return this.file.url;
      },
      static: {
        FileLocation$_: function(file, offset) {
          if (offset < 0)
            H.throwExpression(P.RangeError$("Offset may not be negative, was " + offset + "."));
          else if (offset > file._decodedChars.length)
            H.throwExpression(P.RangeError$("Offset " + offset + " must not be greater than the number of characters in the file, " + file.get$length(file) + "."));
          return new Y.FileLocation(file, offset);
        }
      }
    },
    _FileSpan: {
      "^": "SourceSpanMixin;file,_file$_start,_end",
      get$length: function(_) {
        return this._end - this._file$_start;
      },
      get$text: function(_) {
        return P.String_String$fromCharCodes(C.NativeUint32List_methods.sublist$2(this.file._decodedChars, this._file$_start, this._end), 0, null);
      },
      compareTo$1: function(_, other) {
        var result;
        H.interceptedTypeCheck(other, "$isSourceSpan");
        if (!(other instanceof Y._FileSpan))
          return this.super$SourceSpanMixin$compareTo(0, other);
        result = C.JSInt_methods.compareTo$1(this._file$_start, other._file$_start);
        return result === 0 ? C.JSInt_methods.compareTo$1(this._end, other._end) : result;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!J.getInterceptor(other).$isFileSpan)
          return this.super$SourceSpanMixin$$eq(0, other);
        return this._file$_start === other._file$_start && this._end === other._end && J.$eq$(this.file.url, other.file.url);
      },
      get$hashCode: function(_) {
        return Y.SourceSpanMixin.prototype.get$hashCode.call(this, this);
      },
      $isFileSpan: 1
    }
  }], ["", "package:source_span/src/location.dart",, V, {
    "^": "",
    SourceLocation: {
      "^": "Object;"
    }
  }], ["", "package:source_span/src/location_mixin.dart",, D, {
    "^": "",
    SourceLocationMixin: {
      "^": "Object;",
      compareTo$1: function(_, other) {
        H.interceptedTypeCheck(other, "$isSourceLocation");
        if (!J.$eq$(this.file.url, other.file.url))
          throw H.wrapException(P.ArgumentError$('Source URLs "' + H.S(this.get$sourceUrl()) + '" and "' + H.S(other.get$sourceUrl()) + "\" don't match."));
        return this.offset - other.offset;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return !!J.getInterceptor(other).$isSourceLocation && J.$eq$(this.file.url, other.file.url) && this.offset === other.offset;
      },
      get$hashCode: function(_) {
        return J.get$hashCode$(this.file.url) + this.offset;
      },
      toString$0: function(_) {
        var t1, t2, t3, source, t4, t5;
        t1 = this.offset;
        t2 = "<" + new H.TypeImpl(H.getRti(this)).toString$0(0) + ": " + t1 + " ";
        t3 = this.file;
        source = t3.url;
        t4 = H.S(source == null ? "unknown source" : source) + ":";
        t5 = t3.getLine$1(t1);
        if (typeof t5 !== "number")
          return t5.$add();
        return t2 + (t4 + (t5 + 1) + ":" + (t3.getColumn$1(t1) + 1)) + ">";
      },
      $isComparable: 1,
      $asComparable: function() {
        return [V.SourceLocation];
      },
      $isSourceLocation: 1
    }
  }], ["", "package:source_span/src/span.dart",, V, {
    "^": "",
    SourceSpan: {
      "^": "Object;"
    }
  }], ["", "package:source_span/src/span_mixin.dart",, Y, {
    "^": "",
    SourceSpanMixin: {
      "^": "Object;",
      get$length: function(_) {
        var t1 = this.file;
        return Y.FileLocation$_(t1, this._end).offset - Y.FileLocation$_(t1, this._file$_start).offset;
      },
      compareTo$1: ["super$SourceSpanMixin$compareTo", function(_, other) {
        var t1, t2, t3, result;
        H.interceptedTypeCheck(other, "$isSourceSpan");
        t1 = this.file;
        t2 = Y.FileLocation$_(t1, this._file$_start);
        t3 = other.file;
        result = t2.compareTo$1(0, Y.FileLocation$_(t3, other._file$_start));
        return result === 0 ? Y.FileLocation$_(t1, this._end).compareTo$1(0, Y.FileLocation$_(t3, other._end)) : result;
      }],
      highlight$1$color: function(_, color) {
        var t1, t2, t3, column, t4, t5, t6, context, lineStart, endIndex, textLine, toColumn, i;
        t1 = this.file;
        t2 = this._file$_start;
        t3 = Y.FileLocation$_(t1, t2);
        column = t3.file.getColumn$1(t3.offset);
        t3 = Y.FileLocation$_(t1, t2);
        t3 = t1.getOffset$1(t3.file.getLine$1(t3.offset));
        t4 = this._end;
        t5 = Y.FileLocation$_(t1, t4);
        if (t5.file.getLine$1(t5.offset) === t1._file$_lineStarts.length - 1)
          t5 = null;
        else {
          t5 = Y.FileLocation$_(t1, t4);
          t5 = t5.file.getLine$1(t5.offset);
          if (typeof t5 !== "number")
            return t5.$add();
          t5 = t1.getOffset$1(t5 + 1);
        }
        t6 = t1._decodedChars;
        context = P.String_String$fromCharCodes(C.NativeUint32List_methods.sublist$2(t6, t3, t5), 0, null);
        lineStart = B.findLineStart(context, P.String_String$fromCharCodes(C.NativeUint32List_methods.sublist$2(t6, t2, t4), 0, null), column);
        if (lineStart != null && lineStart > 0) {
          t3 = C.JSString_methods.substring$2(context, 0, lineStart);
          context = C.JSString_methods.substring$1(context, lineStart);
        } else
          t3 = "";
        endIndex = C.JSString_methods.indexOf$1(context, "\n");
        textLine = endIndex === -1 ? context : C.JSString_methods.substring$2(context, 0, endIndex + 1);
        column = Math.min(column, textLine.length);
        toColumn = Math.min(column + Y.FileLocation$_(t1, this._end).offset - Y.FileLocation$_(t1, t2).offset, textLine.length);
        t1 = t3 + textLine;
        if (!C.JSString_methods.endsWith$1(textLine, "\n"))
          t1 += "\n";
        for (i = 0; i < column; ++i)
          t1 = C.JSString_methods._codeUnitAt$1(textLine, i) === 9 ? t1 + H.Primitives_stringFromCharCode(9) : t1 + H.Primitives_stringFromCharCode(32);
        t1 += C.JSString_methods.$mul("^", Math.max(toColumn - column, 1));
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      $eq: ["super$SourceSpanMixin$$eq", function(_, other) {
        var t1, t2, t3;
        if (other == null)
          return false;
        if (!!J.getInterceptor(other).$isSourceSpan) {
          t1 = this.file;
          t2 = Y.FileLocation$_(t1, this._file$_start);
          t3 = other.file;
          t1 = t2.$eq(0, Y.FileLocation$_(t3, other._file$_start)) && Y.FileLocation$_(t1, this._end).$eq(0, Y.FileLocation$_(t3, other._end));
        } else
          t1 = false;
        return t1;
      }],
      get$hashCode: function(_) {
        var t1, t2, t3;
        t1 = this.file;
        t2 = Y.FileLocation$_(t1, this._file$_start);
        t3 = J.get$hashCode$(t2.file.url);
        t1 = Y.FileLocation$_(t1, this._end);
        return t3 + t2.offset + 31 * (J.get$hashCode$(t1.file.url) + t1.offset);
      },
      toString$0: function(_) {
        var t1, t2, t3;
        t1 = this.file;
        t2 = this._file$_start;
        t3 = this._end;
        return "<" + new H.TypeImpl(H.getRti(this)).toString$0(0) + ": from " + Y.FileLocation$_(t1, t2).toString$0(0) + " to " + Y.FileLocation$_(t1, t3).toString$0(0) + ' "' + P.String_String$fromCharCodes(C.NativeUint32List_methods.sublist$2(t1._decodedChars, t2, t3), 0, null) + '">';
      },
      $isComparable: 1,
      $asComparable: function() {
        return [V.SourceSpan];
      },
      $isSourceSpan: 1
    }
  }], ["", "package:source_span/src/utils.dart",, B, {
    "^": "",
    findLineStart: function(context, text, column) {
      var isEmpty, index, lineStart, textColumn, t1;
      isEmpty = text === "";
      index = C.JSString_methods.indexOf$1(context, text);
      for (; index !== -1;) {
        lineStart = C.JSString_methods.lastIndexOf$2(context, "\n", index) + 1;
        textColumn = index - lineStart;
        if (column !== textColumn)
          t1 = isEmpty && column === textColumn + 1;
        else
          t1 = true;
        if (t1)
          return lineStart;
        index = C.JSString_methods.indexOf$2(context, text, index + 1);
      }
      return;
    }
  }], ["", "../lib/helpers.dart",, Q, {
    "^": "",
    camelCase: function(text) {
      var t1 = P.RegExp_RegExp("[a-zA-Z0-9]+", true, false);
      text.toString;
      return H.stringReplaceAllFuncUnchecked(text, t1, H.functionTypeCheck(new Q.camelCase_capitalize(), {func: 1, ret: P.String, args: [P.Match]}), H.functionTypeCheck(new Q.camelCase_skip(), {func: 1, ret: P.String, args: [P.String]}));
    },
    isPrimitiveType: function(typeName) {
      var isPrimitive = C.Map_UMi1I.$index(0, typeName);
      if (isPrimitive == null)
        return false;
      return isPrimitive;
    },
    fixFieldName: function($name, privateField, typeDef) {
      var camelCaseText, fieldName;
      camelCaseText = Q.camelCase(J.getInterceptor$s($name).startsWith$1($name, "_") || C.JSString_methods.startsWith$1($name, P.RegExp_RegExp("[0-9]", true, false)) ? J.substring$2$s(typeDef.name, 0, 1).toLowerCase() + $name : $name);
      fieldName = C.JSString_methods.substring$2(camelCaseText, 0, 1).toLowerCase() + C.JSString_methods.substring$1(camelCaseText, 1);
      if (privateField)
        return "_" + fieldName;
      return fieldName;
    },
    getTypeName: function(obj) {
      if (typeof obj === "string")
        return "String";
      else if (typeof obj === "number" && Math.floor(obj) === obj)
        return "int";
      else if (typeof obj === "number")
        return "double";
      else if (typeof obj === "boolean")
        return "bool";
      else if (obj == null)
        return "Null";
      else if (!!J.getInterceptor(obj).$isList)
        return "List";
      else
        return "Class";
    },
    camelCase_capitalize: {
      "^": "Closure:15;",
      call$1: function(m) {
        return J.substring$2$s(m.$index(0, 0), 0, 1).toUpperCase() + J.substring$1$s(m.$index(0, 0), 1);
      }
    },
    camelCase_skip: {
      "^": "Closure:10;",
      call$1: function(s) {
        return "";
      }
    }
  }], ["", "../lib/model_generator.dart",, A, {
    "^": "",
    ModelGenerator: {
      "^": "Object;_rootClassName,_privateFields,allClasses",
      _generateClassDefinition$2: function(className, jsonRawData) {
        var t1, keys, classDefinition;
        t1 = P.String;
        H.assertSubtype(jsonRawData, "$isMap", [t1, null], "$asMap");
        keys = jsonRawData.get$keys();
        classDefinition = new M.ClassDefinition(className, this._privateFields, new H.JsLinkedHashMap(0, 0, [t1, M.TypeDefinition]));
        J.forEach$1$ax(keys, new A.ModelGenerator__generateClassDefinition_closure(jsonRawData, classDefinition));
        t1 = this.allClasses;
        if (C.JSArray_methods.firstWhere$2$orElse(t1, new A.ModelGenerator__generateClassDefinition_closure0(classDefinition), new A.ModelGenerator__generateClassDefinition_closure1()) == null)
          C.JSArray_methods.add$1(t1, classDefinition);
        C.JSArray_methods.forEach$1(classDefinition.get$dependencies(), new A.ModelGenerator__generateClassDefinition_closure2(this, jsonRawData));
      },
      generateUnsafeDart$1: function(rawJson) {
        var t1, t2, t3;
        t1 = P.String;
        this._generateClassDefinition$2(this._rootClassName, H.assertSubtype(C.JsonCodec_null_null.decode$1(0, rawJson), "$isMap", [t1, null], "$asMap"));
        t2 = this.allClasses;
        t3 = H.getTypeArgumentByIndex(t2, 0);
        return new H.MappedListIterable(t2, H.functionTypeCheck(new A.ModelGenerator_generateUnsafeDart_closure(), {func: 1, ret: t1, args: [t3]}), [t3, t1]).join$1(0, "\n");
      }
    },
    ModelGenerator__generateClassDefinition_closure: {
      "^": "Closure:4;jsonRawData,classDefinition",
      call$1: function(key) {
        var typeDef, t1;
        H.stringTypeCheck(key);
        typeDef = M.TypeDefinition_TypeDefinition$fromDynamic(this.jsonRawData.$index(0, key));
        if (typeDef.name === "Class")
          typeDef.name = Q.camelCase(key);
        t1 = typeDef.subtype;
        if (t1 != null && t1 === "Class")
          typeDef.subtype = Q.camelCase(key);
        this.classDefinition.fields.$indexSet(0, key, typeDef);
      }
    },
    ModelGenerator__generateClassDefinition_closure0: {
      "^": "Closure:59;classDefinition",
      call$1: function(cd) {
        return J.$eq$(H.interceptedTypeCheck(cd, "$isClassDefinition"), this.classDefinition);
      }
    },
    ModelGenerator__generateClassDefinition_closure1: {
      "^": "Closure:0;",
      call$0: function() {
        return;
      }
    },
    ModelGenerator__generateClassDefinition_closure2: {
      "^": "Closure:60;$this,jsonRawData",
      call$1: function(dependency) {
        var t1;
        H.interceptedTypeCheck(dependency, "$isDependency");
        if (dependency.typeDef.name === "List") {
          t1 = this.jsonRawData;
          if (J.$gt$n(J.get$length$asx(t1.$index(0, dependency.name)), 0))
            this.$this._generateClassDefinition$2(Q.camelCase(dependency.name), H.assertSubtype(J.$index$asx(t1.$index(0, dependency.name), 0), "$isMap", [P.String, null], "$asMap"));
        } else
          this.$this._generateClassDefinition$2(Q.camelCase(dependency.name), H.assertSubtype(this.jsonRawData.$index(0, dependency.name), "$isMap", [P.String, null], "$asMap"));
      }
    },
    ModelGenerator_generateUnsafeDart_closure: {
      "^": "Closure:61;",
      call$1: [function(c) {
        return J.toString$0$(H.interceptedTypeCheck(c, "$isClassDefinition"));
      }, null, null, 4, 0, null, 30, "call"]
    }
  }], ["", "page.dart",, V, {
    "^": "",
    main: function() {
      var t1, convertButton, textArea, highlightedDartCode, usePrivateFieldsCheckbox, copyClipboardButton, hiddenElement, boldElement, t2;
      t1 = document;
      convertButton = H.interceptedTypeCheck(t1.querySelector('button[type="submit"]'), "$isButtonElement");
      textArea = H.interceptedTypeCheck(t1.querySelector("textarea"), "$isTextAreaElement");
      highlightedDartCode = t1.querySelector("pre code.dart");
      usePrivateFieldsCheckbox = H.interceptedTypeCheck(t1.querySelector("#private-fields"), "$isCheckboxInputElement");
      copyClipboardButton = H.interceptedTypeCheck(t1.querySelector("#copy-clipboard"), "$isButtonElement");
      hiddenElement = H.interceptedTypeCheck(t1.querySelector("#hidden-dart"), "$isTextAreaElement");
      boldElement = t1.querySelector("#invalid-dart");
      copyClipboardButton.toString;
      t1 = W.MouseEvent;
      t2 = {func: 1, ret: -1, args: [t1]};
      W._EventStreamSubscription$(copyClipboardButton, "click", H.functionTypeCheck(new V.main_closure(copyClipboardButton, hiddenElement), t2), false, t1);
      convertButton.toString;
      W._EventStreamSubscription$(convertButton, "click", H.functionTypeCheck(new V.main_closure0(textArea, usePrivateFieldsCheckbox, boldElement, hiddenElement, highlightedDartCode, copyClipboardButton), t2), false, t1);
    },
    main_closure: {
      "^": "Closure:23;copyClipboardButton,hiddenElement",
      call$1: function($event) {
        H.interceptedTypeCheck($event, "$isMouseEvent");
        $event.preventDefault();
        $event.stopPropagation();
        if (!this.copyClipboardButton.disabled) {
          this.hiddenElement.select();
          document.execCommand("Copy");
        }
      }
    },
    main_closure0: {
      "^": "Closure:23;textArea,usePrivateFieldsCheckbox,boldElement,hiddenElement,highlightedDartCode,copyClipboardButton",
      call$1: function($event) {
        var syntaxError, invalidDart, json, modelGenerator, dartCode, e, exception, unsafeDart, t1, formatter, t2, errorListener, t3, reader, stringSource, scanner, startToken, t4, t5, parser, node, visitor, t6, t7, t8, t9, t10, result, selectionStart, selectionEnd, selectionLength, output;
        H.interceptedTypeCheck($event, "$isMouseEvent");
        $event.preventDefault();
        $event.stopPropagation();
        syntaxError = false;
        invalidDart = false;
        json = __getCodeTxt();
        try {
          C.JsonCodec_null_null.decode$1(0, json);
        } catch (exception) {
          H.unwrapException(exception);
          syntaxError = true;
          window.alert("The json provider has syntax errors");
        }
        if (!syntaxError) {
          modelGenerator = new A.ModelGenerator("Autogenerated", this.usePrivateFieldsCheckbox.checked, H.setRuntimeTypeInfo([], [M.ClassDefinition]));
          dartCode = null;
          try {
            unsafeDart = modelGenerator.generateUnsafeDart$1(H.stringTypeCheck(json));
            t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, Q.StyleFix);
            formatter = new U.DartFormatter(null, 80, 0, t1);
            t2 = A.SourceCode$(unsafeDart, true, null, null, null);
            errorListener = new Y.ErrorListener(H.setRuntimeTypeInfo([], [V.AnalysisError]));
            t3 = t2.text;
            reader = D.CharSequenceReader$(t3);
            stringSource = new O.StringSource(t3, t2.uri, null, Date.now());
            scanner = Z.Scanner_Scanner$fasta(stringSource, errorListener, reader.getContents$0(), reader.get$offset(reader));
            startToken = scanner.tokenize$0();
            t4 = scanner.lineStarts;
            if (t4.length < 1)
              H.throwExpression(P.ArgumentError$("lineStarts must be non-empty"));
            if (t4.length > 1)
              if (J.$ge$n(t4[1], 2)) {
                if (1 >= t4.length)
                  return H.ioore(t4, 1);
                t5 = J.$sub$n(t4[1], 2);
                if (t5 >>> 0 !== t5 || t5 >= t3.length)
                  return H.ioore(t3, t5);
                t5 = t3[t5] === "\r";
              } else
                t5 = false;
            else
              t5 = false;
            if (t5)
              formatter.lineEnding = "\r\n";
            else
              formatter.lineEnding = "\n";
            errorListener.throwIfErrors$0();
            parser = X.Parser_Parser(stringSource, errorListener, null);
            parser.set$enableOptionalNewAndConst(true);
            node = parser.parseCompilationUnit$1(startToken);
            errorListener.throwIfErrors$0();
            visitor = new F.SourceVisitor(formatter, new E.LineInfo(t4, 0), t2, false, false, 0, H.setRuntimeTypeInfo([], [P.bool]), H.setRuntimeTypeInfo([], [O.MetadataRule]), P.LinkedHashMap_LinkedHashMap$_empty(L.Token, B.ArgumentSublist));
            t4 = O.Rule;
            t5 = [t4];
            t6 = H.setRuntimeTypeInfo([], t5);
            t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, t4);
            t5 = H.setRuntimeTypeInfo([], t5);
            t7 = H.setRuntimeTypeInfo([], [E.OpenSpan]);
            t8 = H.setRuntimeTypeInfo([0], [P.int]);
            t9 = $.FastHash__nextId + 1 & 268435455;
            $.FastHash__nextId = t9;
            t9 = new F.NestingBuilder(t8, new M.NestingLevel(null, 0, t9));
            t8 = H.setRuntimeTypeInfo([], [M.NestingLevel]);
            t10 = H.setRuntimeTypeInfo([], [E.Chunk]);
            t9.indent$1(0);
            C.JSArray_methods.add$1(t8, t9.get$currentNesting());
            visitor.builder = new S.ChunkBuilder(formatter, null, t2, t10, C.Whitespace_none, t6, t4, t5, t7, t9, t8, false, 0);
            visitor.visit$1(node);
            visitor.writePrecedingCommentsAndNewlines$1(node.endToken.next);
            t8 = visitor.builder;
            t8._writeHardSplit$0();
            t8._divideChunks$0();
            if ($.traceChunkBuilder) {
              A.log(H.S($.$get$_green()) + "\nBuilt:" + H.S($.$get$_none()));
              A.dumpChunks(0, t8._chunks);
              A.log(null);
            }
            t2 = t8._formatter;
            t4 = new P.StringBuffer("");
            result = new A.LineWriter(t4, t8._chunks, t2.lineEnding, t2.pageWidth, 0, P.LinkedHashMap_LinkedHashMap$_empty(A._BlockKey, A.FormatResult)).writeLines$2$isCompilationUnit(t2.indent, true);
            t2 = t8._source;
            if (t2.selectionStart != null) {
              selectionStart = result.selectionStart;
              selectionEnd = result.selectionEnd;
              if (selectionStart == null)
                selectionStart = t4._contents.length;
              selectionLength = (selectionEnd == null ? t4._contents.length : selectionEnd) - selectionStart;
            } else {
              selectionStart = null;
              selectionLength = null;
            }
            output = A.SourceCode$(result.text, true, selectionLength, selectionStart, t2.uri);
            if (t1._length === 0 && !M.equalIgnoringWhitespace(t3, output.text))
              H.throwExpression(new A.UnexpectedOutputException(t3, output.text));
            dartCode = output.text;
            t1 = this.boldElement.style;
            t1.display = "none";
          } catch (exception) {
            H.unwrapException(exception);
            invalidDart = true;
          }
          if (invalidDart) {
            try {
              dartCode = modelGenerator.generateUnsafeDart$1(json);
            } catch (exception) {
              e = H.unwrapException(exception);
              window.alert("Cannot generate dart code. Please check the project caveats.");
              this.hiddenElement.value = "";
              this.highlightedDartCode.textContent = "";
              t1 = this.copyClipboardButton;
              t1.toString;
              new W._ElementAttributeMap(t1).putIfAbsent$2("disabled", new V.main__closure());
              P.print(e);
              return;
            }
            t1 = this.boldElement.style;
            t1.display = "block";
          }
          this.hiddenElement.value = dartCode;
          t1 = this.highlightedDartCode;
          t1.textContent = dartCode;
          t2 = this.copyClipboardButton;
          t2.toString;
          new W._ElementAttributeMap(t2).remove$1(0, "disabled");
          $.$get$context().$index(0, "hljs").callMethod$2("highlightBlock", H.setRuntimeTypeInfo([t1], [W.Element]));
        } else {
          this.hiddenElement.value = "";
          this.highlightedDartCode.textContent = "";
          t1 = this.copyClipboardButton;
          t1.toString;
          new W._ElementAttributeMap(t1).putIfAbsent$2("disabled", new V.main__closure0());
        }
      }
    },
    main__closure: {
      "^": "Closure:3;",
      call$0: function() {
        return "disabled";
      }
    },
    main__closure0: {
      "^": "Closure:3;",
      call$0: function() {
        return "disabled";
      }
    }
  }, 1], ["", "../lib/syntax.dart",, M, {
    "^": "",
    TypeDefinition: {
      "^": "Object;name,subtype,_isPrimitive",
      get$isPrimitive: function() {
        return this._isPrimitive;
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other instanceof M.TypeDefinition) {
          t1 = this.name;
          t2 = other.name;
          if (t1 == null ? t2 == null : t1 === t2) {
            t1 = this.subtype;
            t2 = other.subtype;
            t2 = t1 == null ? t2 == null : t1 === t2;
            t1 = t2;
          } else
            t1 = false;
          return t1;
        }
        return false;
      },
      jsonParseExpression$2: function(key, privateField) {
        var jsonKey, fieldKey, t1, properType;
        jsonKey = "json['" + H.S(key) + "']";
        fieldKey = Q.fixFieldName(key, privateField, this);
        if (this._isPrimitive) {
          if (this.name === "List")
            return fieldKey + " = json['" + H.S(key) + "'].cast<" + H.S(this.subtype) + ">();";
          return fieldKey + " = json['" + H.S(key) + "'];";
        } else if (this.name === "List")
          return "if (json['" + H.S(key) + "'] != null) {\n\t\t\t" + fieldKey + " = new List<" + H.S(this.subtype) + ">();\n\t\t\tjson['" + H.S(key) + "'].forEach((v) { " + fieldKey + ".add(new " + H.S(this.subtype) + ".fromJson(v)); });\n\t\t}";
        else {
          t1 = fieldKey + " = json['" + H.S(key) + "'] != null ? ";
          properType = this.subtype;
          return t1 + ("new " + H.S(properType != null ? properType : this.name) + ".fromJson(" + jsonKey + ")") + " : null;";
        }
      },
      toJsonExpression$2: function(key, privateField) {
        var thisKey = "this." + Q.fixFieldName(key, privateField, this);
        if (this._isPrimitive)
          return "data['" + H.S(key) + "'] = " + thisKey + ";";
        else if (this.name === "List")
          return "if (" + thisKey + " != null) {\n      data['" + H.S(key) + "'] = " + thisKey + ".map((v) => v.toJson()).toList();\n    }";
        else
          return "if (" + thisKey + " != null) {\n      data['" + H.S(key) + "'] = " + (thisKey + ".toJson()") + ";\n    }";
      },
      static: {
        TypeDefinition_TypeDefinition$fromDynamic: function(obj) {
          var type, t1;
          type = Q.getTypeName(obj);
          if (type === "List") {
            H.listTypeCheck(obj);
            t1 = J.getInterceptor$asx(obj);
            return M.TypeDefinition$(type, t1.get$length(obj) > 0 ? Q.getTypeName(t1.$index(obj, 0)) : "Null");
          }
          return M.TypeDefinition$(type, null);
        },
        TypeDefinition$: function($name, subtype) {
          var t1 = new M.TypeDefinition($name, subtype, false);
          if (subtype == null)
            t1._isPrimitive = Q.isPrimitiveType($name);
          else
            t1._isPrimitive = Q.isPrimitiveType($name + "<" + subtype + ">");
          return t1;
        }
      }
    },
    Dependency: {
      "^": "Object;name,typeDef"
    },
    ClassDefinition: {
      "^": "Object;_syntax$_name,_syntax$_privateFields,fields",
      get$dependencies: function() {
        var dependenciesList = H.setRuntimeTypeInfo([], [M.Dependency]);
        this.fields.get$keys().forEach$1(0, new M.ClassDefinition_dependencies_closure(this, dependenciesList));
        return dependenciesList;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (other instanceof M.ClassDefinition) {
          if (this._syntax$_name !== other._syntax$_name)
            return false;
          return this.fields.get$keys().firstWhere$2$orElse(0, new M.ClassDefinition_operator$eq_closure(this, other), new M.ClassDefinition_operator$eq_closure0()) == null;
        }
        return false;
      },
      _addTypeDef$2: function(typeDef, sb) {
        var t1;
        sb._contents += H.S(typeDef.name);
        t1 = typeDef.subtype;
        if (t1 != null)
          sb._contents += "<" + t1 + ">";
      },
      get$_syntax$_fieldList: function() {
        var t1, t2, t3;
        t1 = this.fields.get$keys();
        t2 = P.String;
        t3 = H.getRuntimeTypeArgument(t1, "Iterable", 0);
        return H.MappedIterable_MappedIterable(t1, H.functionTypeCheck(new M.ClassDefinition__fieldList_closure(this), {func: 1, ret: t2, args: [t3]}), t3, t2).join$1(0, "\n");
      },
      get$_gettersSetters: function() {
        var t1, t2, t3;
        t1 = this.fields.get$keys();
        t2 = P.String;
        t3 = H.getRuntimeTypeArgument(t1, "Iterable", 0);
        return H.MappedIterable_MappedIterable(t1, H.functionTypeCheck(new M.ClassDefinition__gettersSetters_closure(this), {func: 1, ret: t2, args: [t3]}), t3, t2).join$1(0, "\n");
      },
      get$_defaultPrivateConstructor: function() {
        var t1, sb, t2, t3;
        t1 = {};
        sb = new P.StringBuffer("");
        sb._contents = "\t" + this._syntax$_name + "({";
        t1.i = 0;
        t2 = this.fields;
        t3 = t2.get$keys();
        t3 = t3.get$length(t3);
        t2.get$keys().forEach$1(0, new M.ClassDefinition__defaultPrivateConstructor_closure(t1, this, sb, t3 - 1));
        sb._contents += "}) {\n";
        t2.get$keys().forEach$1(0, new M.ClassDefinition__defaultPrivateConstructor_closure0(this, sb));
        t2 = sb._contents += "}";
        return t2.charCodeAt(0) == 0 ? t2 : t2;
      },
      get$_defaultConstructor: function() {
        var t1, sb, t2, t3;
        t1 = {};
        sb = new P.StringBuffer("");
        sb._contents = "\t" + this._syntax$_name + "({";
        t1.i = 0;
        t2 = this.fields;
        t3 = t2.get$keys();
        t3 = t3.get$length(t3);
        t2.get$keys().forEach$1(0, new M.ClassDefinition__defaultConstructor_closure(t1, this, sb, t3 - 1));
        t3 = sb._contents += "});";
        return t3.charCodeAt(0) == 0 ? t3 : t3;
      },
      get$_jsonParseFunc: function() {
        var sb, t1;
        sb = new P.StringBuffer("");
        t1 = "\t" + this._syntax$_name;
        sb._contents = t1;
        sb._contents = t1 + ".fromJson(Map<String, dynamic> json) {\n";
        this.fields.get$keys().forEach$1(0, new M.ClassDefinition__jsonParseFunc_closure(this, sb));
        t1 = sb._contents += "\t}";
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      get$_jsonGenFunc: function() {
        var sb, t1;
        sb = new P.StringBuffer("");
        sb._contents = "\tMap<String, dynamic> toJson() {\n\t\tfinal Map<String, dynamic> data = new Map<String, dynamic>();\n";
        this.fields.get$keys().forEach$1(0, new M.ClassDefinition__jsonGenFunc_closure(this, sb));
        t1 = sb._contents += "\t\treturn data;\n";
        t1 += "\t}";
        sb._contents = t1;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      toString$0: function(_) {
        var t1 = this._syntax$_name;
        if (this._syntax$_privateFields)
          return "class " + t1 + " {\n" + this.get$_syntax$_fieldList() + "\n\n" + this.get$_defaultPrivateConstructor() + "\n\n" + this.get$_gettersSetters() + "\n\n" + this.get$_jsonParseFunc() + "\n\n" + this.get$_jsonGenFunc() + "\n}\n";
        else
          return "class " + t1 + " {\n" + this.get$_syntax$_fieldList() + "\n\n" + this.get$_defaultConstructor() + "\n\n" + this.get$_jsonParseFunc() + "\n\n" + this.get$_jsonGenFunc() + "\n}\n";
      }
    },
    ClassDefinition_dependencies_closure: {
      "^": "Closure:4;$this,dependenciesList",
      call$1: function(k) {
        var t1;
        H.stringTypeCheck(k);
        t1 = this.$this.fields;
        if (!t1.$index(0, k).get$isPrimitive())
          C.JSArray_methods.add$1(this.dependenciesList, new M.Dependency(k, t1.$index(0, k)));
      }
    },
    ClassDefinition_operator$eq_closure: {
      "^": "Closure:24;$this,other",
      call$1: function(k) {
        var t1;
        H.stringTypeCheck(k);
        t1 = this.other;
        return t1.fields.get$keys().firstWhere$2$orElse(0, new M.ClassDefinition_operator$eq__closure(this.$this, k, t1), new M.ClassDefinition_operator$eq__closure0()) == null;
      }
    },
    ClassDefinition_operator$eq__closure: {
      "^": "Closure:24;$this,k,other",
      call$1: function(ok) {
        H.stringTypeCheck(ok);
        return J.$eq$(this.$this.fields.$index(0, this.k), this.other.fields.$index(0, ok));
      }
    },
    ClassDefinition_operator$eq__closure0: {
      "^": "Closure:0;",
      call$0: function() {
        return;
      }
    },
    ClassDefinition_operator$eq_closure0: {
      "^": "Closure:0;",
      call$0: function() {
        return;
      }
    },
    ClassDefinition__fieldList_closure: {
      "^": "Closure:10;$this",
      call$1: [function(key) {
        var t1, f, fieldName, sb;
        H.stringTypeCheck(key);
        t1 = this.$this;
        f = t1.fields.$index(0, key);
        fieldName = Q.fixFieldName(key, t1._syntax$_privateFields, f);
        sb = new P.StringBuffer("");
        sb._contents = "\t";
        t1._addTypeDef$2(f, sb);
        t1 = sb._contents += " " + fieldName + ";";
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }, null, null, 4, 0, null, 11, "call"]
    },
    ClassDefinition__gettersSetters_closure: {
      "^": "Closure:10;$this",
      call$1: [function(key) {
        var t1, f, publicFieldName, privateFieldName, sb;
        H.stringTypeCheck(key);
        t1 = this.$this;
        f = t1.fields.$index(0, key);
        publicFieldName = Q.fixFieldName(key, false, f);
        privateFieldName = Q.fixFieldName(key, true, f);
        sb = new P.StringBuffer("");
        sb._contents = "\t";
        t1._addTypeDef$2(f, sb);
        sb._contents += " get " + publicFieldName + " => " + privateFieldName + ";\n\tset " + publicFieldName + "(";
        t1._addTypeDef$2(f, sb);
        t1 = sb._contents += " " + publicFieldName + ") => " + privateFieldName + " = " + publicFieldName + ";";
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }, null, null, 4, 0, null, 11, "call"]
    },
    ClassDefinition__defaultPrivateConstructor_closure: {
      "^": "Closure:4;_box_0,$this,sb,len",
      call$1: function(key) {
        var t1, f, publicFieldName, t2, t3, t4;
        H.stringTypeCheck(key);
        t1 = this.$this;
        f = t1.fields.$index(0, key);
        publicFieldName = Q.fixFieldName(key, false, f);
        Q.fixFieldName(key, true, f);
        t2 = this.sb;
        t1._addTypeDef$2(f, t2);
        t1 = t2._contents += " " + publicFieldName;
        t3 = this._box_0;
        t4 = t3.i;
        if (t4 !== this.len)
          t2._contents = t1 + ", ";
        t3.i = t4 + 1;
      }
    },
    ClassDefinition__defaultPrivateConstructor_closure0: {
      "^": "Closure:4;$this,sb",
      call$1: function(key) {
        var f, publicFieldName;
        H.stringTypeCheck(key);
        f = this.$this.fields.$index(0, key);
        publicFieldName = Q.fixFieldName(key, false, f);
        this.sb._contents += "this." + Q.fixFieldName(key, true, f) + " = " + publicFieldName + ";\n";
      }
    },
    ClassDefinition__defaultConstructor_closure: {
      "^": "Closure:4;_box_0,$this,sb,len",
      call$1: function(key) {
        var t1, t2, t3, t4;
        H.stringTypeCheck(key);
        t1 = this.$this;
        t2 = this.sb;
        t1 = t2._contents += "this." + Q.fixFieldName(key, t1._syntax$_privateFields, t1.fields.$index(0, key));
        t3 = this._box_0;
        t4 = t3.i;
        if (t4 !== this.len)
          t2._contents = t1 + ", ";
        t3.i = t4 + 1;
      }
    },
    ClassDefinition__jsonParseFunc_closure: {
      "^": "Closure:4;$this,sb",
      call$1: function(k) {
        var t1;
        H.stringTypeCheck(k);
        t1 = this.$this;
        this.sb._contents += "\t\t" + t1.fields.$index(0, k).jsonParseExpression$2(k, t1._syntax$_privateFields) + "\n";
      }
    },
    ClassDefinition__jsonGenFunc_closure: {
      "^": "Closure:4;$this,sb",
      call$1: function(k) {
        var t1;
        H.stringTypeCheck(k);
        t1 = this.$this;
        this.sb._contents += "\t\t" + t1.fields.$index(0, k).toJsonExpression$2(k, t1._syntax$_privateFields) + "\n";
      }
    }
  }]];
  setupProgram(dart, 0, 0);
  // getInterceptor methods
  J.getInterceptor = function(receiver) {
    if (typeof receiver == "number") {
      if (Math.floor(receiver) == receiver)
        return J.JSInt.prototype;
      return J.JSDouble.prototype;
    }
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return J.JSNull.prototype;
    if (typeof receiver == "boolean")
      return J.JSBool.prototype;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$ansx = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$asx = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$ax = function(receiver) {
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$n = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$ns = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$s = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$x = function(receiver) {
    if (receiver == null)
      return receiver;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.set$index$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$index(receiver, value);
  };
  J.get$data$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$data(receiver);
  };
  J.get$error$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$error(receiver);
  };
  J.get$first$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$first(receiver);
  };
  J.get$head$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$head(receiver);
  };
  J.get$isEmpty$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
  };
  J.get$isNotEmpty$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
  };
  J.get$iterator$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$iterator(receiver);
  };
  J.get$kind$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$kind(receiver);
  };
  J.get$length$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$length(receiver);
  };
  J.get$start$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$start(receiver);
  };
  J.get$text$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$text(receiver);
  };
  J.get$type$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$type(receiver);
  };
  J.$add$ansx = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver + a0;
    return J.getInterceptor$ansx(receiver).$add(receiver, a0);
  };
  J.$ge$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver >= a0;
    return J.getInterceptor$n(receiver).$ge(receiver, a0);
  };
  J.$gt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver > a0;
    return J.getInterceptor$n(receiver).$gt(receiver, a0);
  };
  J.$index$asx = function(receiver, a0) {
    if (typeof a0 === "number")
      if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
        if (a0 >>> 0 === a0 && a0 < receiver.length)
          return receiver[a0];
    return J.getInterceptor$asx(receiver).$index(receiver, a0);
  };
  J.$lt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver < a0;
    return J.getInterceptor$n(receiver).$lt(receiver, a0);
  };
  J.$sub$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver - a0;
    return J.getInterceptor$n(receiver).$sub(receiver, a0);
  };
  J._codeUnitAt$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver)._codeUnitAt$1(receiver, a0);
  };
  J._removeEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver)._removeEventListener$3(receiver, a0, a1, a2);
  };
  J.accept$1$1$x = function(receiver, a0, $T1) {
    return J.getInterceptor$x(receiver).accept$1$1(receiver, a0, $T1);
  };
  J.add$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).add$1(receiver, a0);
  };
  J.addEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
  };
  J.allMatches$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
  };
  J.appendText$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).appendText$1(receiver, a0);
  };
  J.codeUnitAt$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
  };
  J.compareTo$1$ns = function(receiver, a0) {
    return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
  };
  J.contains$1$asx = function(receiver, a0) {
    return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
  };
  J.contains$2$asx = function(receiver, a0, a1) {
    return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
  };
  J.elementAt$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
  };
  J.forEach$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
  };
  J.indexOf$1$asx = function(receiver, a0) {
    return J.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
  };
  J.map$1$1$ax = function(receiver, a0, $T1) {
    return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
  };
  J.matchAsPrefix$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
  };
  J.padRight$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).padRight$1(receiver, a0);
  };
  J.skip$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
  };
  J.split$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).split$1(receiver, a0);
  };
  J.startsWith$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
  };
  J.substring$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).substring$1(receiver, a0);
  };
  J.substring$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
  };
  J.toInt$0$n = function(receiver) {
    return J.getInterceptor$n(receiver).toInt$0(receiver);
  };
  J.toRadixString$1$n = function(receiver, a0) {
    return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
  };
  J.trim$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).trim$0(receiver);
  };
  J.get$hashCode$ = function(receiver) {
    return J.getInterceptor(receiver).get$hashCode(receiver);
  };
  J.$eq$ = function(receiver, a0) {
    if (receiver == null)
      return a0 == null;
    if (typeof receiver != "object")
      return a0 != null && receiver === a0;
    return J.getInterceptor(receiver).$eq(receiver, a0);
  };
  J.noSuchMethod$1$ = function(receiver, a0) {
    return J.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
  };
  J.toString$0$ = function(receiver) {
    return J.getInterceptor(receiver).toString$0(receiver);
  };
  Isolate.makeConstantList = function(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  };
  var $ = Isolate.$isolateProperties;
  C.Interceptor_methods = J.Interceptor.prototype;
  C.JSArray_methods = J.JSArray.prototype;
  C.JSInt_methods = J.JSInt.prototype;
  C.JSNull_methods = J.JSNull.prototype;
  C.JSNumber_methods = J.JSNumber.prototype;
  C.JSString_methods = J.JSString.prototype;
  C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
  C.NativeUint16List_methods = H.NativeUint16List.prototype;
  C.NativeUint32List_methods = H.NativeUint32List.prototype;
  C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
  C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
  C.Assert_0 = new M.Assert(0, "Assert.Expression");
  C.Assert_1 = new M.Assert(1, "Assert.Initializer");
  C.Assert_2 = new M.Assert(2, "Assert.Statement");
  C.AsyncModifier_0 = new V.AsyncModifier(0, "AsyncModifier.Sync");
  C.AsyncModifier_1 = new V.AsyncModifier(1, "AsyncModifier.SyncStar");
  C.AsyncModifier_2 = new V.AsyncModifier(2, "AsyncModifier.Async");
  C.AsyncModifier_3 = new V.AsyncModifier(3, "AsyncModifier.AsyncStar");
  C.C_EmptyIterator = new H.EmptyIterator([P.Null]);
  C.C_Link1 = new N.Link([L.BeginToken]);
  C.C_Link = new N.Link([L.Token]);
  C.C_Link0 = new N.Link([R.TypeInfo]);
  C.C_NoType = new O.NoType();
  C.C_NoTypeParamOrArg = new O.NoTypeParamOrArg();
  C.C_OutOfMemoryError = new P.OutOfMemoryError();
  C.C_PrefixedType = new O.PrefixedType();
  C.C_SimpleType = new O.SimpleType();
  C.C_SimpleTypeArgument1 = new O.SimpleTypeArgument1();
  C.C_SimpleTypeWith1Argument = new O.SimpleTypeWith1Argument();
  C.C_Utf8Encoder = new P.Utf8Encoder();
  C.C_VoidType = new O.VoidType();
  C.C__RootZone = new P._RootZone();
  C.Template_YUp = new B.Template("Expected an identifier, but got '#lexeme'.", null, B.fasta_codes___withArgumentsExpectedIdentifier$closure(), [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.CatchParameterIdentifierContext_W7k = new G.CatchParameterIdentifierContext("catchParameter", false, false, false, false, false, true, false, C.Template_YUp);
  C.ClassOrNamedMixinIdentifierContext_6BT = new G.ClassOrNamedMixinIdentifierContext("classOrNamedMixinDeclaration", true, false, false, false, false, false, true, C.Template_YUp);
  C.Template_yHq = new B.Template("Can't use '#lexeme' as a name here.", null, B.fasta_codes___withArgumentsBuiltInIdentifierInDeclaration$closure(), [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Code_2dw = new B.Code("BuiltInIdentifierInDeclaration", C.Template_yHq, "BUILT_IN_IDENTIFIER_IN_DECLARATION", "GENERIC", null, [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Template_Rcj = new B.Template("Expected '#string' after this.", null, B.fasta_codes___withArgumentsExpectedAfterButGot$closure(), [{func: 1, ret: B.Message, args: [P.String]}]);
  C.Code_4QF = new B.Code("ExpectedAfterButGot", C.Template_Rcj, "EXPECTED_TOKEN", "MISSING_TOKEN_AFTER_THIS", null, [{func: 1, ret: B.Message, args: [P.String]}]);
  C.Template_bLu = new B.Template("String starting with #string must end with #string2.", null, B.fasta_codes___withArgumentsUnterminatedString$closure(), [{func: 1, ret: B.Message, args: [P.String, P.String]}]);
  C.Code_67z = new B.Code("UnterminatedString", C.Template_bLu, "UNTERMINATED_STRING_LITERAL", "UNTERMINATED_STRING", null, [{func: 1, ret: B.Message, args: [P.String, P.String]}]);
  C.Template_mT8 = new B.Template("Expected a class member, but got '#lexeme'.", null, B.fasta_codes___withArgumentsExpectedClassMember$closure(), [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Code_6UD = new B.Code("ExpectedClassMember", C.Template_mT8, "EXPECTED_CLASS_MEMBER", "*fatal*", null, [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Template_0zQ = new B.Template("Expected a type, but got '#lexeme'.", null, B.fasta_codes___withArgumentsExpectedType$closure(), [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Severity_1 = new Y.Severity(1, "Severity.error");
  C.Code_7Ap = new B.Code("ExpectedType", C.Template_0zQ, "EXPECTED_TYPE_NAME", "*fatal*", C.Severity_1, [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Template_LYg = new B.Template("The modifier '#lexeme' was already specified.", "Try removing all but one occurance of the modifier.", B.fasta_codes___withArgumentsDuplicatedModifier$closure(), [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Code_7pq = new B.Code("DuplicatedModifier", C.Template_LYg, "DUPLICATED_MODIFIER", "EXTRANEOUS_MODIFIER", null, [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Template_USr = new B.Template("The string '#lexeme' isn't a user-definable operator.", null, B.fasta_codes___withArgumentsInvalidOperator$closure(), [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Code_8eb = new B.Code("InvalidOperator", C.Template_USr, "INVALID_OPERATOR", "*fatal*", null, [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Code_GFv = new B.Code("ExpectedIdentifier", C.Template_YUp, "MISSING_IDENTIFIER", "*fatal*", C.Severity_1, [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Template_0 = new B.Template("Expected a enum body, but got '#lexeme'.", "An enum definition must have a body with at least one constant name.", B.fasta_codes___withArgumentsExpectedEnumBody$closure(), [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Code_IQc = new B.Code("ExpectedEnumBody", C.Template_0, "MISSING_ENUM_BODY", "*fatal*", null, [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Template_0G2 = new B.Template("Expected '#string' before this.", null, B.fasta_codes___withArgumentsExpectedButGot$closure(), [{func: 1, ret: B.Message, args: [P.String]}]);
  C.Code_MdF = new B.Code("ExpectedButGot", C.Template_0G2, "EXPECTED_TOKEN", "MISSING_TOKEN_BEFORE_THIS", null, [{func: 1, ret: B.Message, args: [P.String]}]);
  C.Template_ivg = new B.Template("Expected a class body, but got '#lexeme'.", null, B.fasta_codes___withArgumentsExpectedClassBody$closure(), [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Code_NOA = new B.Code("ExpectedClassBody", C.Template_ivg, "MISSING_CLASS_BODY", "*fatal*", null, [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Template_4Eb = new B.Template("Expected a String, but got '#lexeme'.", null, B.fasta_codes___withArgumentsExpectedString$closure(), [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Code_QWS = new B.Code("ExpectedString", C.Template_4Eb, "EXPECTED_STRING_LITERAL", "*fatal*", null, [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Template_Udt = new B.Template("The control character #unicode can only be used in strings and comments.", null, B.fasta_codes___withArgumentsAsciiControlCharacter$closure(), [{func: 1, ret: B.Message, args: [P.int]}]);
  C.Code_UCF = new B.Code("AsciiControlCharacter", C.Template_Udt, "ILLEGAL_CHARACTER", "BAD_INPUT_CHARACTER", null, [{func: 1, ret: B.Message, args: [P.int]}]);
  C.Template_27z = new B.Template("Can't find '#string' to match '#lexeme'.", null, B.fasta_codes___withArgumentsUnmatchedToken$closure(), [{func: 1, ret: B.Message, args: [P.String, L.Token]}]);
  C.Code_a9w = new B.Code("UnmatchedToken", C.Template_27z, "EXPECTED_TOKEN", "UNMATCHED_TOKEN", null, [{func: 1, ret: B.Message, args: [P.String, L.Token]}]);
  C.Template_IyS = new B.Template("The const variable '#name' must be initialized.", "Try adding an initializer ('= <expression>') to the declaration.", B.fasta_codes___withArgumentsConstFieldWithoutInitializer$closure(), [{func: 1, ret: B.Message, args: [P.String]}]);
  C.Code_cQL = new B.Code("ConstFieldWithoutInitializer", C.Template_IyS, "CONST_NOT_INITIALIZED", "*ignored*", null, [{func: 1, ret: B.Message, args: [P.String]}]);
  C.Template_EKW = new B.Template("Expected to find '#string'.", null, B.fasta_codes___withArgumentsExpectedToken$closure(), [{func: 1, ret: B.Message, args: [P.String]}]);
  C.Code_fRV = new B.Code("ExpectedToken", C.Template_EKW, "EXPECTED_TOKEN", "*fatal*", null, [{func: 1, ret: B.Message, args: [P.String]}]);
  C.Template_kn0 = new B.Template("The final variable '#name' must be initialized.", "Try adding an initializer ('= <expression>') to the declaration.", B.fasta_codes___withArgumentsFinalFieldWithoutInitializer$closure(), [{func: 1, ret: B.Message, args: [P.String]}]);
  C.Code_kyk = new B.Code("FinalFieldWithoutInitializer", C.Template_kn0, "FINAL_NOT_INITIALIZED", "*ignored*", null, [{func: 1, ret: B.Message, args: [P.String]}]);
  C.Template_eRB = new B.Template("The non-ASCII character '#character' (#unicode) can't be used in identifiers, only in strings and comments.", "Try using an US-ASCII letter, a digit, '_' (an underscore), or '$' (a dollar sign).", B.fasta_codes___withArgumentsNonAsciiIdentifier$closure(), [{func: 1, ret: B.Message, args: [P.String, P.int]}]);
  C.Code_m9N = new B.Code("NonAsciiIdentifier", C.Template_eRB, "ILLEGAL_CHARACTER", "BAD_INPUT_CHARACTER", null, [{func: 1, ret: B.Message, args: [P.String, P.int]}]);
  C.Template_hkZ = new B.Template("Can't have modifier '#lexeme' here.", "Try removing '#lexeme'.", B.fasta_codes___withArgumentsExtraneousModifier$closure(), [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Code_oqF = new B.Code("ExtraneousModifier", C.Template_hkZ, "EXTRANEOUS_MODIFIER", "EXTRANEOUS_MODIFIER", null, [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Template_eEX = new B.Template("Expected a declaration, but got '#lexeme'.", null, B.fasta_codes___withArgumentsExpectedDeclaration$closure(), [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Code_qFu = new B.Code("ExpectedDeclaration", C.Template_eEX, "EXPECTED_EXECUTABLE", "*fatal*", null, [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Template_RkP = new B.Template("Unexpected token '#lexeme'.", null, B.fasta_codes___withArgumentsUnexpectedToken$closure(), [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Code_qd9 = new B.Code("UnexpectedToken", C.Template_RkP, "UNEXPECTED_TOKEN", "*fatal*", null, [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Template_h0f = new B.Template("The built-in identifier '#lexeme' can't be used as a type.", "Try correcting the name to match an existing type.", B.fasta_codes___withArgumentsBuiltInIdentifierAsType$closure(), [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Code_uXf = new B.Code("BuiltInIdentifierAsType", C.Template_h0f, "BUILT_IN_IDENTIFIER_AS_TYPE", "EXTRANEOUS_MODIFIER", null, [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Template_46y = new B.Template("The non-ASCII space character #unicode can only be used in strings and comments.", null, B.fasta_codes___withArgumentsNonAsciiWhitespace$closure(), [{func: 1, ret: B.Message, args: [P.int]}]);
  C.Code_ynK = new B.Code("NonAsciiWhitespace", C.Template_46y, "ILLEGAL_CHARACTER", "BAD_INPUT_CHARACTER", null, [{func: 1, ret: B.Message, args: [P.int]}]);
  C.Template_CV5 = new B.Template("Expected a function body, but got '#lexeme'.", null, B.fasta_codes___withArgumentsExpectedFunctionBody$closure(), [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.Code_yzN = new B.Code("ExpectedFunctionBody", C.Template_CV5, "MISSING_FUNCTION_BODY", "NATIVE_OR_FATAL", null, [{func: 1, ret: B.Message, args: [L.Token]}]);
  C.CombinatorIdentifierContext_uzr = new G.CombinatorIdentifierContext("combinator", false, false, false, false, false, true, false, C.Template_YUp);
  C.CommentType_DOCUMENTATION = new U.CommentType("DOCUMENTATION");
  C.CompileTimeErrorCode_LlQ = new A.CompileTimeErrorCode("ASYNC_FOR_IN_WRONG_CONTEXT", "The asynchronous for-in can only be used in an asynchronous function.", "Try marking the function body with either 'async' or 'async*', or removing the 'await' before the for loop.", false);
  C.ConstructorReferenceIdentifierContext_2No = new G.ConstructorReferenceIdentifierContext("constructorReference", false, false, false, false, true, true, false, C.Template_YUp);
  C.ConstructorReferenceIdentifierContext_8aB = new G.ConstructorReferenceIdentifierContext("constructorReferenceContinuation", false, false, false, true, false, true, true, C.Template_YUp);
  C.ConstructorReferenceIdentifierContext_dHP = new G.ConstructorReferenceIdentifierContext("constructorReferenceContinuationAfterTypeArguments", false, false, false, true, false, true, true, C.Template_YUp);
  C.DirectiveState_0 = new A.DirectiveState(0, "DirectiveState.Unknown");
  C.DirectiveState_1 = new A.DirectiveState(1, "DirectiveState.Script");
  C.DirectiveState_2 = new A.DirectiveState(2, "DirectiveState.Library");
  C.DirectiveState_3 = new A.DirectiveState(3, "DirectiveState.ImportAndExport");
  C.DirectiveState_4 = new A.DirectiveState(4, "DirectiveState.Part");
  C.DirectiveState_5 = new A.DirectiveState(5, "DirectiveState.PartOf");
  C.DirectiveState_6 = new A.DirectiveState(6, "DirectiveState.Declarations");
  C.DottedNameIdentifierContext_GVa = new G.DottedNameIdentifierContext("dottedName", false, false, false, false, false, true, false, C.Template_YUp);
  C.DottedNameIdentifierContext_jR7 = new G.DottedNameIdentifierContext("dottedNameContinuation", false, false, false, true, false, true, true, C.Template_YUp);
  C.EnumDeclarationIdentifierContext_OzL = new G.EnumDeclarationIdentifierContext("enumDeclaration", true, false, false, false, false, false, true, C.Template_YUp);
  C.EnumValueDeclarationIdentifierContext_BOe = new G.EnumValueDeclarationIdentifierContext("enumValueDeclaration", true, false, false, false, false, true, true, C.Template_YUp);
  C.ErrorSeverity_ERROR_3_E_error = new A.ErrorSeverity("ERROR", 3, "E", "error");
  C.ErrorType_3X9 = new A.ErrorType("SYNTACTIC_ERROR", 6, C.ErrorSeverity_ERROR_3_E_error);
  C.ErrorType_cLp = new A.ErrorType("COMPILE_TIME_ERROR", 2, C.ErrorSeverity_ERROR_3_E_error);
  C.ExpressionIdentifierContext_0 = new G.ExpressionIdentifierContext("expressionContinuation", false, false, false, true, false, true, true, C.Template_YUp);
  C.ExpressionIdentifierContext_CeS = new G.ExpressionIdentifierContext("expression", false, false, false, false, true, true, false, C.Template_YUp);
  C.FieldDeclarationIdentifierContext_84u = new G.FieldDeclarationIdentifierContext("fieldDeclaration", true, false, false, false, false, true, true, C.Template_YUp);
  C.FieldInitializerIdentifierContext_YMM = new G.FieldInitializerIdentifierContext("fieldInitializer", false, false, false, true, false, true, true, C.Template_YUp);
  C.FormalParameterDeclarationIdentifierContext_QWw = new G.FormalParameterDeclarationIdentifierContext("formalParameterDeclaration", true, false, false, false, false, true, true, C.Template_YUp);
  C.FormalParameterKind_0 = new N.FormalParameterKind(0, "FormalParameterKind.mandatory");
  C.FormalParameterKind_1 = new N.FormalParameterKind(1, "FormalParameterKind.optionalNamed");
  C.FormalParameterKind_2 = new N.FormalParameterKind(2, "FormalParameterKind.optionalPositional");
  C.ImportPrefixIdentifierContext_w66 = new G.ImportPrefixIdentifierContext("importPrefixDeclaration", true, false, false, false, false, false, true, C.Template_YUp);
  C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
  C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
  C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
  C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
  C.JS_CONST_bDt = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
  C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
  C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
  C.JS_CONST_u2C = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
  C.JsonCodec_null_null = new P.JsonCodec(null, null);
  C.JsonDecoder_null = new P.JsonDecoder(null);
  C.Keyword_0 = new L.Keyword(false, false, 107, false, false, false, false, "while", "WHILE", 0, "while");
  C.Keyword_2No = new L.Keyword(false, true, 107, false, false, false, false, "native", "NATIVE", 0, "native");
  C.Keyword_4GC = new L.Keyword(false, true, 107, false, false, false, false, "on", "ON", 0, "on");
  C.Keyword_66S = new L.Keyword(false, false, 107, false, false, false, false, "return", "RETURN", 0, "return");
  C.Keyword_6h0 = new L.Keyword(true, false, 107, true, false, false, false, "external", "EXTERNAL", 0, "external");
  C.Keyword_6pl = new L.Keyword(false, true, 107, false, false, false, false, "hide", "HIDE", 0, "hide");
  C.Keyword_6x5 = new L.Keyword(false, false, 107, false, false, true, false, "enum", "ENUM", 0, "enum");
  C.Keyword_7N70 = new L.Keyword(false, false, 107, false, false, false, false, "catch", "CATCH", 0, "catch");
  C.Keyword_7N7 = new L.Keyword(false, true, 107, false, false, false, false, "await", "AWAIT", 0, "await");
  C.Keyword_8Gl = new L.Keyword(false, false, 107, false, false, false, false, "do", "DO", 0, "do");
  C.Keyword_8aB = new L.Keyword(true, false, 107, true, false, false, false, "covariant", "COVARIANT", 0, "covariant");
  C.Keyword_AUT = new L.Keyword(true, false, 107, false, false, true, false, "part", "PART", 0, "part");
  C.Keyword_Am8 = new L.Keyword(false, false, 107, false, false, false, false, "case", "CASE", 0, "case");
  C.Keyword_Apa = new L.Keyword(false, false, 107, false, false, false, false, "null", "NULL", 0, "null");
  C.Keyword_BYg = new L.Keyword(false, true, 107, false, false, false, false, "of", "OF", 0, "of");
  C.Keyword_C1B = new L.Keyword(true, false, 107, false, false, false, false, "factory", "FACTORY", 0, "factory");
  C.Keyword_EK0 = new L.Keyword(false, false, 107, false, false, false, false, "with", "WITH", 0, "with");
  C.Keyword_EeX = new L.Keyword(false, false, 107, false, false, false, false, "is", "IS", 8, "is");
  C.Keyword_FmR = new L.Keyword(false, false, 107, false, false, false, false, "void", "VOID", 0, "void");
  C.Keyword_IEU = new L.Keyword(true, false, 107, false, false, false, false, "operator", "OPERATOR", 0, "operator");
  C.Keyword_IU6 = new L.Keyword(false, false, 107, true, false, false, false, "final", "FINAL", 0, "final");
  C.Keyword_IYE = new L.Keyword(false, false, 107, false, false, false, false, "if", "IF", 0, "if");
  C.Keyword_KYb = new L.Keyword(false, false, 107, false, false, false, false, "for", "FOR", 0, "for");
  C.Keyword_Lwp = new L.Keyword(false, true, 107, false, false, false, false, "Function", "FUNCTION", 0, "Function");
  C.Keyword_M8y = new L.Keyword(false, false, 107, true, false, false, false, "const", "CONST", 0, "const");
  C.Keyword_MTU = new L.Keyword(false, false, 107, false, false, false, false, "false", "FALSE", 0, "false");
  C.Keyword_Owc = new L.Keyword(false, false, 107, true, false, false, false, "var", "VAR", 0, "var");
  C.Keyword_QKO = new L.Keyword(false, false, 107, false, false, false, false, "rethrow", "RETHROW", 0, "rethrow");
  C.Keyword_S8Y = new L.Keyword(false, false, 107, false, false, false, false, "switch", "SWITCH", 0, "switch");
  C.Keyword_USZ = new L.Keyword(false, true, 107, false, false, false, false, "yield", "YIELD", 0, "yield");
  C.Keyword_WnT = new L.Keyword(false, false, 107, false, false, false, false, "super", "SUPER", 0, "super");
  C.Keyword_YEV = new L.Keyword(false, false, 107, false, false, false, false, "throw", "THROW", 0, "throw");
  C.Keyword_a54 = new L.Keyword(false, false, 107, false, false, false, false, "in", "IN", 0, "in");
  C.Keyword_a5y = new L.Keyword(false, false, 107, false, false, false, false, "assert", "ASSERT", 0, "assert");
  C.Keyword_aJC = new L.Keyword(false, false, 107, false, false, false, false, "true", "TRUE", 0, "true");
  C.Keyword_alK = new L.Keyword(true, false, 107, true, false, false, false, "abstract", "ABSTRACT", 0, "abstract");
  C.Keyword_cXJ = new L.Keyword(true, false, 107, false, false, false, false, "get", "GET", 0, "get");
  C.Keyword_cw1 = new L.Keyword(false, false, 107, false, false, false, false, "new", "NEW", 0, "new");
  C.Keyword_ea7 = new L.Keyword(false, false, 107, false, false, false, false, "default", "DEFAULT", 0, "default");
  C.Keyword_g0v = new L.Keyword(false, false, 107, false, false, false, false, "break", "BREAK", 0, "break");
  C.Keyword_g3a = new L.Keyword(false, false, 107, false, false, false, false, "try", "TRY", 0, "try");
  C.Keyword_gRf = new L.Keyword(true, false, 107, false, false, false, false, "as", "AS", 8, "as");
  C.Keyword_jpl = new L.Keyword(true, false, 107, false, false, true, false, "typedef", "TYPEDEF", 0, "typedef");
  C.Keyword_jvJ = new L.Keyword(true, false, 107, true, false, false, false, "static", "STATIC", 0, "static");
  C.Keyword_kfn = new L.Keyword(true, false, 107, false, false, true, false, "library", "LIBRARY", 0, "library");
  C.Keyword_mTW = new L.Keyword(false, true, 107, false, false, false, false, "show", "SHOW", 0, "show");
  C.Keyword_q96 = new L.Keyword(false, false, 107, false, false, false, false, "finally", "FINALLY", 0, "finally");
  C.Keyword_qTT = new L.Keyword(true, false, 107, false, false, false, false, "deferred", "DEFERRED", 0, "deferred");
  C.Keyword_rb5 = new L.Keyword(true, false, 107, false, false, false, false, "set", "SET", 0, "set");
  C.Keyword_scn = new L.Keyword(false, false, 107, false, false, false, false, "extends", "EXTENDS", 0, "extends");
  C.Keyword_soA = new L.Keyword(false, false, 107, false, false, false, false, "else", "ELSE", 0, "else");
  C.Keyword_ssT = new L.Keyword(false, false, 107, false, false, false, false, "this", "THIS", 0, "this");
  C.Keyword_uPL = new L.Keyword(true, false, 107, false, false, false, false, "implements", "IMPLEMENTS", 0, "implements");
  C.Keyword_wwi = new L.Keyword(true, false, 107, false, false, true, false, "import", "IMPORT", 0, "import");
  C.Keyword_xkS = new L.Keyword(false, false, 107, false, false, true, false, "class", "CLASS", 0, "class");
  C.Keyword_y1M = new L.Keyword(true, false, 107, false, false, true, false, "export", "EXPORT", 0, "export");
  C.Keyword_yLX = new L.Keyword(false, false, 107, false, false, false, false, "continue", "CONTINUE", 0, "continue");
  C.LabelDeclarationIdentifierContext_NQR = new G.LabelDeclarationIdentifierContext("labelDeclaration", true, false, false, false, false, true, true, C.Template_YUp);
  C.LabelReferenceIdentifierContext_f0f = new G.LabelReferenceIdentifierContext("labelReference", false, false, false, false, false, true, false, C.Template_YUp);
  C.LibraryIdentifierContext_0eS = new G.LibraryIdentifierContext("libraryNameContinuation", false, true, false, true, false, true, true, C.Template_YUp);
  C.LibraryIdentifierContext_9we = new G.LibraryIdentifierContext("partNameContinuation", false, true, false, true, false, true, true, C.Template_YUp);
  C.LibraryIdentifierContext_Esr = new G.LibraryIdentifierContext("libraryName", false, true, false, false, false, true, false, C.Template_YUp);
  C.LibraryIdentifierContext_Y3m = new G.LibraryIdentifierContext("partName", false, true, false, false, false, true, false, C.Template_YUp);
  C.List_127_2047_65535_1114111 = H.setRuntimeTypeInfo(Isolate.makeConstantList([127, 2047, 65535, 1114111]), [P.int]);
  C.List_1qV = H.setRuntimeTypeInfo(Isolate.makeConstantList([">", ")", "]", "{", "}", ",", ";"]), [P.String]);
  C.TokenType_5uk = new L.TokenType(40, false, false, false, false, "(", "OPEN_PAREN", 17, "(");
  C.TokenType_cOk = new L.TokenType(123, false, false, false, false, "{", "OPEN_CURLY_BRACKET", 0, "{");
  C.TokenType_ECn = new L.TokenType(130, false, false, false, false, "=>", "FUNCTION", 0, "=>");
  C.TokenType_Drw = new L.TokenType(60, false, true, false, true, "<", "LT", 8, "<");
  C.List_2nU = H.setRuntimeTypeInfo(Isolate.makeConstantList([C.TokenType_5uk, C.TokenType_cOk, C.TokenType_ECn, C.TokenType_Drw]), [L.TokenType]);
  C.List_4aQ = H.setRuntimeTypeInfo(Isolate.makeConstantList([C.TokenType_cOk, C.TokenType_ECn]), [L.TokenType]);
  C.List_6z6 = H.setRuntimeTypeInfo(Isolate.makeConstantList([".", "==", ")"]), [P.String]);
  C.List_8eb = H.setRuntimeTypeInfo(Isolate.makeConstantList([".", "(", "{", "=>"]), [P.String]);
  C.List_9Is = H.setRuntimeTypeInfo(Isolate.makeConstantList([">>", ">=", ">>="]), [P.String]);
  C.List_9oi = H.setRuntimeTypeInfo(Isolate.makeConstantList([C.TokenType_5uk, C.TokenType_ECn, C.TokenType_cOk, C.TokenType_Drw]), [L.TokenType]);
  C.List_CpJ = H.setRuntimeTypeInfo(Isolate.makeConstantList([",", "}"]), [P.String]);
  C.List_EBV = H.setRuntimeTypeInfo(Isolate.makeConstantList([":", "=", ",", "(", ")", "[", "]", "{", "}"]), [P.String]);
  C.List_ECQ = H.setRuntimeTypeInfo(Isolate.makeConstantList([".", ",", "(", ")", "[", "]", "}", "?", ":", ";"]), [P.String]);
  C.List_ERv = H.setRuntimeTypeInfo(Isolate.makeConstantList([",", ">", ">>"]), [P.String]);
  C.List_G4S = H.setRuntimeTypeInfo(Isolate.makeConstantList(["assert", "break", "continue", "do", "else", "final", "for", "if", "return", "switch", "try", "var", "void", "while"]), [P.String]);
  C.TokenType_tca = new L.TokenType(61, false, true, false, false, "=", "EQ", 1, "=");
  C.TokenType_O55 = new L.TokenType(44, false, false, false, false, ",", "COMMA", 0, ",");
  C.TokenType_FmR = new L.TokenType(59, false, false, false, false, ";", "SEMICOLON", 0, ";");
  C.List_KHg = H.setRuntimeTypeInfo(Isolate.makeConstantList([C.TokenType_tca, C.TokenType_O55, C.TokenType_FmR]), [L.TokenType]);
  C.List_Kp9 = H.setRuntimeTypeInfo(Isolate.makeConstantList([";", ",", "if", "as", "show", "hide"]), [P.String]);
  C.List_NMh = H.setRuntimeTypeInfo(Isolate.makeConstantList([";", "=", ",", "}"]), [P.String]);
  C.List_PHH = H.setRuntimeTypeInfo(Isolate.makeConstantList([":"]), [P.String]);
  C.List_QYh = H.setRuntimeTypeInfo(Isolate.makeConstantList([",", ")"]), [P.String]);
  C.Keyword_C5Z = new L.Keyword(false, true, 107, false, false, false, false, "async", "ASYNC", 0, "async");
  C.Keyword_Q49 = new L.Keyword(true, false, 107, false, false, false, false, "dynamic", "DYNAMIC", 0, "dynamic");
  C.Keyword_XFw = new L.Keyword(true, false, 107, false, false, false, false, "interface", "INTERFACE", 0, "interface");
  C.Keyword_25i = new L.Keyword(true, false, 107, false, false, false, false, "mixin", "MIXIN", 0, "mixin");
  C.Keyword_ifH = new L.Keyword(false, true, 107, false, false, false, false, "patch", "PATCH", 0, "patch");
  C.Keyword_PPt = new L.Keyword(false, true, 107, false, false, false, false, "source", "SOURCE", 0, "source");
  C.Keyword_XW9 = new L.Keyword(false, true, 107, false, false, false, false, "sync", "SYNC", 0, "sync");
  C.List_W1o = H.setRuntimeTypeInfo(Isolate.makeConstantList([C.Keyword_alK, C.Keyword_gRf, C.Keyword_a5y, C.Keyword_C5Z, C.Keyword_7N7, C.Keyword_g0v, C.Keyword_Am8, C.Keyword_7N70, C.Keyword_xkS, C.Keyword_M8y, C.Keyword_yLX, C.Keyword_8aB, C.Keyword_ea7, C.Keyword_qTT, C.Keyword_8Gl, C.Keyword_Q49, C.Keyword_soA, C.Keyword_6x5, C.Keyword_y1M, C.Keyword_scn, C.Keyword_6h0, C.Keyword_C1B, C.Keyword_MTU, C.Keyword_IU6, C.Keyword_q96, C.Keyword_KYb, C.Keyword_Lwp, C.Keyword_cXJ, C.Keyword_6pl, C.Keyword_IYE, C.Keyword_uPL, C.Keyword_wwi, C.Keyword_a54, C.Keyword_XFw, C.Keyword_EeX, C.Keyword_kfn, C.Keyword_25i, C.Keyword_2No, C.Keyword_cw1, C.Keyword_Apa, C.Keyword_BYg, C.Keyword_4GC, C.Keyword_IEU, C.Keyword_AUT, C.Keyword_ifH, C.Keyword_QKO, C.Keyword_66S, C.Keyword_rb5, C.Keyword_mTW, C.Keyword_PPt, C.Keyword_jvJ, C.Keyword_WnT, C.Keyword_S8Y, C.Keyword_XW9, C.Keyword_ssT, C.Keyword_YEV, C.Keyword_aJC, C.Keyword_g3a, C.Keyword_jpl, C.Keyword_Owc, C.Keyword_FmR, C.Keyword_0, C.Keyword_EK0, C.Keyword_USZ]), [L.Keyword]);
  C.List_Xul = H.setRuntimeTypeInfo(Isolate.makeConstantList(["const", "get", "final", "set", "var", "void"]), [P.String]);
  C.List_YwG = H.setRuntimeTypeInfo(Isolate.makeConstantList([";", "if", "show", "hide", "deferred", "as"]), [P.String]);
  C.List_aFE = H.setRuntimeTypeInfo(Isolate.makeConstantList([".", ";"]), [P.String]);
  C.List_aTZ = H.setRuntimeTypeInfo(Isolate.makeConstantList(["(", "<", "=", ";"]), [P.String]);
  C.List_apY = H.setRuntimeTypeInfo(Isolate.makeConstantList(["if", "deferred", "as", "hide", "show", ";"]), [P.String]);
  C.List_as_is = H.setRuntimeTypeInfo(Isolate.makeConstantList(["as", "is"]), [P.String]);
  C.TokenType_yzz = new L.TokenType(64, false, false, false, false, "@", "AT", 0, "@");
  C.TokenType_AGi = new L.TokenType(91, false, false, false, false, "[", "OPEN_SQUARE_BRACKET", 17, "[");
  C.List_e60 = H.setRuntimeTypeInfo(Isolate.makeConstantList([C.TokenType_yzz, C.TokenType_AGi, C.TokenType_cOk]), [L.TokenType]);
  C.List_empty = Isolate.makeConstantList([]);
  C.List_get_set_void = H.setRuntimeTypeInfo(Isolate.makeConstantList(["get", "set", "void"]), [P.String]);
  C.List_gkc = H.setRuntimeTypeInfo(Isolate.makeConstantList(["extends", "with", "implements", "{"]), [P.String]);
  C.List_i1a = H.setRuntimeTypeInfo(Isolate.makeConstantList(["<", "{", "extends", "with", "implements"]), [P.String]);
  C.List_mBP = H.setRuntimeTypeInfo(Isolate.makeConstantList(["<", ">", ";", "}", "extends", "super"]), [P.String]);
  C.List_oKf = H.setRuntimeTypeInfo(Isolate.makeConstantList([";"]), [P.String]);
  C.List_oqK = H.setRuntimeTypeInfo(Isolate.makeConstantList([")", "]", "}", ";"]), [P.String]);
  C.List_qTx = H.setRuntimeTypeInfo(Isolate.makeConstantList([";", "=", ",", "{", "}"]), [P.String]);
  C.List_sv1 = H.setRuntimeTypeInfo(Isolate.makeConstantList(["{", "}", "(", ")", "]"]), [P.String]);
  C.TokenType_Qq8 = new L.TokenType(141, false, true, false, true, "[]", "INDEX", 17, "[]");
  C.List_vMb = H.setRuntimeTypeInfo(Isolate.makeConstantList([C.TokenType_Drw, C.TokenType_cOk, C.TokenType_AGi, C.TokenType_Qq8]), [L.TokenType]);
  C.TokenType_coy = new L.TokenType(41, false, false, false, false, ")", "CLOSE_PAREN", 0, ")");
  C.List_wOl = H.setRuntimeTypeInfo(Isolate.makeConstantList([C.TokenType_O55, C.TokenType_coy]), [L.TokenType]);
  C.List_wsa = H.setRuntimeTypeInfo(Isolate.makeConstantList(["{"]), [P.String]);
  C.LiteralSymbolIdentifierContext_6v8 = new G.LiteralSymbolIdentifierContext("literalSymbol", false, false, true, false, false, true, true, C.Template_YUp);
  C.LiteralSymbolIdentifierContext_E4y = new G.LiteralSymbolIdentifierContext("literalSymbolContinuation", false, false, true, true, false, true, true, C.Template_YUp);
  C.LocalFunctionDeclarationIdentifierContext_uz8 = new G.LocalFunctionDeclarationIdentifierContext("localFunctionDeclaration", true, false, false, false, false, true, true, C.Template_YUp);
  C.LocalVariableDeclarationIdentifierContext_dTq = new G.LocalVariableDeclarationIdentifierContext("localVariableDeclaration", true, false, false, false, false, true, true, C.Template_YUp);
  C.LoopState_0 = new E.LoopState(0, "LoopState.OutsideLoop");
  C.LoopState_1 = new E.LoopState(1, "LoopState.InsideSwitch");
  C.LoopState_2 = new E.LoopState(2, "LoopState.InsideLoop");
  C.List_4uk = H.setRuntimeTypeInfo(Isolate.makeConstantList(["(", "[", "{", "<", "${"]), [P.String]);
  C.Map_4u8XL = new H.ConstantStringMap(5, {"(": ")", "[": "]", "{": "}", "<": ">", "${": "}"}, C.List_4uk, [P.String, P.String]);
  C.TokenType_zra = new L.TokenType(93, false, false, false, false, "]", "CLOSE_SQUARE_BRACKET", 0, "]");
  C.TokenType_2ty = new L.TokenType(125, false, false, false, false, "}", "CLOSE_CURLY_BRACKET", 0, "}");
  C.TokenType_wOL = new L.TokenType(62, false, true, false, true, ">", "GT", 8, ">");
  C.Map_4uyfz = new H.ConstantStringMap(5, {"(": C.TokenType_coy, "[": C.TokenType_zra, "{": C.TokenType_2ty, "<": C.TokenType_wOL, "${": C.TokenType_2ty}, C.List_4uk, [P.String, L.TokenType]);
  C.List_UMy = H.setRuntimeTypeInfo(Isolate.makeConstantList(["int", "double", "String", "bool", "List<int>", "List<double>", "List<String>", "List<bool>", "Null"]), [P.String]);
  C.Map_UMi1I = new H.ConstantStringMap(9, {int: true, double: true, String: true, bool: true, "List<int>": true, "List<double>": true, "List<String>": true, "List<bool>": true, Null: true}, C.List_UMy, [P.String, P.bool]);
  C.List_empty0 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.Symbol0]);
  C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty0, [P.Symbol0, null]);
  C.List_nZ5 = H.setRuntimeTypeInfo(Isolate.makeConstantList(['"', "'", '"""', "'''", 'r"', "r'", 'r"""', "r'''"]), [P.String]);
  C.Map_nZmPa = new H.ConstantStringMap(8, {'"': '"', "'": "'", '"""': '"""', "'''": "'''", 'r"': '"', "r'": "'", 'r"""': '"""', "r'''": "'''"}, C.List_nZ5, [P.String, P.String]);
  C.MemberKind_0 = new S.MemberKind(0, "MemberKind.Catch");
  C.MemberKind_1 = new S.MemberKind(1, "MemberKind.Factory");
  C.MemberKind_2 = new S.MemberKind(2, "MemberKind.FunctionTypeAlias");
  C.MemberKind_3 = new S.MemberKind(3, "MemberKind.FunctionTypedParameter");
  C.MemberKind_4 = new S.MemberKind(4, "MemberKind.GeneralizedFunctionType");
  C.MemberKind_5 = new S.MemberKind(5, "MemberKind.Local");
  C.MemberKind_6 = new S.MemberKind(6, "MemberKind.NonStaticMethod");
  C.MemberKind_7 = new S.MemberKind(7, "MemberKind.StaticMethod");
  C.MemberKind_8 = new S.MemberKind(8, "MemberKind.TopLevelMethod");
  C.MessageCode_0 = new B.MessageCode("Members can't be declared to be both 'const' and 'var'.", "Try removing either the 'const' or 'var' keyword.", "ConstAndVar", null, "CONST_AND_VAR", "EXTRANEOUS_MODIFIER", null);
  C.MessageCode_00 = new B.MessageCode("Expected an initializer.", null, "ExpectedAnInitializer", null, "MISSING_INITIALIZER", "*fatal*", null);
  C.MessageCode_0CN = new B.MessageCode("The modifier 'static' should be before the modifier 'const'.", "Try re-ordering the modifiers.", "StaticAfterConst", null, "STATIC_AFTER_CONST", "EXTRANEOUS_MODIFIER", null);
  C.MessageCode_0zQ = new B.MessageCode("'await' can only be used in 'async' or 'async*' methods.", null, "AwaitNotAsync", null, "AWAIT_IN_WRONG_CONTEXT", "*ignored*", null);
  C.MessageCode_2Zi = new B.MessageCode("The modifier 'external' should be before the modifier 'factory'.", "Try re-ordering the modifiers.", "ExternalAfterFactory", null, "EXTERNAL_AFTER_FACTORY", "*ignored*", null);
  C.MessageCode_2bC = new B.MessageCode("The modifier 'const' should be before the modifier 'factory'.", "Try re-ordering the modifiers.", "ConstAfterFactory", null, "CONST_AFTER_FACTORY", "*ignored*", null);
  C.MessageCode_3Vk = new B.MessageCode("A getter can't have formal parameters.", "Try removing '(...)'.", "GetterWithFormals", null, "GETTER_WITH_PARAMETERS", "*ignored*", null);
  C.MessageCode_46y = new B.MessageCode("Expected an assignment after the field name.", "To initialize a field, use the syntax 'name = value'.", "MissingAssignmentInInitializer", null, "MISSING_ASSIGNMENT_IN_INITIALIZER", "*fatal*", null);
  C.MessageCode_4AN = new B.MessageCode("An optional named parameter can't start with '_'.", null, "PrivateNamedParameter", null, "PRIVATE_OPTIONAL_PARAMETER", "*ignored*", null);
  C.MessageCode_4MR = new B.MessageCode("The 'default' case can only be declared once.", "Try removing all but one default case.", "SwitchHasMultipleDefaults", null, "SWITCH_HAS_MULTIPLE_DEFAULT_CASES", "*fatal*", null);
  C.MessageCode_4Uj = new B.MessageCode("Top-level declarations can't be declared to be 'factory'.", "Try removing the keyword 'factory'.", "FactoryTopLevelDeclaration", null, "FACTORY_TOP_LEVEL_DECLARATION", "*fatal*", null);
  C.MessageCode_6YB = new B.MessageCode("The extends clause must be before the implements clause.", "Try moving the extends clause before the implements clause.", "ImplementsBeforeExtends", null, "IMPLEMENTS_BEFORE_EXTENDS", "*ignored*", null);
  C.MessageCode_7Bb = new B.MessageCode("A function expression can't have a name.", null, "NamedFunctionExpression", null, "NAMED_FUNCTION_EXPRESSION", "*ignored*", null);
  C.MessageCode_8Gl = new B.MessageCode("'sync*' and 'async*' can't return a value.", null, "GeneratorReturnsValue", null, "RETURN_IN_GENERATOR", "*ignored*", null);
  C.MessageCode_8Kp = new B.MessageCode("Getters, setters and methods can't be declared to be 'covariant'.", "Try removing the 'covariant' keyword.", "CovariantMember", null, "COVARIANT_MEMBER", "EXTRANEOUS_MODIFIER", null);
  C.MessageCode_8aB = new B.MessageCode("The extends clause must be before the with clause.", "Try moving the extends clause before the with clause.", "WithBeforeExtends", null, "WITH_BEFORE_EXTENDS", "*ignored*", null);
  C.MessageCode_Ah0 = new B.MessageCode("Enums can't be declared to be 'external'.", "Try removing the keyword 'external'.", "ExternalEnum", null, "EXTERNAL_ENUM", "*ignored*", null);
  C.MessageCode_Aui = new B.MessageCode("Each class definition can have at most one with clause.", "Try combining all of the with clauses into a single clause.", "MultipleWith", null, "MULTIPLE_WITH_CLAUSES", "*ignored*", null);
  C.MessageCode_AxS = new B.MessageCode("Invalid modifier 'sync'.", "Try replacing 'sync' with 'sync*'.", "InvalidSyncModifier", null, "MISSING_STAR_AFTER_SYNC", "INVALID_SYNC_MODIFIER", null);
  C.MessageCode_Ecu = new B.MessageCode("Numbers in exponential notation should always contain an exponent (an integer number with an optional sign).", "Make sure there is an exponent, and remove any whitespace before it.", "MissingExponent", null, "MISSING_DIGIT", "EXPONENT_MISSING", null);
  C.MessageCode_Etw = new B.MessageCode("The modifier 'external' should be before the modifier 'const'.", "Try re-ordering the modifiers.", "ExternalAfterConst", null, "EXTERNAL_AFTER_CONST", "EXTRANEOUS_MODIFIER", null);
  C.MessageCode_Fsm = new B.MessageCode("Classes can't be declared inside other classes.", "Try moving the class to the top-level.", "ClassInClass", null, "CLASS_IN_CLASS", "*fatal*", null);
  C.MessageCode_GVy = new B.MessageCode("Can't have both a type and 'var'.", "Try removing 'var.'", "TypeAfterVar", null, "VAR_AND_TYPE", "EXTRANEOUS_MODIFIER", null);
  C.MessageCode_Gjq = new B.MessageCode("Typedefs can't be declared to be 'external'.", "Try removing the keyword 'external'.", "ExternalTypedef", null, "EXTERNAL_TYPEDEF", "*ignored*", null);
  C.MessageCode_Hhc = new B.MessageCode("An external or native method can't have a body.", null, "ExternalMethodWithBody", null, "EXTERNAL_METHOD_WITH_BODY", "*ignored*", null);
  C.MessageCode_Hx4 = new B.MessageCode("The return type can't be 'var'.", "Try removing the keyword 'var', or replacing it with the name of the return type.", "VarReturnType", null, "VAR_RETURN_TYPE", "EXTRANEOUS_MODIFIER", null);
  C.MessageCode_IEl = new B.MessageCode("Import directives must preceed part directives.", "Try moving the import directives before the part directives.", "ImportAfterPart", null, "IMPORT_DIRECTIVE_AFTER_PART_DIRECTIVE", "*ignored*", null);
  C.MessageCode_IVQ = new B.MessageCode("Members can't be declared to be both 'const' and 'covariant'.", "Try removing either the 'const' or 'covariant' keyword.", "ConstAndCovariant", null, "CONST_AND_COVARIANT", "*ignored*", null);
  C.MessageCode_Ibr = new B.MessageCode("Directives must appear before any declarations.", "Try moving the directive before any declarations.", "DirectiveAfterDeclaration", null, "DIRECTIVE_AFTER_DECLARATION", "*ignored*", null);
  C.MessageCode_Igx = new B.MessageCode("Members can't be declared to be both 'final' and 'var'.", "Try removing the keyword 'var'.", "FinalAndVar", null, "FINAL_AND_VAR", "EXTRANEOUS_MODIFIER", null);
  C.MessageCode_KGl = new B.MessageCode("Operator declarations must be preceeded by the keyword 'operator'.", "Try adding the keyword 'operator'.", "MissingOperatorKeyword", null, "MISSING_KEYWORD_OPERATOR", "*fatal*", null);
  C.MessageCode_Kkt = new B.MessageCode("The library directive must appear before all other directives.", "Try moving the library directive before any other directives.", "LibraryDirectiveNotFirst", null, "LIBRARY_DIRECTIVE_NOT_FIRST", "*ignored*", null);
  C.MessageCode_Kx9 = new B.MessageCode("Try block should be followed by 'on', 'catch', or 'finally' block.", "Did you forget to add a 'finally' block?", "OnlyTry", null, "MISSING_CATCH_OR_FINALLY", "*ignored*", null);
  C.MessageCode_L55 = new B.MessageCode("Positional optional parameters can't use ':' to specify a default value.", "Try replacing ':' with '='.", "PositionalParameterWithEquals", null, "WRONG_SEPARATOR_FOR_POSITIONAL_PARAMETER", "POSITIONAL_PARAMETER_WITH_EQUALS", null);
  C.MessageCode_LZS = new B.MessageCode("A continue statement in a switch statement must have a label as a target.", "Try adding a label associated with one of the case clauses to the continue statement.", "ContinueWithoutLabelInCase", null, "CONTINUE_WITHOUT_LABEL_IN_CASE", "*ignored*", null);
  C.MessageCode_MAi = new B.MessageCode("An equality expression can't be an operand of another equality expression.", "Try re-writing the expression.", "EqualityCannotBeEqualityOperand", null, "EQUALITY_CANNOT_BE_EQUALITY_OPERAND", "*fatal*", null);
  C.MessageCode_MrB = new B.MessageCode("The with clause can't be used without an extends clause.", "Try adding an extends clause such as 'extends Object'.", "WithWithoutExtends", null, "WITH_WITHOUT_EXTENDS", "GENERIC", null);
  C.MessageCode_NYu = new B.MessageCode("Only redirecting factory constructors can be declared to be 'const'.", "Try removing the 'const' keyword, or replacing the body with '=' followed by a valid target.", "ConstFactory", null, "CONST_FACTORY", "*ignored*", null);
  C.MessageCode_Nsp = new B.MessageCode("'yield' can't be used as an identifier in 'async', 'async*', or 'sync*' methods.", null, "YieldAsIdentifier", null, "ASYNC_KEYWORD_USED_AS_IDENTIFIER", "*fatal*", null);
  C.MessageCode_OVi = new B.MessageCode("Members can't be declared to be both 'const' and 'final'.", "Try removing either the 'const' or 'final' keyword.", "ConstAndFinal", null, "CONST_AND_FINAL", "EXTRANEOUS_MODIFIER", null);
  C.MessageCode_PAW = new B.MessageCode("For-in loops use 'in' rather than a colon.", "Try replacing the colon with the keyword 'in'.", "ColonInPlaceOfIn", null, "COLON_IN_PLACE_OF_IN", "*fatal*", null);
  C.MessageCode_Q01 = new B.MessageCode("External factories can't have a body.", "Try removing the body of the factory, or removing the keyword 'external'.", "ExternalFactoryWithBody", null, "EXTERNAL_CONSTRUCTOR_WITH_BODY", "*ignored*", null);
  C.MessageCode_QTL = new B.MessageCode("Members of classes can't be declared to be 'abstract'.", "Try removing the 'abstract' keyword. You can add the 'abstract' keyword before the class declaration.", "AbstractClassMember", null, "ABSTRACT_CLASS_MEMBER", "EXTRANEOUS_MODIFIER", null);
  C.MessageCode_QW8 = new B.MessageCode("A redirecting factory can't be external.", "Try removing the 'external' modifier.", "ExternalFactoryRedirection", null, "EXTERNAL_CONSTRUCTOR_WITH_BODY", "*ignored*", null);
  C.MessageCode_RWS = new B.MessageCode("The modifier 'external' should be before the modifier 'static'.", "Try re-ordering the modifiers.", "ExternalAfterStatic", null, "EXTERNAL_AFTER_STATIC", "EXTRANEOUS_MODIFIER", null);
  C.MessageCode_SNT = new B.MessageCode("Native clause in this form is deprecated.", "Try removing this native clause and adding @native() or @native('native-name') before the declaration.", "NativeClauseShouldBeAnnotation", null, "NATIVE_CLAUSE_SHOULD_BE_ANNOTATION", "*fatal*", null);
  C.MessageCode_Tfa = new B.MessageCode("Classes can't be declared to be 'external'.", "Try removing the keyword 'external'.", "ExternalClass", null, "EXTERNAL_CLASS", "*ignored*", null);
  C.MessageCode_UIe = new B.MessageCode("The default case should be the last case in a switch statement.", "Try moving the default case after the other case clauses.", "SwitchHasCaseAfterDefault", null, "SWITCH_HAS_CASE_AFTER_DEFAULT_CASE", "*fatal*", null);
  C.MessageCode_Ucj = new B.MessageCode("An enum declaration can't be empty.", null, "EnumDeclarationEmpty", null, "EMPTY_ENUM_BODY", "*ignored*", null);
  C.MessageCode_XSz = new B.MessageCode("The prefix ('as' clause) should come before any show/hide combinators.", "Try moving the prefix before the combinators.", "PrefixAfterCombinator", null, "PREFIX_AFTER_COMBINATOR", "*fatal*", null);
  C.MessageCode_XZn = new B.MessageCode("A hex digit (0-9 or A-F) must follow '0x'.", null, "ExpectedHexDigit", null, "MISSING_HEX_DIGIT", "HEX_DIGIT_EXPECTED", null);
  C.MessageCode_Yqs = new B.MessageCode("'await' can't be used as an identifier in 'async', 'async*', or 'sync*' methods.", null, "AwaitAsIdentifier", null, "ASYNC_KEYWORD_USED_AS_IDENTIFIER", "*ignored*", null);
  C.MessageCode_ZCw = new B.MessageCode("A function declaration needs an explicit list of parameters.", "Try adding a parameter list to the function declaration.", "MissingFunctionParameters", null, "MISSING_FUNCTION_PARAMETERS", "*fatal*", null);
  C.MessageCode_a5W = new B.MessageCode("Optional parameter lists cannot be empty.", "Try adding an optional parameter to the list.", "EmptyOptionalParameterList", null, "MISSING_IDENTIFIER", "EMPTY_OPTIONAL_PARAMETER_LIST", null);
  C.MessageCode_aU7 = new B.MessageCode("The keyword 'await' isn't allowed for a normal 'for' statement.", "Try removing the keyword, or use a for-each statement.", "InvalidAwaitFor", null, "INVALID_AWAIT_IN_FOR", "INVALID_AWAIT_FOR", null);
  C.MessageCode_atK = new B.MessageCode("Missing expression after 'throw'.", "Add an expression after 'throw' or use 'rethrow' to throw a caught exception", "MissingExpressionInThrow", null, "MISSING_EXPRESSION_IN_THROW", "*fatal*", null);
  C.MessageCode_bFE = new B.MessageCode("The modifier 'covariant' should be before the modifier 'var'.", "Try re-ordering the modifiers.", "CovariantAfterVar", null, "COVARIANT_AFTER_VAR", "EXTRANEOUS_MODIFIER", null);
  C.MessageCode_bNA = new B.MessageCode("Only factory constructor can specify '=' redirection.", "Try making this a factory constructor, or remove the redirection.", "RedirectionInNonFactory", null, "REDIRECTION_IN_NON_FACTORY_CONSTRUCTOR", "*fatal*", null);
  C.MessageCode_c9P = new B.MessageCode("The modifier 'static' should be before the modifier 'var'.", "Try re-ordering the modifiers.", "StaticAfterVar", null, "STATIC_AFTER_VAR", "*ignored*", null);
  C.MessageCode_csn = new B.MessageCode("Variables must be declared using the keywords 'const', 'final', 'var' or a type name.", "Try adding the name of the type of the variable or the keyword 'var'.", "MissingConstFinalVarOrType", null, "MISSING_CONST_FINAL_VAR_OR_TYPE", "*fatal*", null);
  C.MessageCode_eDa = new B.MessageCode("The loop variable in a for-each loop can't be initialized.", "Try removing the initializer, or using a different kind of loop.", "InitializedVariableInForEach", null, "INITIALIZED_VARIABLE_IN_FOR_EACH", "*fatal*", null);
  C.MessageCode_eam = new B.MessageCode("'+' is not a prefix operator.", "Try removing '+'.", "UnsupportedPrefixPlus", null, "MISSING_IDENTIFIER", "UNSUPPORTED_PREFIX_PLUS", null);
  C.MessageCode_fNA = new B.MessageCode("A typedef needs an explicit list of parameters.", "Try adding a parameter list to the typedef.", "MissingTypedefParameters", null, "MISSING_TYPEDEF_PARAMETERS", "*fatal*", null);
  C.MessageCode_fPs = new B.MessageCode("The asynchronous for-in can only be used in functions marked with 'async' or 'async*'.", "Try marking the function body with either 'async' or 'async*', or removing the 'await' before the for loop.", "AwaitForNotAsync", null, "ASYNC_FOR_IN_WRONG_CONTEXT", "*ignored*", null);
  C.MessageCode_g6n = new B.MessageCode("An import directive can only have one 'deferred' keyword.", "Try removing all but one 'deferred' keyword.", "DuplicateDeferred", null, "DUPLICATE_DEFERRED", "*fatal*", null);
  C.MessageCode_gT2 = new B.MessageCode("Members can't be declared to be both 'final' and 'covariant'.", "Try removing either the 'final' or 'covariant' keyword.", "FinalAndCovariant", null, "FINAL_AND_COVARIANT", "*ignored*", null);
  C.MessageCode_gkc0 = new B.MessageCode("Abstract methods can't use 'async', 'async*', or 'sync*'.", null, "AbstractNotSync", null, "NON_SYNC_ABSTRACT_METHOD", "*ignored*", null);
  C.MessageCode_gkc = new B.MessageCode("Operators must be declared within a class.", "Try removing the operator, moving it to a class, or converting it to be a function.", "TopLevelOperator", null, "TOP_LEVEL_OPERATOR", "*fatal*", null);
  C.MessageCode_glC = new B.MessageCode("The modifier 'covariant' should be before the modifier 'final'.", "Try re-ordering the modifiers.", "CovariantAfterFinal", null, "COVARIANT_AFTER_FINAL", "EXTRANEOUS_MODIFIER", null);
  C.MessageCode_i2k = new B.MessageCode("Stack overflow.", null, "StackOverflow", null, "STACK_OVERFLOW", "GENERIC", null);
  C.MessageCode_i72 = new B.MessageCode("Expected a function body or '=>'.", "Try adding {}.", "ExpectedBody", null, "MISSING_FUNCTION_BODY", "BODY_EXPECTED", null);
  C.MessageCode_jrB = new B.MessageCode("Only one library directive may be declared in a file.", "Try removing all but one of the library directives.", "MultipleLibraryDirectives", null, "MULTIPLE_LIBRARY_DIRECTIVES", "*ignored*", null);
  C.MessageCode_kCz = new B.MessageCode("Deferred imports should have a prefix.", "Try adding a prefix to the import.", "MissingPrefixInDeferredImport", null, "MISSING_PREFIX_IN_DEFERRED_IMPORT", "*fatal*", null);
  C.MessageCode_kJI = new B.MessageCode("A continue statement can't be used outside of a loop or switch statement.", "Try removing the continue statement.", "ContinueOutsideOfLoop", null, "CONTINUE_OUTSIDE_OF_LOOP", "*ignored*", null);
  C.MessageCode_kOq = new B.MessageCode("The deferred keyword should come immediately before the prefix ('as' clause).", "Try moving the deferred keyword before the prefix.", "DeferredAfterPrefix", null, "DEFERRED_AFTER_PREFIX", "*fatal*", null);
  C.MessageCode_kWM = new B.MessageCode("An import directive can only have one prefix ('as' clause).", "Try removing all but one prefix.", "DuplicatePrefix", null, "DUPLICATE_PREFIX", "*fatal*", null);
  C.MessageCode_kiE = new B.MessageCode("Place positional arguments before named arguments.", "Try moving the positional argument before the named arguments, or add a name to the argument.", "PositionalAfterNamedArgument", null, "POSITIONAL_AFTER_NAMED_ARGUMENT", "*ignored*", null);
  C.MessageCode_kmC = new B.MessageCode("An annotation (metadata) can't use type arguments.", null, "MetadataTypeArguments", null, "ANNOTATION_WITH_TYPE_ARGUMENTS", "*ignored*", null);
  C.MessageCode_knt0 = new B.MessageCode("The with clause must be before the implements clause.", "Try moving the with clause before the implements clause.", "ImplementsBeforeWith", null, "IMPLEMENTS_BEFORE_WITH", "*ignored*", null);
  C.MessageCode_knt = new B.MessageCode("Named parameter lists cannot be empty.", "Try adding a named parameter to the list.", "EmptyNamedParameterList", null, "MISSING_IDENTIFIER", "EMPTY_NAMED_PARAMETER_LIST", null);
  C.MessageCode_kr3 = new B.MessageCode("'yield' can only be used in 'sync*' or 'async*' methods.", null, "YieldNotGenerator", null, "YIELD_IN_NON_GENERATOR", "*ignored*", null);
  C.MessageCode_mFp = new B.MessageCode("Fields can't be declared to be 'external'.", "Try removing the keyword 'external'.", "ExternalField", null, "EXTERNAL_FIELD", "EXTRANEOUS_MODIFIER", null);
  C.MessageCode_mLc = new B.MessageCode("`assert` can't be used as an expression.", null, "AssertAsExpression", null, null, "*fatal*", null);
  C.MessageCode_mt6 = new B.MessageCode("Classes can't be declared to be 'const'.", "Try removing the 'const' keyword. If you're trying to indicate that instances of the class can be constants, place the 'const' keyword on  the class' constructor(s).", "ConstClass", null, "CONST_CLASS", "EXTRANEOUS_MODIFIER", null);
  C.MessageCode_nV5 = new B.MessageCode("Each class definition can have at most one extends clause.", "Try choosing one superclass and define your class to implement (or mix in) the others.", "MultipleExtends", null, "MULTIPLE_EXTENDS_CLAUSES", "*ignored*", null);
  C.MessageCode_oFR = new B.MessageCode("Factory bodies can't use 'async', 'async*', or 'sync*'.", null, "FactoryNotSync", null, "NON_SYNC_FACTORY", "*ignored*", null);
  C.MessageCode_oIk = new B.MessageCode("Non-optional parameters can't have a default value.", "Try removing the default value or making the parameter optional.", "RequiredParameterWithDefault", null, "NAMED_PARAMETER_OUTSIDE_GROUP", "REQUIRED_PARAMETER_WITH_DEFAULT", null);
  C.MessageCode_ooG = new B.MessageCode("Members can't be declared to be both 'covariant' and 'static'.", "Try removing either the 'covariant' or 'static' keyword.", "CovariantAndStatic", null, "COVARIANT_AND_STATIC", "EXTRANEOUS_MODIFIER", null);
  C.MessageCode_oqK = new B.MessageCode("Setters can't use 'async', 'async*', or 'sync*'.", null, "SetterNotSync", null, "INVALID_MODIFIER_ON_SETTER", "*ignored*", null);
  C.MessageCode_oyU = new B.MessageCode("Typedefs can't be declared inside classes.", "Try moving the typedef to the top-level.", "TypedefInClass", null, "TYPEDEF_IN_CLASS", "*fatal*", null);
  C.MessageCode_pXc = new B.MessageCode("A break statement can't be used outside of a loop or switch statement.", "Try removing the break statement.", "BreakOutsideOfLoop", null, "BREAK_OUTSIDE_OF_LOOP", "*ignored*", null);
  C.MessageCode_qNA = new B.MessageCode("A method declaration needs an explicit list of parameters.", "Try adding a parameter list to the method declaration.", "MissingMethodParameters", null, "MISSING_METHOD_PARAMETERS", "*fatal*", null);
  C.MessageCode_qUm = new B.MessageCode("Enums can't be declared inside classes.", "Try moving the enum to the top-level.", "EnumInClass", null, "ENUM_IN_CLASS", "*fatal*", null);
  C.MessageCode_qXF = new B.MessageCode("Only one part-of directive may be declared in a file.", "Try removing all but one of the part-of directives.", "PartOfTwice", null, "MULTIPLE_PART_OF_DIRECTIVES", "*ignored*", null);
  C.MessageCode_qtW = new B.MessageCode("Unable to decode bytes as UTF-8.", null, "Encoding", null, null, "*fatal*", null);
  C.MessageCode_rt1 = new B.MessageCode("Operators can't be static.", "Try removing the keyword 'static'.", "StaticOperator", null, "STATIC_OPERATOR", "EXTRANEOUS_MODIFIER", null);
  C.MessageCode_sU7 = new B.MessageCode("'async' can't be used as an identifier in 'async', 'async*', or 'sync*' methods.", null, "AsyncAsIdentifier", null, "ASYNC_KEYWORD_USED_AS_IDENTIFIER", "GENERIC", null);
  C.MessageCode_scL = new B.MessageCode("'catch' must be followed by '(identifier)' or '(identifier, identifier)'.", "No types are needed, the first is given by 'on', the second is always 'StackTrace'.", "CatchSyntax", null, "CATCH_SYNTAX", "*ignored*", null);
  C.MessageCode_sx4 = new B.MessageCode("The part-of directive must be the only directive in a part.", "Try removing the other directives, or moving them to the library for which this is a part.", "NonPartOfDirectiveInPart", null, "NON_PART_OF_DIRECTIVE_IN_PART", "*ignored*", null);
  C.MessageCode_wCL = new B.MessageCode("A '$' has special meaning inside a string, and must be followed by an identifier or an expression in curly braces ({}).", "Try adding a backslash (\\) to escape the '$'.", "UnexpectedDollarInString", null, "UNEXPECTED_DOLLAR_IN_STRING", "MALFORMED_STRING_LITERAL", null);
  C.MessageCode_wIv = new B.MessageCode("Function-typed parameters can't specify 'const', 'final' or 'var' in place of a return type.", "Try replacing the keyword with a return type.", "FunctionTypedParameterVar", null, "FUNCTION_TYPED_PARAMETER_VAR", "*fatal*", null);
  C.MessageCode_wSA = new B.MessageCode("Can't have a default value in a function type.", null, "FunctionTypeDefaultValue", null, "DEFAULT_VALUE_IN_FUNCTION_TYPE", "*ignored*", null);
  C.MessageCode_wYn = new B.MessageCode("Comment starting with '/*' must end with '*/'.", null, "UnterminatedComment", null, "UNTERMINATED_MULTI_LINE_COMMENT", "UNTERMINATED_COMMENT", null);
  C.MessageCode_wlp = new B.MessageCode("Invalid inline function type.", "Try changing the inline function type (as in 'int f()') to a prefixed function type using the `Function` keyword (as in 'int Function() f').", "InvalidInlineFunctionType", null, null, "INVALID_INLINE_FUNCTION_TYPE", null);
  C.MessageCode_ww8 = new B.MessageCode("Type 'void' can't be used here because it isn't a return type.", "Try removing 'void' keyword or replace it with 'var', 'final', or a type.", "InvalidVoid", null, "INVALID_USE_OF_VOID", "VOID_NOT_ALLOWED", C.Severity_1);
  C.MessageCode_x1Y = new B.MessageCode("'super' can't be null.", "Try replacing '?.' with '.'", "SuperNullAware", null, "INVALID_OPERATOR_FOR_SUPER", "*ignored*", null);
  C.MessageCode_xFz = new B.MessageCode("Each class definition can have at most one implements clause.", "Try combining all of the implements clauses into a single clause.", "MultipleImplements", null, "MULTIPLE_IMPLEMENTS_CLAUSES", "GENERIC", null);
  C.MessageCode_yHZ = new B.MessageCode("Redirecting constructors can't have a body.", "Try removing the body, or not making this a redirecting constructor.", "RedirectingConstructorWithBody", null, "REDIRECTING_CONSTRUCTOR_WITH_BODY", "*fatal*", null);
  C.MessageCode_ylG = new B.MessageCode("Export directives must preceed part directives.", "Try moving the export directives before the part directives.", "ExportAfterPart", null, "EXPORT_DIRECTIVE_AFTER_PART_DIRECTIVE", "*ignored*", null);
  C.MessageCode_zDj = new B.MessageCode("The modifier 'static' should be before the modifier 'final'.", "Try re-ordering the modifiers.", "StaticAfterFinal", null, "STATIC_AFTER_FINAL", "EXTRANEOUS_MODIFIER", null);
  C.MetadataReferenceIdentifierContext_8aB = new G.MetadataReferenceIdentifierContext("metadataContinuationAfterTypeArguments", false, false, false, true, false, true, true, C.Template_YUp);
  C.MetadataReferenceIdentifierContext_kaS = new G.MetadataReferenceIdentifierContext("metadataContinuation", false, false, false, true, false, true, true, C.Template_YUp);
  C.MetadataReferenceIdentifierContext_tli = new G.MetadataReferenceIdentifierContext("metadataReference", false, false, false, false, true, true, false, C.Template_YUp);
  C.MethodDeclarationIdentifierContext_QPt = new G.MethodDeclarationIdentifierContext("methodDeclarationContinuation", true, false, false, true, false, true, true, C.Template_YUp);
  C.MethodDeclarationIdentifierContext_ZGD = new G.MethodDeclarationIdentifierContext("methodDeclaration", true, false, false, false, false, true, true, C.Template_YUp);
  C.NamedArgumentReferenceIdentifierContext_a7T = new G.NamedArgumentReferenceIdentifierContext("namedArgumentReference", false, false, false, false, false, true, true, C.Template_YUp);
  C.ParameterKind_NAMED_2_true = new R.ParameterKind("NAMED", 2, true);
  C.ParameterKind_POSITIONAL_1_true = new R.ParameterKind("POSITIONAL", 1, true);
  C.ParameterKind_REQUIRED_0_false = new R.ParameterKind("REQUIRED", 0, false);
  C.ParserErrorCode_1WL = new O.ParserErrorCode("STATIC_AFTER_FINAL", "The modifier 'static' should be before the modifier 'final'.", "Try re-ordering the modifiers.", false);
  C.ParserErrorCode_23B = new O.ParserErrorCode("NON_IDENTIFIER_LIBRARY_NAME", "The name of a library must be an identifier.", "Try using an identifier as the name of the library.", false);
  C.ParserErrorCode_23h = new O.ParserErrorCode("SWITCH_HAS_MULTIPLE_DEFAULT_CASES", "The 'default' case can only be declared once.", "Try removing all but one default case.", false);
  C.ParserErrorCode_23h0 = new O.ParserErrorCode("INITIALIZED_VARIABLE_IN_FOR_EACH", "The loop variable in a for-each loop can't be initialized.", "Try removing the initializer, or using a different kind of loop.", false);
  C.ParserErrorCode_27I = new O.ParserErrorCode("CONTINUE_WITHOUT_LABEL_IN_CASE", "A continue statement in a switch statement must have a label as a target.", "Try adding a label associated with one of the case clauses to the continue statement.", false);
  C.ParserErrorCode_4YB = new O.ParserErrorCode("INVALID_GENERIC_FUNCTION_TYPE", "Invalid generic function type.", "Try using a generic function type (returnType 'Function(' parameters ')').", false);
  C.ParserErrorCode_4qq = new O.ParserErrorCode("EXTERNAL_TYPEDEF", "Typedefs can't be declared to be 'external'.", "Try removing the keyword 'external'.", false);
  C.ParserErrorCode_5JB = new O.ParserErrorCode("EXTERNAL_SETTER_WITH_BODY", "External setters can't have a body.", "Try removing the body of the setter, or removing the keyword 'external'.", false);
  C.ParserErrorCode_5MH = new O.ParserErrorCode("COVARIANT_TOP_LEVEL_DECLARATION", "Top-level declarations can't be declared to be covariant.", "Try removing the keyword 'covariant'.", false);
  C.ParserErrorCode_5Nb = new O.ParserErrorCode("MISSING_METHOD_PARAMETERS", "Methods must have an explicit list of parameters.", "Try adding a parameter list.", false);
  C.ParserErrorCode_6dA = new O.ParserErrorCode("BREAK_OUTSIDE_OF_LOOP", "A break statement can't be used outside of a loop or switch statement.", "Try removing the break statement.", false);
  C.ParserErrorCode_6ez = new O.ParserErrorCode("LOCAL_FUNCTION_DECLARATION_MODIFIER", "Local function declarations can't specify any modifiers.", "Try removing the modifier.", false);
  C.ParserErrorCode_6j6 = new O.ParserErrorCode("CLASS_IN_CLASS", "Classes can't be declared inside other classes.", "Try moving the class to the top-level.", false);
  C.ParserErrorCode_7nZ = new O.ParserErrorCode("SWITCH_HAS_CASE_AFTER_DEFAULT_CASE", "The default case should be the last case in a switch statement.", "Try moving the default case after the other case clauses.", false);
  C.ParserErrorCode_7qy = new O.ParserErrorCode("SETTER_IN_FUNCTION", "Setters can't be defined within methods or functions.", "Try moving the setter outside the method or function.", false);
  C.ParserErrorCode_7xV = new O.ParserErrorCode("MISSING_KEYWORD_OPERATOR", "Operator declarations must be preceeded by the keyword 'operator'.", "Try adding the keyword 'operator'.", false);
  C.ParserErrorCode_8D4 = new O.ParserErrorCode("STATIC_SETTER_WITHOUT_BODY", "A 'static' setter must have a body.", "Try adding a body to the setter, or removing the keyword 'static'.", false);
  C.ParserErrorCode_8Gl = new O.ParserErrorCode("INVALID_HEX_ESCAPE", "An escape sequence starting with '\\x' must be followed by 2 hexidecimal digits.", null, false);
  C.ParserErrorCode_8Gl0 = new O.ParserErrorCode("CONST_ENUM", "Enums can't be declared to be 'const'.", "Try removing the 'const' keyword.", false);
  C.ParserErrorCode_8gt = new O.ParserErrorCode("UNEXPECTED_TERMINATOR_FOR_PARAMETER_GROUP", "There is no '{0}' to open a parameter group.", "Try inserting the '{0}' at the appropriate location.", false);
  C.ParserErrorCode_A9U = new O.ParserErrorCode("MISSING_EXPRESSION_IN_THROW", "Missing expression after 'throw'.", "Try using 'rethrow' to throw the caught exception.", false);
  C.ParserErrorCode_AFQ = new O.ParserErrorCode("COVARIANT_AFTER_VAR", "The modifier 'covariant' should be before the modifier 'final'.", "Try re-ordering the modifiers.", false);
  C.ParserErrorCode_AHF = new O.ParserErrorCode("POSITIONAL_AFTER_NAMED_ARGUMENT", "Positional arguments must occur before named arguments.", "Try moving all of the positional arguments before the named arguments.", false);
  C.ParserErrorCode_AKA = new O.ParserErrorCode("VAR_AS_TYPE_NAME", "The keyword 'var' can't be used as a type name.", "Try using 'dynamic' instead of 'var'.", false);
  C.ParserErrorCode_AKW0 = new O.ParserErrorCode("DUPLICATE_LABEL_IN_SWITCH_STATEMENT", "The label '{0}' was already used in this switch statement.", "Try choosing a different name for this label.", false);
  C.ParserErrorCode_AKW = new O.ParserErrorCode("STACK_OVERFLOW", "The file has too many nested expressions or statements.", "Try simplifying the code.", false);
  C.ParserErrorCode_Art = new O.ParserErrorCode("INVALID_OPERATOR_FOR_SUPER", "The operator '{0}' can't be used with 'super'.", null, false);
  C.ParserErrorCode_BWD = new O.ParserErrorCode("CONST_AND_COVARIANT", "Members can't be declared to be both 'const' and 'covariant'.", "Try removing either the 'const' or 'covariant' keyword.", false);
  C.ParserErrorCode_Bh0 = new O.ParserErrorCode("FACTORY_TOP_LEVEL_DECLARATION", "Top-level declarations can't be declared to be 'factory'.", "Try removing the keyword 'factory'.", false);
  C.ParserErrorCode_CDT = new O.ParserErrorCode("NON_STRING_LITERAL_AS_URI", "The URI must be a string literal.", "Try enclosing the URI in either single or double quotes.", false);
  C.ParserErrorCode_CNb = new O.ParserErrorCode("NULLABLE_TYPE_IN_EXTENDS", "A nullable type can't be used in an extends clause.", "Try removing the '?' from the type name.", false);
  C.ParserErrorCode_ClA = new O.ParserErrorCode("NULLABLE_TYPE_PARAMETER", "Type parameters can't be nullable.", "Try removing the '?' from the type name.", false);
  C.ParserErrorCode_Djg = new O.ParserErrorCode("ABSTRACT_CLASS_MEMBER", "Members of classes can't be declared to be 'abstract'.", "Try removing the keyword 'abstract'.", false);
  C.ParserErrorCode_E8w = new O.ParserErrorCode("ABSTRACT_TOP_LEVEL_FUNCTION", "Top-level functions can't be declared to be 'abstract'.", "Try removing the keyword 'abstract'.", false);
  C.ParserErrorCode_EF7 = new O.ParserErrorCode("INVALID_STAR_AFTER_ASYNC", "The modifier 'async*' isn't allowed for an expression function body.", "Try converting the body to a block.", false);
  C.ParserErrorCode_EOY0 = new O.ParserErrorCode("MULTIPLE_NAMED_PARAMETER_GROUPS", "Can't have multiple groups of named parameters in a single parameter list.", "Try combining all of the groups into a single group.", false);
  C.ParserErrorCode_EOY = new O.ParserErrorCode("IMPORT_DIRECTIVE_AFTER_PART_DIRECTIVE", "Import directives must preceed part directives.", "Try moving the import directives before the part directives.", false);
  C.ParserErrorCode_EOZ = new O.ParserErrorCode("COVARIANT_AND_STATIC", "Members can't be declared to be both 'covariant' and 'static'.", "Try removing either the 'covariant' or 'static' keyword.", false);
  C.ParserErrorCode_Ecu = new O.ParserErrorCode("CONST_METHOD", "Getters, setters and methods can't be declared to be 'const'.", "Try removing the 'const' keyword.", false);
  C.ParserErrorCode_EkK = new O.ParserErrorCode("VAR_RETURN_TYPE", "The return type can't be 'var'.", "Try removing the keyword 'var', or replacing it with the name of the return type.", false);
  C.ParserErrorCode_FIw = new O.ParserErrorCode("FIELD_INITIALIZER_OUTSIDE_CONSTRUCTOR", "Field formal parameters can only be used in a constructor.", "Try replacing the field formal parameter with a normal parameter.", false);
  C.ParserErrorCode_GDx = new O.ParserErrorCode("NORMAL_BEFORE_OPTIONAL_PARAMETERS", "Normal parameters must occur before optional parameters.", "Try moving all of the normal parameters before the optional parameters.", false);
  C.ParserErrorCode_GFX = new O.ParserErrorCode("MULTIPLE_IMPLEMENTS_CLAUSES", "Each class definition can have at most one implements clause.", "Try combining all of the implements clauses into a single clause.", false);
  C.ParserErrorCode_Gla = new O.ParserErrorCode("MISSING_STAR_AFTER_SYNC", "The modifier 'sync' must be followed by a star ('*').", "Try removing the modifier, or add a star.", false);
  C.ParserErrorCode_Gtd = new O.ParserErrorCode("CONST_AND_FINAL", "Members can't be declared to be both 'const' and 'final'.", "Try removing either the 'const' or 'final' keyword.", false);
  C.ParserErrorCode_HLN = new O.ParserErrorCode("CONST_CLASS", "Classes can't be declared to be 'const'.", "Try removing the 'const' keyword. If you're trying to indicate that instances of the class can be constants, place the 'const' keyword on the class' constructor(s).", false);
  C.ParserErrorCode_HuN = new O.ParserErrorCode("EXPECTED_TOKEN", "Expected to find '{0}'.", null, false);
  C.ParserErrorCode_I0D = new O.ParserErrorCode("ABSTRACT_TYPEDEF", "Typedefs can't be declared to be 'abstract'.", "Try removing the keyword 'abstract'.", false);
  C.ParserErrorCode_I6l = new O.ParserErrorCode("NON_CONSTRUCTOR_FACTORY", "Only a constructor can be declared to be a factory.", "Try removing the keyword 'factory'.", false);
  C.ParserErrorCode_IIe = new O.ParserErrorCode("ABSTRACT_TOP_LEVEL_VARIABLE", "Top-level variables can't be declared to be 'abstract'.", "Try removing the keyword 'abstract'.", false);
  C.ParserErrorCode_IIe0 = new O.ParserErrorCode("STATIC_OPERATOR", "Operators can't be static.", "Try removing the keyword 'static'.", false);
  C.ParserErrorCode_IIf = new O.ParserErrorCode("MISSING_NAME_IN_LIBRARY_DIRECTIVE", "Library directives must include a library name.", "Try adding a library name after the keyword 'library', or remove the library directive if the library doesn't have any parts.", false);
  C.ParserErrorCode_JNA = new O.ParserErrorCode("ABSTRACT_STATIC_METHOD", "Static methods can't be declared to be 'abstract'.", "Try removing the keyword 'abstract'.", false);
  C.ParserErrorCode_K1W = new O.ParserErrorCode("FINAL_ENUM", "Enums can't be declared to be 'final'.", "Try removing the keyword 'final'.", false);
  C.ParserErrorCode_KJn = new O.ParserErrorCode("VAR_ENUM", "Enums can't be declared to be 'var'.", "Try removing the keyword 'var'.", false);
  C.ParserErrorCode_M2I = new O.ParserErrorCode("FINAL_TYPEDEF", "Typedefs can't be declared to be 'final'.", "Try removing the keyword 'final'.", false);
  C.ParserErrorCode_M6L = new O.ParserErrorCode("MISSING_ASSIGNMENT_IN_INITIALIZER", "Expected an assignment after the field name.", "Try adding an assignment to initialize the field.", false);
  C.ParserErrorCode_MUs = new O.ParserErrorCode("COVARIANT_CONSTRUCTOR", "A constructor can't be declared to be 'covariant'.", "Try removing the keyword 'covariant'.", false);
  C.ParserErrorCode_MUs0 = new O.ParserErrorCode("FINAL_CONSTRUCTOR", "A constructor can't be declared to be 'final'.", "Try removing the keyword 'final'.", false);
  C.ParserErrorCode_MUw = new O.ParserErrorCode("TYPEDEF_IN_CLASS", "Typedefs can't be declared inside classes.", "Try moving the typedef to the top-level.", false);
  C.ParserErrorCode_My6 = new O.ParserErrorCode("MISSING_ASSIGNABLE_SELECTOR", "Missing selector such as '.<identifier>' or '[0]'.", "Try adding a selector.", false);
  C.ParserErrorCode_NIe0 = new O.ParserErrorCode("NON_USER_DEFINABLE_OPERATOR", "The operator '{0}' isn't user definable.", null, false);
  C.ParserErrorCode_NIe = new O.ParserErrorCode("DIRECTIVE_AFTER_DECLARATION", "Directives must appear before any declarations.", "Try moving the directive before any declarations.", false);
  C.ParserErrorCode_NQR = new O.ParserErrorCode("WITH_WITHOUT_EXTENDS", "The with clause can't be used without an extends clause.", "Try adding an extends clause such as 'extends Object'.", false);
  C.ParserErrorCode_Nno = new O.ParserErrorCode("LIBRARY_DIRECTIVE_NOT_FIRST", "The library directive must appear before all other directives.", "Try moving the library directive before any other directives.", false);
  C.ParserErrorCode_P3F = new O.ParserErrorCode("GETTER_IN_FUNCTION", "Getters can't be defined within methods or functions.", "Try moving the getter outside the method or function, or converting the getter to a function.", false);
  C.ParserErrorCode_PDC = new O.ParserErrorCode("REDIRECTION_IN_NON_FACTORY_CONSTRUCTOR", "Only factory constructor can specify '=' redirection.", "Try making this a factory constructor, or not making this a redirecting constructor.", false);
  C.ParserErrorCode_QW2 = new O.ParserErrorCode("EXPECTED_STRING_LITERAL", "Expected a string literal.", null, false);
  C.ParserErrorCode_QsD = new O.ParserErrorCode("EXTERNAL_ENUM", "Enums can't be declared to be 'external'.", "Try removing the keyword 'external'.", false);
  C.ParserErrorCode_Qw3 = new O.ParserErrorCode("MULTIPLE_PART_OF_DIRECTIVES", "Only one part-of directive may be declared in a file.", "Try removing all but one of the part-of directives.", false);
  C.ParserErrorCode_SFt = new O.ParserErrorCode("INVALID_CODE_POINT", "The escape sequence '{0}' isn't a valid code point.", null, false);
  C.ParserErrorCode_SxL = new O.ParserErrorCode("FINAL_METHOD", "Getters, setters and methods can't be declared to be 'final'.", "Try removing the keyword 'final'.", false);
  C.ParserErrorCode_T7k = new O.ParserErrorCode("VAR_CLASS", "Classes can't be declared to be 'var'.", "Try removing the keyword 'var'.", false);
  C.ParserErrorCode_THA = new O.ParserErrorCode("MISSING_NAME_FOR_NAMED_PARAMETER", "Named parameters in a function type must have a name", "Try providing a name for the parameter or removing the curly braces.", false);
  C.ParserErrorCode_TLI = new O.ParserErrorCode("INVALID_UNICODE_ESCAPE", "An escape sequence starting with '\\u' must be followed by 4 hexidecimal digits or from 1 to 6 digits between '{' and '}'.", null, false);
  C.ParserErrorCode_U06 = new O.ParserErrorCode("MISSING_IDENTIFIER", "Expected an identifier.", null, false);
  C.ParserErrorCode_UgT = new O.ParserErrorCode("EXTERNAL_AFTER_CONST", "The modifier 'external' should be before the modifier 'const'.", "Try re-ordering the modifiers.", false);
  C.ParserErrorCode_Upr = new O.ParserErrorCode("FUNCTION_TYPED_PARAMETER_VAR", "Function-typed parameters can't specify 'const', 'final' or 'var' in place of a return type.", "Try replacing the keyword with a return type.", false);
  C.ParserErrorCode_Uqr = new O.ParserErrorCode("NAMED_FUNCTION_TYPE", "Function types can't be named.", "Try replacing the name with the keyword 'Function'.", false);
  C.ParserErrorCode_UrL = new O.ParserErrorCode("NULLABLE_TYPE_IN_WITH", "A nullable type can't be used in a with clause.", "Try removing the '?' from the type name.", false);
  C.ParserErrorCode_VaD = new O.ParserErrorCode("MULTIPLE_LIBRARY_DIRECTIVES", "Only one library directive may be declared in a file.", "Try removing all but one of the library directives.", false);
  C.ParserErrorCode_WLk = new O.ParserErrorCode("CONSTRUCTOR_WITH_RETURN_TYPE", "Constructors can't have a return type.", "Try removing the return type.", false);
  C.ParserErrorCode_Y3F = new O.ParserErrorCode("INVALID_LITERAL_IN_CONFIGURATION", "The literal in a configuration can't contain interpolation.", "Try removing the interpolation expressions.", false);
  C.ParserErrorCode_Y8r = new O.ParserErrorCode("MIXED_PARAMETER_GROUPS", "Can't have both positional and named parameters in a single parameter list.", "Try choosing a single style of optional parameters.", false);
  C.ParserErrorCode_YJ0 = new O.ParserErrorCode("MISSING_INITIALIZER", "Expected an initializer.", null, false);
  C.ParserErrorCode_YMD = new O.ParserErrorCode("STATIC_TOP_LEVEL_DECLARATION", "Top-level declarations can't be declared to be static.", "Try removing the keyword 'static'.", false);
  C.ParserErrorCode_Zgx = new O.ParserErrorCode("FINAL_AND_COVARIANT", "Members can't be declared to be both 'final' and 'covariant'.", "Try removing either the 'final' or 'covariant' keyword.", false);
  C.ParserErrorCode_aFE = new O.ParserErrorCode("STATIC_AFTER_CONST", "The modifier 'static' should be before the modifier 'const'.", "Try re-ordering the modifiers.", false);
  C.ParserErrorCode_aR1 = new O.ParserErrorCode("MISSING_VARIABLE_IN_FOR_EACH", "A loop variable must be declared in a for-each loop before the 'in', but none was found.", "Try declaring a loop variable.", false);
  C.ParserErrorCode_aTW = new O.ParserErrorCode("INVALID_SYNC", "The modifier 'sync' isn't allowed for an expression function body.", "Try converting the body to a block.", false);
  C.ParserErrorCode_aZS = new O.ParserErrorCode("FINAL_CLASS", "Classes can't be declared to be 'final'.", "Try removing the keyword 'final'.", false);
  C.ParserErrorCode_adS = new O.ParserErrorCode("CONTINUE_OUTSIDE_OF_LOOP", "A continue statement can't be used outside of a loop or switch statement.", "Try removing the continue statement.", false);
  C.ParserErrorCode_ahC = new O.ParserErrorCode("GETTER_WITH_PARAMETERS", "Getters must be declared without a parameter list.", "Try removing the parameter list, or removing the keyword 'get' to define a method rather than a getter.", false);
  C.ParserErrorCode_b7P = new O.ParserErrorCode("NULLABLE_TYPE_IN_IMPLEMENTS", "A nullable type can't be used in an implements clause.", "Try removing the '?' from the type name.", false);
  C.ParserErrorCode_cAX = new O.ParserErrorCode("COLON_IN_PLACE_OF_IN", "For-in loops use 'in' rather than a colon.", "Try replacing the colon with the keyword 'in'.", false);
  C.ParserErrorCode_cI8 = new O.ParserErrorCode("NAMED_PARAMETER_OUTSIDE_GROUP", "Named parameters must be enclosed in curly braces ('{' and '}').", "Try surrounding the named parameters in curly braces.", false);
  C.ParserErrorCode_cJC = new O.ParserErrorCode("IMPLEMENTS_BEFORE_WITH", "The with clause must be before the implements clause.", "Try moving the with clause before the implements clause.", false);
  C.ParserErrorCode_cKo = new O.ParserErrorCode("MULTIPLE_VARIABLES_IN_FOR_EACH", "A single loop variable must be declared in a for-each loop before the 'in', but {0} were found.", "Try moving all but one of the declarations inside the loop body.", false);
  C.ParserErrorCode_ccN = new O.ParserErrorCode("MISSING_CONST_FINAL_VAR_OR_TYPE", "Variables must be declared using the keywords 'const', 'final', 'var' or a type name.", "Try adding the name of the type of the variable or the keyword 'var'.", false);
  C.ParserErrorCode_ckK = new O.ParserErrorCode("WRONG_SEPARATOR_FOR_POSITIONAL_PARAMETER", "The default value of a positional parameter should be preceeded by '='.", "Try replacing the ':' with '='.", false);
  C.ParserErrorCode_dU7 = new O.ParserErrorCode("MISSING_STATEMENT", "Expected a statement.", null, false);
  C.ParserErrorCode_e4R = new O.ParserErrorCode("NON_PART_OF_DIRECTIVE_IN_PART", "The part-of directive must be the only directive in a part.", "Try removing the other directives, or moving them to the library for which this is a part.", false);
  C.ParserErrorCode_eKc = new O.ParserErrorCode("EMPTY_ENUM_BODY", "An enum must declare at least one constant name.", "Try declaring a constant.", false);
  C.ParserErrorCode_enb = new O.ParserErrorCode("TOP_LEVEL_OPERATOR", "Operators must be declared within a class.", "Try removing the operator, moving it to a class, or converting it to be a function.", false);
  C.ParserErrorCode_gkJ = new O.ParserErrorCode("EXPECTED_CASE_OR_DEFAULT", "Expected 'case' or 'default'.", "Try placing this code inside a case clause.", false);
  C.ParserErrorCode_gkc = new O.ParserErrorCode("ASYNC_KEYWORD_USED_AS_IDENTIFIER", "The keywords 'async', 'await', and 'yield' can't be used as identifiers in an asynchronous or generator function.", null, false);
  C.ParserErrorCode_gkc0 = new O.ParserErrorCode("MISSING_GET", "Getters must have the keyword 'get' before the getter name.", "Try adding the keyword 'get'.", false);
  C.ParserErrorCode_hRl = new O.ParserErrorCode("MISSING_ENUM_BODY", "An enum definition must have a body with at least one constant name.", "Try adding a body and defining at least one constant.", false);
  C.ParserErrorCode_i7B = new O.ParserErrorCode("EXTERNAL_AFTER_STATIC", "The modifier 'external' should be before the modifier 'static'.", "Try re-ordering the modifiers.", false);
  C.ParserErrorCode_i94 = new O.ParserErrorCode("EXPECTED_LIST_OR_MAP_LITERAL", "Expected a list or map literal.", "Try inserting a list or map literal, or remove the type arguments.", false);
  C.ParserErrorCode_i9o = new O.ParserErrorCode("VAR_AND_TYPE", "Variables can't be declared using both 'var' and a type name.", "Try removing the keyword 'var'.", false);
  C.ParserErrorCode_iB6 = new O.ParserErrorCode("MISSING_CLOSING_PARENTHESIS", "The closing parenthesis is missing.", "Try adding the closing parenthesis.", false);
  C.ParserErrorCode_iDl = new O.ParserErrorCode("REDIRECTING_CONSTRUCTOR_WITH_BODY", "Redirecting constructors can't have a body.", "Try removing the body, or not making this a redirecting constructor.", false);
  C.ParserErrorCode_iPa = new O.ParserErrorCode("IMPLEMENTS_BEFORE_EXTENDS", "The extends clause must be before the implements clause.", "Try moving the extends clause before the implements clause.", false);
  C.ParserErrorCode_ibp = new O.ParserErrorCode("EXPECTED_CLASS_MEMBER", "Expected a class member.", "Try placing this code inside a class member.", false);
  C.ParserErrorCode_ivI = new O.ParserErrorCode("MISSING_TERMINATOR_FOR_PARAMETER_GROUP", "There is no '{0}' to close the parameter group.", "Try inserting a '{0}' at the end of the group.", false);
  C.ParserErrorCode_j00 = new O.ParserErrorCode("MULTIPLE_WITH_CLAUSES", "Each class definition can have at most one with clause.", "Try combining all of the with clauses into a single clause.", false);
  C.ParserErrorCode_jRY = new O.ParserErrorCode("MULTIPLE_EXTENDS_CLAUSES", "Each class definition can have at most one extends clause.", "Try choosing one superclass and define your class to implement (or mix in) the others.", false);
  C.ParserErrorCode_kCr = new O.ParserErrorCode("INVALID_OPERATOR", "The string '{0}' isn't a user-definable operator.", null, false);
  C.ParserErrorCode_kUZ = new O.ParserErrorCode("MISSING_CLASS_BODY", "A class definition must have a body, even if it is empty.", "Try adding a class body.", false);
  C.ParserErrorCode_kaS = new O.ParserErrorCode("EXTERNAL_FIELD", "Fields can't be declared to be 'external'.", "Try removing the keyword 'external'.", false);
  C.ParserErrorCode_mFT = new O.ParserErrorCode("VAR_TYPEDEF", "Typedefs can't be declared to be 'var'.", "Try removing the keyword 'var', or replacing it with the name of the return type.", false);
  C.ParserErrorCode_mXu = new O.ParserErrorCode("EXTERNAL_METHOD_WITH_BODY", "An external or native method can't have a body.", "Try removing the body of the method, or removing the keyword 'external'.", false);
  C.ParserErrorCode_mlp = new O.ParserErrorCode("MISSING_FUNCTION_BODY", "A function body must be provided.", "Try adding a function body.", false);
  C.ParserErrorCode_oUe = new O.ParserErrorCode("EXTERNAL_OPERATOR_WITH_BODY", "External operators can't have a body.", "Try removing the body of the operator, or removing the keyword 'external'.", false);
  C.ParserErrorCode_oWp = new O.ParserErrorCode("CONST_TYPEDEF", "Type aliases can't be declared to be 'const'.", "Try removing the 'const' keyword.", false);
  C.ParserErrorCode_oiE = new O.ParserErrorCode("EXPORT_DIRECTIVE_AFTER_PART_DIRECTIVE", "Export directives must preceed part directives.", "Try moving the export directives before the part directives.", false);
  C.ParserErrorCode_p40 = new O.ParserErrorCode("ILLEGAL_ASSIGNMENT_TO_NON_ASSIGNABLE", "Illegal assignment to non-assignable expression.", null, false);
  C.ParserErrorCode_pHE = new O.ParserErrorCode("INVALID_AWAIT_IN_FOR", "The keyword 'await' isn't allowed for a normal 'for' statement.", "Try removing the keyword, or use a for-each statement.", false);
  C.ParserErrorCode_q56 = new O.ParserErrorCode("WRONG_TERMINATOR_FOR_PARAMETER_GROUP", "Expected '{0}' to close parameter group.", "Try replacing '{0}' with '{1}'.", false);
  C.ParserErrorCode_qBm = new O.ParserErrorCode("FACTORY_WITHOUT_BODY", "A non-redirecting 'factory' constructor must have a body.", "Try adding a body to the constructor.", false);
  C.ParserErrorCode_qRH = new O.ParserErrorCode("MISSING_FUNCTION_PARAMETERS", "Functions must have an explicit list of parameters.", "Try adding a parameter list.", false);
  C.ParserErrorCode_qVK = new O.ParserErrorCode("FACTORY_WITH_INITIALIZERS", "A 'factory' constructor can't have initializers.", "Try removing the 'factory' keyword to make this a generative constructor, or removing the initializers.", false);
  C.ParserErrorCode_qbZ = new O.ParserErrorCode("STATIC_AFTER_VAR", "The modifier 'static' should be before the modifier 'var'.", "Try re-ordering the modifiers.", false);
  C.ParserErrorCode_r7L = new O.ParserErrorCode("STATIC_CONSTRUCTOR", "Constructors can't be static.", "Try removing the keyword 'static'.", false);
  C.ParserErrorCode_s4B = new O.ParserErrorCode("POSITIONAL_PARAMETER_OUTSIDE_GROUP", "Positional parameters must be enclosed in square brackets ('[' and ']').", "Try surrounding the positional parameters in square brackets.", false);
  C.ParserErrorCode_sJO = new O.ParserErrorCode("STATIC_GETTER_WITHOUT_BODY", "A 'static' getter must have a body.", "Try adding a body to the getter, or removing the keyword 'static'.", false);
  C.ParserErrorCode_sTj = new O.ParserErrorCode("CONST_CONSTRUCTOR_WITH_BODY", "Const constructors can't have a body.", "Try removing either the 'const' keyword or the body.", false);
  C.ParserErrorCode_sY7 = new O.ParserErrorCode("FINAL_AND_VAR", "Members can't be declared to be both 'final' and 'var'.", "Try removing the keyword 'var'.", false);
  C.ParserErrorCode_ssa = new O.ParserErrorCode("ENUM_IN_CLASS", "Enums can't be declared inside classes.", "Try moving the enum to the top-level.", false);
  C.ParserErrorCode_stQ = new O.ParserErrorCode("EXTERNAL_GETTER_WITH_BODY", "External getters can't have a body.", "Try removing the body of the getter, or removing the keyword 'external'.", false);
  C.ParserErrorCode_sty = new O.ParserErrorCode("EXTERNAL_CONSTRUCTOR_WITH_BODY", "External constructors can't have a body.", "Try removing the body of the constructor, or removing the keyword 'external'.", false);
  C.ParserErrorCode_swd = new O.ParserErrorCode("MULTIPLE_POSITIONAL_PARAMETER_GROUPS", "Can't have multiple groups of positional parameters in a single parameter list.", "Try combining all of the groups into a single group.", false);
  C.ParserErrorCode_unQ = new O.ParserErrorCode("MISSING_TYPEDEF_PARAMETERS", "Typedefs must have an explicit list of parameters.", "Try adding a parameter list.", false);
  C.ParserErrorCode_uwZ = new O.ParserErrorCode("ABSTRACT_ENUM", "Enums can't be declared to be 'abstract'.", "Try removing the keyword 'abstract'.", false);
  C.ParserErrorCode_uwd = new O.ParserErrorCode("EXTERNAL_CLASS", "Classes can't be declared to be 'external'.", "Try removing the keyword 'external'.", false);
  C.ParserErrorCode_vIB = new O.ParserErrorCode("INVALID_CONSTRUCTOR_NAME", "The keyword '{0}' cannot be used to name a constructor.", "Try giving the constructor a different name.", false);
  C.ParserErrorCode_wAg = new O.ParserErrorCode("CONST_FACTORY", "Only redirecting factory constructors can be declared to be 'const'.", "Try removing the 'const' keyword, or replacing the body with '=' followed by a valid target.", false);
  C.ParserErrorCode_wDo = new O.ParserErrorCode("EXPECTED_EXECUTABLE", "Expected a method, getter, setter or operator declaration.", "This appears to be incomplete code. Try removing it or completing it.", false);
  C.ParserErrorCode_wEo = new O.ParserErrorCode("WITH_BEFORE_EXTENDS", "The extends clause must be before the with clause.", "Try moving the extends clause before the with clause.", false);
  C.ParserErrorCode_wEo0 = new O.ParserErrorCode("EXTERNAL_AFTER_FACTORY", "The modifier 'external' should be before the modifier 'factory'.", "Try re-ordering the modifiers.", false);
  C.ParserErrorCode_wMy = new O.ParserErrorCode("MISSING_FUNCTION_KEYWORD", "Function types must have the keyword 'Function' before the parameter list.", "Try adding the keyword 'Function'.", false);
  C.ParserErrorCode_wQ8 = new O.ParserErrorCode("CONST_AND_VAR", "Members can't be declared to be both 'const' and 'var'.", "Try removing either the 'const' or 'var' keyword.", false);
  C.ParserErrorCode_ww8 = new O.ParserErrorCode("EXPECTED_TYPE_NAME", "Expected a type name.", null, false);
  C.ParserErrorCode_wz60 = new O.ParserErrorCode("COVARIANT_MEMBER", "Getters, setters and methods can't be declared to be 'covariant'.", "Try removing the 'covariant' keyword.", false);
  C.ParserErrorCode_wz6 = new O.ParserErrorCode("DEFAULT_VALUE_IN_FUNCTION_TYPE", "Parameters in a function type cannot have default values", "Try removing the default value.", false);
  C.ParserErrorCode_yLH = new O.ParserErrorCode("MISSING_NAME_IN_PART_OF_DIRECTIVE", "Part-of directives must include a library name.", "Try adding a library name after the 'of'.", false);
  C.ParserErrorCode_yT3 = new O.ParserErrorCode("MISSING_PREFIX_IN_DEFERRED_IMPORT", "Deferred imports should have a prefix.", "Try adding a prefix to the import.", false);
  C.ParserErrorCode_yXb = new O.ParserErrorCode("DUPLICATED_MODIFIER", "The modifier '{0}' was already specified.", "Try removing all but one occurance of the modifier.", false);
  C.ParserErrorCode_yg4 = new O.ParserErrorCode("EQUALITY_CANNOT_BE_EQUALITY_OPERAND", "An equality expression can't be an operand of another equality expression.", "Try re-writing the expression.", false);
  C.ParserErrorCode_yjH = new O.ParserErrorCode("UNEXPECTED_TOKEN", "Unexpected text '{0}'.", "Try removing the text.", false);
  C.ParserErrorCode_yjx = new O.ParserErrorCode("MISSING_CATCH_OR_FINALLY", "A try statement must have either a catch or finally clause.", "Try adding either a catch or finally clause, or remove the try statement.", false);
  C.ScannerErrorCode_IFE = new A.ScannerErrorCode("UNTERMINATED_STRING_LITERAL", "Unterminated string literal.", null, false);
  C.ScannerErrorCode_UAS = new A.ScannerErrorCode("ILLEGAL_CHARACTER", "Illegal character '{0}'.", null, false);
  C.ScannerErrorCode_X7k = new A.ScannerErrorCode("UNTERMINATED_MULTI_LINE_COMMENT", "Unterminated multi-line comment.", "Try terminating the comment with '*/', or removing any unbalanced occurances of '/*' (because comments nest in Dart).", false);
  C.ScannerErrorCode_k4X = new A.ScannerErrorCode("MISSING_DIGIT", "Decimal digit expected.", null, false);
  C.ScannerErrorCode_o7s = new A.ScannerErrorCode("MISSING_IDENTIFIER", "Expected an identifier.", null, false);
  C.ScannerErrorCode_qBY = new A.ScannerErrorCode("MISSING_HEX_DIGIT", "Hexidecimal digit expected.", null, false);
  C.ScannerErrorCode_xw8 = new A.ScannerErrorCode("EXPECTED_TOKEN", "Expected to find '{0}'.", null, false);
  C.StyleFix_4KW = new Q.StyleFix("optional-new", 'Remove "new" keyword.');
  C.StyleFix_C7v = new Q.StyleFix("optional-const", 'Remove "const" keyword inside constant context.');
  C.StyleFix_YDa = new Q.StyleFix("named-default-separator", 'Use "=" as the separator before named parameter default values.');
  C.Symbol_call = new H.Symbol("call");
  C.TokenType_0Ef = new L.TokenType(138, false, true, false, true, ">=", "GT_EQ", 8, ">=");
  C.TokenType_1KU = new L.TokenType(96, false, false, false, false, "`", "BACKPING", 0, "`");
  C.TokenType_2Hh = new L.TokenType(159, false, true, false, false, "^=", "CARET_EQ", 1, "^=");
  C.TokenType_3D9 = new L.TokenType(136, false, true, false, false, "<<=", "LT_LT_EQ", 1, "<<=");
  C.TokenType_4XV = new L.TokenType(158, false, true, false, true, ">>", "GT_GT", 12, ">>");
  C.TokenType_86y = new L.TokenType(39, false, false, false, false, "string", "STRING", 0, null);
  C.TokenType_AO3 = new L.TokenType(154, false, true, false, false, "-=", "MINUS_EQ", 1, "-=");
  C.TokenType_CNR = new L.TokenType(42, false, true, false, true, "*", "STAR", 14, "*");
  C.TokenType_DCV = new L.TokenType(139, false, true, false, false, ">>=", "GT_GT_EQ", 1, ">>=");
  C.TokenType_Emx = new L.TokenType(0, false, false, false, false, "", "EOF", 0, "");
  C.TokenType_FgV = new L.TokenType(137, false, true, false, true, "<<", "LT_LT", 12, "<<");
  C.TokenType_GNi = new L.TokenType(151, false, true, false, false, "++", "PLUS_PLUS", 16, "++");
  C.TokenType_GbN = new L.TokenType(97, false, false, false, false, "identifier", "STRING_INT", 0, null);
  C.TokenType_HH1 = new L.TokenType(146, false, true, false, false, "&=", "AMPERSAND_EQ", 1, "&=");
  C.TokenType_IIj = new L.TokenType(92, false, false, false, false, "\\", "BACKSLASH", 0, "\\");
  C.TokenType_M5Z = new L.TokenType(45, false, true, false, true, "-", "MINUS", 13, "-");
  C.TokenType_MvE = new L.TokenType(161, false, false, false, false, "$", "STRING_INTERPOLATION_IDENTIFIER", 0, "$");
  C.TokenType_NQ8 = new L.TokenType(156, false, true, false, true, "~/", "TILDE_SLASH", 14, "~/");
  C.TokenType_OxW = new L.TokenType(38, false, true, false, true, "&", "AMPERSAND", 11, "&");
  C.TokenType_P5Z = new L.TokenType(35, false, false, false, false, "#", "HASH", 0, "#");
  C.TokenType_QOM = new L.TokenType(155, false, true, false, false, "~/=", "TILDE_SLASH_EQ", 1, "~/=");
  C.TokenType_RzD = new L.TokenType(43, false, true, false, true, "+", "PLUS", 13, "+");
  C.TokenType_SGC = new L.TokenType(94, false, true, false, true, "^", "CARET", 10, "^");
  C.TokenType_SfG = new L.TokenType(150, false, true, false, false, "*=", "STAR_EQ", 1, "*=");
  C.TokenType_Uvq = new L.TokenType(160, false, false, false, false, "comment", "MULTI_LINE_COMMENT", 0, null);
  C.TokenType_V43 = new L.TokenType(63, false, true, false, false, "?", "QUESTION", 3, "?");
  C.TokenType_Vyt = new L.TokenType(105, false, false, false, false, "int", "INT", 0, null);
  C.TokenType_WjT = new L.TokenType(160, false, false, false, false, "comment", "SINGLE_LINE_COMMENT", 0, null);
  C.TokenType_Y2Y = new L.TokenType(166, false, false, false, false, "generic_comment_list", "GENERIC_METHOD_TYPE_LIST", 0, null);
  C.TokenType_Yb0 = new L.TokenType(143, false, true, false, false, "!=", "BANG_EQ", 7, "!=");
  C.TokenType_ao1 = new L.TokenType(157, false, true, false, false, "%=", "PERCENT_EQ", 1, "%=");
  C.TokenType_cI8 = new L.TokenType(164, false, true, false, false, "??=", "QUESTION_QUESTION_EQ", 1, "??=");
  C.TokenType_cQv = new L.TokenType(140, false, true, false, true, "[]=", "INDEX_EQ", 0, "[]=");
  C.TokenType_cYV = new L.TokenType(33, false, true, false, false, "!", "BANG", 15, "!");
  C.TokenType_cv8 = new L.TokenType(133, false, true, false, false, "..", "PERIOD_PERIOD", 2, "..");
  C.TokenType_eOk = new L.TokenType(144, false, true, false, false, "&&", "AMPERSAND_AMPERSAND", 6, "&&");
  C.TokenType_gg4 = new L.TokenType(58, false, false, false, false, ":", "COLON", 0, ":");
  C.TokenType_gg40 = new L.TokenType(135, false, true, false, true, "==", "EQ_EQ", 7, "==");
  C.TokenType_ifb = new L.TokenType(162, false, true, false, false, "?.", "QUESTION_PERIOD", 17, "?.");
  C.TokenType_j7J = new L.TokenType(132, false, false, false, false, "...", "PERIOD_PERIOD_PERIOD", 0, "...");
  C.TokenType_jTn = new L.TokenType(153, false, true, false, false, "--", "MINUS_MINUS", 16, "--");
  C.TokenType_k07 = new L.TokenType(37, false, true, false, true, "%", "PERCENT", 14, "%");
  C.TokenType_kqK = new L.TokenType(149, false, true, false, false, "|=", "BAR_EQ", 1, "|=");
  C.TokenType_lOW = new L.TokenType(163, false, true, false, false, "??", "QUESTION_QUESTION", 4, "??");
  C.TokenType_my0 = new L.TokenType(129, false, true, false, true, "<=", "LT_EQ", 8, "<=");
  C.TokenType_nD8 = new L.TokenType(131, false, true, false, false, "/=", "SLASH_EQ", 1, "/=");
  C.TokenType_oZ3 = new L.TokenType(98, false, false, false, false, "script", "SCRIPT_TAG", 0, "script");
  C.TokenType_pCd = new L.TokenType(120, false, false, false, false, "hexadecimal", "HEXADECIMAL", 0, null);
  C.TokenType_q1z = new L.TokenType(100, false, false, false, false, "double", "DOUBLE", 0, null);
  C.TokenType_qNW = new L.TokenType(152, false, true, false, false, "+=", "PLUS_EQ", 1, "+=");
  C.TokenType_sBE = new L.TokenType(47, false, true, false, true, "/", "SLASH", 14, "/");
  C.TokenType_skV = new L.TokenType(128, false, false, false, false, "${", "STRING_INTERPOLATION_EXPRESSION", 0, "${");
  C.TokenType_ssu = new L.TokenType(124, false, true, false, true, "|", "BAR", 9, "|");
  C.TokenType_sxw = new L.TokenType(134, false, false, false, false, "===", "EQ_EQ_EQ", 7, "===");
  C.TokenType_ufh = new L.TokenType(126, false, true, false, true, "~", "TILDE", 15, "~");
  C.TokenType_uv8 = new L.TokenType(88, false, false, false, false, "malformed input", "BAD_INPUT", 0, null);
  C.TokenType_wCI = new L.TokenType(46, false, false, false, false, ".", "PERIOD", 17, ".");
  C.TokenType_wDN = new L.TokenType(147, false, true, false, false, "||", "BAR_BAR", 5, "||");
  C.TokenType_xgG = new L.TokenType(142, false, false, false, false, "!==", "BANG_EQ_EQ", 7, "!==");
  C.TokenType_y1e = new L.TokenType(165, false, false, false, false, "generic_comment_assign", "GENERIC_METHOD_TYPE_ASSIGN", 0, null);
  C.List_IIf = H.setRuntimeTypeInfo(Isolate.makeConstantList([";", "=", ","]), [P.String]);
  C.TopLevelDeclarationIdentifierContext_4CA = new G.TopLevelDeclarationIdentifierContext(C.List_IIf, "topLevelVariableDeclaration", true, false, false, false, false, true, true, C.Template_YUp);
  C.List_4AN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["<", "(", "{", "=>"]), [P.String]);
  C.TopLevelDeclarationIdentifierContext_uY9 = new G.TopLevelDeclarationIdentifierContext(C.List_4AN, "topLevelFunctionDeclaration", true, false, false, false, false, true, true, C.Template_YUp);
  C.TypeReferenceIdentifierContext_E6F = new G.TypeReferenceIdentifierContext("typeReferenceContinuation", false, false, false, true, false, false, true, C.Template_YUp);
  C.TypeReferenceIdentifierContext_EGT = new G.TypeReferenceIdentifierContext("prefixedTypeReference", false, false, false, false, true, true, false, C.Template_0zQ);
  C.TypeReferenceIdentifierContext_OTL = new G.TypeReferenceIdentifierContext("typeReference", false, false, false, false, true, false, false, C.Template_0zQ);
  C.TypeVariableDeclarationIdentifierContext_EoR = new G.TypeVariableDeclarationIdentifierContext("typeVariableDeclaration", true, false, false, false, false, false, true, C.Template_YUp);
  C.TypedefDeclarationIdentifierContext_yuM = new G.TypedefDeclarationIdentifierContext("typedefDeclaration", true, false, false, false, false, false, true, C.Template_YUp);
  C.Utf8Codec_false = new P.Utf8Codec(false);
  C.Whitespace_nestedNewline = new L.Whitespace("nestedNewline");
  C.Whitespace_newline = new L.Whitespace("newline");
  C.Whitespace_newlineFlushLeft = new L.Whitespace("newlineFlushLeft");
  C.Whitespace_none = new L.Whitespace("none");
  C.Whitespace_oneOrTwoNewlines = new L.Whitespace("oneOrTwoNewlines");
  C.Whitespace_space = new L.Whitespace("space");
  C.Whitespace_splitOrNewline = new L.Whitespace("splitOrNewline");
  C.Whitespace_splitOrTwoNewlines = new L.Whitespace("splitOrTwoNewlines");
  C.Whitespace_twoNewlines = new L.Whitespace("twoNewlines");
  $.Closure_functionCounter = 0;
  $.BoundClosure_selfFieldNameCache = null;
  $.BoundClosure_receiverFieldNameCache = null;
  $._inTypeAssertion = false;
  $.getTagFunction = null;
  $.alternateTagFunction = null;
  $.prototypeForTagFunction = null;
  $.dispatchRecordsForInstanceTags = null;
  $.interceptorsForUncacheableTags = null;
  $.initNativeDispatchFlag = null;
  $._nextCallback = null;
  $._lastCallback = null;
  $._lastPriorityCallback = null;
  $._isInCallbackLoop = false;
  $.Zone__current = C.C__RootZone;
  $.Device__isOpera = null;
  $.Device__isIE = null;
  $.Device__isFirefox = null;
  $.Device__cachedCssPrefix = null;
  $.traceChunkBuilder = false;
  $.traceLineWriter = false;
  $.traceSplitter = false;
  $.useAnsiColors = false;
  $._indent = "";
  $.FastHash__nextId = 0;
  $.KeywordState__KEYWORD_STATE = null;
  $ = null;
  init.isHunkLoaded = function(hunkHash) {
    return !!$dart_deferred_initializers$[hunkHash];
  };
  init.deferredInitialized = new Object(null);
  init.isHunkInitialized = function(hunkHash) {
    return init.deferredInitialized[hunkHash];
  };
  init.initializeLoadedHunk = function(hunkHash) {
    var hunk = $dart_deferred_initializers$[hunkHash];
    if (hunk == null)
      throw "DeferredLoading state error: code with hash '" + hunkHash + "' was not loaded";
    hunk($globals$, $);
    init.deferredInitialized[hunkHash] = true;
  };
  init.deferredLibraryParts = {};
  init.deferredPartUris = [];
  init.deferredPartHashes = [];
  // Empty type-to-interceptor map.
  (function(lazies) {
    for (var i = 0; i < lazies.length;) {
      var fieldName = lazies[i++];
      var getterName = lazies[i++];
      var lazyValue = lazies[i++];
      var staticName = lazies[i++];
      Isolate.$lazy(fieldName, getterName, lazyValue, staticName);
    }
  })(["DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartClosure");
  }, "DART_CLOSURE_PROPERTY_NAME", "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
    return H.getIsolateAffinityTag("_$dart_js");
  }, "JS_INTEROP_INTERCEPTOR_TAG", "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    }));
  }, "TypeErrorDecoder_noSuchMethodPattern", "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    }));
  }, "TypeErrorDecoder_notClosurePattern", "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
  }, "TypeErrorDecoder_nullCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_nullLiteralCallPattern", "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedLiteralCallPattern", "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
  }, "TypeErrorDecoder_nullPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_nullLiteralPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "mangledNames", "$get$mangledNames", function() {
    return new H._LazyMangledInstanceNamesMap(init.mangledNames);
  }, "mangledNames", "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
    return P._AsyncRun__initializeScheduleImmediate();
  }, "_AsyncRun__scheduleImmediateClosure", "Future__nullFuture", "$get$Future__nullFuture", function() {
    var t1 = new P._Future(0, C.C__RootZone, [P.Null]);
    t1._setValue$1(null);
    return t1;
  }, "Future__nullFuture", "_toStringVisiting", "$get$_toStringVisiting", function() {
    return [];
  }, "_toStringVisiting", "Utf8Decoder__decoder", "$get$Utf8Decoder__decoder", function() {
    return P.Utf8Decoder__makeDecoder();
  }, "Utf8Decoder__decoder", "CssStyleDeclaration__propertyCache", "$get$CssStyleDeclaration__propertyCache", function() {
    return {};
  }, "CssStyleDeclaration__propertyCache", "context", "$get$context", function() {
    return H.interceptedTypeCheck(P._wrapToDart(self), "$isJsObject");
  }, "context", "_DART_OBJECT_PROPERTY_NAME", "$get$_DART_OBJECT_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartObject");
  }, "_DART_OBJECT_PROPERTY_NAME", "_dartProxyCtor", "$get$_dartProxyCtor", function() {
    return function DartObject(o) {
      this.o = o;
    };
  }, "_dartProxyCtor", "astFactory", "$get$astFactory", function() {
    return new A.AstFactoryImpl();
  }, "astFactory", "InstrumentationService_NULL_SERVICE", "$get$InstrumentationService_NULL_SERVICE", function() {
    return new M.InstrumentationService(null, 0);
  }, "InstrumentationService_NULL_SERVICE", "AnalysisEngine_instance", "$get$AnalysisEngine_instance", function() {
    return new O.AnalysisEngine($.$get$Logger_NULL(), new U.EnginePlugin(), $.$get$InstrumentationService_NULL_SERVICE(), new M.PartitionManager(P.HashMap_HashMap(null, null, null, V.DartSdk, B.SdkCachePartition)));
  }, "AnalysisEngine_instance", "Logger_NULL", "$get$Logger_NULL", function() {
    return new O.NullLogger();
  }, "Logger_NULL", "StringUtilities_INTERNER0", "$get$StringUtilities_INTERNER0", function() {
    return E.NullInterner$();
  }, "StringUtilities_INTERNER0", "Parser_ASYNC", "$get$Parser_ASYNC", function() {
    return "async";
  }, "Parser_ASYNC", "Parser__AWAIT", "$get$Parser__AWAIT", function() {
    return "await";
  }, "Parser__AWAIT", "Parser__HIDE", "$get$Parser__HIDE", function() {
    return "hide";
  }, "Parser__HIDE", "Parser__SHOW", "$get$Parser__SHOW", function() {
    return "show";
  }, "Parser__SHOW", "Parser_SYNC", "$get$Parser_SYNC", function() {
    return "sync";
  }, "Parser_SYNC", "Parser__YIELD", "$get$Parser__YIELD", function() {
    return "yield";
  }, "Parser__YIELD", "_trailingIdentifierChar", "$get$_trailingIdentifierChar", function() {
    return P.RegExp_RegExp("[a-zA-Z0-9_]$", true, false);
  }, "_trailingIdentifierChar", "_gray", "$get$_gray", function() {
    return A._color("\x1b[1;30m");
  }, "_gray", "_green", "$get$_green", function() {
    return A._color("\x1b[32m");
  }, "_green", "_none", "$get$_none", function() {
    return A._color("\x1b[0m");
  }, "_none", "_bold", "$get$_bold", function() {
    return A._color("\x1b[1m");
  }, "_bold", "_capitalPattern", "$get$_capitalPattern", function() {
    return P.RegExp_RegExp("^_?[A-Z].*[a-z]", true, false);
  }, "_capitalPattern", "StringToken_canonicalizer", "$get$StringToken_canonicalizer", function() {
    var t1 = new Array(8192);
    t1.fixed$length = Array;
    return new D.StringCanonicalizer(8192, 0, H.setRuntimeTypeInfo(t1, [D.Node0]));
  }, "StringToken_canonicalizer", "KeywordState__EMPTY_TABLE", "$get$KeywordState__EMPTY_TABLE", function() {
    var t1 = new Array(58);
    t1.fixed$length = Array;
    return H.setRuntimeTypeInfo(t1, [O.KeywordState]);
  }, "KeywordState__EMPTY_TABLE", "KeywordState_KEYWORD_STATE", "$get$KeywordState_KEYWORD_STATE", function() {
    return O.KeywordState__createKeywordStateTable();
  }, "KeywordState_KEYWORD_STATE", "StringUtilities_INTERNER", "$get$StringUtilities_INTERNER", function() {
    return E.NullInterner$();
  }, "StringUtilities_INTERNER", "Keyword_keywords", "$get$Keyword_keywords", function() {
    return L.Keyword__createKeywordMap();
  }, "Keyword_keywords"]);
  Isolate = Isolate.$finishIsolateConstructor(Isolate);
  $ = new Isolate();
  init.metadata = ["token", "string", "invocation", "_", "codePoint", null, "error", "stackTrace", "o", "chunk", "name", "key", "index", "closure", "numberOfArguments", "arg1", "arg2", "arg3", "arg4", "element", "arg", "e", "callback", "captureThis", "self", "arguments", "value", "rule", "character", "string2", "c"];
  init.types = [{func: 1, ret: P.Null}, {func: 1, ret: -1}, {func: 1, ret: B.Message, args: [L.Token]}, {func: 1, ret: P.String}, {func: 1, ret: P.Null, args: [P.String]}, {func: 1, ret: L.Token}, {func: 1, ret: B.Message, args: [P.String]}, {func: 1, args: [,]}, {func: 1, ret: P.bool}, {func: 1, ret: P.Null, args: [O.Rule]}, {func: 1, ret: P.String, args: [P.String]}, {func: 1, ret: P.Null, args: [,]}, {func: 1, ret: P.bool, args: [O.Rule]}, {func: 1, ret: U.KeywordState0, args: [P.int]}, {func: 1, ret: -1, args: [{func: 1, ret: -1}]}, {func: 1, ret: P.String, args: [P.Match]}, {func: 1, ret: P.bool, args: [L.Token]}, {func: 1, ret: P.bool, args: [Y.Expression]}, {func: 1, ret: P.Null, args: [Y.Expression]}, {func: 1, ret: P.Null, args: [[P.List, E.Chunk]]}, {func: 1, ret: O.Rule, args: [E.Chunk]}, {func: 1, ret: E.Chunk}, {func: 1, ret: P.bool, args: [Y.FormalParameter]}, {func: 1, ret: P.Null, args: [W.MouseEvent]}, {func: 1, ret: P.bool, args: [P.String]}, {func: 1, ret: B.Message, args: [P.int]}, {func: 1, ret: P.Null, args: [P.bool]}, {func: 1, ret: P.bool, args: [Y.NamedExpression]}, {func: 1, ret: P.Null, args: [,], opt: [,]}, {func: 1, ret: [P._Future,,], args: [,]}, {func: 1, ret: -1, args: [O.Rule]}, {func: 1, ret: P.bool, args: [E.SourceComment]}, {func: 1, ret: P.Null, args: [{func: 1, ret: -1}]}, {func: 1, args: [P.String]}, {func: 1, ret: P.Null, args: [, P.StackTrace]}, {func: 1, ret: P.Null, args: [,,]}, {func: 1, ret: P.Null, args: [[P.List, E.Chunk], P.String, P.int]}, {func: 1, ret: P.Null, args: [, {func: 1, ret: P.String}]}, {func: 1, ret: -1, args: [,]}, {func: 1, ret: P.Object, args: [P.int]}, {func: 1, ret: P.int, args: [O.Rule]}, {func: 1, ret: P.Null, args: [P.int]}, {func: 1, ret: P.Null, args: [O.Rule, P.int]}, {func: 1, ret: P.String, args: [O.Rule]}, {func: 1, ret: P.int, args: [[P.List, P.int], P.int]}, {func: 1, ret: O.Rule, opt: [P.int]}, {func: 1, ret: -1, args: [L.Token], named: {after: {func: 1}, before: {func: 1}}}, {func: 1, ret: -1, args: [P.int, P.int]}, {func: 1, ret: L.Token, args: [[P.List, P.int], L.Token, [P.List, P.int]]}, {func: 1, ret: P.bool, args: [,]}, {func: 1, ret: P.int, args: [P.String, P.String]}, {func: 1, ret: P.Null, args: [P.Symbol0,,]}, {func: 1, ret: L.Token, args: [S.NonAsciiIdentifierToken]}, {func: 1, args: [, P.String]}, {func: 1, ret: -1, args: [A.ScannerErrorCode, [P.List, P.Object]]}, {func: 1, ret: L.Keyword}, {func: 1, ret: O.KeywordState, args: [P.int]}, {func: 1, ret: -1, args: [W.Event]}, {func: 1, ret: P.JsFunction, args: [,]}, {func: 1, ret: P.bool, args: [M.ClassDefinition]}, {func: 1, ret: P.Null, args: [M.Dependency]}, {func: 1, ret: P.String, args: [M.ClassDefinition]}, {func: 1, ret: [P.JsArray,,], args: [,]}, {func: 1, ret: P.JsObject, args: [,]}, {func: 1, ret: P.int, args: [,,]}, {func: 1, ret: -1, args: [A.ScannerErrorCode, P.int, [P.List, P.Object]]}, {func: 1, ret: P.Object, args: [,]}, {func: 1, ret: P.Null, args: [P.String,,]}, {func: 1, ret: Y.Directive}, {func: 1, ret: -1, args: [P.Object], opt: [P.StackTrace]}, {func: 1, ret: B.Message, args: [P.String, P.int]}, {func: 1, ret: B.Message, args: [P.String, L.Token]}, {func: 1, ret: B.Message, args: [P.String, P.String]}, {func: 1, ret: P.Null, args: [Y.Statement]}];
  function convertToFastObject(properties) {
    function MyClass() {
    }
    MyClass.prototype = properties;
    new MyClass();
    return properties;
  }
  function convertToSlowObject(properties) {
    properties.__MAGIC_SLOW_PROPERTY = 1;
    delete properties.__MAGIC_SLOW_PROPERTY;
    return properties;
  }
  A = convertToFastObject(A);
  B = convertToFastObject(B);
  C = convertToFastObject(C);
  D = convertToFastObject(D);
  E = convertToFastObject(E);
  F = convertToFastObject(F);
  G = convertToFastObject(G);
  H = convertToFastObject(H);
  J = convertToFastObject(J);
  K = convertToFastObject(K);
  L = convertToFastObject(L);
  M = convertToFastObject(M);
  N = convertToFastObject(N);
  O = convertToFastObject(O);
  P = convertToFastObject(P);
  Q = convertToFastObject(Q);
  R = convertToFastObject(R);
  S = convertToFastObject(S);
  T = convertToFastObject(T);
  U = convertToFastObject(U);
  V = convertToFastObject(V);
  W = convertToFastObject(W);
  X = convertToFastObject(X);
  Y = convertToFastObject(Y);
  Z = convertToFastObject(Z);
  function init() {
    Isolate.$isolateProperties = Object.create(null);
    init.allClasses = map();
    init.getTypeFromName = function(name) {
      return init.allClasses[name];
    };
    init.interceptorsByTag = map();
    init.leafTags = map();
    init.finishedClasses = map();
    Isolate.$lazy = function(fieldName, getterName, lazyValue, staticName, prototype) {
      if (!init.lazies)
        init.lazies = Object.create(null);
      init.lazies[fieldName] = getterName;
      prototype = prototype || Isolate.$isolateProperties;
      var sentinelUndefined = {};
      var sentinelInProgress = {};
      prototype[fieldName] = sentinelUndefined;
      prototype[getterName] = function() {
        var result = this[fieldName];
        if (result == sentinelInProgress)
          H.throwCyclicInit(staticName || fieldName);
        try {
          if (result === sentinelUndefined) {
            this[fieldName] = sentinelInProgress;
            try {
              result = this[fieldName] = lazyValue();
            } finally {
              if (result === sentinelUndefined)
                this[fieldName] = null;
            }
          }
          return result;
        } finally {
          this[getterName] = function() {
            return this[fieldName];
          };
        }
      };
    };
    Isolate.$finishIsolateConstructor = function(oldIsolate) {
      var isolateProperties = oldIsolate.$isolateProperties;
      function Isolate() {
        var staticNames = Object.keys(isolateProperties);
        for (var i = 0; i < staticNames.length; i++) {
          var staticName = staticNames[i];
          this[staticName] = isolateProperties[staticName];
        }
        var lazies = init.lazies;
        var lazyInitializers = lazies ? Object.keys(lazies) : [];
        for (var i = 0; i < lazyInitializers.length; i++)
          this[lazies[lazyInitializers[i]]] = null;
        function ForceEfficientMap() {
        }
        ForceEfficientMap.prototype = this;
        new ForceEfficientMap();
        for (var i = 0; i < lazyInitializers.length; i++) {
          var lazyInitName = lazies[lazyInitializers[i]];
          this[lazyInitName] = isolateProperties[lazyInitName];
        }
      }
      Isolate.prototype = oldIsolate.prototype;
      Isolate.prototype.constructor = Isolate;
      Isolate.$isolateProperties = isolateProperties;
      Isolate.makeConstantList = oldIsolate.makeConstantList;
      Isolate.functionThatReturnsNull = oldIsolate.functionThatReturnsNull;
      return Isolate;
    };
  }
  !function() {
    var intern = function(s) {
      var o = {};
      o[s] = 1;
      return Object.keys(convertToFastObject(o))[0];
    };
    init.getIsolateTag = function(name) {
      return intern("___dart_" + name + init.isolateTag);
    };
    var tableProperty = "___dart_isolate_tags_";
    var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
    var rootProperty = "_ZxYxX";
    for (var i = 0;; i++) {
      var property = intern(rootProperty + "_" + i + "_");
      if (!(property in usedProperties)) {
        usedProperties[property] = 1;
        init.isolateTag = property;
        break;
      }
    }
    init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
  }();
  // BEGIN invoke [main].
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(V.main, []);
    else
      V.main([]);
  });
  // END invoke [main].
})();

//# sourceMappingURL=page.js.map